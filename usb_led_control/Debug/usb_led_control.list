
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec04  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3c0  0800f3c0  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3c8  0800f3c8  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3c8  0800f3c8  0001f3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3cc  0800f3cc  0001f3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800f3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  0800f530  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  0800f5d0  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000071cc  200002a0  0800f670  000202a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000746c  0800f670  0002746c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002e609  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005dcf  00000000  00000000  0004e91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002340  00000000  00000000  000546f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b30  00000000  00000000  00056a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000a7ac  00000000  00000000  00058560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a6d3  00000000  00000000  00062d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011734e  00000000  00000000  0008d3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009788  00000000  00000000  001a4730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  001adeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800edec 	.word	0x0800edec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800edec 	.word	0x0800edec

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002bc 	.word	0x200002bc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b970 	b.w	80005cc <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	460f      	mov	r7, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14a      	bne.n	80003aa <__udivmoddi4+0xa6>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d965      	bls.n	80003e6 <__udivmoddi4+0xe2>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b143      	cbz	r3, 8000332 <__udivmoddi4+0x2e>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	409f      	lsls	r7, r3
 800032a:	fa20 f202 	lsr.w	r2, r0, r2
 800032e:	4317      	orrs	r7, r2
 8000330:	409c      	lsls	r4, r3
 8000332:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000336:	fa1f f58c 	uxth.w	r5, ip
 800033a:	fbb7 f1fe 	udiv	r1, r7, lr
 800033e:	0c22      	lsrs	r2, r4, #16
 8000340:	fb0e 7711 	mls	r7, lr, r1, r7
 8000344:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000348:	fb01 f005 	mul.w	r0, r1, r5
 800034c:	4290      	cmp	r0, r2
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x62>
 8000350:	eb1c 0202 	adds.w	r2, ip, r2
 8000354:	f101 37ff 	add.w	r7, r1, #4294967295
 8000358:	f080 811c 	bcs.w	8000594 <__udivmoddi4+0x290>
 800035c:	4290      	cmp	r0, r2
 800035e:	f240 8119 	bls.w	8000594 <__udivmoddi4+0x290>
 8000362:	3902      	subs	r1, #2
 8000364:	4462      	add	r2, ip
 8000366:	1a12      	subs	r2, r2, r0
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb2 f0fe 	udiv	r0, r2, lr
 800036e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000376:	fb00 f505 	mul.w	r5, r0, r5
 800037a:	42a5      	cmp	r5, r4
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x90>
 800037e:	eb1c 0404 	adds.w	r4, ip, r4
 8000382:	f100 32ff 	add.w	r2, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x294>
 800038a:	42a5      	cmp	r5, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x294>
 8000390:	4464      	add	r4, ip
 8000392:	3802      	subs	r0, #2
 8000394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	2100      	movs	r1, #0
 800039c:	b11e      	cbz	r6, 80003a6 <__udivmoddi4+0xa2>
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	e9c6 4300 	strd	r4, r3, [r6]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	f000 80ed 	beq.w	800058e <__udivmoddi4+0x28a>
 80003b4:	2100      	movs	r1, #0
 80003b6:	e9c6 0500 	strd	r0, r5, [r6]
 80003ba:	4608      	mov	r0, r1
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	fab3 f183 	clz	r1, r3
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d149      	bne.n	800045c <__udivmoddi4+0x158>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d302      	bcc.n	80003d2 <__udivmoddi4+0xce>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	f200 80f8 	bhi.w	80005c2 <__udivmoddi4+0x2be>
 80003d2:	1a84      	subs	r4, r0, r2
 80003d4:	eb65 0203 	sbc.w	r2, r5, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	4617      	mov	r7, r2
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d0e2      	beq.n	80003a6 <__udivmoddi4+0xa2>
 80003e0:	e9c6 4700 	strd	r4, r7, [r6]
 80003e4:	e7df      	b.n	80003a6 <__udivmoddi4+0xa2>
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xe6>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f382 	clz	r3, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2101      	movs	r1, #1
 8000400:	fbb2 f5f7 	udiv	r5, r2, r7
 8000404:	fb07 2015 	mls	r0, r7, r5, r2
 8000408:	0c22      	lsrs	r2, r4, #16
 800040a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040e:	fb0e f005 	mul.w	r0, lr, r5
 8000412:	4290      	cmp	r0, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x124>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x122>
 8000420:	4290      	cmp	r0, r2
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2b8>
 8000426:	4645      	mov	r5, r8
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x14e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 32ff 	add.w	r2, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x14c>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 8000450:	4610      	mov	r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045a:	e79f      	b.n	800039c <__udivmoddi4+0x98>
 800045c:	f1c1 0720 	rsb	r7, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa05 f401 	lsl.w	r4, r5, r1
 800046e:	fa20 f307 	lsr.w	r3, r0, r7
 8000472:	40fd      	lsrs	r5, r7
 8000474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fbb5 f8f9 	udiv	r8, r5, r9
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	fb09 5518 	mls	r5, r9, r8, r5
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800048c:	fb08 f50e 	mul.w	r5, r8, lr
 8000490:	42a5      	cmp	r5, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	fa00 f001 	lsl.w	r0, r0, r1
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b0>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2b4>
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2b4>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4464      	add	r4, ip
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	b29d      	uxth	r5, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1da>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2ac>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2ac>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4464      	add	r4, ip
 80004de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e2:	fba3 9502 	umull	r9, r5, r3, r2
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46ae      	mov	lr, r5
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x29c>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x298>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x208>
 80004f6:	ebb0 0208 	subs.w	r2, r0, r8
 80004fa:	eb64 040e 	sbc.w	r4, r4, lr
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40ca      	lsrs	r2, r1
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c6 7400 	strd	r7, r4, [r6]
 800050c:	4618      	mov	r0, r3
 800050e:	2100      	movs	r1, #0
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	f1c3 0120 	rsb	r1, r3, #32
 8000518:	fa02 fc03 	lsl.w	ip, r2, r3
 800051c:	fa20 f201 	lsr.w	r2, r0, r1
 8000520:	fa25 f101 	lsr.w	r1, r5, r1
 8000524:	409d      	lsls	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb1 f0f7 	udiv	r0, r1, r7
 8000534:	fb07 1510 	mls	r5, r7, r0, r1
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053e:	fb00 f50e 	mul.w	r5, r0, lr
 8000542:	428d      	cmp	r5, r1
 8000544:	fa04 f403 	lsl.w	r4, r4, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x258>
 800054a:	eb1c 0101 	adds.w	r1, ip, r1
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000554:	428d      	cmp	r5, r1
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 8000558:	3802      	subs	r0, #2
 800055a:	4461      	add	r1, ip
 800055c:	1b49      	subs	r1, r1, r5
 800055e:	b292      	uxth	r2, r2
 8000560:	fbb1 f5f7 	udiv	r5, r1, r7
 8000564:	fb07 1115 	mls	r1, r7, r5, r1
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	fb05 f10e 	mul.w	r1, r5, lr
 8000570:	4291      	cmp	r1, r2
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x282>
 8000574:	eb1c 0202 	adds.w	r2, ip, r2
 8000578:	f105 38ff 	add.w	r8, r5, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2a8>
 800057e:	4291      	cmp	r1, r2
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2a8>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0xfc>
 800058e:	4631      	mov	r1, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xa2>
 8000594:	4639      	mov	r1, r7
 8000596:	e6e6      	b.n	8000366 <__udivmoddi4+0x62>
 8000598:	4610      	mov	r0, r2
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x90>
 800059c:	4548      	cmp	r0, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f0>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a8:	3b01      	subs	r3, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f0>
 80005ac:	4645      	mov	r5, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x282>
 80005b0:	462b      	mov	r3, r5
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1da>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x258>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b0>
 80005bc:	3d02      	subs	r5, #2
 80005be:	4462      	add	r2, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x124>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e70a      	b.n	80003dc <__udivmoddi4+0xd8>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x14e>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005da:	22a8      	movs	r2, #168	; 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f00e fb10 	bl	800ec04 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800063a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000664:	f3bf 8f5f 	dmb	sy
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002bc 	.word	0x200002bc
 8000674:	0800ee04 	.word	0x0800ee04
 8000678:	20000364 	.word	0x20000364
 800067c:	20000764 	.word	0x20000764
 8000680:	0800ef10 	.word	0x0800ef10

08000684 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800069e:	f7ff ff97 	bl	80005d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 80006b0:	4413      	add	r3, r2
 80006b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d92b      	bls.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf28      	it	cs
 80006e2:	4613      	movcs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f00e fb1f 	bl	800ed38 <memcpy>
    NumBytesRead += NumBytesRem;
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d101      	bne.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	bf28      	it	cs
 8000738:	4613      	movcs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4413      	add	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f00e faf1 	bl	800ed38 <memcpy>
    NumBytesRead += NumBytesRem;
 8000756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000780:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200002bc 	.word	0x200002bc

08000790 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007ac:	f7ff ff10 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b0:	f3ef 8311 	mrs	r3, BASEPRI
 80007b4:	f04f 0120 	mov.w	r1, #32
 80007b8:	f381 8811 	msr	BASEPRI, r1
 80007bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbeb      	blt.n	80007c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80007ee:	e000      	b.n	80007f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da3f      	bge.n	800087c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000810:	6939      	ldr	r1, [r7, #16]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3320      	adds	r3, #32
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3328      	adds	r3, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3324      	adds	r3, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000876:	f3bf 8f5f 	dmb	sy
 800087a:	e002      	b.n	8000882 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000888:	69fb      	ldr	r3, [r7, #28]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002bc 	.word	0x200002bc

08000898 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008b4:	f7ff fe8c 	bl	80005d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d82c      	bhi.n	800091c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008c2:	f3ef 8311 	mrs	r3, BASEPRI
 80008c6:	f04f 0120 	mov.w	r1, #32
 80008ca:	f381 8811 	msr	BASEPRI, r1
 80008ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00e      	beq.n	8000906 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800090a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800090c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000924:	4618      	mov	r0, r3
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002bc 	.word	0x200002bc

08000930 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d90a      	bls.n	8000964 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000952:	e007      	b.n	8000964 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	1c53      	adds	r3, r2, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1c59      	adds	r1, r3, #1
 800095e:	60f9      	str	r1, [r7, #12]
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_EncodeStr+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ee      	bne.n	8000954 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 80009b0:	7e1b      	ldrb	r3, [r3, #24]
 80009b2:	4618      	mov	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fe63 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 80009be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d057      	beq.n	8000a76 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b80      	cmp	r3, #128	; 0x80
 80009ca:	d031      	beq.n	8000a30 <_HandleIncomingPacket+0x88>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	dc40      	bgt.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	dc15      	bgt.n	8000a00 <_HandleIncomingPacket+0x58>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd3c      	ble.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d839      	bhi.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_HandleIncomingPacket+0x3c>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a07 	.word	0x08000a07
 80009e8:	08000a0d 	.word	0x08000a0d
 80009ec:	08000a13 	.word	0x08000a13
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a1f 	.word	0x08000a1f
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d033      	beq.n	8000a6c <_HandleIncomingPacket+0xc4>
 8000a04:	e025      	b.n	8000a52 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a06:	f000 fbe3 	bl	80011d0 <SEGGER_SYSVIEW_Start>
      break;
 8000a0a:	e034      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a0c:	f000 fc9a 	bl	8001344 <SEGGER_SYSVIEW_Stop>
      break;
 8000a10:	e031      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a12:	f000 fe73 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a16:	e02e      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a18:	f000 fe38 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a1c:	e02b      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a1e:	f000 fcb7 	bl	8001390 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a22:	e028      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a24:	f000 ff44 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a28:	e025      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a2a:	f000 ff23 	bl	8001874 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a2e:	e022      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe22 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 8000a40:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe88 	bl	8001760 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a50:	e00e      	b.n	8000a70 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe0d 	bl	8000684 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a6a:	e003      	b.n	8000a74 <_HandleIncomingPacket+0xcc>
      break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a74:	bf00      	nop
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000b7c 	.word	0x20000b7c

08000a84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e00b      	b.n	8000ab8 <_TrySendOverflowPacket+0x34>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	2b7f      	cmp	r3, #127	; 0x7f
 8000abc:	d8f0      	bhi.n	8000aa0 <_TrySendOverflowPacket+0x1c>
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <_TrySendOverflowPacket+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	e00b      	b.n	8000b00 <_TrySendOverflowPacket+0x7c>
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	6279      	str	r1, [r7, #36]	; 0x24
 8000af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d8f0      	bhi.n	8000ae8 <_TrySendOverflowPacket+0x64>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fb8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e004      	b.n	8000b54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b54:	693b      	ldr	r3, [r7, #16]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000b7c 	.word	0x20000b7c
 8000b64:	e0001004 	.word	0xe0001004

08000b68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b74:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <_SendPacket+0x270>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d010      	beq.n	8000b9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b7c:	4b96      	ldr	r3, [pc, #600]	; (8000dd8 <_SendPacket+0x270>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 812d 	beq.w	8000de0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b86:	4b94      	ldr	r3, [pc, #592]	; (8000dd8 <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b8e:	f7ff ff79 	bl	8000a84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 8124 	bne.w	8000de4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b9c:	e001      	b.n	8000ba2 <_SendPacket+0x3a>
    goto Send;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <_SendPacket+0x3c>
Send:
 8000ba2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	d809      	bhi.n	8000bbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000baa:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <_SendPacket+0x270>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8115 	bne.w	8000de8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d807      	bhi.n	8000bd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e0c4      	b.n	8000d5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b7f      	cmp	r3, #127	; 0x7f
 8000be0:	d912      	bls.n	8000c08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	09da      	lsrs	r2, r3, #7
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e006      	b.n	8000c16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b7e      	cmp	r3, #126	; 0x7e
 8000c1a:	d807      	bhi.n	8000c2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e098      	b.n	8000d5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d212      	bcs.n	8000c5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	09da      	lsrs	r2, r3, #7
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	60fa      	str	r2, [r7, #12]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e081      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c60:	d21d      	bcs.n	8000c9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0b9a      	lsrs	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	09db      	lsrs	r3, r3, #7
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	60fa      	str	r2, [r7, #12]
 8000c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e05f      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ca4:	d228      	bcs.n	8000cf8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0d5a      	lsrs	r2, r3, #21
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0b9b      	lsrs	r3, r3, #14
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e032      	b.n	8000d5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0f1a      	lsrs	r2, r3, #28
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0b9b      	lsrs	r3, r3, #14
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_SendPacket+0x274>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <_SendPacket+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	e00b      	b.n	8000d90 <_SendPacket+0x228>
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
 8000d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d8f0      	bhi.n	8000d78 <_SendPacket+0x210>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <_SendPacket+0x270>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	4618      	mov	r0, r3
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	f7ff fa43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_SendPacket+0x270>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	60d3      	str	r3, [r2, #12]
 8000dc8:	e00f      	b.n	8000dea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_SendPacket+0x270>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <_SendPacket+0x270>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <_SendPacket+0x282>
 8000dd8:	20000b7c 	.word	0x20000b7c
 8000ddc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_SendPacket+0x2d4>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <_SendPacket+0x2d8>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	336c      	adds	r3, #108	; 0x6c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <_SendPacket+0x2d4>)
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	4618      	mov	r0, r3
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <_SendPacket+0x2d8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3370      	adds	r3, #112	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00b      	beq.n	8000e32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_SendPacket+0x2d4>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <_SendPacket+0x2d4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e28:	f7ff fdbe 	bl	80009a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <_SendPacket+0x2d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000b7c 	.word	0x20000b7c
 8000e40:	200002bc 	.word	0x200002bc

08000e44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01d      	beq.n	8000eaa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e72:	2b25      	cmp	r3, #37	; 0x25
 8000e74:	d1f1      	bne.n	8000e5a <_VPrintHost+0x16>
      c = *p;
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6011      	str	r1, [r2, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e94:	460a      	mov	r2, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3388      	adds	r3, #136	; 0x88
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d002      	beq.n	8000eae <_VPrintHost+0x6a>
    c = *p++;
 8000ea8:	e7d7      	b.n	8000e5a <_VPrintHost+0x16>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_VPrintHost+0x6c>
        break;
 8000eae:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb4:	f04f 0120 	mov.w	r1, #32
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_VPrintHost+0x178>)
 8000ec0:	f7ff fd66 	bl	8000990 <_PreparePacket>
 8000ec4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ecc:	f7ff fd30 	bl	8000930 <_EncodeStr>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eda:	e00b      	b.n	8000ef4 <_VPrintHost+0xb0>
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	6779      	str	r1, [r7, #116]	; 0x74
 8000ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d8f0      	bhi.n	8000edc <_VPrintHost+0x98>
 8000efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	677a      	str	r2, [r7, #116]	; 0x74
 8000f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f14:	e00b      	b.n	8000f2e <_VPrintHost+0xea>
 8000f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2a:	09db      	lsrs	r3, r3, #7
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	d8f0      	bhi.n	8000f16 <_VPrintHost+0xd2>
 8000f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f4c:	e022      	b.n	8000f94 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
 8000f5a:	e00b      	b.n	8000f74 <_VPrintHost+0x130>
 8000f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	6679      	str	r1, [r7, #100]	; 0x64
 8000f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d8f0      	bhi.n	8000f5c <_VPrintHost+0x118>
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1d5      	bne.n	8000f4e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fa2:	221a      	movs	r2, #26
 8000fa4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fa8:	f7ff fdde 	bl	8000b68 <_SendPacket>
    RECORD_END();
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3788      	adds	r7, #136	; 0x88
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000bac 	.word	0x20000bac

08000fc0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <SEGGER_SYSVIEW_Init+0x74>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000fd8:	f7ff fbda 	bl	8000790 <SEGGER_RTT_AllocUpBuffer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SEGGER_SYSVIEW_Init+0x80>)
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000ffc:	f7ff fc4c 	bl	8000898 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x84>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800100c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000774 	.word	0x20000774
 8001038:	0800ee18 	.word	0x0800ee18
 800103c:	20000b7c 	.word	0x20000b7c
 8001040:	20000b74 	.word	0x20000b74
 8001044:	e0001004 	.word	0xe0001004

08001048 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000b7c 	.word	0x20000b7c

08001068 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001070:	f3ef 8311 	mrs	r3, BASEPRI
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	f381 8811 	msr	BASEPRI, r1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001080:	f7ff fc86 	bl	8000990 <_PreparePacket>
 8001084:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fd6c 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f383 8811 	msr	BASEPRI, r3
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000bac 	.word	0x20000bac

080010a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ae:	f3ef 8311 	mrs	r3, BASEPRI
 80010b2:	f04f 0120 	mov.w	r1, #32
 80010b6:	f381 8811 	msr	BASEPRI, r1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010be:	f7ff fc67 	bl	8000990 <_PreparePacket>
 80010c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e00b      	b.n	80010ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	61f9      	str	r1, [r7, #28]
 80010dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d8f0      	bhi.n	80010d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	61fa      	str	r2, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fd2f 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f383 8811 	msr	BASEPRI, r3
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000bac 	.word	0x20000bac

0800111c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001128:	f3ef 8311 	mrs	r3, BASEPRI
 800112c:	f04f 0120 	mov.w	r1, #32
 8001130:	f381 8811 	msr	BASEPRI, r1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001138:	f7ff fc2a 	bl	8000990 <_PreparePacket>
 800113c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	e00b      	b.n	8001164 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	b2da      	uxtb	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d8f0      	bhi.n	800114c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	e00b      	b.n	800119c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6279      	str	r1, [r7, #36]	; 0x24
 800118e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	09db      	lsrs	r3, r3, #7
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d8f0      	bhi.n	8001184 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	627a      	str	r2, [r7, #36]	; 0x24
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fcd6 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f383 8811 	msr	BASEPRI, r3
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000bac 	.word	0x20000bac

080011d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011dc:	f3ef 8311 	mrs	r3, BASEPRI
 80011e0:	f04f 0120 	mov.w	r1, #32
 80011e4:	f381 8811 	msr	BASEPRI, r1
 80011e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	220a      	movs	r2, #10
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <SEGGER_SYSVIEW_Start+0x16c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f824 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff ff32 	bl	8001068 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001204:	f3ef 8311 	mrs	r3, BASEPRI
 8001208:	f04f 0120 	mov.w	r1, #32
 800120c:	f381 8811 	msr	BASEPRI, r1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <SEGGER_SYSVIEW_Start+0x170>)
 8001214:	f7ff fbbc 	bl	8000990 <_PreparePacket>
 8001218:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
 8001228:	e00b      	b.n	8001242 <SEGGER_SYSVIEW_Start+0x72>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d8f0      	bhi.n	800122a <SEGGER_SYSVIEW_Start+0x5a>
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e00b      	b.n	800127c <SEGGER_SYSVIEW_Start+0xac>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	6279      	str	r1, [r7, #36]	; 0x24
 800126e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d8f0      	bhi.n	8001264 <SEGGER_SYSVIEW_Start+0x94>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	627a      	str	r2, [r7, #36]	; 0x24
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00b      	b.n	80012b6 <SEGGER_SYSVIEW_Start+0xe6>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	61f9      	str	r1, [r7, #28]
 80012a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	09db      	lsrs	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d8f0      	bhi.n	800129e <SEGGER_SYSVIEW_Start+0xce>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x11e>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	6179      	str	r1, [r7, #20]
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x106>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	617a      	str	r2, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001304:	2218      	movs	r2, #24
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc2d 	bl	8000b68 <_SendPacket>
      RECORD_END();
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001322:	f000 f9eb 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001326:	f000 f9b1 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800132a:	f000 fac1 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000b7c 	.word	0x20000b7c
 800133c:	0800ef24 	.word	0x0800ef24
 8001340:	20000bac 	.word	0x20000bac

08001344 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800134a:	f3ef 8311 	mrs	r3, BASEPRI
 800134e:	f04f 0120 	mov.w	r1, #32
 8001352:	f381 8811 	msr	BASEPRI, r1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <SEGGER_SYSVIEW_Stop+0x44>)
 800135a:	f7ff fb19 	bl	8000990 <_PreparePacket>
 800135e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001368:	220b      	movs	r2, #11
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff fbfb 	bl	8000b68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f383 8811 	msr	BASEPRI, r3
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000bac 	.word	0x20000bac
 800138c:	20000b7c 	.word	0x20000b7c

08001390 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001396:	f3ef 8311 	mrs	r3, BASEPRI
 800139a:	f04f 0120 	mov.w	r1, #32
 800139e:	f381 8811 	msr	BASEPRI, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4845      	ldr	r0, [pc, #276]	; (80014bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013a6:	f7ff faf3 	bl	8000990 <_PreparePacket>
 80013aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	e00b      	b.n	80013d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d8f0      	bhi.n	80013bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6279      	str	r1, [r7, #36]	; 0x24
 8001400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	09db      	lsrs	r3, r3, #7
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b7f      	cmp	r3, #127	; 0x7f
 8001412:	d8f0      	bhi.n	80013f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	627a      	str	r2, [r7, #36]	; 0x24
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	61f9      	str	r1, [r7, #28]
 800143a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	09db      	lsrs	r3, r3, #7
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d8f0      	bhi.n	8001430 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	61fa      	str	r2, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001496:	2218      	movs	r2, #24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff fb64 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	4798      	blx	r3
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000bac 	.word	0x20000bac
 80014c0:	20000b7c 	.word	0x20000b7c

080014c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	f04f 0120 	mov.w	r1, #32
 80014d4:	f381 8811 	msr	BASEPRI, r1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014dc:	f7ff fa58 	bl	8000990 <_PreparePacket>
 80014e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
 80014f6:	e00b      	b.n	8001510 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6479      	str	r1, [r7, #68]	; 0x44
 8001502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d8f0      	bhi.n	80014f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	647a      	str	r2, [r7, #68]	; 0x44
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001530:	e00b      	b.n	800154a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	b2da      	uxtb	r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800153c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d8f0      	bhi.n	8001532 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff f9e1 	bl	8000930 <_EncodeStr>
 800156e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001570:	2209      	movs	r2, #9
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faf7 	bl	8000b68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
 800158e:	e00b      	b.n	80015a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	6379      	str	r1, [r7, #52]	; 0x34
 800159a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d8f0      	bhi.n	8001590 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	637a      	str	r2, [r7, #52]	; 0x34
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	e00b      	b.n	80015e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	09db      	lsrs	r3, r3, #7
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d8f0      	bhi.n	80015ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e00b      	b.n	800161c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	6279      	str	r1, [r7, #36]	; 0x24
 800160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d8f0      	bhi.n	8001604 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	627a      	str	r2, [r7, #36]	; 0x24
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	61f9      	str	r1, [r7, #28]
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800166a:	2215      	movs	r2, #21
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fa7a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f383 8811 	msr	BASEPRI, r3
}
 800167a:	bf00      	nop
 800167c:	3748      	adds	r7, #72	; 0x48
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000bac 	.word	0x20000bac
 8001688:	20000b7c 	.word	0x20000b7c

0800168c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4798      	blx	r3
  }
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000b7c 	.word	0x20000b7c

080016b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016bc:	f3ef 8311 	mrs	r3, BASEPRI
 80016c0:	f04f 0120 	mov.w	r1, #32
 80016c4:	f381 8811 	msr	BASEPRI, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016cc:	f7ff f960 	bl	8000990 <_PreparePacket>
 80016d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff f92a 	bl	8000930 <_EncodeStr>
 80016dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016de:	220e      	movs	r2, #14
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff fa40 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f383 8811 	msr	BASEPRI, r3
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000bac 	.word	0x20000bac

080016fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4798      	blx	r3
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001720:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	000a      	movs	r2, r1
 8001730:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001732:	4613      	mov	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4621      	mov	r1, r4
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff fcef 	bl	800111c <SEGGER_SYSVIEW_RecordU32x2>
 800173e:	e006      	b.n	800174e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fcac 	bl	80010a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000b7c 	.word	0x20000b7c
 800175c:	e0001004 	.word	0xe0001004

08001760 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d077      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	e008      	b.n	8001790 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	3301      	adds	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	429a      	cmp	r2, r3
 8001796:	d3f2      	bcc.n	800177e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001798:	e000      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800179a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d055      	beq.n	800184e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017a2:	f3ef 8311 	mrs	r3, BASEPRI
 80017a6:	f04f 0120 	mov.w	r1, #32
 80017aa:	f381 8811 	msr	BASEPRI, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	482f      	ldr	r0, [pc, #188]	; (8001870 <SEGGER_SYSVIEW_SendModule+0x110>)
 80017b2:	f7ff f8ed 	bl	8000990 <_PreparePacket>
 80017b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e00b      	b.n	80017de <SEGGER_SYSVIEW_SendModule+0x7e>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1c59      	adds	r1, r3, #1
 80017ce:	6279      	str	r1, [r7, #36]	; 0x24
 80017d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	09db      	lsrs	r3, r3, #7
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b7f      	cmp	r3, #127	; 0x7f
 80017e2:	d8f0      	bhi.n	80017c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	627a      	str	r2, [r7, #36]	; 0x24
 80017ea:	6a3a      	ldr	r2, [r7, #32]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e00b      	b.n	8001818 <SEGGER_SYSVIEW_SendModule+0xb8>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	61f9      	str	r1, [r7, #28]
 800180a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	09db      	lsrs	r3, r3, #7
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b7f      	cmp	r3, #127	; 0x7f
 800181c:	d8f0      	bhi.n	8001800 <SEGGER_SYSVIEW_SendModule+0xa0>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	61fa      	str	r2, [r7, #28]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4619      	mov	r1, r3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff f87a 	bl	8000930 <_EncodeStr>
 800183c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800183e:	2216      	movs	r2, #22
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f7ff f990 	bl	8000b68 <_SendPacket>
      RECORD_END();
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4798      	blx	r3
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000ba4 	.word	0x20000ba4
 8001870:	20000bac 	.word	0x20000bac

08001874 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00f      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000ba4 	.word	0x20000ba4

080018b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018b6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ba:	f04f 0120 	mov.w	r1, #32
 80018be:	f381 8811 	msr	BASEPRI, r1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018c6:	f7ff f863 	bl	8000990 <_PreparePacket>
 80018ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e00b      	b.n	80018f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	6179      	str	r1, [r7, #20]
 80018e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	09db      	lsrs	r3, r3, #7
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b7f      	cmp	r3, #127	; 0x7f
 80018f8:	d8f0      	bhi.n	80018dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	617a      	str	r2, [r7, #20]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800190a:	221b      	movs	r2, #27
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f7ff f92a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f383 8811 	msr	BASEPRI, r3
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000bac 	.word	0x20000bac
 8001928:	20000ba8 	.word	0x20000ba8

0800192c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800192c:	b40f      	push	{r0, r1, r2, r3}
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	6938      	ldr	r0, [r7, #16]
 8001942:	f7ff fa7f 	bl	8000e44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001950:	b004      	add	sp, #16
 8001952:	4770      	bx	lr

08001954 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <_cbSendSystemDesc+0x14>)
 800195a:	f7ff feab 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <_cbSendSystemDesc+0x18>)
 8001960:	f7ff fea8 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	0800ee20 	.word	0x0800ee20
 800196c:	0800ee54 	.word	0x0800ee54

08001970 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SEGGER_SYSVIEW_Conf+0x24>)
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <SEGGER_SYSVIEW_Conf+0x28>)
 8001980:	f7ff fb1e 	bl	8000fc0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001988:	f7ff fb5e 	bl	8001048 <SEGGER_SYSVIEW_SetRAMBase>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	08001955 	.word	0x08001955
 8001998:	0800ef30 	.word	0x0800ef30

0800199c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e048      	b.n	8001a3a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019a8:	4929      	ldr	r1, [pc, #164]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00b f957 	bl	800cc6c <uxTaskGetStackHighWaterMark>
 80019be:	4601      	mov	r1, r0
 80019c0:	4823      	ldr	r0, [pc, #140]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	3310      	adds	r3, #16
 80019d0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019d2:	491f      	ldr	r1, [pc, #124]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4c16      	ldr	r4, [pc, #88]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4423      	add	r3, r4
 8001a02:	3308      	adds	r3, #8
 8001a04:	681c      	ldr	r4, [r3, #0]
 8001a06:	4d12      	ldr	r5, [pc, #72]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	442b      	add	r3, r5
 8001a14:	330c      	adds	r3, #12
 8001a16:	681d      	ldr	r5, [r3, #0]
 8001a18:	4e0d      	ldr	r6, [pc, #52]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4433      	add	r3, r6
 8001a26:	3310      	adds	r3, #16
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	4622      	mov	r2, r4
 8001a30:	f000 f855 	bl	8001ade <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <_cbSendTaskList+0xb8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3b1      	bcc.n	80019a8 <_cbSendTaskList+0xc>
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000c90 	.word	0x20000c90
 8001a54:	20000d30 	.word	0x20000d30

08001a58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a60:	f00a fdec 	bl	800c63c <xTaskGetTickCountFromISR>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2200      	movs	r2, #0
 8001a68:	469a      	mov	sl, r3
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0a00 	mov.w	sl, #0
 8001a7c:	f04f 0b00 	mov.w	fp, #0
 8001a80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	465b      	mov	r3, fp
 8001a90:	1a14      	subs	r4, r2, r0
 8001a92:	eb63 0501 	sbc.w	r5, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	00ab      	lsls	r3, r5, #2
 8001aa0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001aa4:	00a2      	lsls	r2, r4, #2
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	eb14 0800 	adds.w	r8, r4, r0
 8001aae:	eb45 0901 	adc.w	r9, r5, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ace:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ade <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08a      	sub	sp, #40	; 0x28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2214      	movs	r2, #20
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00d f885 	bl	800ec04 <memset>
  TaskInfo.TaskID     = TaskID;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fcd6 	bl	80014c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <CheckCRC>:
	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};


bool CheckCRC( const uint8_t* Buff, uint32_t Len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
	const uint8_t *p = Buff;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	617b      	str	r3, [r7, #20]

	uint32_t crc;
	uint32_t size = Len - 5;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3b05      	subs	r3, #5
 8001b32:	60fb      	str	r3, [r7, #12]
	crc = ~0U;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	613b      	str	r3, [r7, #16]
	while (size--)
 8001b3a:	e00e      	b.n	8001b5a <CheckCRC+0x3a>
		crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	617a      	str	r2, [r7, #20]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4053      	eors	r3, r2
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <CheckCRC+0x5c>)
 8001b4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	4053      	eors	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
	while (size--)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	60fa      	str	r2, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1eb      	bne.n	8001b3c <CheckCRC+0x1c>
		//return crc ^ ~0U;
	SEGGER_SYSVIEW_PrintfHost("%u \n", crc ^ ~0U);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <CheckCRC+0x60>)
 8001b6c:	f7ff fede 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>




	return true;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	0800ef38 	.word	0x0800ef38
 8001b80:	0800ee64 	.word	0x0800ee64

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8a:	f000 fd9e 	bl	80026ca <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b8e:	f7ff feef 	bl	8001970 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b92:	f000 f851 	bl	8001c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b96:	f000 f9eb 	bl	8001f70 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b9a:	f000 f8bf 	bl	8001d1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b9e:	f000 f9b7 	bl	8001f10 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001ba2:	f000 f909 	bl	8001db8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ba6:	f009 f98f 	bl	800aec8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <main+0x88>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4817      	ldr	r0, [pc, #92]	; (8001c10 <main+0x8c>)
 8001bb2:	f009 fadd 	bl	800b170 <osTimerNew>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <main+0x90>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <main+0x90>)
 8001bbe:	681c      	ldr	r4, [r3, #0]
 8001bc0:	f00a fd2c 	bl	800c61c <xTaskGetTickCount>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f00b fa8b 	bl	800d0ec <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <main+0x94>)
 8001bd8:	2120      	movs	r1, #32
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f009 fb4c 	bl	800b278 <osMessageQueueNew>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <main+0x98>)
 8001be4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <main+0x9c>)
 8001be8:	2100      	movs	r1, #0
 8001bea:	480e      	ldr	r0, [pc, #56]	; (8001c24 <main+0xa0>)
 8001bec:	f009 f9d6 	bl	800af9c <osThreadNew>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <main+0xa4>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <main+0xa8>)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	480d      	ldr	r0, [pc, #52]	; (8001c30 <main+0xac>)
 8001bfc:	f009 f9ce 	bl	800af9c <osThreadNew>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <main+0xb0>)
 8001c04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c06:	f009 f993 	bl	800af30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <main+0x86>
 8001c0c:	0800f398 	.word	0x0800f398
 8001c10:	08002129 	.word	0x08002129
 8001c14:	20000efc 	.word	0x20000efc
 8001c18:	0800f380 	.word	0x0800f380
 8001c1c:	20000ef8 	.word	0x20000ef8
 8001c20:	0800f338 	.word	0x0800f338
 8001c24:	080020cd 	.word	0x080020cd
 8001c28:	20000ef0 	.word	0x20000ef0
 8001c2c:	0800f35c 	.word	0x0800f35c
 8001c30:	080020f1 	.word	0x080020f1
 8001c34:	20000ef4 	.word	0x20000ef4

08001c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b094      	sub	sp, #80	; 0x50
 8001c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	2234      	movs	r2, #52	; 0x34
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00c ffdc 	bl	800ec04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c5c:	f002 fe26 	bl	80048ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <SystemClock_Config+0xdc>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <SystemClock_Config+0xdc>)
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <SystemClock_Config+0xdc>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <SystemClock_Config+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <SystemClock_Config+0xe0>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <SystemClock_Config+0xe0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001cac:	2360      	movs	r3, #96	; 0x60
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fe53 	bl	800496c <HAL_RCC_OscConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ccc:	f000 fa4a 	bl	8002164 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cd0:	f002 fdfc 	bl	80048cc <HAL_PWREx_EnableOverDrive>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cda:	f000 fa43 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cde:	230f      	movs	r3, #15
 8001ce0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 f8e4 	bl	8004ec8 <HAL_RCC_ClockConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001d06:	f000 fa2d 	bl	8002164 <Error_Handler>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3750      	adds	r7, #80	; 0x50
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d22:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <MX_ETH_Init+0x88>)
 8001d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d34:	22e1      	movs	r2, #225	; 0xe1
 8001d36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d4c:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <MX_ETH_Init+0x8c>)
 8001d4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d56:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <MX_ETH_Init+0x90>)
 8001d5c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <MX_ETH_Init+0x94>)
 8001d62:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d6a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <MX_ETH_Init+0x84>)
 8001d6e:	f000 fddf 	bl	8002930 <HAL_ETH_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d78:	f000 f9f4 	bl	8002164 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d7c:	2238      	movs	r2, #56	; 0x38
 8001d7e:	2100      	movs	r1, #0
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <MX_ETH_Init+0x98>)
 8001d82:	f00c ff3f 	bl	800ec04 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_ETH_Init+0x98>)
 8001d88:	2221      	movs	r2, #33	; 0x21
 8001d8a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_ETH_Init+0x98>)
 8001d8e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d92:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_ETH_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000d6c 	.word	0x20000d6c
 8001da4:	40028000 	.word	0x40028000
 8001da8:	20000f00 	.word	0x20000f00
 8001dac:	20000200 	.word	0x20000200
 8001db0:	20000160 	.word	0x20000160
 8001db4:	20000d34 	.word	0x20000d34

08001db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09a      	sub	sp, #104	; 0x68
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	222c      	movs	r2, #44	; 0x2c
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00c ff06 	bl	800ec04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001dfa:	4a44      	ldr	r2, [pc, #272]	; (8001f0c <MX_TIM1_Init+0x154>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e24:	4838      	ldr	r0, [pc, #224]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e26:	f003 fecf 	bl	8005bc8 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e30:	f000 f998 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4831      	ldr	r0, [pc, #196]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e42:	f004 fa25 	bl	8006290 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e4c:	f000 f98a 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e50:	482d      	ldr	r0, [pc, #180]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e52:	f003 ff89 	bl	8005d68 <HAL_TIM_PWM_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e5c:	f000 f982 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4825      	ldr	r0, [pc, #148]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001e74:	f004 fe96 	bl	8006ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e7e:	f000 f971 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4818      	ldr	r0, [pc, #96]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001ea8:	f004 f8de 	bl	8006068 <HAL_TIM_PWM_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001eb2:	f000 f957 	bl	8002164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001eec:	f004 fee8 	bl	8006cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ef6:	f000 f935 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <MX_TIM1_Init+0x150>)
 8001efc:	f000 fa38 	bl	8002370 <HAL_TIM_MspPostInit>

}
 8001f00:	bf00      	nop
 8001f02:	3768      	adds	r7, #104	; 0x68
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000e1c 	.word	0x20000e1c
 8001f0c:	40010000 	.word	0x40010000

08001f10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <MX_USART3_UART_Init+0x5c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f54:	f004 ff50 	bl	8006df8 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f5e:	f000 f901 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000e68 	.word	0x20000e68
 8001f6c:	40004800 	.word	0x40004800

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a40      	ldr	r2, [pc, #256]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a34      	ldr	r2, [pc, #208]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b32      	ldr	r3, [pc, #200]	; (80020bc <MX_GPIO_Init+0x14c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <MX_GPIO_Init+0x14c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <MX_GPIO_Init+0x14c>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <MX_GPIO_Init+0x14c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <MX_GPIO_Init+0x14c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a28      	ldr	r2, [pc, #160]	; (80020bc <MX_GPIO_Init+0x14c>)
 800201c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <MX_GPIO_Init+0x14c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f244 0181 	movw	r1, #16513	; 0x4081
 8002034:	4822      	ldr	r0, [pc, #136]	; (80020c0 <MX_GPIO_Init+0x150>)
 8002036:	f001 f94d 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	4821      	ldr	r0, [pc, #132]	; (80020c4 <MX_GPIO_Init+0x154>)
 8002040:	f001 f948 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800204e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	481b      	ldr	r0, [pc, #108]	; (80020c8 <MX_GPIO_Init+0x158>)
 800205c:	f000 ff8e 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002060:	f244 0381 	movw	r3, #16513	; 0x4081
 8002064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <MX_GPIO_Init+0x150>)
 800207a:	f000 ff7f 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <MX_GPIO_Init+0x154>)
 8002096:	f000 ff71 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_GPIO_Init+0x154>)
 80020ae:	f000 ff65 	bl	8002f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b2:	bf00      	nop
 80020b4:	3730      	adds	r7, #48	; 0x30
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40020800 	.word	0x40020800

080020cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80020d4:	f00b ff5a 	bl	800df8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	f009 f805 	bl	800b0e8 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80020de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <StartDefaultTask+0x20>)
 80020e4:	f001 f90f 	bl	8003306 <HAL_GPIO_TogglePin>
    osDelay(100);
 80020e8:	e7f6      	b.n	80020d8 <StartDefaultTask+0xc>
 80020ea:	bf00      	nop
 80020ec:	40020400 	.word	0x40020400

080020f0 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f008 fff5 	bl	800b0e8 <osDelay>
    uint8_t command[32];
    if (xQueueReceive(commandQueueHandle, &command, 100) == pdPASS){
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <commandReaderEntry+0x34>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f107 0108 	add.w	r1, r7, #8
 8002106:	2264      	movs	r2, #100	; 0x64
 8002108:	4618      	mov	r0, r3
 800210a:	f009 fd1b 	bl	800bb44 <xQueueReceive>
 800210e:	4603      	mov	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d1f1      	bne.n	80020f8 <commandReaderEntry+0x8>
    	//SEGGER_SYSVIEW_PrintfHost("begin:");
    	//for(int i=0; i < 10; i++){
    	//	SEGGER_SYSVIEW_PrintfHost("%d \n", command[i]);
    	//}
    	//SEGGER_SYSVIEW_PrintfHost("end");
    	CheckCRC(command, 9);
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	2109      	movs	r1, #9
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd00 	bl	8001b20 <CheckCRC>
  {
 8002120:	e7ea      	b.n	80020f8 <commandReaderEntry+0x8>
 8002122:	bf00      	nop
 8002124:	20000ef8 	.word	0x20000ef8

08002128 <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  //SEGGER_SYSVIEW_PrintfHost("sender");
  osDelay(1);
 8002130:	2001      	movs	r0, #1
 8002132:	f008 ffd9 	bl	800b0e8 <osDelay>
  //uint8_t *data = "Hello World from USB CDC\n";
  //xQueueSend(commandQueueHandle, data, 100);

  /* USER CODE END testCommandTimerEntry */
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002152:	f000 fac7 	bl	80026e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40001000 	.word	0x40001000

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	e7fe      	b.n	800216c <Error_Handler+0x8>
	...

08002170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_MspInit+0x4c>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_MspInit+0x4c>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	210f      	movs	r1, #15
 80021aa:	f06f 0001 	mvn.w	r0, #1
 80021ae:	f000 fb95 	bl	80028dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08e      	sub	sp, #56	; 0x38
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_ETH_MspInit+0x158>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	f040 8096 	bne.w	8002310 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80021e4:	4b4d      	ldr	r3, [pc, #308]	; (800231c <HAL_ETH_MspInit+0x15c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a4c      	ldr	r2, [pc, #304]	; (800231c <HAL_ETH_MspInit+0x15c>)
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ee:	6313      	str	r3, [r2, #48]	; 0x30
 80021f0:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_ETH_MspInit+0x15c>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_ETH_MspInit+0x15c>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4a46      	ldr	r2, [pc, #280]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800221a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800221e:	6313      	str	r3, [r2, #48]	; 0x30
 8002220:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4a3a      	ldr	r2, [pc, #232]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	6313      	str	r3, [r2, #48]	; 0x30
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_ETH_MspInit+0x15c>)
 800227a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_ETH_MspInit+0x15c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800228c:	2332      	movs	r3, #50	; 0x32
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800229c:	230b      	movs	r3, #11
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	481e      	ldr	r0, [pc, #120]	; (8002320 <HAL_ETH_MspInit+0x160>)
 80022a8:	f000 fe68 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022ac:	2386      	movs	r3, #134	; 0x86
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022bc:	230b      	movs	r3, #11
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	4619      	mov	r1, r3
 80022c6:	4817      	ldr	r0, [pc, #92]	; (8002324 <HAL_ETH_MspInit+0x164>)
 80022c8:	f000 fe58 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80022cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022de:	230b      	movs	r3, #11
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	480f      	ldr	r0, [pc, #60]	; (8002328 <HAL_ETH_MspInit+0x168>)
 80022ea:	f000 fe47 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80022ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002300:	230b      	movs	r3, #11
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	4619      	mov	r1, r3
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <HAL_ETH_MspInit+0x16c>)
 800230c:	f000 fe36 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002310:	bf00      	nop
 8002312:	3738      	adds	r7, #56	; 0x38
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40028000 	.word	0x40028000
 800231c:	40023800 	.word	0x40023800
 8002320:	40020800 	.word	0x40020800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40021800 	.word	0x40021800

08002330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_TIM_Base_MspInit+0x38>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10b      	bne.n	800235a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0x64>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d11c      	bne.n	80023cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 8002398:	f043 0310 	orr.w	r3, r3, #16
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023bc:	2301      	movs	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_TIM_MspPostInit+0x6c>)
 80023c8:	f000 fdd8 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40010000 	.word	0x40010000
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0ae      	sub	sp, #184	; 0xb8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2290      	movs	r2, #144	; 0x90
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00c fbff 	bl	800ec04 <memset>
  if(huart->Instance==USART3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_UART_MspInit+0xb4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d13c      	bne.n	800248a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002414:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002416:	2300      	movs	r3, #0
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4618      	mov	r0, r3
 8002420:	f002 ffaa 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800242a:	f7ff fe9b 	bl	8002164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_UART_MspInit+0xb8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_UART_MspInit+0xb8>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_UART_MspInit+0xb8>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_UART_MspInit+0xb8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_UART_MspInit+0xb8>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_UART_MspInit+0xb8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800245e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002478:	2307      	movs	r3, #7
 800247a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_UART_MspInit+0xbc>)
 8002486:	f000 fd79 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	37b8      	adds	r7, #184	; 0xb8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40004800 	.word	0x40004800
 8002498:	40023800 	.word	0x40023800
 800249c:	40020c00 	.word	0x40020c00

080024a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_InitTick+0xe0>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_InitTick+0xe0>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_InitTick+0xe0>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c8:	f107 0210 	add.w	r2, r7, #16
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 ff1e 	bl	8005314 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024e2:	f002 feef 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 80024e6:	6378      	str	r0, [r7, #52]	; 0x34
 80024e8:	e004      	b.n	80024f4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024ea:	f002 feeb 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 80024ee:	4603      	mov	r3, r0
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	4a23      	ldr	r2, [pc, #140]	; (8002584 <HAL_InitTick+0xe4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	0c9b      	lsrs	r3, r3, #18
 80024fe:	3b01      	subs	r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_InitTick+0xe8>)
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_InitTick+0xec>)
 8002506:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_InitTick+0xe8>)
 800250a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800250e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_InitTick+0xe8>)
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_InitTick+0xe8>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_InitTick+0xe8>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_InitTick+0xe8>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002528:	4817      	ldr	r0, [pc, #92]	; (8002588 <HAL_InitTick+0xe8>)
 800252a:	f003 fb4d 	bl	8005bc8 <HAL_TIM_Base_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11b      	bne.n	8002574 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800253c:	4812      	ldr	r0, [pc, #72]	; (8002588 <HAL_InitTick+0xe8>)
 800253e:	f003 fb9b 	bl	8005c78 <HAL_TIM_Base_Start_IT>
 8002542:	4603      	mov	r3, r0
 8002544:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002548:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002550:	2036      	movs	r0, #54	; 0x36
 8002552:	f000 f9df 	bl	8002914 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d808      	bhi.n	800256e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2036      	movs	r0, #54	; 0x36
 8002562:	f000 f9bb 	bl	80028dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_InitTick+0xf0>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e002      	b.n	8002574 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002574:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002578:	4618      	mov	r0, r3
 800257a:	3738      	adds	r7, #56	; 0x38
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	431bde83 	.word	0x431bde83
 8002588:	20000f08 	.word	0x20000f08
 800258c:	40001000 	.word	0x40001000
 8002590:	20000004 	.word	0x20000004

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <NMI_Handler+0x4>

0800259a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <HardFault_Handler+0x4>

080025a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <MemManage_Handler+0x4>

080025a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <BusFault_Handler+0x4>

080025ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <UsageFault_Handler+0x4>

080025b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM6_DAC_IRQHandler+0x10>)
 80025c6:	f003 fc30 	bl	8005e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000f08 	.word	0x20000f08

080025d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <OTG_FS_IRQHandler+0x10>)
 80025da:	f000 fff4 	bl	80035c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20006e1c 	.word	0x20006e1c

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f00c fb62 	bl	800ece0 <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20080000 	.word	0x20080000
 8002648:	00000400 	.word	0x00000400
 800264c:	20000f54 	.word	0x20000f54
 8002650:	20007470 	.word	0x20007470

08002654 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SystemInit+0x20>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <SystemInit+0x20>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800267e:	490e      	ldr	r1, [pc, #56]	; (80026b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002694:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a2:	f7ff ffd7 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f00c fb21 	bl	800ecec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026aa:	f7ff fa6b 	bl	8001b84 <main>
  bx  lr    
 80026ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80026bc:	0800f3d0 	.word	0x0800f3d0
  ldr r2, =_sbss
 80026c0:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80026c4:	2000746c 	.word	0x2000746c

080026c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_IRQHandler>

080026ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ce:	2003      	movs	r0, #3
 80026d0:	f000 f8f9 	bl	80028c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d4:	200f      	movs	r0, #15
 80026d6:	f7ff fee3 	bl	80024a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026da:	f7ff fd49 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008
 8002708:	20000f58 	.word	0x20000f58

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000f58 	.word	0x20000f58

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff ffee 	bl	800270c <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffde 	bl	800270c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000008 	.word	0x20000008

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <__NVIC_SetPriorityGrouping+0x40>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	4313      	orrs	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x40>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	05fa0000 	.word	0x05fa0000

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <__NVIC_EnableIRQ+0x38>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf28      	it	cs
 800287e:	2304      	movcs	r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3304      	adds	r3, #4
 8002886:	2b06      	cmp	r3, #6
 8002888:	d902      	bls.n	8002890 <NVIC_EncodePriority+0x30>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3b03      	subs	r3, #3
 800288e:	e000      	b.n	8002892 <NVIC_EncodePriority+0x32>
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	401a      	ands	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	4313      	orrs	r3, r2
         );
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff4c 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ee:	f7ff ff61 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 80028f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	6978      	ldr	r0, [r7, #20]
 80028fa:	f7ff ffb1 	bl	8002860 <NVIC_EncodePriority>
 80028fe:	4602      	mov	r2, r0
 8002900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff80 	bl	800280c <__NVIC_SetPriority>
}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff54 	bl	80027d0 <__NVIC_EnableIRQ>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06a      	b.n	8002a18 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2223      	movs	r2, #35	; 0x23
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fc33 	bl	80021c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_ETH_Init+0xf0>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <HAL_ETH_Init+0xf0>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <HAL_ETH_Init+0xf0>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_ETH_Init+0xf4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_ETH_Init+0xf4>)
 8002978:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800297c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_ETH_Init+0xf4>)
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4927      	ldr	r1, [pc, #156]	; (8002a24 <HAL_ETH_Init+0xf4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_ETH_Init+0xf4>)
 800298e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a8:	f7ff feb0 	bl	800270c <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029ae:	e011      	b.n	80029d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029b0:	f7ff feac 	bl	800270c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029be:	d909      	bls.n	80029d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2204      	movs	r2, #4
 80029c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	22e0      	movs	r2, #224	; 0xe0
 80029cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e021      	b.n	8002a18 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e4      	bne.n	80029b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f958 	bl	8002c9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f9ff 	bl	8002df0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa55 	bl	8002ea2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	461a      	mov	r2, r3
 80029fe:	2100      	movs	r1, #0
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f9bd 	bl	8002d80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40013800 	.word	0x40013800

08002a28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <ETH_SetMACConfig+0x15c>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	7c1b      	ldrb	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <ETH_SetMACConfig+0x28>
 8002a4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a4e:	e000      	b.n	8002a52 <ETH_SetMACConfig+0x2a>
 8002a50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	7c5b      	ldrb	r3, [r3, #17]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <ETH_SetMACConfig+0x38>
 8002a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a5e:	e000      	b.n	8002a62 <ETH_SetMACConfig+0x3a>
 8002a60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	7fdb      	ldrb	r3, [r3, #31]
 8002a6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	7f92      	ldrb	r2, [r2, #30]
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d102      	bne.n	8002a86 <ETH_SetMACConfig+0x5e>
 8002a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a84:	e000      	b.n	8002a88 <ETH_SetMACConfig+0x60>
 8002a86:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7f1b      	ldrb	r3, [r3, #28]
 8002a8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	791b      	ldrb	r3, [r3, #4]
 8002a9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aa6:	2a00      	cmp	r2, #0
 8002aa8:	d102      	bne.n	8002ab0 <ETH_SetMACConfig+0x88>
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	e000      	b.n	8002ab2 <ETH_SetMACConfig+0x8a>
 8002ab0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ab2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	7bdb      	ldrb	r3, [r3, #15]
 8002ab8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002aba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ac8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aca:	4313      	orrs	r3, r2
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7ff fe1e 	bl	8002724 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002afe:	4013      	ands	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b0e:	2a00      	cmp	r2, #0
 8002b10:	d101      	bne.n	8002b16 <ETH_SetMACConfig+0xee>
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	e000      	b.n	8002b18 <ETH_SetMACConfig+0xf0>
 8002b16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b26:	2a01      	cmp	r2, #1
 8002b28:	d101      	bne.n	8002b2e <ETH_SetMACConfig+0x106>
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	e000      	b.n	8002b30 <ETH_SetMACConfig+0x108>
 8002b2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b38:	2a01      	cmp	r2, #1
 8002b3a:	d101      	bne.n	8002b40 <ETH_SetMACConfig+0x118>
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	e000      	b.n	8002b42 <ETH_SetMACConfig+0x11a>
 8002b40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b4a:	2a01      	cmp	r2, #1
 8002b4c:	d101      	bne.n	8002b52 <ETH_SetMACConfig+0x12a>
 8002b4e:	2202      	movs	r2, #2
 8002b50:	e000      	b.n	8002b54 <ETH_SetMACConfig+0x12c>
 8002b52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b54:	4313      	orrs	r3, r2
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f7ff fdd9 	bl	8002724 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	ff20810f 	.word	0xff20810f

08002b88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <ETH_SetDMAConfig+0x110>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	7b1b      	ldrb	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <ETH_SetDMAConfig+0x2c>
 8002bae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bb2:	e000      	b.n	8002bb6 <ETH_SetDMAConfig+0x2e>
 8002bb4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	7b5b      	ldrb	r3, [r3, #13]
 8002bba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	7f52      	ldrb	r2, [r2, #29]
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	d102      	bne.n	8002bcc <ETH_SetDMAConfig+0x44>
 8002bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bca:	e000      	b.n	8002bce <ETH_SetDMAConfig+0x46>
 8002bcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7b9b      	ldrb	r3, [r3, #14]
 8002bd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bdc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	7f1b      	ldrb	r3, [r3, #28]
 8002be2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002be4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7f9b      	ldrb	r3, [r3, #30]
 8002bea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bf2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff fd80 	bl	8002724 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	791b      	ldrb	r3, [r3, #4]
 8002c36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7ff fd51 	bl	8002724 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	f8de3f23 	.word	0xf8de3f23

08002c9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0a6      	sub	sp, #152	; 0x98
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fe86 	bl	8002a28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff08 	bl	8002b88 <ETH_SetDMAConfig>
}
 8002d78:	bf00      	nop
 8002d7a:	3798      	adds	r7, #152	; 0x98
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3305      	adds	r3, #5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	3204      	adds	r2, #4
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <ETH_MACAddressConfig+0x68>)
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3303      	adds	r3, #3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	061a      	lsls	r2, r3, #24
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3302      	adds	r3, #2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <ETH_MACAddressConfig+0x6c>)
 8002dd2:	4413      	add	r3, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	6013      	str	r3, [r2, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40028040 	.word	0x40028040
 8002dec:	40028044 	.word	0x40028044

08002df0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e03e      	b.n	8002e7c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	3206      	adds	r2, #6
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d80c      	bhi.n	8002e60 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e004      	b.n	8002e6a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d9bd      	bls.n	8002dfe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e94:	611a      	str	r2, [r3, #16]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e046      	b.n	8002f3e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6919      	ldr	r1, [r3, #16]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002eec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ef4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	3212      	adds	r2, #18
 8002f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d80c      	bhi.n	8002f2e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6919      	ldr	r1, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	e004      	b.n	8002f38 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d9b5      	bls.n	8002eb0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6e:	60da      	str	r2, [r3, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	e175      	b.n	8003288 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	f040 8164 	bne.w	8003282 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d005      	beq.n	8002fd2 <HAL_GPIO_Init+0x56>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d130      	bne.n	8003034 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003008:	2201      	movs	r2, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 0201 	and.w	r2, r3, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b03      	cmp	r3, #3
 800303e:	d017      	beq.n	8003070 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d123      	bne.n	80030c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	08da      	lsrs	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3208      	adds	r2, #8
 8003084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	08da      	lsrs	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3208      	adds	r2, #8
 80030be:	69b9      	ldr	r1, [r7, #24]
 80030c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0203 	and.w	r2, r3, #3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80be 	beq.w	8003282 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003106:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_GPIO_Init+0x324>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_GPIO_Init+0x324>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_GPIO_Init+0x324>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800311e:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <HAL_GPIO_Init+0x328>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_GPIO_Init+0x32c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d037      	beq.n	80031ba <HAL_GPIO_Init+0x23e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_GPIO_Init+0x330>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d031      	beq.n	80031b6 <HAL_GPIO_Init+0x23a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02b      	beq.n	80031b2 <HAL_GPIO_Init+0x236>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <HAL_GPIO_Init+0x338>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d025      	beq.n	80031ae <HAL_GPIO_Init+0x232>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a54      	ldr	r2, [pc, #336]	; (80032b8 <HAL_GPIO_Init+0x33c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01f      	beq.n	80031aa <HAL_GPIO_Init+0x22e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a53      	ldr	r2, [pc, #332]	; (80032bc <HAL_GPIO_Init+0x340>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_GPIO_Init+0x22a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_GPIO_Init+0x344>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x226>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a51      	ldr	r2, [pc, #324]	; (80032c4 <HAL_GPIO_Init+0x348>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x222>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <HAL_GPIO_Init+0x34c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x21e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4f      	ldr	r2, [pc, #316]	; (80032cc <HAL_GPIO_Init+0x350>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x21a>
 8003192:	2309      	movs	r3, #9
 8003194:	e012      	b.n	80031bc <HAL_GPIO_Init+0x240>
 8003196:	230a      	movs	r3, #10
 8003198:	e010      	b.n	80031bc <HAL_GPIO_Init+0x240>
 800319a:	2308      	movs	r3, #8
 800319c:	e00e      	b.n	80031bc <HAL_GPIO_Init+0x240>
 800319e:	2307      	movs	r3, #7
 80031a0:	e00c      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031a2:	2306      	movs	r3, #6
 80031a4:	e00a      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031a6:	2305      	movs	r3, #5
 80031a8:	e008      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031aa:	2304      	movs	r3, #4
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031ae:	2303      	movs	r3, #3
 80031b0:	e004      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e002      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031ba:	2300      	movs	r3, #0
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	f002 0203 	and.w	r2, r2, #3
 80031c2:	0092      	lsls	r2, r2, #2
 80031c4:	4093      	lsls	r3, r2
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031cc:	4935      	ldr	r1, [pc, #212]	; (80032a4 <HAL_GPIO_Init+0x328>)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_GPIO_Init+0x354>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800322e:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003252:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3301      	adds	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	f67f ae86 	bls.w	8002f9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40013800 	.word	0x40013800
 80032a8:	40020000 	.word	0x40020000
 80032ac:	40020400 	.word	0x40020400
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020c00 	.word	0x40020c00
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40021400 	.word	0x40021400
 80032c0:	40021800 	.word	0x40021800
 80032c4:	40021c00 	.word	0x40021c00
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40022400 	.word	0x40022400
 80032d0:	40013c00 	.word	0x40013c00

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032f0:	e003      	b.n	80032fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	460b      	mov	r3, r1
 8003310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003318:	887a      	ldrh	r2, [r7, #2]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	041a      	lsls	r2, r3, #16
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43d9      	mvns	r1, r3
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	400b      	ands	r3, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800333a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333c:	b08f      	sub	sp, #60	; 0x3c
 800333e:	af0a      	add	r7, sp, #40	; 0x28
 8003340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e116      	b.n	800357a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f00b f812 	bl	800e390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2203      	movs	r2, #3
 8003370:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f004 faa7 	bl	80078de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	687e      	ldr	r6, [r7, #4]
 8003398:	466d      	mov	r5, sp
 800339a:	f106 0410 	add.w	r4, r6, #16
 800339e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ae:	1d33      	adds	r3, r6, #4
 80033b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f004 f988 	bl	80076c8 <USB_CoreInit>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0d7      	b.n	800357a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fa95 	bl	8007900 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	e04a      	b.n	8003472 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	333d      	adds	r3, #61	; 0x3d
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	333c      	adds	r3, #60	; 0x3c
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	b298      	uxth	r0, r3
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3344      	adds	r3, #68	; 0x44
 8003418:	4602      	mov	r2, r0
 800341a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3340      	adds	r3, #64	; 0x40
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3348      	adds	r3, #72	; 0x48
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	334c      	adds	r3, #76	; 0x4c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3354      	adds	r3, #84	; 0x54
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	3301      	adds	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d3af      	bcc.n	80033dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e044      	b.n	800350c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	3301      	adds	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d3b5      	bcc.n	8003482 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	687e      	ldr	r6, [r7, #4]
 800351e:	466d      	mov	r5, sp
 8003520:	f106 0410 	add.w	r4, r6, #16
 8003524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003530:	e885 0003 	stmia.w	r5, {r0, r1}
 8003534:	1d33      	adds	r3, r6, #4
 8003536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f004 fa2d 	bl	8007998 <USB_DevInit>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e014      	b.n	800357a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b01      	cmp	r3, #1
 8003566:	d102      	bne.n	800356e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 f97b 	bl	8004864 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f005 fb7b 	bl	8008c6e <USB_DevDisconnect>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003582 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_Start+0x16>
 8003594:	2302      	movs	r3, #2
 8003596:	e012      	b.n	80035be <HAL_PCD_Start+0x3c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 f989 	bl	80078bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f005 fb3c 	bl	8008c2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035c6:	b590      	push	{r4, r7, lr}
 80035c8:	b08d      	sub	sp, #52	; 0x34
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f005 fbfa 	bl	8008dd6 <USB_GetMode>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 84b7 	bne.w	8003f58 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f005 fb5e 	bl	8008cb0 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 84ad 	beq.w	8003f56 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f005 fb4b 	bl	8008cb0 <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d107      	bne.n	8003634 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f002 0202 	and.w	r2, r2, #2
 8003632:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f005 fb39 	bl	8008cb0 <USB_ReadInterrupts>
 800363e:	4603      	mov	r3, r0
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d161      	bne.n	800370c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0210 	bic.w	r2, r2, #16
 8003656:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	0c5b      	lsrs	r3, r3, #17
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	2b02      	cmp	r3, #2
 8003682:	d124      	bne.n	80036ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d035      	beq.n	80036fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800369a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	6a38      	ldr	r0, [r7, #32]
 80036a4:	f005 f970 	bl	8008988 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b4:	441a      	add	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c6:	441a      	add	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
 80036cc:	e016      	b.n	80036fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	0c5b      	lsrs	r3, r3, #17
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d110      	bne.n	80036fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036e0:	2208      	movs	r2, #8
 80036e2:	4619      	mov	r1, r3
 80036e4:	6a38      	ldr	r0, [r7, #32]
 80036e6:	f005 f94f 	bl	8008988 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f6:	441a      	add	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0210 	orr.w	r2, r2, #16
 800370a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f005 facd 	bl	8008cb0 <USB_ReadInterrupts>
 8003716:	4603      	mov	r3, r0
 8003718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003720:	f040 80a7 	bne.w	8003872 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f005 fad2 	bl	8008cd6 <USB_ReadDevAllOutEpInterrupt>
 8003732:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003734:	e099      	b.n	800386a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 808e 	beq.w	800385e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f005 faf6 	bl	8008d3e <USB_ReadDevOutEPInterrupt>
 8003752:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	2301      	movs	r3, #1
 800376e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fef0 	bl	8004558 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	461a      	mov	r2, r3
 8003790:	2308      	movs	r3, #8
 8003792:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 ffc6 	bl	8004728 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	461a      	mov	r2, r3
 80037b4:	2310      	movs	r3, #16
 80037b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d030      	beq.n	8003824 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d109      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	78db      	ldrb	r3, [r3, #3]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d108      	bne.n	8003812 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2200      	movs	r2, #0
 8003804:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f00a fef3 	bl	800e5f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	2302      	movs	r3, #2
 8003822:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	2320      	movs	r3, #32
 800383e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800385c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	3301      	adds	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f af62 	bne.w	8003736 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fa1a 	bl	8008cb0 <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003886:	f040 80db 	bne.w	8003a40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f005 fa3b 	bl	8008d0a <USB_ReadDevAllInEpInterrupt>
 8003894:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800389a:	e0cd      	b.n	8003a38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80c2 	beq.w	8003a2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f005 fa61 	bl	8008d7a <USB_ReadDevInEPInterrupt>
 80038b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d057      	beq.n	8003974 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	2201      	movs	r2, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e4:	4013      	ands	r3, r2
 80038e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d132      	bne.n	8003968 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334c      	adds	r3, #76	; 0x4c
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4403      	add	r3, r0
 8003922:	3348      	adds	r3, #72	; 0x48
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4419      	add	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	334c      	adds	r3, #76	; 0x4c
 8003938:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d113      	bne.n	8003968 <HAL_PCD_IRQHandler+0x3a2>
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	3354      	adds	r3, #84	; 0x54
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f005 fa6a 	bl	8008e3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f00a fdbd 	bl	800e4ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	461a      	mov	r2, r3
 800398c:	2308      	movs	r3, #8
 800398e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a6:	461a      	mov	r2, r3
 80039a8:	2310      	movs	r3, #16
 80039aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	461a      	mov	r2, r3
 80039c4:	2340      	movs	r3, #64	; 0x40
 80039c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d023      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d4:	6a38      	ldr	r0, [r7, #32]
 80039d6:	f004 f93d 	bl	8007c54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3338      	adds	r3, #56	; 0x38
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	78db      	ldrb	r3, [r3, #3]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f00a fe0a 	bl	800e61c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	461a      	mov	r2, r3
 8003a16:	2302      	movs	r3, #2
 8003a18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fd08 	bl	800443c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	3301      	adds	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f af2e 	bne.w	800389c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 f933 	bl	8008cb0 <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a54:	d122      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f00a ff84 	bl	800e98c <HAL_PCDEx_LPM_Callback>
 8003a84:	e002      	b.n	8003a8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f00a fda8 	bl	800e5dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f005 f905 	bl	8008cb0 <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab0:	d112      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f00a fd64 	bl	800e590 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f005 f8e7 	bl	8008cb0 <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aec:	d121      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003afc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d111      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	f003 020f 	and.w	r2, r3, #15
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b22:	2101      	movs	r1, #1
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f00a ff31 	bl	800e98c <HAL_PCDEx_LPM_Callback>
 8003b2a:	e002      	b.n	8003b32 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f00a fd2f 	bl	800e590 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f005 f8ba 	bl	8008cb0 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	f040 80b7 	bne.w	8003cb8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2110      	movs	r1, #16
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 f875 	bl	8007c54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6e:	e046      	b.n	8003bfe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d3b3      	bcc.n	8003b70 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c34:	f043 030b 	orr.w	r3, r3, #11
 8003c38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4a:	f043 030b 	orr.w	r3, r3, #11
 8003c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c50:	e015      	b.n	8003c7e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	4619      	mov	r1, r3
 8003c62:	f242 032b 	movw	r3, #8235	; 0x202b
 8003c66:	4313      	orrs	r3, r2
 8003c68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c78:	f043 030b 	orr.w	r3, r3, #11
 8003c7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f005 f8ca 	bl	8008e3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f004 fff7 	bl	8008cb0 <USB_ReadInterrupts>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ccc:	d124      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f005 f88e 	bl	8008df4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 f836 	bl	8007d4e <USB_GetDevSpeed>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681c      	ldr	r4, [r3, #0]
 8003cee:	f001 fadd 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 8003cf2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f003 fd3b 	bl	8007778 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f00a fc1b 	bl	800e53e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 ffc7 	bl	8008cb0 <USB_ReadInterrupts>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d10a      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f00a fbf8 	bl	800e522 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f002 0208 	and.w	r2, r2, #8
 8003d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 ffb2 	bl	8008cb0 <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d122      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d62:	2301      	movs	r3, #1
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	e014      	b.n	8003d92 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fb27 	bl	80043da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3301      	adds	r3, #1
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3e5      	bcc.n	8003d68 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 ff85 	bl	8008cb0 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db0:	d13b      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db2:	2301      	movs	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	e02b      	b.n	8003e10 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3340      	adds	r3, #64	; 0x40
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d115      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da12      	bge.n	8003e0a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	333f      	adds	r3, #63	; 0x3f
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fae8 	bl	80043da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3ce      	bcc.n	8003db8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 ff3e 	bl	8008cb0 <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e3e:	d155      	bne.n	8003eec <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e40:	2301      	movs	r3, #1
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	e045      	b.n	8003ed2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d12e      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da2b      	bge.n	8003ecc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d121      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ec8:	6053      	str	r3, [r2, #4]
            break;
 8003eca:	e007      	b.n	8003edc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	3301      	adds	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d3b4      	bcc.n	8003e46 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 fedd 	bl	8008cb0 <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d10a      	bne.n	8003f18 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f00a fb9c 	bl	800e640 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f004 fec7 	bl	8008cb0 <USB_ReadInterrupts>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d115      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f00a fb8c 	bl	800e65c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	e000      	b.n	8003f58 <HAL_PCD_IRQHandler+0x992>
      return;
 8003f56:	bf00      	nop
    }
  }
}
 8003f58:	3734      	adds	r7, #52	; 0x34
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}

08003f5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_PCD_SetAddress+0x1a>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e013      	b.n	8003fa0 <HAL_PCD_SetAddress+0x42>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f004 fe25 	bl	8008be0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	70fb      	strb	r3, [r7, #3]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	803b      	strh	r3, [r7, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	da0f      	bge.n	8003fee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	3338      	adds	r3, #56	; 0x38
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	705a      	strb	r2, [r3, #1]
 8003fec:	e00f      	b.n	800400e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 020f 	and.w	r2, r3, #15
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800401a:	883a      	ldrh	r2, [r7, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	78ba      	ldrb	r2, [r7, #2]
 8004024:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004038:	78bb      	ldrb	r3, [r7, #2]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d102      	bne.n	8004044 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_PCD_EP_Open+0xaa>
 800404e:	2302      	movs	r3, #2
 8004050:	e00e      	b.n	8004070 <HAL_PCD_EP_Open+0xc8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	4618      	mov	r0, r3
 8004062:	f003 fe99 	bl	8007d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800406e:	7afb      	ldrb	r3, [r7, #11]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da0f      	bge.n	80040ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3338      	adds	r3, #56	; 0x38
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	705a      	strb	r2, [r3, #1]
 80040aa:	e00f      	b.n	80040cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_PCD_EP_Close+0x6e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e00e      	b.n	8004104 <HAL_PCD_EP_Close+0x8c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f003 fed7 	bl	8007ea8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	460b      	mov	r3, r1
 800411a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800411c:	7afb      	ldrb	r3, [r7, #11]
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	3304      	adds	r3, #4
 8004134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2200      	movs	r2, #0
 8004146:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800414e:	7afb      	ldrb	r3, [r7, #11]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	b2da      	uxtb	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d102      	bne.n	8004168 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004168:	7afb      	ldrb	r3, [r7, #11]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	f004 f9be 	bl	8008500 <USB_EP0StartXfer>
 8004184:	e008      	b.n	8004198 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	f003 ff64 	bl	8008060 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041c4:	681b      	ldr	r3, [r3, #0]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	460b      	mov	r3, r1
 80041e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e2:	7afb      	ldrb	r3, [r7, #11]
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	3338      	adds	r3, #56	; 0x38
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	3304      	adds	r3, #4
 80041f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2201      	movs	r2, #1
 8004210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	b2da      	uxtb	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6979      	ldr	r1, [r7, #20]
 8004244:	f004 f95c 	bl	8008500 <USB_EP0StartXfer>
 8004248:	e008      	b.n	800425c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6979      	ldr	r1, [r7, #20]
 8004258:	f003 ff02 	bl	8008060 <USB_EPStartXfer>
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 020f 	and.w	r2, r3, #15
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d901      	bls.n	8004284 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e050      	b.n	8004326 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	da0f      	bge.n	80042ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	f003 020f 	and.w	r2, r3, #15
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	3338      	adds	r3, #56	; 0x38
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	3304      	adds	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	705a      	strb	r2, [r3, #1]
 80042aa:	e00d      	b.n	80042c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	3304      	adds	r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_PCD_EP_SetStall+0x82>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e01e      	b.n	8004326 <HAL_PCD_EP_SetStall+0xc0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f004 fb9e 	bl	8008a38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	b2d9      	uxtb	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004316:	461a      	mov	r2, r3
 8004318:	f004 fd90 	bl	8008e3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d901      	bls.n	800434c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e042      	b.n	80043d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800434c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da0f      	bge.n	8004374 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3338      	adds	r3, #56	; 0x38
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	705a      	strb	r2, [r3, #1]
 8004372:	e00f      	b.n	8004394 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_PCD_EP_ClrStall+0x86>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e00e      	b.n	80043d2 <HAL_PCD_EP_ClrStall+0xa4>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fba6 	bl	8008b14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da0c      	bge.n	8004408 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3338      	adds	r3, #56	; 0x38
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e00c      	b.n	8004422 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 020f 	and.w	r2, r3, #15
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	3304      	adds	r3, #4
 8004420:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	f004 f9c5 	bl	80087b8 <USB_EPStopXfer>
 800442e:	4603      	mov	r3, r0
 8004430:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004432:	7afb      	ldrb	r3, [r7, #11]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	3338      	adds	r3, #56	; 0x38
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	429a      	cmp	r2, r3
 800446e:	d901      	bls.n	8004474 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e06c      	b.n	800454e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	429a      	cmp	r2, r3
 8004488:	d902      	bls.n	8004490 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3303      	adds	r3, #3
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004498:	e02b      	b.n	80044f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d902      	bls.n	80044b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3303      	adds	r3, #3
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6919      	ldr	r1, [r3, #16]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	4603      	mov	r3, r0
 80044d4:	6978      	ldr	r0, [r7, #20]
 80044d6:	f004 fa19 	bl	800890c <USB_WritePacket>

    ep->xfer_buff  += len;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	441a      	add	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	d809      	bhi.n	800451c <PCD_WriteEmptyTxFifo+0xe0>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004510:	429a      	cmp	r2, r3
 8004512:	d203      	bcs.n	800451c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1be      	bne.n	800449a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	429a      	cmp	r2, r3
 8004526:	d811      	bhi.n	800454c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	2201      	movs	r2, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	43db      	mvns	r3, r3
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004548:	4013      	ands	r3, r2
 800454a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	333c      	adds	r3, #60	; 0x3c
 8004570:	3304      	adds	r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d17b      	bne.n	8004686 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d015      	beq.n	80045c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4a61      	ldr	r2, [pc, #388]	; (8004720 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	f240 80b9 	bls.w	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80b3 	beq.w	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c0:	6093      	str	r3, [r2, #8]
 80045c2:	e0a7      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2320      	movs	r3, #32
 80045de:	6093      	str	r3, [r2, #8]
 80045e0:	e098      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 8093 	bne.w	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	; (8004720 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d90f      	bls.n	8004616 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	e07e      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	0159      	lsls	r1, r3, #5
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	440b      	add	r3, r1
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d114      	bne.n	8004678 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004660:	461a      	mov	r2, r3
 8004662:	2101      	movs	r1, #1
 8004664:	f004 fbea 	bl	8008e3c <USB_EP0_OutStart>
 8004668:	e006      	b.n	8004678 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	441a      	add	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f009 ff1a 	bl	800e4b8 <HAL_PCD_DataOutStageCallback>
 8004684:	e046      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d124      	bne.n	80046d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	461a      	mov	r2, r3
 80046a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046aa:	6093      	str	r3, [r2, #8]
 80046ac:	e032      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	461a      	mov	r2, r3
 80046c6:	2320      	movs	r3, #32
 80046c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f009 fef1 	bl	800e4b8 <HAL_PCD_DataOutStageCallback>
 80046d6:	e01d      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d114      	bne.n	8004708 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004700:	461a      	mov	r2, r3
 8004702:	2100      	movs	r1, #0
 8004704:	f004 fb9a 	bl	8008e3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f009 fed2 	bl	800e4b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	4f54300a 	.word	0x4f54300a
 8004724:	4f54310a 	.word	0x4f54310a

08004728 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	333c      	adds	r3, #60	; 0x3c
 8004740:	3304      	adds	r3, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d90e      	bls.n	800477c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	461a      	mov	r2, r3
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f009 fe89 	bl	800e494 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d90c      	bls.n	80047a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800479c:	461a      	mov	r2, r3
 800479e:	2101      	movs	r1, #1
 80047a0:	f004 fb4c 	bl	8008e3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	4f54300a 	.word	0x4f54300a

080047b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
 80047c0:	4613      	mov	r3, r2
 80047c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047d2:	883b      	ldrh	r3, [r7, #0]
 80047d4:	0419      	lsls	r1, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	430a      	orrs	r2, r1
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
 80047e0:	e028      	b.n	8004834 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	e00d      	b.n	8004812 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	3340      	adds	r3, #64	; 0x40
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	3301      	adds	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	3b01      	subs	r3, #1
 8004818:	429a      	cmp	r2, r3
 800481a:	d3ec      	bcc.n	80047f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800481c:	883b      	ldrh	r3, [r7, #0]
 800481e:	0418      	lsls	r0, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	3b01      	subs	r3, #1
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	4302      	orrs	r2, r0
 800482c:	3340      	adds	r3, #64	; 0x40
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004894:	4313      	orrs	r3, r2
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	10000003 	.word	0x10000003

080048ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ba:	6013      	str	r3, [r2, #0]
}
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40007000 	.word	0x40007000

080048cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_PWREx_EnableOverDrive+0x98>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_PWREx_EnableOverDrive+0x98>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_PWREx_EnableOverDrive+0x98>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048fa:	f7fd ff07 	bl	800270c <HAL_GetTick>
 80048fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004900:	e009      	b.n	8004916 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004902:	f7fd ff03 	bl	800270c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004910:	d901      	bls.n	8004916 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e022      	b.n	800495c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d1ee      	bne.n	8004902 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 800492a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004930:	f7fd feec 	bl	800270c <HAL_GetTick>
 8004934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004936:	e009      	b.n	800494c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004938:	f7fd fee8 	bl	800270c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004946:	d901      	bls.n	800494c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e007      	b.n	800495c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004958:	d1ee      	bne.n	8004938 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	40007000 	.word	0x40007000

0800496c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e29b      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8087 	beq.w	8004a9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004990:	4b96      	ldr	r3, [pc, #600]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b04      	cmp	r3, #4
 800499a:	d00c      	beq.n	80049b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499c:	4b93      	ldr	r3, [pc, #588]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d112      	bne.n	80049ce <HAL_RCC_OscConfig+0x62>
 80049a8:	4b90      	ldr	r3, [pc, #576]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b4:	d10b      	bne.n	80049ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b6:	4b8d      	ldr	r3, [pc, #564]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d06c      	beq.n	8004a9c <HAL_RCC_OscConfig+0x130>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d168      	bne.n	8004a9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e275      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x7a>
 80049d8:	4b84      	ldr	r3, [pc, #528]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a83      	ldr	r2, [pc, #524]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e02e      	b.n	8004a44 <HAL_RCC_OscConfig+0xd8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x9c>
 80049ee:	4b7f      	ldr	r3, [pc, #508]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7e      	ldr	r2, [pc, #504]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b7c      	ldr	r3, [pc, #496]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7b      	ldr	r2, [pc, #492]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e01d      	b.n	8004a44 <HAL_RCC_OscConfig+0xd8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCC_OscConfig+0xc0>
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a75      	ldr	r2, [pc, #468]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b73      	ldr	r3, [pc, #460]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a72      	ldr	r2, [pc, #456]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e00b      	b.n	8004a44 <HAL_RCC_OscConfig+0xd8>
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a6e      	ldr	r2, [pc, #440]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6b      	ldr	r2, [pc, #428]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fd fe5e 	bl	800270c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fd fe5a 	bl	800270c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e229      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b61      	ldr	r3, [pc, #388]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe8>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fe4a 	bl	800270c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fe46 	bl	800270c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e215      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	4b57      	ldr	r3, [pc, #348]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x110>
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d069      	beq.n	8004b7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aaa:	4b50      	ldr	r3, [pc, #320]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab6:	4b4d      	ldr	r3, [pc, #308]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d11c      	bne.n	8004afc <HAL_RCC_OscConfig+0x190>
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d116      	bne.n	8004afc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x17a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e1e9      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	493d      	ldr	r1, [pc, #244]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afa:	e040      	b.n	8004b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d023      	beq.n	8004b4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b04:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a38      	ldr	r2, [pc, #224]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fdfc 	bl	800270c <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b18:	f7fd fdf8 	bl	800270c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e1c7      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b36:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4929      	ldr	r1, [pc, #164]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]
 8004b4a:	e018      	b.n	8004b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a26      	ldr	r2, [pc, #152]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd fdd8 	bl	800270c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b60:	f7fd fdd4 	bl	800270c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1a3      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d038      	beq.n	8004bfc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d019      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b92:	4b16      	ldr	r3, [pc, #88]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9e:	f7fd fdb5 	bl	800270c <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7fd fdb1 	bl	800270c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e180      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x23a>
 8004bc4:	e01a      	b.n	8004bfc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	4a08      	ldr	r2, [pc, #32]	; (8004bec <HAL_RCC_OscConfig+0x280>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd2:	f7fd fd9b 	bl	800270c <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bda:	f7fd fd97 	bl	800270c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d903      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e166      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
 8004bec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	4b92      	ldr	r3, [pc, #584]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1ee      	bne.n	8004bda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a4 	beq.w	8004d52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0a:	4b8c      	ldr	r3, [pc, #560]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	4b89      	ldr	r3, [pc, #548]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4a88      	ldr	r2, [pc, #544]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6413      	str	r3, [r2, #64]	; 0x40
 8004c22:	4b86      	ldr	r3, [pc, #536]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c32:	4b83      	ldr	r3, [pc, #524]	; (8004e40 <HAL_RCC_OscConfig+0x4d4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d118      	bne.n	8004c70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c3e:	4b80      	ldr	r3, [pc, #512]	; (8004e40 <HAL_RCC_OscConfig+0x4d4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7f      	ldr	r2, [pc, #508]	; (8004e40 <HAL_RCC_OscConfig+0x4d4>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fd5f 	bl	800270c <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c52:	f7fd fd5b 	bl	800270c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b64      	cmp	r3, #100	; 0x64
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e12a      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c64:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x4d4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x31a>
 8004c78:	4b70      	ldr	r3, [pc, #448]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a6f      	ldr	r2, [pc, #444]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
 8004c84:	e02d      	b.n	8004ce2 <HAL_RCC_OscConfig+0x376>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x33c>
 8004c8e:	4b6b      	ldr	r3, [pc, #428]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a6a      	ldr	r2, [pc, #424]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9a:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a67      	ldr	r2, [pc, #412]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	e01c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x376>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d10c      	bne.n	8004cca <HAL_RCC_OscConfig+0x35e>
 8004cb0:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	4a61      	ldr	r2, [pc, #388]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cb6:	f043 0304 	orr.w	r3, r3, #4
 8004cba:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbc:	4b5f      	ldr	r3, [pc, #380]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a5e      	ldr	r2, [pc, #376]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCC_OscConfig+0x376>
 8004cca:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a5b      	ldr	r2, [pc, #364]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd6:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cea:	f7fd fd0f 	bl	800270c <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fd fd0b 	bl	800270c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0d8      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ee      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x386>
 8004d14:	e014      	b.n	8004d40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d16:	f7fd fcf9 	bl	800270c <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7fd fcf5 	bl	800270c <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0c2      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d34:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ee      	bne.n	8004d1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a3c      	ldr	r2, [pc, #240]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80ae 	beq.w	8004eb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d5c:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d06d      	beq.n	8004e44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d14b      	bne.n	8004e08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d70:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fcc6 	bl	800270c <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fd fcc2 	bl	800270c <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e091      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	071b      	lsls	r3, r3, #28
 8004dce:	491b      	ldr	r1, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fc94 	bl	800270c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fd fc90 	bl	800270c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e05f      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x47c>
 8004e06:	e057      	b.n	8004eb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fc7a 	bl	800270c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fd fc76 	bl	800270c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e045      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCC_OscConfig+0x4d0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4b0>
 8004e3a:	e03d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x54c>
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e44:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <HAL_RCC_OscConfig+0x558>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d030      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d129      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d122      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d119      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d10f      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800

08004ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0d0      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b6a      	ldr	r3, [pc, #424]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d910      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b67      	ldr	r3, [pc, #412]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 020f 	bic.w	r2, r3, #15
 8004ef6:	4965      	ldr	r1, [pc, #404]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b63      	ldr	r3, [pc, #396]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0b8      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f28:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4a58      	ldr	r2, [pc, #352]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f40:	4b53      	ldr	r3, [pc, #332]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a52      	ldr	r2, [pc, #328]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b50      	ldr	r3, [pc, #320]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	494d      	ldr	r1, [pc, #308]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d040      	beq.n	8004fec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d115      	bne.n	8004faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	4b41      	ldr	r3, [pc, #260]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e073      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e06b      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004faa:	4b39      	ldr	r3, [pc, #228]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 0203 	bic.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4936      	ldr	r1, [pc, #216]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fba6 	bl	800270c <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc4:	f7fd fba2 	bl	800270c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e053      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 020c 	and.w	r2, r3, #12
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1eb      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b27      	ldr	r3, [pc, #156]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d210      	bcs.n	800501c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 020f 	bic.w	r2, r3, #15
 8005002:	4922      	ldr	r1, [pc, #136]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e032      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4916      	ldr	r1, [pc, #88]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	490e      	ldr	r1, [pc, #56]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800505a:	f000 f821 	bl	80050a0 <HAL_RCC_GetSysClockFreq>
 800505e:	4602      	mov	r2, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	490a      	ldr	r1, [pc, #40]	; (8005094 <HAL_RCC_ClockConfig+0x1cc>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	4a09      	ldr	r2, [pc, #36]	; (8005098 <HAL_RCC_ClockConfig+0x1d0>)
 8005074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1d4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd fa10 	bl	80024a0 <HAL_InitTick>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023c00 	.word	0x40023c00
 8005090:	40023800 	.word	0x40023800
 8005094:	0800f3a8 	.word	0x0800f3a8
 8005098:	20000000 	.word	0x20000000
 800509c:	20000004 	.word	0x20000004

080050a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a4:	b094      	sub	sp, #80	; 0x50
 80050a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	647b      	str	r3, [r7, #68]	; 0x44
 80050ac:	2300      	movs	r3, #0
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b0:	2300      	movs	r3, #0
 80050b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b8:	4b79      	ldr	r3, [pc, #484]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x40>
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	f200 80e1 	bhi.w	800528c <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x34>
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d003      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x3a>
 80050d2:	e0db      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b73      	ldr	r3, [pc, #460]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050d8:	e0db      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050da:	4b73      	ldr	r3, [pc, #460]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80050dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050de:	e0d8      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e0:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050ea:	4b6d      	ldr	r3, [pc, #436]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f6:	4b6a      	ldr	r3, [pc, #424]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	2200      	movs	r2, #0
 80050fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005100:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005108:	633b      	str	r3, [r7, #48]	; 0x30
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
 800510e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005112:	4622      	mov	r2, r4
 8005114:	462b      	mov	r3, r5
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	0159      	lsls	r1, r3, #5
 8005120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005124:	0150      	lsls	r0, r2, #5
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4621      	mov	r1, r4
 800512c:	1a51      	subs	r1, r2, r1
 800512e:	6139      	str	r1, [r7, #16]
 8005130:	4629      	mov	r1, r5
 8005132:	eb63 0301 	sbc.w	r3, r3, r1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005144:	4659      	mov	r1, fp
 8005146:	018b      	lsls	r3, r1, #6
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800514e:	4651      	mov	r1, sl
 8005150:	018a      	lsls	r2, r1, #6
 8005152:	4651      	mov	r1, sl
 8005154:	ebb2 0801 	subs.w	r8, r2, r1
 8005158:	4659      	mov	r1, fp
 800515a:	eb63 0901 	sbc.w	r9, r3, r1
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800516a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005172:	4690      	mov	r8, r2
 8005174:	4699      	mov	r9, r3
 8005176:	4623      	mov	r3, r4
 8005178:	eb18 0303 	adds.w	r3, r8, r3
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	462b      	mov	r3, r5
 8005180:	eb49 0303 	adc.w	r3, r9, r3
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005192:	4629      	mov	r1, r5
 8005194:	024b      	lsls	r3, r1, #9
 8005196:	4621      	mov	r1, r4
 8005198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800519c:	4621      	mov	r1, r4
 800519e:	024a      	lsls	r2, r1, #9
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a6:	2200      	movs	r2, #0
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051b0:	f7fb f890 	bl	80002d4 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051bc:	e058      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051be:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	2200      	movs	r2, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	4611      	mov	r1, r2
 80051ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
 80051d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0159      	lsls	r1, r3, #5
 80051e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ea:	0150      	lsls	r0, r2, #5
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4641      	mov	r1, r8
 80051f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051f6:	4649      	mov	r1, r9
 80051f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800520c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005210:	ebb2 040a 	subs.w	r4, r2, sl
 8005214:	eb63 050b 	sbc.w	r5, r3, fp
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	00eb      	lsls	r3, r5, #3
 8005222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005226:	00e2      	lsls	r2, r4, #3
 8005228:	4614      	mov	r4, r2
 800522a:	461d      	mov	r5, r3
 800522c:	4643      	mov	r3, r8
 800522e:	18e3      	adds	r3, r4, r3
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	464b      	mov	r3, r9
 8005234:	eb45 0303 	adc.w	r3, r5, r3
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005246:	4629      	mov	r1, r5
 8005248:	028b      	lsls	r3, r1, #10
 800524a:	4621      	mov	r1, r4
 800524c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005250:	4621      	mov	r1, r4
 8005252:	028a      	lsls	r2, r1, #10
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525a:	2200      	movs	r2, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	61fa      	str	r2, [r7, #28]
 8005260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005264:	f7fb f836 	bl	80002d4 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	3301      	adds	r3, #1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800528a:	e002      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005294:	4618      	mov	r0, r3
 8005296:	3750      	adds	r7, #80	; 0x50
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	007a1200 	.word	0x007a1200

080052ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000000 	.word	0x20000000

080052c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c8:	f7ff fff0 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0a9b      	lsrs	r3, r3, #10
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4903      	ldr	r1, [pc, #12]	; (80052e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	0800f3b8 	.word	0x0800f3b8

080052ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f0:	f7ff ffdc 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0b5b      	lsrs	r3, r3, #13
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4903      	ldr	r1, [pc, #12]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40023800 	.word	0x40023800
 8005310:	0800f3b8 	.word	0x0800f3b8

08005314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	220f      	movs	r2, #15
 8005322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_RCC_GetClockConfig+0x5c>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0203 	and.w	r2, r3, #3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <HAL_RCC_GetClockConfig+0x5c>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <HAL_RCC_GetClockConfig+0x5c>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_GetClockConfig+0x5c>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_RCC_GetClockConfig+0x60>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 020f 	and.w	r2, r3, #15
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800
 8005374:	40023c00 	.word	0x40023c00

08005378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053a0:	4b69      	ldr	r3, [pc, #420]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a68      	ldr	r2, [pc, #416]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053aa:	6093      	str	r3, [r2, #8]
 80053ac:	4b66      	ldr	r3, [pc, #408]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	4964      	ldr	r1, [pc, #400]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d017      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053d2:	4b5d      	ldr	r3, [pc, #372]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	4959      	ldr	r1, [pc, #356]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f0:	d101      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053fe:	2301      	movs	r3, #1
 8005400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d017      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800540e:	4b4e      	ldr	r3, [pc, #312]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	494a      	ldr	r1, [pc, #296]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542c:	d101      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800543a:	2301      	movs	r3, #1
 800543c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800544a:	2301      	movs	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 808b 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800545c:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	4a39      	ldr	r2, [pc, #228]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005466:	6413      	str	r3, [r2, #64]	; 0x40
 8005468:	4b37      	ldr	r3, [pc, #220]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005474:	4b35      	ldr	r3, [pc, #212]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a34      	ldr	r2, [pc, #208]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005480:	f7fd f944 	bl	800270c <HAL_GetTick>
 8005484:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005488:	f7fd f940 	bl	800270c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e38f      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800549a:	4b2c      	ldr	r3, [pc, #176]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054a6:	4b28      	ldr	r3, [pc, #160]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d035      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d02e      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054c4:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ce:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054da:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054e6:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054ec:	4b16      	ldr	r3, [pc, #88]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d114      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd f908 	bl	800270c <HAL_GetTick>
 80054fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fe:	e00a      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7fd f904 	bl	800270c <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e351      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0ee      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552e:	d111      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800553e:	400b      	ands	r3, r1
 8005540:	4901      	ldr	r1, [pc, #4]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
 8005546:	e00b      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005548:	40023800 	.word	0x40023800
 800554c:	40007000 	.word	0x40007000
 8005550:	0ffffcff 	.word	0x0ffffcff
 8005554:	4bac      	ldr	r3, [pc, #688]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4aab      	ldr	r2, [pc, #684]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800555e:	6093      	str	r3, [r2, #8]
 8005560:	4ba9      	ldr	r3, [pc, #676]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	49a6      	ldr	r1, [pc, #664]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556e:	4313      	orrs	r3, r2
 8005570:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800557e:	4ba2      	ldr	r3, [pc, #648]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005584:	4aa0      	ldr	r2, [pc, #640]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800558a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800558e:	4b9e      	ldr	r3, [pc, #632]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005590:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	499b      	ldr	r1, [pc, #620]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ac:	4b96      	ldr	r3, [pc, #600]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ba:	4993      	ldr	r1, [pc, #588]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055ce:	4b8e      	ldr	r3, [pc, #568]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055dc:	498a      	ldr	r1, [pc, #552]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055f0:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fe:	4982      	ldr	r1, [pc, #520]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005612:	4b7d      	ldr	r3, [pc, #500]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	4979      	ldr	r1, [pc, #484]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005634:	4b74      	ldr	r3, [pc, #464]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	4971      	ldr	r1, [pc, #452]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005656:	4b6c      	ldr	r3, [pc, #432]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f023 020c 	bic.w	r2, r3, #12
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005664:	4968      	ldr	r1, [pc, #416]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005678:	4b63      	ldr	r3, [pc, #396]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	4960      	ldr	r1, [pc, #384]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800569a:	4b5b      	ldr	r3, [pc, #364]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	4957      	ldr	r1, [pc, #348]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056bc:	4b52      	ldr	r3, [pc, #328]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	494f      	ldr	r1, [pc, #316]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056de:	4b4a      	ldr	r3, [pc, #296]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	4946      	ldr	r1, [pc, #280]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005700:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570e:	493e      	ldr	r1, [pc, #248]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005722:	4b39      	ldr	r3, [pc, #228]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005730:	4935      	ldr	r1, [pc, #212]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005744:	4b30      	ldr	r3, [pc, #192]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005752:	492d      	ldr	r1, [pc, #180]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005774:	4924      	ldr	r1, [pc, #144]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005784:	d101      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005786:	2301      	movs	r3, #1
 8005788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b4:	4914      	ldr	r1, [pc, #80]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00b      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057c8:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d8:	490b      	ldr	r1, [pc, #44]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00f      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fc:	4902      	ldr	r1, [pc, #8]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005818:	4b8a      	ldr	r3, [pc, #552]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	4986      	ldr	r1, [pc, #536]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800583c:	4b81      	ldr	r3, [pc, #516]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005842:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584c:	497d      	ldr	r1, [pc, #500]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d006      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80d6 	beq.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005868:	4b76      	ldr	r3, [pc, #472]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a75      	ldr	r2, [pc, #468]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800586e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005874:	f7fc ff4a 	bl	800270c <HAL_GetTick>
 8005878:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800587c:	f7fc ff46 	bl	800270c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e195      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800588e:	4b6d      	ldr	r3, [pc, #436]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d021      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11d      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058ae:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058bc:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c2:	0e1b      	lsrs	r3, r3, #24
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	019a      	lsls	r2, r3, #6
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	041b      	lsls	r3, r3, #16
 80058d4:	431a      	orrs	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	071b      	lsls	r3, r3, #28
 80058e2:	4958      	ldr	r1, [pc, #352]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005908:	2b00      	cmp	r3, #0
 800590a:	d02e      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005914:	d129      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005916:	4b4b      	ldr	r3, [pc, #300]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005924:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592a:	0f1b      	lsrs	r3, r3, #28
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	019a      	lsls	r2, r3, #6
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	061b      	lsls	r3, r3, #24
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	071b      	lsls	r3, r3, #28
 800594a:	493e      	ldr	r1, [pc, #248]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005952:	4b3c      	ldr	r3, [pc, #240]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005958:	f023 021f 	bic.w	r2, r3, #31
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	3b01      	subs	r3, #1
 8005962:	4938      	ldr	r1, [pc, #224]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01d      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597c:	0e1b      	lsrs	r3, r3, #24
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005984:	4b2f      	ldr	r3, [pc, #188]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	0f1b      	lsrs	r3, r3, #28
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	019a      	lsls	r2, r3, #6
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	431a      	orrs	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	071b      	lsls	r3, r3, #28
 80059aa:	4926      	ldr	r1, [pc, #152]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d011      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	019a      	lsls	r2, r3, #6
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	491a      	ldr	r1, [pc, #104]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059e2:	4b18      	ldr	r3, [pc, #96]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ee:	f7fc fe8d 	bl	800270c <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059f6:	f7fc fe89 	bl	800270c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b64      	cmp	r3, #100	; 0x64
 8005a02:	d901      	bls.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e0d8      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a08:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	f040 80ce 	bne.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a28:	f7fc fe70 	bl	800270c <HAL_GetTick>
 8005a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a30:	f7fc fe6c 	bl	800270c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b64      	cmp	r3, #100	; 0x64
 8005a3c:	d904      	bls.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0bb      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a48:	4b5e      	ldr	r3, [pc, #376]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a54:	d0ec      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02e      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d12a      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a7e:	4b51      	ldr	r3, [pc, #324]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a8c:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	0f1b      	lsrs	r3, r3, #28
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	019a      	lsls	r2, r3, #6
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	061b      	lsls	r3, r3, #24
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	071b      	lsls	r3, r3, #28
 8005ab2:	4944      	ldr	r1, [pc, #272]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005aba:	4b42      	ldr	r3, [pc, #264]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	493d      	ldr	r1, [pc, #244]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d022      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae8:	d11d      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aea:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	0e1b      	lsrs	r3, r3, #24
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005af8:	4b32      	ldr	r3, [pc, #200]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	0f1b      	lsrs	r3, r3, #28
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	019a      	lsls	r2, r3, #6
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	431a      	orrs	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	061b      	lsls	r3, r3, #24
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	071b      	lsls	r3, r3, #28
 8005b1e:	4929      	ldr	r1, [pc, #164]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d028      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	0e1b      	lsrs	r3, r3, #24
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	019a      	lsls	r2, r3, #6
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	061b      	lsls	r3, r3, #24
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	071b      	lsls	r3, r3, #28
 8005b66:	4917      	ldr	r1, [pc, #92]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4911      	ldr	r1, [pc, #68]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a0e      	ldr	r2, [pc, #56]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b90:	f7fc fdbc 	bl	800270c <HAL_GetTick>
 8005b94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b98:	f7fc fdb8 	bl	800270c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e007      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb6:	d1ef      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800

08005bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e049      	b.n	8005c6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fc fb9e 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f000 fc34 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e054      	b.n	8005d3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d01d      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_TIM_Base_Start_IT+0xe4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	; (8005d60 <HAL_TIM_Base_Start_IT+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d115      	bne.n	8005d24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_TIM_Base_Start_IT+0xec>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d015      	beq.n	8005d36 <HAL_TIM_Base_Start_IT+0xbe>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d011      	beq.n	8005d36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	e008      	b.n	8005d36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e000      	b.n	8005d38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40001800 	.word	0x40001800
 8005d64:	00010007 	.word	0x00010007

08005d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e049      	b.n	8005e0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f841 	bl	8005e16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f000 fb64 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d122      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d11b      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0202 	mvn.w	r2, #2
 8005e56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fae3 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005e72:	e005      	b.n	8005e80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fad5 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fae6 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d122      	bne.n	8005eda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d11b      	bne.n	8005eda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 0204 	mvn.w	r2, #4
 8005eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fab9 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005ec6:	e005      	b.n	8005ed4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 faab 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fabc 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d122      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d11b      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f06f 0208 	mvn.w	r2, #8
 8005efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa8f 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005f1a:	e005      	b.n	8005f28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fa81 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fa92 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d122      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d11b      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f06f 0210 	mvn.w	r2, #16
 8005f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2208      	movs	r2, #8
 8005f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa65 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005f6e:	e005      	b.n	8005f7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa57 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa68 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10e      	bne.n	8005fae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f06f 0201 	mvn.w	r2, #1
 8005fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fc f8c9 	bl	8002140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d10e      	bne.n	8005fda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fefb 	bl	8006dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe8:	d10e      	bne.n	8006008 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff4:	2b80      	cmp	r3, #128	; 0x80
 8005ff6:	d107      	bne.n	8006008 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 feee 	bl	8006de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d10e      	bne.n	8006034 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d107      	bne.n	8006034 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800602c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fa16 	bl	8006460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d10e      	bne.n	8006060 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b20      	cmp	r3, #32
 800604e:	d107      	bne.n	8006060 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0220 	mvn.w	r2, #32
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 feae 	bl	8006dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006082:	2302      	movs	r3, #2
 8006084:	e0ff      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b14      	cmp	r3, #20
 8006092:	f200 80f0 	bhi.w	8006276 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	08006277 	.word	0x08006277
 80060a4:	08006277 	.word	0x08006277
 80060a8:	08006277 	.word	0x08006277
 80060ac:	08006131 	.word	0x08006131
 80060b0:	08006277 	.word	0x08006277
 80060b4:	08006277 	.word	0x08006277
 80060b8:	08006277 	.word	0x08006277
 80060bc:	08006173 	.word	0x08006173
 80060c0:	08006277 	.word	0x08006277
 80060c4:	08006277 	.word	0x08006277
 80060c8:	08006277 	.word	0x08006277
 80060cc:	080061b3 	.word	0x080061b3
 80060d0:	08006277 	.word	0x08006277
 80060d4:	08006277 	.word	0x08006277
 80060d8:	08006277 	.word	0x08006277
 80060dc:	080061f5 	.word	0x080061f5
 80060e0:	08006277 	.word	0x08006277
 80060e4:	08006277 	.word	0x08006277
 80060e8:	08006277 	.word	0x08006277
 80060ec:	08006235 	.word	0x08006235
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fa5c 	bl	80065b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
      break;
 800612e:	e0a5      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 faae 	bl	8006698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      break;
 8006170:	e084      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fb05 	bl	8006788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0208 	orr.w	r2, r2, #8
 800618c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0204 	bic.w	r2, r2, #4
 800619c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	61da      	str	r2, [r3, #28]
      break;
 80061b0:	e064      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fb5b 	bl	8006874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	021a      	lsls	r2, r3, #8
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	61da      	str	r2, [r3, #28]
      break;
 80061f2:	e043      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fb92 	bl	8006924 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006232:	e023      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fbc4 	bl	80069c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006274:	e002      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
      break;
 800627a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop

08006290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x1c>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0b4      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x186>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4b56      	ldr	r3, [pc, #344]	; (8006420 <HAL_TIM_ConfigClockSource+0x190>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d03e      	beq.n	8006364 <HAL_TIM_ConfigClockSource+0xd4>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	f200 8087 	bhi.w	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	f000 8086 	beq.w	8006402 <HAL_TIM_ConfigClockSource+0x172>
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d87f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d01a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xa6>
 8006300:	2b70      	cmp	r3, #112	; 0x70
 8006302:	d87b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d050      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x11a>
 8006308:	2b60      	cmp	r3, #96	; 0x60
 800630a:	d877      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d03c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0xfa>
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d873      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d058      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x13a>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d86f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d064      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d86b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d060      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d867      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	2b10      	cmp	r3, #16
 8006332:	d05a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006334:	e062      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006346:	f000 fc0d 	bl	8006b64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
      break;
 8006362:	e04f      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006374:	f000 fbf6 	bl	8006b64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006386:	609a      	str	r2, [r3, #8]
      break;
 8006388:	e03c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fb6a 	bl	8006a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2150      	movs	r1, #80	; 0x50
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fbc3 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063a8:	e02c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fb89 	bl	8006ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2160      	movs	r1, #96	; 0x60
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fbb3 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063c8:	e01c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fb4a 	bl	8006a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fba3 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063e8:	e00c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 fb9a 	bl	8006b2e <TIM_ITRx_SetConfig>
      break;
 80063fa:	e003      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	fffeff88 	.word	0xfffeff88

08006424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a40      	ldr	r2, [pc, #256]	; (8006588 <TIM_Base_SetConfig+0x114>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d00f      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3d      	ldr	r2, [pc, #244]	; (800658c <TIM_Base_SetConfig+0x118>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00b      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3c      	ldr	r2, [pc, #240]	; (8006590 <TIM_Base_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3b      	ldr	r2, [pc, #236]	; (8006594 <TIM_Base_SetConfig+0x120>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3a      	ldr	r2, [pc, #232]	; (8006598 <TIM_Base_SetConfig+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2f      	ldr	r2, [pc, #188]	; (8006588 <TIM_Base_SetConfig+0x114>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d02b      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d027      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	; (800658c <TIM_Base_SetConfig+0x118>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d023      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2b      	ldr	r2, [pc, #172]	; (8006590 <TIM_Base_SetConfig+0x11c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01f      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <TIM_Base_SetConfig+0x120>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01b      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a29      	ldr	r2, [pc, #164]	; (8006598 <TIM_Base_SetConfig+0x124>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d017      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a28      	ldr	r2, [pc, #160]	; (800659c <TIM_Base_SetConfig+0x128>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a27      	ldr	r2, [pc, #156]	; (80065a0 <TIM_Base_SetConfig+0x12c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a26      	ldr	r2, [pc, #152]	; (80065a4 <TIM_Base_SetConfig+0x130>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <TIM_Base_SetConfig+0x134>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a24      	ldr	r2, [pc, #144]	; (80065ac <TIM_Base_SetConfig+0x138>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <TIM_Base_SetConfig+0x13c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d108      	bne.n	8006538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <TIM_Base_SetConfig+0x114>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_Base_SetConfig+0xf8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <TIM_Base_SetConfig+0x124>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d103      	bne.n	8006574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	615a      	str	r2, [r3, #20]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40001800 	.word	0x40001800
 80065ac:	40001c00 	.word	0x40001c00
 80065b0:	40002000 	.word	0x40002000

080065b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <TIM_OC1_SetConfig+0xd8>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f023 0302 	bic.w	r3, r3, #2
 80065fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_OC1_SetConfig+0xdc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC1_SetConfig+0x64>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a20      	ldr	r2, [pc, #128]	; (8006694 <TIM_OC1_SetConfig+0xe0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10c      	bne.n	8006632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0308 	bic.w	r3, r3, #8
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 0304 	bic.w	r3, r3, #4
 8006630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a16      	ldr	r2, [pc, #88]	; (8006690 <TIM_OC1_SetConfig+0xdc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_OC1_SetConfig+0x8e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <TIM_OC1_SetConfig+0xe0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d111      	bne.n	8006666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	fffeff8f 	.word	0xfffeff8f
 8006690:	40010000 	.word	0x40010000
 8006694:	40010400 	.word	0x40010400

08006698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0210 	bic.w	r2, r3, #16
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4b2e      	ldr	r3, [pc, #184]	; (800677c <TIM_OC2_SetConfig+0xe4>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0320 	bic.w	r3, r3, #32
 80066e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a23      	ldr	r2, [pc, #140]	; (8006780 <TIM_OC2_SetConfig+0xe8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC2_SetConfig+0x68>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a22      	ldr	r2, [pc, #136]	; (8006784 <TIM_OC2_SetConfig+0xec>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10d      	bne.n	800671c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a18      	ldr	r2, [pc, #96]	; (8006780 <TIM_OC2_SetConfig+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d003      	beq.n	800672c <TIM_OC2_SetConfig+0x94>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a17      	ldr	r2, [pc, #92]	; (8006784 <TIM_OC2_SetConfig+0xec>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d113      	bne.n	8006754 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	feff8fff 	.word	0xfeff8fff
 8006780:	40010000 	.word	0x40010000
 8006784:	40010400 	.word	0x40010400

08006788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <TIM_OC3_SetConfig+0xe0>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0303 	bic.w	r3, r3, #3
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <TIM_OC3_SetConfig+0xe4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_OC3_SetConfig+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <TIM_OC3_SetConfig+0xe8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10d      	bne.n	800680a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a17      	ldr	r2, [pc, #92]	; (800686c <TIM_OC3_SetConfig+0xe4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d003      	beq.n	800681a <TIM_OC3_SetConfig+0x92>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a16      	ldr	r2, [pc, #88]	; (8006870 <TIM_OC3_SetConfig+0xe8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d113      	bne.n	8006842 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	fffeff8f 	.word	0xfffeff8f
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400

08006874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <TIM_OC4_SetConfig+0xa4>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	031b      	lsls	r3, r3, #12
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <TIM_OC4_SetConfig+0xa8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC4_SetConfig+0x68>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a12      	ldr	r2, [pc, #72]	; (8006920 <TIM_OC4_SetConfig+0xac>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	feff8fff 	.word	0xfeff8fff
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <TIM_OC5_SetConfig+0x98>)
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <TIM_OC5_SetConfig+0x9c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC5_SetConfig+0x5e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <TIM_OC5_SetConfig+0xa0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d109      	bne.n	8006996 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	fffeff8f 	.word	0xfffeff8f
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400

080069c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <TIM_OC6_SetConfig+0x9c>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <TIM_OC6_SetConfig+0xa0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_OC6_SetConfig+0x60>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a12      	ldr	r2, [pc, #72]	; (8006a6c <TIM_OC6_SetConfig+0xa4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d109      	bne.n	8006a3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	feff8fff 	.word	0xfeff8fff
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40010400 	.word	0x40010400

08006a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0201 	bic.w	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f023 030a 	bic.w	r3, r3, #10
 8006aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b087      	sub	sp, #28
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0210 	bic.w	r2, r3, #16
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b085      	sub	sp, #20
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f043 0307 	orr.w	r3, r3, #7
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	021a      	lsls	r2, r3, #8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	609a      	str	r2, [r3, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e06d      	b.n	8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a30      	ldr	r2, [pc, #192]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2f      	ldr	r2, [pc, #188]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d108      	bne.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a20      	ldr	r2, [pc, #128]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d022      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d01d      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10c      	bne.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	40000c00 	.word	0x40000c00
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40001800 	.word	0x40001800

08006cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e065      	b.n	8006da8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a16      	ldr	r2, [pc, #88]	; (8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d115      	bne.n	8006d96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400

08006dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e040      	b.n	8006e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fb fae0 	bl	80023e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2224      	movs	r2, #36	; 0x24
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f82c 	bl	8006e94 <UART_SetConfig>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e022      	b.n	8006e8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa84 	bl	800735c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fb0b 	bl	80074a0 <UART_CheckIdleState>
 8006e8a:	4603      	mov	r3, r0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4ba6      	ldr	r3, [pc, #664]	; (8007158 <UART_SetConfig+0x2c4>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a94      	ldr	r2, [pc, #592]	; (800715c <UART_SetConfig+0x2c8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d120      	bne.n	8006f52 <UART_SetConfig+0xbe>
 8006f10:	4b93      	ldr	r3, [pc, #588]	; (8007160 <UART_SetConfig+0x2cc>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d816      	bhi.n	8006f4c <UART_SetConfig+0xb8>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <UART_SetConfig+0x90>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f41 	.word	0x08006f41
 8006f2c:	08006f3b 	.word	0x08006f3b
 8006f30:	08006f47 	.word	0x08006f47
 8006f34:	2301      	movs	r3, #1
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e150      	b.n	80071dc <UART_SetConfig+0x348>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	77fb      	strb	r3, [r7, #31]
 8006f3e:	e14d      	b.n	80071dc <UART_SetConfig+0x348>
 8006f40:	2304      	movs	r3, #4
 8006f42:	77fb      	strb	r3, [r7, #31]
 8006f44:	e14a      	b.n	80071dc <UART_SetConfig+0x348>
 8006f46:	2308      	movs	r3, #8
 8006f48:	77fb      	strb	r3, [r7, #31]
 8006f4a:	e147      	b.n	80071dc <UART_SetConfig+0x348>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e144      	b.n	80071dc <UART_SetConfig+0x348>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a83      	ldr	r2, [pc, #524]	; (8007164 <UART_SetConfig+0x2d0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d132      	bne.n	8006fc2 <UART_SetConfig+0x12e>
 8006f5c:	4b80      	ldr	r3, [pc, #512]	; (8007160 <UART_SetConfig+0x2cc>)
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f62:	f003 030c 	and.w	r3, r3, #12
 8006f66:	2b0c      	cmp	r3, #12
 8006f68:	d828      	bhi.n	8006fbc <UART_SetConfig+0x128>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <UART_SetConfig+0xdc>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006fa5 	.word	0x08006fa5
 8006f74:	08006fbd 	.word	0x08006fbd
 8006f78:	08006fbd 	.word	0x08006fbd
 8006f7c:	08006fbd 	.word	0x08006fbd
 8006f80:	08006fb1 	.word	0x08006fb1
 8006f84:	08006fbd 	.word	0x08006fbd
 8006f88:	08006fbd 	.word	0x08006fbd
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08006fab 	.word	0x08006fab
 8006f94:	08006fbd 	.word	0x08006fbd
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fbd 	.word	0x08006fbd
 8006fa0:	08006fb7 	.word	0x08006fb7
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e118      	b.n	80071dc <UART_SetConfig+0x348>
 8006faa:	2302      	movs	r3, #2
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e115      	b.n	80071dc <UART_SetConfig+0x348>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e112      	b.n	80071dc <UART_SetConfig+0x348>
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	e10f      	b.n	80071dc <UART_SetConfig+0x348>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	77fb      	strb	r3, [r7, #31]
 8006fc0:	e10c      	b.n	80071dc <UART_SetConfig+0x348>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a68      	ldr	r2, [pc, #416]	; (8007168 <UART_SetConfig+0x2d4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d120      	bne.n	800700e <UART_SetConfig+0x17a>
 8006fcc:	4b64      	ldr	r3, [pc, #400]	; (8007160 <UART_SetConfig+0x2cc>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fd6:	2b30      	cmp	r3, #48	; 0x30
 8006fd8:	d013      	beq.n	8007002 <UART_SetConfig+0x16e>
 8006fda:	2b30      	cmp	r3, #48	; 0x30
 8006fdc:	d814      	bhi.n	8007008 <UART_SetConfig+0x174>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d009      	beq.n	8006ff6 <UART_SetConfig+0x162>
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d810      	bhi.n	8007008 <UART_SetConfig+0x174>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <UART_SetConfig+0x15c>
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d006      	beq.n	8006ffc <UART_SetConfig+0x168>
 8006fee:	e00b      	b.n	8007008 <UART_SetConfig+0x174>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e0f2      	b.n	80071dc <UART_SetConfig+0x348>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e0ef      	b.n	80071dc <UART_SetConfig+0x348>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e0ec      	b.n	80071dc <UART_SetConfig+0x348>
 8007002:	2308      	movs	r3, #8
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e0e9      	b.n	80071dc <UART_SetConfig+0x348>
 8007008:	2310      	movs	r3, #16
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e0e6      	b.n	80071dc <UART_SetConfig+0x348>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a56      	ldr	r2, [pc, #344]	; (800716c <UART_SetConfig+0x2d8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d120      	bne.n	800705a <UART_SetConfig+0x1c6>
 8007018:	4b51      	ldr	r3, [pc, #324]	; (8007160 <UART_SetConfig+0x2cc>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007022:	2bc0      	cmp	r3, #192	; 0xc0
 8007024:	d013      	beq.n	800704e <UART_SetConfig+0x1ba>
 8007026:	2bc0      	cmp	r3, #192	; 0xc0
 8007028:	d814      	bhi.n	8007054 <UART_SetConfig+0x1c0>
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d009      	beq.n	8007042 <UART_SetConfig+0x1ae>
 800702e:	2b80      	cmp	r3, #128	; 0x80
 8007030:	d810      	bhi.n	8007054 <UART_SetConfig+0x1c0>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <UART_SetConfig+0x1a8>
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d006      	beq.n	8007048 <UART_SetConfig+0x1b4>
 800703a:	e00b      	b.n	8007054 <UART_SetConfig+0x1c0>
 800703c:	2300      	movs	r3, #0
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e0cc      	b.n	80071dc <UART_SetConfig+0x348>
 8007042:	2302      	movs	r3, #2
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e0c9      	b.n	80071dc <UART_SetConfig+0x348>
 8007048:	2304      	movs	r3, #4
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e0c6      	b.n	80071dc <UART_SetConfig+0x348>
 800704e:	2308      	movs	r3, #8
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e0c3      	b.n	80071dc <UART_SetConfig+0x348>
 8007054:	2310      	movs	r3, #16
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e0c0      	b.n	80071dc <UART_SetConfig+0x348>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a44      	ldr	r2, [pc, #272]	; (8007170 <UART_SetConfig+0x2dc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d125      	bne.n	80070b0 <UART_SetConfig+0x21c>
 8007064:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <UART_SetConfig+0x2cc>)
 8007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007072:	d017      	beq.n	80070a4 <UART_SetConfig+0x210>
 8007074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007078:	d817      	bhi.n	80070aa <UART_SetConfig+0x216>
 800707a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707e:	d00b      	beq.n	8007098 <UART_SetConfig+0x204>
 8007080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007084:	d811      	bhi.n	80070aa <UART_SetConfig+0x216>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <UART_SetConfig+0x1fe>
 800708a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708e:	d006      	beq.n	800709e <UART_SetConfig+0x20a>
 8007090:	e00b      	b.n	80070aa <UART_SetConfig+0x216>
 8007092:	2300      	movs	r3, #0
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e0a1      	b.n	80071dc <UART_SetConfig+0x348>
 8007098:	2302      	movs	r3, #2
 800709a:	77fb      	strb	r3, [r7, #31]
 800709c:	e09e      	b.n	80071dc <UART_SetConfig+0x348>
 800709e:	2304      	movs	r3, #4
 80070a0:	77fb      	strb	r3, [r7, #31]
 80070a2:	e09b      	b.n	80071dc <UART_SetConfig+0x348>
 80070a4:	2308      	movs	r3, #8
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	e098      	b.n	80071dc <UART_SetConfig+0x348>
 80070aa:	2310      	movs	r3, #16
 80070ac:	77fb      	strb	r3, [r7, #31]
 80070ae:	e095      	b.n	80071dc <UART_SetConfig+0x348>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <UART_SetConfig+0x2e0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d125      	bne.n	8007106 <UART_SetConfig+0x272>
 80070ba:	4b29      	ldr	r3, [pc, #164]	; (8007160 <UART_SetConfig+0x2cc>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070c8:	d017      	beq.n	80070fa <UART_SetConfig+0x266>
 80070ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ce:	d817      	bhi.n	8007100 <UART_SetConfig+0x26c>
 80070d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d4:	d00b      	beq.n	80070ee <UART_SetConfig+0x25a>
 80070d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070da:	d811      	bhi.n	8007100 <UART_SetConfig+0x26c>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <UART_SetConfig+0x254>
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d006      	beq.n	80070f4 <UART_SetConfig+0x260>
 80070e6:	e00b      	b.n	8007100 <UART_SetConfig+0x26c>
 80070e8:	2301      	movs	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	e076      	b.n	80071dc <UART_SetConfig+0x348>
 80070ee:	2302      	movs	r3, #2
 80070f0:	77fb      	strb	r3, [r7, #31]
 80070f2:	e073      	b.n	80071dc <UART_SetConfig+0x348>
 80070f4:	2304      	movs	r3, #4
 80070f6:	77fb      	strb	r3, [r7, #31]
 80070f8:	e070      	b.n	80071dc <UART_SetConfig+0x348>
 80070fa:	2308      	movs	r3, #8
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e06d      	b.n	80071dc <UART_SetConfig+0x348>
 8007100:	2310      	movs	r3, #16
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e06a      	b.n	80071dc <UART_SetConfig+0x348>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1b      	ldr	r2, [pc, #108]	; (8007178 <UART_SetConfig+0x2e4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d138      	bne.n	8007182 <UART_SetConfig+0x2ee>
 8007110:	4b13      	ldr	r3, [pc, #76]	; (8007160 <UART_SetConfig+0x2cc>)
 8007112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800711a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800711e:	d017      	beq.n	8007150 <UART_SetConfig+0x2bc>
 8007120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007124:	d82a      	bhi.n	800717c <UART_SetConfig+0x2e8>
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712a:	d00b      	beq.n	8007144 <UART_SetConfig+0x2b0>
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007130:	d824      	bhi.n	800717c <UART_SetConfig+0x2e8>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <UART_SetConfig+0x2aa>
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713a:	d006      	beq.n	800714a <UART_SetConfig+0x2b6>
 800713c:	e01e      	b.n	800717c <UART_SetConfig+0x2e8>
 800713e:	2300      	movs	r3, #0
 8007140:	77fb      	strb	r3, [r7, #31]
 8007142:	e04b      	b.n	80071dc <UART_SetConfig+0x348>
 8007144:	2302      	movs	r3, #2
 8007146:	77fb      	strb	r3, [r7, #31]
 8007148:	e048      	b.n	80071dc <UART_SetConfig+0x348>
 800714a:	2304      	movs	r3, #4
 800714c:	77fb      	strb	r3, [r7, #31]
 800714e:	e045      	b.n	80071dc <UART_SetConfig+0x348>
 8007150:	2308      	movs	r3, #8
 8007152:	77fb      	strb	r3, [r7, #31]
 8007154:	e042      	b.n	80071dc <UART_SetConfig+0x348>
 8007156:	bf00      	nop
 8007158:	efff69f3 	.word	0xefff69f3
 800715c:	40011000 	.word	0x40011000
 8007160:	40023800 	.word	0x40023800
 8007164:	40004400 	.word	0x40004400
 8007168:	40004800 	.word	0x40004800
 800716c:	40004c00 	.word	0x40004c00
 8007170:	40005000 	.word	0x40005000
 8007174:	40011400 	.word	0x40011400
 8007178:	40007800 	.word	0x40007800
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e02c      	b.n	80071dc <UART_SetConfig+0x348>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a72      	ldr	r2, [pc, #456]	; (8007350 <UART_SetConfig+0x4bc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d125      	bne.n	80071d8 <UART_SetConfig+0x344>
 800718c:	4b71      	ldr	r3, [pc, #452]	; (8007354 <UART_SetConfig+0x4c0>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800719a:	d017      	beq.n	80071cc <UART_SetConfig+0x338>
 800719c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071a0:	d817      	bhi.n	80071d2 <UART_SetConfig+0x33e>
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a6:	d00b      	beq.n	80071c0 <UART_SetConfig+0x32c>
 80071a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ac:	d811      	bhi.n	80071d2 <UART_SetConfig+0x33e>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <UART_SetConfig+0x326>
 80071b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b6:	d006      	beq.n	80071c6 <UART_SetConfig+0x332>
 80071b8:	e00b      	b.n	80071d2 <UART_SetConfig+0x33e>
 80071ba:	2300      	movs	r3, #0
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e00d      	b.n	80071dc <UART_SetConfig+0x348>
 80071c0:	2302      	movs	r3, #2
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e00a      	b.n	80071dc <UART_SetConfig+0x348>
 80071c6:	2304      	movs	r3, #4
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e007      	b.n	80071dc <UART_SetConfig+0x348>
 80071cc:	2308      	movs	r3, #8
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e004      	b.n	80071dc <UART_SetConfig+0x348>
 80071d2:	2310      	movs	r3, #16
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e001      	b.n	80071dc <UART_SetConfig+0x348>
 80071d8:	2310      	movs	r3, #16
 80071da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e4:	d15b      	bne.n	800729e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d828      	bhi.n	800723e <UART_SetConfig+0x3aa>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x360>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	0800723f 	.word	0x0800723f
 8007204:	0800722f 	.word	0x0800722f
 8007208:	0800723f 	.word	0x0800723f
 800720c:	0800723f 	.word	0x0800723f
 8007210:	0800723f 	.word	0x0800723f
 8007214:	08007237 	.word	0x08007237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007218:	f7fe f854 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 800721c:	61b8      	str	r0, [r7, #24]
        break;
 800721e:	e013      	b.n	8007248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007220:	f7fe f864 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 8007224:	61b8      	str	r0, [r7, #24]
        break;
 8007226:	e00f      	b.n	8007248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007228:	4b4b      	ldr	r3, [pc, #300]	; (8007358 <UART_SetConfig+0x4c4>)
 800722a:	61bb      	str	r3, [r7, #24]
        break;
 800722c:	e00c      	b.n	8007248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722e:	f7fd ff37 	bl	80050a0 <HAL_RCC_GetSysClockFreq>
 8007232:	61b8      	str	r0, [r7, #24]
        break;
 8007234:	e008      	b.n	8007248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	61bb      	str	r3, [r7, #24]
        break;
 800723c:	e004      	b.n	8007248 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	77bb      	strb	r3, [r7, #30]
        break;
 8007246:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d074      	beq.n	8007338 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	005a      	lsls	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d916      	bls.n	8007298 <UART_SetConfig+0x404>
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d212      	bcs.n	8007298 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f023 030f 	bic.w	r3, r3, #15
 800727a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	b29a      	uxth	r2, r3
 8007288:	89fb      	ldrh	r3, [r7, #14]
 800728a:	4313      	orrs	r3, r2
 800728c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	89fa      	ldrh	r2, [r7, #14]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	e04f      	b.n	8007338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	77bb      	strb	r3, [r7, #30]
 800729c:	e04c      	b.n	8007338 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800729e:	7ffb      	ldrb	r3, [r7, #31]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d828      	bhi.n	80072f6 <UART_SetConfig+0x462>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <UART_SetConfig+0x418>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072d1 	.word	0x080072d1
 80072b0:	080072d9 	.word	0x080072d9
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	080072f7 	.word	0x080072f7
 80072bc:	080072e7 	.word	0x080072e7
 80072c0:	080072f7 	.word	0x080072f7
 80072c4:	080072f7 	.word	0x080072f7
 80072c8:	080072f7 	.word	0x080072f7
 80072cc:	080072ef 	.word	0x080072ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d0:	f7fd fff8 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 80072d4:	61b8      	str	r0, [r7, #24]
        break;
 80072d6:	e013      	b.n	8007300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072d8:	f7fe f808 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 80072dc:	61b8      	str	r0, [r7, #24]
        break;
 80072de:	e00f      	b.n	8007300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e0:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <UART_SetConfig+0x4c4>)
 80072e2:	61bb      	str	r3, [r7, #24]
        break;
 80072e4:	e00c      	b.n	8007300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072e6:	f7fd fedb 	bl	80050a0 <HAL_RCC_GetSysClockFreq>
 80072ea:	61b8      	str	r0, [r7, #24]
        break;
 80072ec:	e008      	b.n	8007300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f2:	61bb      	str	r3, [r7, #24]
        break;
 80072f4:	e004      	b.n	8007300 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	77bb      	strb	r3, [r7, #30]
        break;
 80072fe:	bf00      	nop
    }

    if (pclk != 0U)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d018      	beq.n	8007338 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	085a      	lsrs	r2, r3, #1
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	441a      	add	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b0f      	cmp	r3, #15
 800731e:	d909      	bls.n	8007334 <UART_SetConfig+0x4a0>
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007326:	d205      	bcs.n	8007334 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	b29a      	uxth	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60da      	str	r2, [r3, #12]
 8007332:	e001      	b.n	8007338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007344:	7fbb      	ldrb	r3, [r7, #30]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40007c00 	.word	0x40007c00
 8007354:	40023800 	.word	0x40023800
 8007358:	00f42400 	.word	0x00f42400

0800735c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01a      	beq.n	8007472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800745a:	d10a      	bne.n	8007472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  }
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074b0:	f7fb f92c 	bl	800270c <HAL_GetTick>
 80074b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d10e      	bne.n	80074e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f831 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e027      	b.n	8007532 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d10e      	bne.n	800750e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f81b 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e011      	b.n	8007532 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b09c      	sub	sp, #112	; 0x70
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754a:	e0a7      	b.n	800769c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	f000 80a3 	beq.w	800769c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007556:	f7fb f8d9 	bl	800270c <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <UART_WaitOnFlagUntilTimeout+0x32>
 8007566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007568:	2b00      	cmp	r3, #0
 800756a:	d13f      	bne.n	80075ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007580:	667b      	str	r3, [r7, #100]	; 0x64
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800758a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800758c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075be:	64ba      	str	r2, [r7, #72]	; 0x48
 80075c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e068      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d050      	beq.n	800769c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007608:	d148      	bne.n	800769c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007612:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
 8007634:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	613b      	str	r3, [r7, #16]
   return(result);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	66bb      	str	r3, [r7, #104]	; 0x68
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007666:	623a      	str	r2, [r7, #32]
 8007668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	69f9      	ldr	r1, [r7, #28]
 800766c:	6a3a      	ldr	r2, [r7, #32]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	61bb      	str	r3, [r7, #24]
   return(result);
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e010      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4013      	ands	r3, r2
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	bf0c      	ite	eq
 80076ac:	2301      	moveq	r3, #1
 80076ae:	2300      	movne	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	f43f af48 	beq.w	800754c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3770      	adds	r7, #112	; 0x70
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c8:	b084      	sub	sp, #16
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	f107 001c 	add.w	r0, r7, #28
 80076d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d120      	bne.n	8007722 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	4b20      	ldr	r3, [pc, #128]	; (8007774 <USB_CoreInit+0xac>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007706:	2b01      	cmp	r3, #1
 8007708:	d105      	bne.n	8007716 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fbee 	bl	8008ef8 <USB_CoreReset>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e010      	b.n	8007744 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fbe2 	bl	8008ef8 <USB_CoreReset>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	2b01      	cmp	r3, #1
 8007748:	d10b      	bne.n	8007762 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f043 0206 	orr.w	r2, r3, #6
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800776e:	b004      	add	sp, #16
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	ffbdffbf 	.word	0xffbdffbf

08007778 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d165      	bne.n	8007858 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a41      	ldr	r2, [pc, #260]	; (8007894 <USB_SetTurnaroundTime+0x11c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d906      	bls.n	80077a2 <USB_SetTurnaroundTime+0x2a>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a40      	ldr	r2, [pc, #256]	; (8007898 <USB_SetTurnaroundTime+0x120>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d202      	bcs.n	80077a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800779c:	230f      	movs	r3, #15
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e062      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a3c      	ldr	r2, [pc, #240]	; (8007898 <USB_SetTurnaroundTime+0x120>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d306      	bcc.n	80077b8 <USB_SetTurnaroundTime+0x40>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a3b      	ldr	r2, [pc, #236]	; (800789c <USB_SetTurnaroundTime+0x124>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d202      	bcs.n	80077b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077b2:	230e      	movs	r3, #14
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e057      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a38      	ldr	r2, [pc, #224]	; (800789c <USB_SetTurnaroundTime+0x124>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d306      	bcc.n	80077ce <USB_SetTurnaroundTime+0x56>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a37      	ldr	r2, [pc, #220]	; (80078a0 <USB_SetTurnaroundTime+0x128>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d202      	bcs.n	80077ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80077c8:	230d      	movs	r3, #13
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e04c      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4a33      	ldr	r2, [pc, #204]	; (80078a0 <USB_SetTurnaroundTime+0x128>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d306      	bcc.n	80077e4 <USB_SetTurnaroundTime+0x6c>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	4a32      	ldr	r2, [pc, #200]	; (80078a4 <USB_SetTurnaroundTime+0x12c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d802      	bhi.n	80077e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80077de:	230c      	movs	r3, #12
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	e041      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4a2f      	ldr	r2, [pc, #188]	; (80078a4 <USB_SetTurnaroundTime+0x12c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d906      	bls.n	80077fa <USB_SetTurnaroundTime+0x82>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a2e      	ldr	r2, [pc, #184]	; (80078a8 <USB_SetTurnaroundTime+0x130>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d802      	bhi.n	80077fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077f4:	230b      	movs	r3, #11
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e036      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4a2a      	ldr	r2, [pc, #168]	; (80078a8 <USB_SetTurnaroundTime+0x130>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d906      	bls.n	8007810 <USB_SetTurnaroundTime+0x98>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4a29      	ldr	r2, [pc, #164]	; (80078ac <USB_SetTurnaroundTime+0x134>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d802      	bhi.n	8007810 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800780a:	230a      	movs	r3, #10
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e02b      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4a26      	ldr	r2, [pc, #152]	; (80078ac <USB_SetTurnaroundTime+0x134>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d906      	bls.n	8007826 <USB_SetTurnaroundTime+0xae>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <USB_SetTurnaroundTime+0x138>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d202      	bcs.n	8007826 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007820:	2309      	movs	r3, #9
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e020      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <USB_SetTurnaroundTime+0x138>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d306      	bcc.n	800783c <USB_SetTurnaroundTime+0xc4>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <USB_SetTurnaroundTime+0x13c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d802      	bhi.n	800783c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007836:	2308      	movs	r3, #8
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e015      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <USB_SetTurnaroundTime+0x13c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d906      	bls.n	8007852 <USB_SetTurnaroundTime+0xda>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <USB_SetTurnaroundTime+0x140>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d202      	bcs.n	8007852 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800784c:	2307      	movs	r3, #7
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e00a      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007852:	2306      	movs	r3, #6
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e007      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d102      	bne.n	8007864 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800785e:	2309      	movs	r3, #9
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e001      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007864:	2309      	movs	r3, #9
 8007866:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	00d8acbf 	.word	0x00d8acbf
 8007898:	00e4e1c0 	.word	0x00e4e1c0
 800789c:	00f42400 	.word	0x00f42400
 80078a0:	01067380 	.word	0x01067380
 80078a4:	011a499f 	.word	0x011a499f
 80078a8:	01312cff 	.word	0x01312cff
 80078ac:	014ca43f 	.word	0x014ca43f
 80078b0:	016e3600 	.word	0x016e3600
 80078b4:	01a6ab1f 	.word	0x01a6ab1f
 80078b8:	01e84800 	.word	0x01e84800

080078bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f043 0201 	orr.w	r2, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d115      	bne.n	800794e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800792e:	2001      	movs	r0, #1
 8007930:	f7fa fef8 	bl	8002724 <HAL_Delay>
      ms++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fa4b 	bl	8008dd6 <USB_GetMode>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	d01e      	beq.n	8007984 <USB_SetCurrentMode+0x84>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b31      	cmp	r3, #49	; 0x31
 800794a:	d9f0      	bls.n	800792e <USB_SetCurrentMode+0x2e>
 800794c:	e01a      	b.n	8007984 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d115      	bne.n	8007980 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007960:	2001      	movs	r0, #1
 8007962:	f7fa fedf 	bl	8002724 <HAL_Delay>
      ms++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fa32 	bl	8008dd6 <USB_GetMode>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <USB_SetCurrentMode+0x84>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b31      	cmp	r3, #49	; 0x31
 800797c:	d9f0      	bls.n	8007960 <USB_SetCurrentMode+0x60>
 800797e:	e001      	b.n	8007984 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e005      	b.n	8007990 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b32      	cmp	r3, #50	; 0x32
 8007988:	d101      	bne.n	800798e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007998:	b084      	sub	sp, #16
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	e009      	b.n	80079cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	3340      	adds	r3, #64	; 0x40
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3301      	adds	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2b0e      	cmp	r3, #14
 80079d0:	d9f2      	bls.n	80079b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11c      	bne.n	8007a12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e6:	f043 0302 	orr.w	r3, r3, #2
 80079ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e005      	b.n	8007a1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a24:	461a      	mov	r2, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a30:	4619      	mov	r1, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a38:	461a      	mov	r2, r3
 8007a3a:	680b      	ldr	r3, [r1, #0]
 8007a3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10c      	bne.n	8007a5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f965 	bl	8007d1c <USB_SetDevSpeed>
 8007a52:	e008      	b.n	8007a66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a54:	2101      	movs	r1, #1
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f960 	bl	8007d1c <USB_SetDevSpeed>
 8007a5c:	e003      	b.n	8007a66 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a5e:	2103      	movs	r1, #3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f95b 	bl	8007d1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a66:	2110      	movs	r1, #16
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f8f3 	bl	8007c54 <USB_FlushTxFifo>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f91f 	bl	8007cbc <USB_FlushRxFifo>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2300      	movs	r3, #0
 8007a92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	e043      	b.n	8007b3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac8:	d118      	bne.n	8007afc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	461a      	mov	r2, r3
 8007ade:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	e013      	b.n	8007b0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	461a      	mov	r2, r3
 8007af4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	e008      	b.n	8007b0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	3301      	adds	r3, #1
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3b7      	bcc.n	8007ab2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	e043      	b.n	8007bd0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b5e:	d118      	bne.n	8007b92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	461a      	mov	r2, r3
 8007b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e013      	b.n	8007ba4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e008      	b.n	8007ba4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d3b7      	bcc.n	8007b48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f043 0210 	orr.w	r2, r3, #16
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	4b0e      	ldr	r3, [pc, #56]	; (8007c4c <USB_DevInit+0x2b4>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f043 0208 	orr.w	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d105      	bne.n	8007c3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699a      	ldr	r2, [r3, #24]
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <USB_DevInit+0x2b8>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c48:	b004      	add	sp, #16
 8007c4a:	4770      	bx	lr
 8007c4c:	803c3800 	.word	0x803c3800
 8007c50:	40000004 	.word	0x40000004

08007c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a13      	ldr	r2, [pc, #76]	; (8007cb8 <USB_FlushTxFifo+0x64>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d901      	bls.n	8007c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e01b      	b.n	8007cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	daf2      	bge.n	8007c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	019b      	lsls	r3, r3, #6
 8007c84:	f043 0220 	orr.w	r2, r3, #32
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <USB_FlushTxFifo+0x64>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e006      	b.n	8007cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d0f0      	beq.n	8007c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	00030d40 	.word	0x00030d40

08007cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <USB_FlushRxFifo+0x5c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d901      	bls.n	8007cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e018      	b.n	8007d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	daf2      	bge.n	8007cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2210      	movs	r2, #16
 8007cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a08      	ldr	r2, [pc, #32]	; (8007d18 <USB_FlushRxFifo+0x5c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d901      	bls.n	8007cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e006      	b.n	8007d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0310 	and.w	r3, r3, #16
 8007d06:	2b10      	cmp	r3, #16
 8007d08:	d0f0      	beq.n	8007cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	00030d40 	.word	0x00030d40

08007d1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 0306 	and.w	r3, r3, #6
 8007d66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]
 8007d72:	e00a      	b.n	8007d8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d002      	beq.n	8007d80 <USB_GetDevSpeed+0x32>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b06      	cmp	r3, #6
 8007d7e:	d102      	bne.n	8007d86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d80:	2302      	movs	r3, #2
 8007d82:	75fb      	strb	r3, [r7, #23]
 8007d84:	e001      	b.n	8007d8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d86:	230f      	movs	r3, #15
 8007d88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d139      	bne.n	8007e28 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d153      	bne.n	8007e94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	791b      	ldrb	r3, [r3, #4]
 8007e06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	059b      	lsls	r3, r3, #22
 8007e0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e10:	431a      	orrs	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	0159      	lsls	r1, r3, #5
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	440b      	add	r3, r1
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4b20      	ldr	r3, [pc, #128]	; (8007ea4 <USB_ActivateEndpoint+0x10c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]
 8007e26:	e035      	b.n	8007e94 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	2101      	movs	r1, #1
 8007e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	68f9      	ldr	r1, [r7, #12]
 8007e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e46:	4313      	orrs	r3, r2
 8007e48:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d119      	bne.n	8007e94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	791b      	ldrb	r3, [r3, #4]
 8007e7a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	0159      	lsls	r1, r3, #5
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	440b      	add	r3, r1
 8007e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <USB_ActivateEndpoint+0x10c>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	10008000 	.word	0x10008000

08007ea8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d161      	bne.n	8007f88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eda:	d11f      	bne.n	8007f1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007efa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	0151      	lsls	r1, r2, #5
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	440a      	add	r2, r1
 8007f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	43db      	mvns	r3, r3
 8007f36:	68f9      	ldr	r1, [r7, #12]
 8007f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	2101      	movs	r1, #1
 8007f52:	fa01 f303 	lsl.w	r3, r1, r3
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f60:	4013      	ands	r3, r2
 8007f62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	0159      	lsls	r1, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	440b      	add	r3, r1
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4b35      	ldr	r3, [pc, #212]	; (8008058 <USB_DeactivateEndpoint+0x1b0>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	600b      	str	r3, [r1, #0]
 8007f86:	e060      	b.n	800804a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f9e:	d11f      	bne.n	8007fe0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008000:	4013      	ands	r3, r2
 8008002:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	69da      	ldr	r2, [r3, #28]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	2101      	movs	r1, #1
 8008016:	fa01 f303 	lsl.w	r3, r1, r3
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	43db      	mvns	r3, r3
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008024:	4013      	ands	r3, r2
 8008026:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	0159      	lsls	r1, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	440b      	add	r3, r1
 800803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008042:	4619      	mov	r1, r3
 8008044:	4b05      	ldr	r3, [pc, #20]	; (800805c <USB_DeactivateEndpoint+0x1b4>)
 8008046:	4013      	ands	r3, r2
 8008048:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	ec337800 	.word	0xec337800
 800805c:	eff37800 	.word	0xeff37800

08008060 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af02      	add	r7, sp, #8
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	f040 8163 	bne.w	8008348 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d132      	bne.n	80080f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	0159      	lsls	r1, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	440b      	add	r3, r1
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	4619      	mov	r1, r3
 80080a6:	4ba5      	ldr	r3, [pc, #660]	; (800833c <USB_EPStartXfer+0x2dc>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	0159      	lsls	r1, r3, #5
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	440b      	add	r3, r1
 80080e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e6:	4619      	mov	r1, r3
 80080e8:	4b95      	ldr	r3, [pc, #596]	; (8008340 <USB_EPStartXfer+0x2e0>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	610b      	str	r3, [r1, #16]
 80080ee:	e074      	b.n	80081da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	0159      	lsls	r1, r3, #5
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	440b      	add	r3, r1
 8008106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810a:	4619      	mov	r1, r3
 800810c:	4b8c      	ldr	r3, [pc, #560]	; (8008340 <USB_EPStartXfer+0x2e0>)
 800810e:	4013      	ands	r3, r2
 8008110:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	0159      	lsls	r1, r3, #5
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	440b      	add	r3, r1
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	4619      	mov	r1, r3
 800812e:	4b83      	ldr	r3, [pc, #524]	; (800833c <USB_EPStartXfer+0x2dc>)
 8008130:	4013      	ands	r3, r2
 8008132:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008140:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6999      	ldr	r1, [r3, #24]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	440b      	add	r3, r1
 800814c:	1e59      	subs	r1, r3, #1
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	fbb1 f3f3 	udiv	r3, r1, r3
 8008156:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008158:	4b7a      	ldr	r3, [pc, #488]	; (8008344 <USB_EPStartXfer+0x2e4>)
 800815a:	400b      	ands	r3, r1
 800815c:	69b9      	ldr	r1, [r7, #24]
 800815e:	0148      	lsls	r0, r1, #5
 8008160:	69f9      	ldr	r1, [r7, #28]
 8008162:	4401      	add	r1, r0
 8008164:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008168:	4313      	orrs	r3, r2
 800816a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	0148      	lsls	r0, r1, #5
 8008186:	69f9      	ldr	r1, [r7, #28]
 8008188:	4401      	add	r1, r0
 800818a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800818e:	4313      	orrs	r3, r2
 8008190:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d11f      	bne.n	80081da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80081b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d14b      	bne.n	8008278 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	461a      	mov	r2, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	791b      	ldrb	r3, [r3, #4]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d128      	bne.n	8008256 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d110      	bne.n	8008236 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e00f      	b.n	8008256 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	0151      	lsls	r1, r2, #5
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	440a      	add	r2, r1
 800824c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008254:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008270:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	e137      	b.n	80084e8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008296:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	791b      	ldrb	r3, [r3, #4]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d015      	beq.n	80082cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 811f 	beq.w	80084e8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	2101      	movs	r1, #1
 80082bc:	fa01 f303 	lsl.w	r3, r1, r3
 80082c0:	69f9      	ldr	r1, [r7, #28]
 80082c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c6:	4313      	orrs	r3, r2
 80082c8:	634b      	str	r3, [r1, #52]	; 0x34
 80082ca:	e10d      	b.n	80084e8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d110      	bne.n	80082fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	e00f      	b.n	800831e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	440a      	add	r2, r1
 8008314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6919      	ldr	r1, [r3, #16]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	b298      	uxth	r0, r3
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 faea 	bl	800890c <USB_WritePacket>
 8008338:	e0d6      	b.n	80084e8 <USB_EPStartXfer+0x488>
 800833a:	bf00      	nop
 800833c:	e007ffff 	.word	0xe007ffff
 8008340:	fff80000 	.word	0xfff80000
 8008344:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	691a      	ldr	r2, [r3, #16]
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	0159      	lsls	r1, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	440b      	add	r3, r1
 800835e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008362:	4619      	mov	r1, r3
 8008364:	4b63      	ldr	r3, [pc, #396]	; (80084f4 <USB_EPStartXfer+0x494>)
 8008366:	4013      	ands	r3, r2
 8008368:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	0159      	lsls	r1, r3, #5
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	440b      	add	r3, r1
 8008380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008384:	4619      	mov	r1, r3
 8008386:	4b5c      	ldr	r3, [pc, #368]	; (80084f8 <USB_EPStartXfer+0x498>)
 8008388:	4013      	ands	r3, r2
 800838a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d123      	bne.n	80083dc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083aa:	69b9      	ldr	r1, [r7, #24]
 80083ac:	0148      	lsls	r0, r1, #5
 80083ae:	69f9      	ldr	r1, [r7, #28]
 80083b0:	4401      	add	r1, r0
 80083b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083b6:	4313      	orrs	r3, r2
 80083b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083d8:	6113      	str	r3, [r2, #16]
 80083da:	e037      	b.n	800844c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	4413      	add	r3, r2
 80083e6:	1e5a      	subs	r2, r3, #1
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	8afa      	ldrh	r2, [r7, #22]
 80083f8:	fb03 f202 	mul.w	r2, r3, r2
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	691a      	ldr	r2, [r3, #16]
 800840e:	8afb      	ldrh	r3, [r7, #22]
 8008410:	04d9      	lsls	r1, r3, #19
 8008412:	4b3a      	ldr	r3, [pc, #232]	; (80084fc <USB_EPStartXfer+0x49c>)
 8008414:	400b      	ands	r3, r1
 8008416:	69b9      	ldr	r1, [r7, #24]
 8008418:	0148      	lsls	r0, r1, #5
 800841a:	69f9      	ldr	r1, [r7, #28]
 800841c:	4401      	add	r1, r0
 800841e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008422:	4313      	orrs	r3, r2
 8008424:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800843c:	69b9      	ldr	r1, [r7, #24]
 800843e:	0148      	lsls	r0, r1, #5
 8008440:	69f9      	ldr	r1, [r7, #28]
 8008442:	4401      	add	r1, r0
 8008444:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008448:	4313      	orrs	r3, r2
 800844a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d10d      	bne.n	800846e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6919      	ldr	r1, [r3, #16]
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	460a      	mov	r2, r1
 800846c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	791b      	ldrb	r3, [r3, #4]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d128      	bne.n	80084c8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d110      	bne.n	80084a8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	e00f      	b.n	80084c8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	fff80000 	.word	0xfff80000
 80084f8:	e007ffff 	.word	0xe007ffff
 80084fc:	1ff80000 	.word	0x1ff80000

08008500 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	2b01      	cmp	r3, #1
 800851e:	f040 80ce 	bne.w	80086be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d132      	bne.n	8008590 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	0159      	lsls	r1, r3, #5
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	440b      	add	r3, r1
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	4619      	mov	r1, r3
 8008546:	4b9a      	ldr	r3, [pc, #616]	; (80087b0 <USB_EP0StartXfer+0x2b0>)
 8008548:	4013      	ands	r3, r2
 800854a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	440a      	add	r2, r1
 8008562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008566:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800856a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	0159      	lsls	r1, r3, #5
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	440b      	add	r3, r1
 8008582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008586:	4619      	mov	r1, r3
 8008588:	4b8a      	ldr	r3, [pc, #552]	; (80087b4 <USB_EP0StartXfer+0x2b4>)
 800858a:	4013      	ands	r3, r2
 800858c:	610b      	str	r3, [r1, #16]
 800858e:	e04e      	b.n	800862e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	0159      	lsls	r1, r3, #5
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	440b      	add	r3, r1
 80085a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085aa:	4619      	mov	r1, r3
 80085ac:	4b81      	ldr	r3, [pc, #516]	; (80087b4 <USB_EP0StartXfer+0x2b4>)
 80085ae:	4013      	ands	r3, r2
 80085b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	0159      	lsls	r1, r3, #5
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	4619      	mov	r1, r3
 80085ce:	4b78      	ldr	r3, [pc, #480]	; (80087b0 <USB_EP0StartXfer+0x2b0>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	699a      	ldr	r2, [r3, #24]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d903      	bls.n	80085e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	691a      	ldr	r2, [r3, #16]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800861e:	6939      	ldr	r1, [r7, #16]
 8008620:	0148      	lsls	r0, r1, #5
 8008622:	6979      	ldr	r1, [r7, #20]
 8008624:	4401      	add	r1, r0
 8008626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800862a:	4313      	orrs	r3, r2
 800862c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d11e      	bne.n	8008672 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d009      	beq.n	8008650 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	461a      	mov	r2, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	440a      	add	r2, r1
 8008666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	e097      	b.n	80087a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008690:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8083 	beq.w	80087a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	2101      	movs	r1, #1
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	6979      	ldr	r1, [r7, #20]
 80086b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086b8:	4313      	orrs	r3, r2
 80086ba:	634b      	str	r3, [r1, #52]	; 0x34
 80086bc:	e071      	b.n	80087a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	0159      	lsls	r1, r3, #5
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	440b      	add	r3, r1
 80086d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d8:	4619      	mov	r1, r3
 80086da:	4b36      	ldr	r3, [pc, #216]	; (80087b4 <USB_EP0StartXfer+0x2b4>)
 80086dc:	4013      	ands	r3, r2
 80086de:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	691a      	ldr	r2, [r3, #16]
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	0159      	lsls	r1, r3, #5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	440b      	add	r3, r1
 80086f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fa:	4619      	mov	r1, r3
 80086fc:	4b2c      	ldr	r3, [pc, #176]	; (80087b0 <USB_EP0StartXfer+0x2b0>)
 80086fe:	4013      	ands	r3, r2
 8008700:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	440a      	add	r2, r1
 8008730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008750:	6939      	ldr	r1, [r7, #16]
 8008752:	0148      	lsls	r0, r1, #5
 8008754:	6979      	ldr	r1, [r7, #20]
 8008756:	4401      	add	r1, r0
 8008758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800875c:	4313      	orrs	r3, r2
 800875e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d10d      	bne.n	8008782 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6919      	ldr	r1, [r3, #16]
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877e:	460a      	mov	r2, r1
 8008780:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800879c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	371c      	adds	r7, #28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	e007ffff 	.word	0xe007ffff
 80087b4:	fff80000 	.word	0xfff80000

080087b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d14a      	bne.n	800886c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ee:	f040 8086 	bne.w	80088fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	7812      	ldrb	r2, [r2, #0]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008814:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	7812      	ldrb	r2, [r2, #0]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008838:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f242 7210 	movw	r2, #10000	; 0x2710
 8008846:	4293      	cmp	r3, r2
 8008848:	d902      	bls.n	8008850 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
          break;
 800884e:	e056      	b.n	80088fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008868:	d0e7      	beq.n	800883a <USB_EPStopXfer+0x82>
 800886a:	e048      	b.n	80088fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008884:	d13b      	bne.n	80088fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	7812      	ldrb	r2, [r2, #0]
 800889a:	0151      	lsls	r1, r2, #5
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	440a      	add	r2, r1
 80088a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	7812      	ldrb	r2, [r2, #0]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80088da:	4293      	cmp	r3, r2
 80088dc:	d902      	bls.n	80088e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
          break;
 80088e2:	e00c      	b.n	80088fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fc:	d0e7      	beq.n	80088ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008900:	4618      	mov	r0, r3
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800890c:	b480      	push	{r7}
 800890e:	b089      	sub	sp, #36	; 0x24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4611      	mov	r1, r2
 8008918:	461a      	mov	r2, r3
 800891a:	460b      	mov	r3, r1
 800891c:	71fb      	strb	r3, [r7, #7]
 800891e:	4613      	mov	r3, r2
 8008920:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800892a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d123      	bne.n	800897a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008932:	88bb      	ldrh	r3, [r7, #4]
 8008934:	3303      	adds	r3, #3
 8008936:	089b      	lsrs	r3, r3, #2
 8008938:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	61bb      	str	r3, [r7, #24]
 800893e:	e018      	b.n	8008972 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	031a      	lsls	r2, r3, #12
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	4413      	add	r3, r2
 8008948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894c:	461a      	mov	r2, r3
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	3301      	adds	r3, #1
 8008958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	3301      	adds	r3, #1
 800895e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	3301      	adds	r3, #1
 8008964:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	3301      	adds	r3, #1
 800896a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	3301      	adds	r3, #1
 8008970:	61bb      	str	r3, [r7, #24]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	429a      	cmp	r2, r3
 8008978:	d3e2      	bcc.n	8008940 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3724      	adds	r7, #36	; 0x24
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008988:	b480      	push	{r7}
 800898a:	b08b      	sub	sp, #44	; 0x2c
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	089b      	lsrs	r3, r3, #2
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	f003 0303 	and.w	r3, r3, #3
 80089ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089ae:	2300      	movs	r3, #0
 80089b0:	623b      	str	r3, [r7, #32]
 80089b2:	e014      	b.n	80089de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	601a      	str	r2, [r3, #0]
    pDest++;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	3301      	adds	r3, #1
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	3301      	adds	r3, #1
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	3301      	adds	r3, #1
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	3301      	adds	r3, #1
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	3301      	adds	r3, #1
 80089dc:	623b      	str	r3, [r7, #32]
 80089de:	6a3a      	ldr	r2, [r7, #32]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d3e6      	bcc.n	80089b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089e6:	8bfb      	ldrh	r3, [r7, #30]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01e      	beq.n	8008a2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f6:	461a      	mov	r2, r3
 80089f8:	f107 0310 	add.w	r3, r7, #16
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	701a      	strb	r2, [r3, #0]
      i++;
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	3301      	adds	r3, #1
 8008a16:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a1e:	8bfb      	ldrh	r3, [r7, #30]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a24:	8bfb      	ldrh	r3, [r7, #30]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1ea      	bne.n	8008a00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	372c      	adds	r7, #44	; 0x2c
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d12c      	bne.n	8008aae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	db12      	blt.n	8008a8c <USB_EPSetStall+0x54>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00f      	beq.n	8008a8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	e02b      	b.n	8008b06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db12      	blt.n	8008ae6 <USB_EPSetStall+0xae>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00f      	beq.n	8008ae6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ae4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d128      	bne.n	8008b82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d003      	beq.n	8008b60 <USB_EPClearStall+0x4c>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	791b      	ldrb	r3, [r3, #4]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d138      	bne.n	8008bd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e027      	b.n	8008bd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ba0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d003      	beq.n	8008bb2 <USB_EPClearStall+0x9e>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d10f      	bne.n	8008bd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	0151      	lsls	r1, r2, #5
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	440a      	add	r2, r1
 8008bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c14:	68f9      	ldr	r1, [r7, #12]
 8008c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c46:	f023 0303 	bic.w	r3, r3, #3
 8008c4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5a:	f023 0302 	bic.w	r3, r3, #2
 8008c5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9c:	f043 0302 	orr.w	r3, r3, #2
 8008ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	0c1b      	lsrs	r3, r3, #16
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	b29b      	uxth	r3, r3
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b087      	sub	sp, #28
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	01db      	lsls	r3, r3, #7
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	f003 0301 	and.w	r3, r3, #1
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <USB_ActivateSetup+0x44>)
 8008e12:	4013      	ands	r3, r2
 8008e14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	fffff800 	.word	0xfffff800

08008e3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	460b      	mov	r3, r1
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	333c      	adds	r3, #60	; 0x3c
 8008e52:	3304      	adds	r3, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	4a26      	ldr	r2, [pc, #152]	; (8008ef4 <USB_EP0_OutStart+0xb8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d90a      	bls.n	8008e76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e70:	d101      	bne.n	8008e76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e037      	b.n	8008ee6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea4:	f043 0318 	orr.w	r3, r3, #24
 8008ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008ebc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ebe:	7afb      	ldrb	r3, [r7, #11]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d10f      	bne.n	8008ee4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eca:	461a      	mov	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ede:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	4f54300a 	.word	0x4f54300a

08008ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <USB_CoreReset+0x64>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d901      	bls.n	8008f16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e01b      	b.n	8008f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	daf2      	bge.n	8008f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f043 0201 	orr.w	r2, r3, #1
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <USB_CoreReset+0x64>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d901      	bls.n	8008f40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e006      	b.n	8008f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d0f0      	beq.n	8008f2e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	00030d40 	.word	0x00030d40

08008f60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f70:	f005 fd8c 	bl	800ea8c <malloc>
 8008f74:	4603      	mov	r3, r0
 8008f76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	32b0      	adds	r2, #176	; 0xb0
 8008f88:	2100      	movs	r1, #0
 8008f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e0d4      	b.n	800913c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f92:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008f96:	2100      	movs	r1, #0
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f005 fe33 	bl	800ec04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	32b0      	adds	r2, #176	; 0xb0
 8008fa8:	68f9      	ldr	r1, [r7, #12]
 8008faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	32b0      	adds	r2, #176	; 0xb0
 8008fb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	7c1b      	ldrb	r3, [r3, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d138      	bne.n	800903c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fca:	4b5e      	ldr	r3, [pc, #376]	; (8009144 <USBD_CDC_Init+0x1e4>)
 8008fcc:	7819      	ldrb	r1, [r3, #0]
 8008fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f005 fbb6 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fda:	4b5a      	ldr	r3, [pc, #360]	; (8009144 <USBD_CDC_Init+0x1e4>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	f003 020f 	and.w	r2, r3, #15
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	3324      	adds	r3, #36	; 0x24
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ff4:	4b54      	ldr	r3, [pc, #336]	; (8009148 <USBD_CDC_Init+0x1e8>)
 8008ff6:	7819      	ldrb	r1, [r3, #0]
 8008ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f005 fba1 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009004:	4b50      	ldr	r3, [pc, #320]	; (8009148 <USBD_CDC_Init+0x1e8>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 020f 	and.w	r2, r3, #15
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800901c:	2201      	movs	r2, #1
 800901e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009020:	4b4a      	ldr	r3, [pc, #296]	; (800914c <USBD_CDC_Init+0x1ec>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 020f 	and.w	r2, r3, #15
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	3326      	adds	r3, #38	; 0x26
 8009036:	2210      	movs	r2, #16
 8009038:	801a      	strh	r2, [r3, #0]
 800903a:	e035      	b.n	80090a8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800903c:	4b41      	ldr	r3, [pc, #260]	; (8009144 <USBD_CDC_Init+0x1e4>)
 800903e:	7819      	ldrb	r1, [r3, #0]
 8009040:	2340      	movs	r3, #64	; 0x40
 8009042:	2202      	movs	r2, #2
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f005 fb7e 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800904a:	4b3e      	ldr	r3, [pc, #248]	; (8009144 <USBD_CDC_Init+0x1e4>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	f003 020f 	and.w	r2, r3, #15
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	3324      	adds	r3, #36	; 0x24
 8009060:	2201      	movs	r2, #1
 8009062:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009064:	4b38      	ldr	r3, [pc, #224]	; (8009148 <USBD_CDC_Init+0x1e8>)
 8009066:	7819      	ldrb	r1, [r3, #0]
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	2202      	movs	r2, #2
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f005 fb6a 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009072:	4b35      	ldr	r3, [pc, #212]	; (8009148 <USBD_CDC_Init+0x1e8>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 020f 	and.w	r2, r3, #15
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800908a:	2201      	movs	r2, #1
 800908c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800908e:	4b2f      	ldr	r3, [pc, #188]	; (800914c <USBD_CDC_Init+0x1ec>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	f003 020f 	and.w	r2, r3, #15
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	3326      	adds	r3, #38	; 0x26
 80090a4:	2210      	movs	r2, #16
 80090a6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090a8:	4b28      	ldr	r3, [pc, #160]	; (800914c <USBD_CDC_Init+0x1ec>)
 80090aa:	7819      	ldrb	r1, [r3, #0]
 80090ac:	2308      	movs	r3, #8
 80090ae:	2203      	movs	r2, #3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f005 fb48 	bl	800e746 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80090b6:	4b25      	ldr	r3, [pc, #148]	; (800914c <USBD_CDC_Init+0x1ec>)
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f003 020f 	and.w	r2, r3, #15
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	3324      	adds	r3, #36	; 0x24
 80090cc:	2201      	movs	r2, #1
 80090ce:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	33b0      	adds	r3, #176	; 0xb0
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009106:	2302      	movs	r3, #2
 8009108:	e018      	b.n	800913c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7c1b      	ldrb	r3, [r3, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009112:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <USBD_CDC_Init+0x1e8>)
 8009114:	7819      	ldrb	r1, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800911c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f005 fbff 	bl	800e924 <USBD_LL_PrepareReceive>
 8009126:	e008      	b.n	800913a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009128:	4b07      	ldr	r3, [pc, #28]	; (8009148 <USBD_CDC_Init+0x1e8>)
 800912a:	7819      	ldrb	r1, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f005 fbf5 	bl	800e924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	20000093 	.word	0x20000093
 8009148:	20000094 	.word	0x20000094
 800914c:	20000095 	.word	0x20000095

08009150 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800915c:	4b3a      	ldr	r3, [pc, #232]	; (8009248 <USBD_CDC_DeInit+0xf8>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f005 fb15 	bl	800e792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009168:	4b37      	ldr	r3, [pc, #220]	; (8009248 <USBD_CDC_DeInit+0xf8>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3324      	adds	r3, #36	; 0x24
 800917e:	2200      	movs	r2, #0
 8009180:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009182:	4b32      	ldr	r3, [pc, #200]	; (800924c <USBD_CDC_DeInit+0xfc>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f005 fb02 	bl	800e792 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800918e:	4b2f      	ldr	r3, [pc, #188]	; (800924c <USBD_CDC_DeInit+0xfc>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 020f 	and.w	r2, r3, #15
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091a6:	2200      	movs	r2, #0
 80091a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80091aa:	4b29      	ldr	r3, [pc, #164]	; (8009250 <USBD_CDC_DeInit+0x100>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f005 faee 	bl	800e792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80091b6:	4b26      	ldr	r3, [pc, #152]	; (8009250 <USBD_CDC_DeInit+0x100>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	f003 020f 	and.w	r2, r3, #15
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	3324      	adds	r3, #36	; 0x24
 80091cc:	2200      	movs	r2, #0
 80091ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80091d0:	4b1f      	ldr	r3, [pc, #124]	; (8009250 <USBD_CDC_DeInit+0x100>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 020f 	and.w	r2, r3, #15
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	3326      	adds	r3, #38	; 0x26
 80091e6:	2200      	movs	r2, #0
 80091e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	32b0      	adds	r2, #176	; 0xb0
 80091f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01f      	beq.n	800923c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	33b0      	adds	r3, #176	; 0xb0
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32b0      	adds	r2, #176	; 0xb0
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	4618      	mov	r0, r3
 8009220:	f005 fc3c 	bl	800ea9c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32b0      	adds	r2, #176	; 0xb0
 800922e:	2100      	movs	r1, #0
 8009230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000093 	.word	0x20000093
 800924c:	20000094 	.word	0x20000094
 8009250:	20000095 	.word	0x20000095

08009254 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	32b0      	adds	r2, #176	; 0xb0
 8009268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009280:	2303      	movs	r3, #3
 8009282:	e0bf      	b.n	8009404 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800928c:	2b00      	cmp	r3, #0
 800928e:	d050      	beq.n	8009332 <USBD_CDC_Setup+0xde>
 8009290:	2b20      	cmp	r3, #32
 8009292:	f040 80af 	bne.w	80093f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d03a      	beq.n	8009314 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	b25b      	sxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	da1b      	bge.n	80092e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	33b0      	adds	r3, #176	; 0xb0
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80092be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	88d2      	ldrh	r2, [r2, #6]
 80092c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	88db      	ldrh	r3, [r3, #6]
 80092ca:	2b07      	cmp	r3, #7
 80092cc:	bf28      	it	cs
 80092ce:	2307      	movcs	r3, #7
 80092d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	89fa      	ldrh	r2, [r7, #14]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 fd6d 	bl	800adb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80092de:	e090      	b.n	8009402 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	785a      	ldrb	r2, [r3, #1]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	88db      	ldrh	r3, [r3, #6]
 80092ee:	2b3f      	cmp	r3, #63	; 0x3f
 80092f0:	d803      	bhi.n	80092fa <USBD_CDC_Setup+0xa6>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	88db      	ldrh	r3, [r3, #6]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	e000      	b.n	80092fc <USBD_CDC_Setup+0xa8>
 80092fa:	2240      	movs	r2, #64	; 0x40
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009302:	6939      	ldr	r1, [r7, #16]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800930a:	461a      	mov	r2, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fd7f 	bl	800ae10 <USBD_CtlPrepareRx>
      break;
 8009312:	e076      	b.n	8009402 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	33b0      	adds	r3, #176	; 0xb0
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	7850      	ldrb	r0, [r2, #1]
 800932a:	2200      	movs	r2, #0
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	4798      	blx	r3
      break;
 8009330:	e067      	b.n	8009402 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	785b      	ldrb	r3, [r3, #1]
 8009336:	2b0b      	cmp	r3, #11
 8009338:	d851      	bhi.n	80093de <USBD_CDC_Setup+0x18a>
 800933a:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <USBD_CDC_Setup+0xec>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	08009371 	.word	0x08009371
 8009344:	080093ed 	.word	0x080093ed
 8009348:	080093df 	.word	0x080093df
 800934c:	080093df 	.word	0x080093df
 8009350:	080093df 	.word	0x080093df
 8009354:	080093df 	.word	0x080093df
 8009358:	080093df 	.word	0x080093df
 800935c:	080093df 	.word	0x080093df
 8009360:	080093df 	.word	0x080093df
 8009364:	080093df 	.word	0x080093df
 8009368:	0800939b 	.word	0x0800939b
 800936c:	080093c5 	.word	0x080093c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b03      	cmp	r3, #3
 800937a:	d107      	bne.n	800938c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800937c:	f107 030a 	add.w	r3, r7, #10
 8009380:	2202      	movs	r2, #2
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fd17 	bl	800adb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800938a:	e032      	b.n	80093f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fca1 	bl	800acd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	75fb      	strb	r3, [r7, #23]
          break;
 8009398:	e02b      	b.n	80093f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d107      	bne.n	80093b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093a6:	f107 030d 	add.w	r3, r7, #13
 80093aa:	2201      	movs	r2, #1
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 fd02 	bl	800adb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093b4:	e01d      	b.n	80093f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 fc8c 	bl	800acd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80093be:	2303      	movs	r3, #3
 80093c0:	75fb      	strb	r3, [r7, #23]
          break;
 80093c2:	e016      	b.n	80093f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d00f      	beq.n	80093f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 fc7f 	bl	800acd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80093d8:	2303      	movs	r3, #3
 80093da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093dc:	e008      	b.n	80093f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fc78 	bl	800acd6 <USBD_CtlError>
          ret = USBD_FAIL;
 80093e6:	2303      	movs	r3, #3
 80093e8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ea:	e002      	b.n	80093f2 <USBD_CDC_Setup+0x19e>
          break;
 80093ec:	bf00      	nop
 80093ee:	e008      	b.n	8009402 <USBD_CDC_Setup+0x1ae>
          break;
 80093f0:	bf00      	nop
      }
      break;
 80093f2:	e006      	b.n	8009402 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fc6d 	bl	800acd6 <USBD_CtlError>
      ret = USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009400:	bf00      	nop
  }

  return (uint8_t)ret;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800941e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	; 0xb0
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009432:	2303      	movs	r3, #3
 8009434:	e065      	b.n	8009502 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	32b0      	adds	r2, #176	; 0xb0
 8009440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009444:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	f003 020f 	and.w	r2, r3, #15
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	440b      	add	r3, r1
 8009458:	3318      	adds	r3, #24
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d02f      	beq.n	80094c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	f003 020f 	and.w	r2, r3, #15
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	3318      	adds	r3, #24
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	78fb      	ldrb	r3, [r7, #3]
 8009478:	f003 010f 	and.w	r1, r3, #15
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	460b      	mov	r3, r1
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	440b      	add	r3, r1
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4403      	add	r3, r0
 8009488:	3348      	adds	r3, #72	; 0x48
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009496:	2b00      	cmp	r3, #0
 8009498:	d112      	bne.n	80094c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3318      	adds	r3, #24
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094b2:	78f9      	ldrb	r1, [r7, #3]
 80094b4:	2300      	movs	r3, #0
 80094b6:	2200      	movs	r2, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f005 fa12 	bl	800e8e2 <USBD_LL_Transmit>
 80094be:	e01f      	b.n	8009500 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	33b0      	adds	r3, #176	; 0xb0
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d010      	beq.n	8009500 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	33b0      	adds	r3, #176	; 0xb0
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094fc:	78fa      	ldrb	r2, [r7, #3]
 80094fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	32b0      	adds	r2, #176	; 0xb0
 8009520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009524:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32b0      	adds	r2, #176	; 0xb0
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009538:	2303      	movs	r3, #3
 800953a:	e01a      	b.n	8009572 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f005 fa10 	bl	800e966 <USBD_LL_GetRxDataSize>
 8009546:	4602      	mov	r2, r0
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	33b0      	adds	r3, #176	; 0xb0
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800956c:	4611      	mov	r1, r2
 800956e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	32b0      	adds	r2, #176	; 0xb0
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009598:	2303      	movs	r3, #3
 800959a:	e025      	b.n	80095e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	33b0      	adds	r3, #176	; 0xb0
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01a      	beq.n	80095e6 <USBD_CDC_EP0_RxReady+0x6c>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80095b6:	2bff      	cmp	r3, #255	; 0xff
 80095b8:	d015      	beq.n	80095e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	33b0      	adds	r3, #176	; 0xb0
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80095d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095da:	b292      	uxth	r2, r2
 80095dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	22ff      	movs	r2, #255	; 0xff
 80095e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095f8:	2182      	movs	r1, #130	; 0x82
 80095fa:	4818      	ldr	r0, [pc, #96]	; (800965c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095fc:	f000 fd09 	bl	800a012 <USBD_GetEpDesc>
 8009600:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009602:	2101      	movs	r1, #1
 8009604:	4815      	ldr	r0, [pc, #84]	; (800965c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009606:	f000 fd04 	bl	800a012 <USBD_GetEpDesc>
 800960a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800960c:	2181      	movs	r1, #129	; 0x81
 800960e:	4813      	ldr	r0, [pc, #76]	; (800965c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009610:	f000 fcff 	bl	800a012 <USBD_GetEpDesc>
 8009614:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2210      	movs	r2, #16
 8009620:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d006      	beq.n	8009636 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2200      	movs	r2, #0
 800962c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009630:	711a      	strb	r2, [r3, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009644:	711a      	strb	r2, [r3, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2243      	movs	r2, #67	; 0x43
 800964e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000050 	.word	0x20000050

08009660 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009668:	2182      	movs	r1, #130	; 0x82
 800966a:	4818      	ldr	r0, [pc, #96]	; (80096cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800966c:	f000 fcd1 	bl	800a012 <USBD_GetEpDesc>
 8009670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009672:	2101      	movs	r1, #1
 8009674:	4815      	ldr	r0, [pc, #84]	; (80096cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009676:	f000 fccc 	bl	800a012 <USBD_GetEpDesc>
 800967a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800967c:	2181      	movs	r1, #129	; 0x81
 800967e:	4813      	ldr	r0, [pc, #76]	; (80096cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009680:	f000 fcc7 	bl	800a012 <USBD_GetEpDesc>
 8009684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2210      	movs	r2, #16
 8009690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d006      	beq.n	80096a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2200      	movs	r2, #0
 800969c:	711a      	strb	r2, [r3, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f042 0202 	orr.w	r2, r2, #2
 80096a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	711a      	strb	r2, [r3, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f042 0202 	orr.w	r2, r2, #2
 80096b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2243      	movs	r2, #67	; 0x43
 80096be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096c0:	4b02      	ldr	r3, [pc, #8]	; (80096cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000050 	.word	0x20000050

080096d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096d8:	2182      	movs	r1, #130	; 0x82
 80096da:	4818      	ldr	r0, [pc, #96]	; (800973c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096dc:	f000 fc99 	bl	800a012 <USBD_GetEpDesc>
 80096e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096e2:	2101      	movs	r1, #1
 80096e4:	4815      	ldr	r0, [pc, #84]	; (800973c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096e6:	f000 fc94 	bl	800a012 <USBD_GetEpDesc>
 80096ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096ec:	2181      	movs	r1, #129	; 0x81
 80096ee:	4813      	ldr	r0, [pc, #76]	; (800973c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096f0:	f000 fc8f 	bl	800a012 <USBD_GetEpDesc>
 80096f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2210      	movs	r2, #16
 8009700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d006      	beq.n	8009716 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	2200      	movs	r2, #0
 800970c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009710:	711a      	strb	r2, [r3, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d006      	beq.n	800972a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009724:	711a      	strb	r2, [r3, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2243      	movs	r2, #67	; 0x43
 800972e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009730:	4b02      	ldr	r3, [pc, #8]	; (800973c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000050 	.word	0x20000050

08009740 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	220a      	movs	r2, #10
 800974c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800974e:	4b03      	ldr	r3, [pc, #12]	; (800975c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	2000000c 	.word	0x2000000c

08009760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009770:	2303      	movs	r3, #3
 8009772:	e009      	b.n	8009788 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	33b0      	adds	r3, #176	; 0xb0
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	32b0      	adds	r2, #176	; 0xb0
 80097aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e008      	b.n	80097cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	371c      	adds	r7, #28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	32b0      	adds	r2, #176	; 0xb0
 80097ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e004      	b.n	8009806 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
	...

08009814 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32b0      	adds	r2, #176	; 0xb0
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	32b0      	adds	r2, #176	; 0xb0
 8009836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800983e:	2303      	movs	r3, #3
 8009840:	e018      	b.n	8009874 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7c1b      	ldrb	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <USBD_CDC_ReceivePacket+0x68>)
 800984c:	7819      	ldrb	r1, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f005 f863 	bl	800e924 <USBD_LL_PrepareReceive>
 800985e:	e008      	b.n	8009872 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009860:	4b06      	ldr	r3, [pc, #24]	; (800987c <USBD_CDC_ReceivePacket+0x68>)
 8009862:	7819      	ldrb	r1, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f005 f859 	bl	800e924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20000094 	.word	0x20000094

08009880 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009894:	2303      	movs	r3, #3
 8009896:	e01f      	b.n	80098d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	79fa      	ldrb	r2, [r7, #7]
 80098ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f004 fed3 	bl	800e678 <USBD_LL_Init>
 80098d2:	4603      	mov	r3, r0
 80098d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e025      	b.n	8009944 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	32ae      	adds	r2, #174	; 0xae
 800990a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00f      	beq.n	8009934 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	32ae      	adds	r2, #174	; 0xae
 800991e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f107 020e 	add.w	r2, r7, #14
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
 800992c:	4602      	mov	r2, r0
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f004 fedb 	bl	800e710 <USBD_LL_Start>
 800995a:	4603      	mov	r3, r0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009990:	2b00      	cmp	r3, #0
 8009992:	d009      	beq.n	80099a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	78fa      	ldrb	r2, [r7, #3]
 800999e:	4611      	mov	r1, r2
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	4798      	blx	r3
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	78fa      	ldrb	r2, [r7, #3]
 80099cc:	4611      	mov	r1, r2
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80099d8:	2303      	movs	r3, #3
 80099da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 f932 	bl	800ac62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a1a:	f003 031f 	and.w	r3, r3, #31
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d01a      	beq.n	8009a58 <USBD_LL_SetupStage+0x72>
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d822      	bhi.n	8009a6c <USBD_LL_SetupStage+0x86>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <USBD_LL_SetupStage+0x4a>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d00a      	beq.n	8009a44 <USBD_LL_SetupStage+0x5e>
 8009a2e:	e01d      	b.n	8009a6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fb5f 	bl	800a0fc <USBD_StdDevReq>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	e020      	b.n	8009a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fbc7 	bl	800a1e0 <USBD_StdItfReq>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]
      break;
 8009a56:	e016      	b.n	8009a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fc29 	bl	800a2b8 <USBD_StdEPReq>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73fb      	strb	r3, [r7, #15]
      break;
 8009a6a:	e00c      	b.n	8009a86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f004 fea8 	bl	800e7d0 <USBD_LL_StallEP>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
      break;
 8009a84:	bf00      	nop
  }

  return ret;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009aa2:	7afb      	ldrb	r3, [r7, #11]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d16e      	bne.n	8009b86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009aae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	f040 8098 	bne.w	8009bec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d913      	bls.n	8009af0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	1ad2      	subs	r2, r2, r3
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	bf28      	it	cs
 8009ae2:	4613      	movcs	r3, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f001 f9ae 	bl	800ae4a <USBD_CtlContinueRx>
 8009aee:	e07d      	b.n	8009bec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d014      	beq.n	8009b28 <USBD_LL_DataOutStage+0x98>
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d81d      	bhi.n	8009b3e <USBD_LL_DataOutStage+0xae>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <USBD_LL_DataOutStage+0x7c>
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d003      	beq.n	8009b12 <USBD_LL_DataOutStage+0x82>
 8009b0a:	e018      	b.n	8009b3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8009b10:	e018      	b.n	8009b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 fa5e 	bl	8009fde <USBD_CoreFindIF>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75bb      	strb	r3, [r7, #22]
            break;
 8009b26:	e00d      	b.n	8009b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	4619      	mov	r1, r3
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 fa60 	bl	8009ff8 <USBD_CoreFindEP>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8009b3c:	e002      	b.n	8009b44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75bb      	strb	r3, [r7, #22]
            break;
 8009b42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d119      	bne.n	8009b7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d113      	bne.n	8009b7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009b56:	7dba      	ldrb	r2, [r7, #22]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	32ae      	adds	r2, #174	; 0xae
 8009b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b66:	7dba      	ldrb	r2, [r7, #22]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b6e:	7dba      	ldrb	r2, [r7, #22]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	32ae      	adds	r2, #174	; 0xae
 8009b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f001 f974 	bl	800ae6c <USBD_CtlSendStatus>
 8009b84:	e032      	b.n	8009bec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f000 fa31 	bl	8009ff8 <USBD_CoreFindEP>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b9a:	7dbb      	ldrb	r3, [r7, #22]
 8009b9c:	2bff      	cmp	r3, #255	; 0xff
 8009b9e:	d025      	beq.n	8009bec <USBD_LL_DataOutStage+0x15c>
 8009ba0:	7dbb      	ldrb	r3, [r7, #22]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d122      	bne.n	8009bec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d117      	bne.n	8009be2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009bb2:	7dba      	ldrb	r2, [r7, #22]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	32ae      	adds	r2, #174	; 0xae
 8009bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00f      	beq.n	8009be2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009bc2:	7dba      	ldrb	r2, [r7, #22]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009bca:	7dba      	ldrb	r2, [r7, #22]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	32ae      	adds	r2, #174	; 0xae
 8009bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	7afa      	ldrb	r2, [r7, #11]
 8009bd8:	4611      	mov	r1, r2
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	4798      	blx	r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	e000      	b.n	8009bee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b086      	sub	sp, #24
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c04:	7afb      	ldrb	r3, [r7, #11]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d16f      	bne.n	8009cea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d15a      	bne.n	8009cd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d914      	bls.n	8009c50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	689a      	ldr	r2, [r3, #8]
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	1ad2      	subs	r2, r2, r3
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f001 f8d6 	bl	800adee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c42:	2300      	movs	r3, #0
 8009c44:	2200      	movs	r2, #0
 8009c46:	2100      	movs	r1, #0
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f004 fe6b 	bl	800e924 <USBD_LL_PrepareReceive>
 8009c4e:	e03f      	b.n	8009cd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d11c      	bne.n	8009c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d316      	bcc.n	8009c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d20f      	bcs.n	8009c96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f001 f8b7 	bl	800adee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c88:	2300      	movs	r3, #0
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f004 fe48 	bl	800e924 <USBD_LL_PrepareReceive>
 8009c94:	e01c      	b.n	8009cd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d10f      	bne.n	8009cc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cc2:	2180      	movs	r1, #128	; 0x80
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f004 fd83 	bl	800e7d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f001 f8e1 	bl	800ae92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d03a      	beq.n	8009d50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f7ff fe42 	bl	8009964 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ce8:	e032      	b.n	8009d50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f97f 	bl	8009ff8 <USBD_CoreFindEP>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	2bff      	cmp	r3, #255	; 0xff
 8009d02:	d025      	beq.n	8009d50 <USBD_LL_DataInStage+0x15a>
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d122      	bne.n	8009d50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d11c      	bne.n	8009d50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d16:	7dfa      	ldrb	r2, [r7, #23]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	32ae      	adds	r2, #174	; 0xae
 8009d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d014      	beq.n	8009d50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009d26:	7dfa      	ldrb	r2, [r7, #23]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009d2e:	7dfa      	ldrb	r2, [r7, #23]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	32ae      	adds	r2, #174	; 0xae
 8009d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	7afa      	ldrb	r2, [r7, #11]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009d46:	7dbb      	ldrb	r3, [r7, #22]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009d4c:	7dbb      	ldrb	r3, [r7, #22]
 8009d4e:	e000      	b.n	8009d52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d014      	beq.n	8009dc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6852      	ldr	r2, [r2, #4]
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	4611      	mov	r1, r2
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f004 fcbd 	bl	800e746 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2240      	movs	r2, #64	; 0x40
 8009dd8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ddc:	2340      	movs	r3, #64	; 0x40
 8009dde:	2200      	movs	r2, #0
 8009de0:	2180      	movs	r1, #128	; 0x80
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f004 fcaf 	bl	800e746 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2240      	movs	r2, #64	; 0x40
 8009df2:	621a      	str	r2, [r3, #32]

  return ret;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	460b      	mov	r3, r1
 8009e08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	78fa      	ldrb	r2, [r7, #3]
 8009e0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2204      	movs	r2, #4
 8009e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d106      	bne.n	8009e6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d110      	bne.n	8009eb0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9e:	69db      	ldr	r3, [r3, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	32ae      	adds	r2, #174	; 0xae
 8009ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e01c      	b.n	8009f16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d115      	bne.n	8009f14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	32ae      	adds	r2, #174	; 0xae
 8009ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	32ae      	adds	r2, #174	; 0xae
 8009f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	4611      	mov	r1, r2
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	460b      	mov	r3, r1
 8009f28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	32ae      	adds	r2, #174	; 0xae
 8009f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e01c      	b.n	8009f7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d115      	bne.n	8009f78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	32ae      	adds	r2, #174	; 0xae
 8009f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	32ae      	adds	r2, #174	; 0xae
 8009f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	4611      	mov	r1, r2
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00e      	beq.n	8009fd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6852      	ldr	r2, [r2, #4]
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	4798      	blx	r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a004:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a006:	4618      	mov	r0, r3
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	429a      	cmp	r2, r3
 800a038:	d920      	bls.n	800a07c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b29b      	uxth	r3, r3
 800a040:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a042:	e013      	b.n	800a06c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a044:	f107 030a 	add.w	r3, r7, #10
 800a048:	4619      	mov	r1, r3
 800a04a:	6978      	ldr	r0, [r7, #20]
 800a04c:	f000 f81b 	bl	800a086 <USBD_GetNextDesc>
 800a050:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	2b05      	cmp	r3, #5
 800a058:	d108      	bne.n	800a06c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	789b      	ldrb	r3, [r3, #2]
 800a062:	78fa      	ldrb	r2, [r7, #3]
 800a064:	429a      	cmp	r2, r3
 800a066:	d008      	beq.n	800a07a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	885b      	ldrh	r3, [r3, #2]
 800a070:	b29a      	uxth	r2, r3
 800a072:	897b      	ldrh	r3, [r7, #10]
 800a074:	429a      	cmp	r2, r3
 800a076:	d8e5      	bhi.n	800a044 <USBD_GetEpDesc+0x32>
 800a078:	e000      	b.n	800a07c <USBD_GetEpDesc+0x6a>
          break;
 800a07a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a07c:	693b      	ldr	r3, [r7, #16]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	881a      	ldrh	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4413      	add	r3, r2
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0de:	8a3b      	ldrh	r3, [r7, #16]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	b21a      	sxth	r2, r3
 800a0e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	b21b      	sxth	r3, r3
 800a0ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a0ee:	89fb      	ldrh	r3, [r7, #14]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	371c      	adds	r7, #28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a112:	2b40      	cmp	r3, #64	; 0x40
 800a114:	d005      	beq.n	800a122 <USBD_StdDevReq+0x26>
 800a116:	2b40      	cmp	r3, #64	; 0x40
 800a118:	d857      	bhi.n	800a1ca <USBD_StdDevReq+0xce>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00f      	beq.n	800a13e <USBD_StdDevReq+0x42>
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d153      	bne.n	800a1ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	32ae      	adds	r2, #174	; 0xae
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]
      break;
 800a13c:	e04a      	b.n	800a1d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	785b      	ldrb	r3, [r3, #1]
 800a142:	2b09      	cmp	r3, #9
 800a144:	d83b      	bhi.n	800a1be <USBD_StdDevReq+0xc2>
 800a146:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <USBD_StdDevReq+0x50>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a1a1 	.word	0x0800a1a1
 800a150:	0800a1b5 	.word	0x0800a1b5
 800a154:	0800a1bf 	.word	0x0800a1bf
 800a158:	0800a1ab 	.word	0x0800a1ab
 800a15c:	0800a1bf 	.word	0x0800a1bf
 800a160:	0800a17f 	.word	0x0800a17f
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a1bf 	.word	0x0800a1bf
 800a16c:	0800a197 	.word	0x0800a197
 800a170:	0800a189 	.word	0x0800a189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa3c 	bl	800a5f4 <USBD_GetDescriptor>
          break;
 800a17c:	e024      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fbcb 	bl	800a91c <USBD_SetAddress>
          break;
 800a186:	e01f      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fc0a 	bl	800a9a4 <USBD_SetConfig>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
          break;
 800a194:	e018      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fcad 	bl	800aaf8 <USBD_GetConfig>
          break;
 800a19e:	e013      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fcde 	bl	800ab64 <USBD_GetStatus>
          break;
 800a1a8:	e00e      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fd0d 	bl	800abcc <USBD_SetFeature>
          break;
 800a1b2:	e009      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fd31 	bl	800ac1e <USBD_ClrFeature>
          break;
 800a1bc:	e004      	b.n	800a1c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fd88 	bl	800acd6 <USBD_CtlError>
          break;
 800a1c6:	bf00      	nop
      }
      break;
 800a1c8:	e004      	b.n	800a1d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fd82 	bl	800acd6 <USBD_CtlError>
      break;
 800a1d2:	bf00      	nop
  }

  return ret;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop

0800a1e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1f6:	2b40      	cmp	r3, #64	; 0x40
 800a1f8:	d005      	beq.n	800a206 <USBD_StdItfReq+0x26>
 800a1fa:	2b40      	cmp	r3, #64	; 0x40
 800a1fc:	d852      	bhi.n	800a2a4 <USBD_StdItfReq+0xc4>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <USBD_StdItfReq+0x26>
 800a202:	2b20      	cmp	r3, #32
 800a204:	d14e      	bne.n	800a2a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	2b02      	cmp	r3, #2
 800a212:	d840      	bhi.n	800a296 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	889b      	ldrh	r3, [r3, #4]
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d836      	bhi.n	800a28c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	889b      	ldrh	r3, [r3, #4]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff fed9 	bl	8009fde <USBD_CoreFindIF>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	2bff      	cmp	r3, #255	; 0xff
 800a234:	d01d      	beq.n	800a272 <USBD_StdItfReq+0x92>
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d11a      	bne.n	800a272 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a23c:	7bba      	ldrb	r2, [r7, #14]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	; 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00f      	beq.n	800a26c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a24c:	7bba      	ldrb	r2, [r7, #14]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a254:	7bba      	ldrb	r2, [r7, #14]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	32ae      	adds	r2, #174	; 0xae
 800a25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	4798      	blx	r3
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a26a:	e004      	b.n	800a276 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a270:	e001      	b.n	800a276 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a272:	2303      	movs	r3, #3
 800a274:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	88db      	ldrh	r3, [r3, #6]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d110      	bne.n	800a2a0 <USBD_StdItfReq+0xc0>
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10d      	bne.n	800a2a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fdf1 	bl	800ae6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a28a:	e009      	b.n	800a2a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fd21 	bl	800acd6 <USBD_CtlError>
          break;
 800a294:	e004      	b.n	800a2a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fd1c 	bl	800acd6 <USBD_CtlError>
          break;
 800a29e:	e000      	b.n	800a2a2 <USBD_StdItfReq+0xc2>
          break;
 800a2a0:	bf00      	nop
      }
      break;
 800a2a2:	e004      	b.n	800a2ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fd15 	bl	800acd6 <USBD_CtlError>
      break;
 800a2ac:	bf00      	nop
  }

  return ret;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	889b      	ldrh	r3, [r3, #4]
 800a2ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2d4:	2b40      	cmp	r3, #64	; 0x40
 800a2d6:	d007      	beq.n	800a2e8 <USBD_StdEPReq+0x30>
 800a2d8:	2b40      	cmp	r3, #64	; 0x40
 800a2da:	f200 817f 	bhi.w	800a5dc <USBD_StdEPReq+0x324>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d02a      	beq.n	800a338 <USBD_StdEPReq+0x80>
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	f040 817a 	bne.w	800a5dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7ff fe83 	bl	8009ff8 <USBD_CoreFindEP>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2f6:	7b7b      	ldrb	r3, [r7, #13]
 800a2f8:	2bff      	cmp	r3, #255	; 0xff
 800a2fa:	f000 8174 	beq.w	800a5e6 <USBD_StdEPReq+0x32e>
 800a2fe:	7b7b      	ldrb	r3, [r7, #13]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f040 8170 	bne.w	800a5e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a306:	7b7a      	ldrb	r2, [r7, #13]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a30e:	7b7a      	ldrb	r2, [r7, #13]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	32ae      	adds	r2, #174	; 0xae
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f000 8163 	beq.w	800a5e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a320:	7b7a      	ldrb	r2, [r7, #13]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	32ae      	adds	r2, #174	; 0xae
 800a326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	4798      	blx	r3
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a336:	e156      	b.n	800a5e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d008      	beq.n	800a352 <USBD_StdEPReq+0x9a>
 800a340:	2b03      	cmp	r3, #3
 800a342:	f300 8145 	bgt.w	800a5d0 <USBD_StdEPReq+0x318>
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 809b 	beq.w	800a482 <USBD_StdEPReq+0x1ca>
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d03c      	beq.n	800a3ca <USBD_StdEPReq+0x112>
 800a350:	e13e      	b.n	800a5d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d002      	beq.n	800a364 <USBD_StdEPReq+0xac>
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d016      	beq.n	800a390 <USBD_StdEPReq+0xd8>
 800a362:	e02c      	b.n	800a3be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00d      	beq.n	800a386 <USBD_StdEPReq+0xce>
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b80      	cmp	r3, #128	; 0x80
 800a36e:	d00a      	beq.n	800a386 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f004 fa2b 	bl	800e7d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a37a:	2180      	movs	r1, #128	; 0x80
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f004 fa27 	bl	800e7d0 <USBD_LL_StallEP>
 800a382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a384:	e020      	b.n	800a3c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fca4 	bl	800acd6 <USBD_CtlError>
              break;
 800a38e:	e01b      	b.n	800a3c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	885b      	ldrh	r3, [r3, #2]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10e      	bne.n	800a3b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00b      	beq.n	800a3b6 <USBD_StdEPReq+0xfe>
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	2b80      	cmp	r3, #128	; 0x80
 800a3a2:	d008      	beq.n	800a3b6 <USBD_StdEPReq+0xfe>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	88db      	ldrh	r3, [r3, #6]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d104      	bne.n	800a3b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f004 fa0d 	bl	800e7d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fd58 	bl	800ae6c <USBD_CtlSendStatus>

              break;
 800a3bc:	e004      	b.n	800a3c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fc88 	bl	800acd6 <USBD_CtlError>
              break;
 800a3c6:	bf00      	nop
          }
          break;
 800a3c8:	e107      	b.n	800a5da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d002      	beq.n	800a3dc <USBD_StdEPReq+0x124>
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d016      	beq.n	800a408 <USBD_StdEPReq+0x150>
 800a3da:	e04b      	b.n	800a474 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <USBD_StdEPReq+0x146>
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	2b80      	cmp	r3, #128	; 0x80
 800a3e6:	d00a      	beq.n	800a3fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f004 f9ef 	bl	800e7d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f2:	2180      	movs	r1, #128	; 0x80
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f004 f9eb 	bl	800e7d0 <USBD_LL_StallEP>
 800a3fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3fc:	e040      	b.n	800a480 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fc68 	bl	800acd6 <USBD_CtlError>
              break;
 800a406:	e03b      	b.n	800a480 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	885b      	ldrh	r3, [r3, #2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d136      	bne.n	800a47e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a416:	2b00      	cmp	r3, #0
 800a418:	d004      	beq.n	800a424 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f004 f9f5 	bl	800e80e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fd21 	bl	800ae6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff fde2 	bl	8009ff8 <USBD_CoreFindEP>
 800a434:	4603      	mov	r3, r0
 800a436:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a438:	7b7b      	ldrb	r3, [r7, #13]
 800a43a:	2bff      	cmp	r3, #255	; 0xff
 800a43c:	d01f      	beq.n	800a47e <USBD_StdEPReq+0x1c6>
 800a43e:	7b7b      	ldrb	r3, [r7, #13]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d11c      	bne.n	800a47e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a444:	7b7a      	ldrb	r2, [r7, #13]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a44c:	7b7a      	ldrb	r2, [r7, #13]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32ae      	adds	r2, #174	; 0xae
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d010      	beq.n	800a47e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a45c:	7b7a      	ldrb	r2, [r7, #13]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32ae      	adds	r2, #174	; 0xae
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a472:	e004      	b.n	800a47e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fc2d 	bl	800acd6 <USBD_CtlError>
              break;
 800a47c:	e000      	b.n	800a480 <USBD_StdEPReq+0x1c8>
              break;
 800a47e:	bf00      	nop
          }
          break;
 800a480:	e0ab      	b.n	800a5da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d002      	beq.n	800a494 <USBD_StdEPReq+0x1dc>
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d032      	beq.n	800a4f8 <USBD_StdEPReq+0x240>
 800a492:	e097      	b.n	800a5c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d007      	beq.n	800a4aa <USBD_StdEPReq+0x1f2>
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b80      	cmp	r3, #128	; 0x80
 800a49e:	d004      	beq.n	800a4aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fc17 	bl	800acd6 <USBD_CtlError>
                break;
 800a4a8:	e091      	b.n	800a5ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	da0b      	bge.n	800a4ca <USBD_StdEPReq+0x212>
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	e00b      	b.n	800a4e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	4413      	add	r3, r2
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fc61 	bl	800adb8 <USBD_CtlSendData>
              break;
 800a4f6:	e06a      	b.n	800a5ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	da11      	bge.n	800a524 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	f003 020f 	and.w	r2, r3, #15
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	440b      	add	r3, r1
 800a512:	3324      	adds	r3, #36	; 0x24
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d117      	bne.n	800a54a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fbda 	bl	800acd6 <USBD_CtlError>
                  break;
 800a522:	e054      	b.n	800a5ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	f003 020f 	and.w	r2, r3, #15
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	440b      	add	r3, r1
 800a536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d104      	bne.n	800a54a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fbc7 	bl	800acd6 <USBD_CtlError>
                  break;
 800a548:	e041      	b.n	800a5ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a54a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	da0b      	bge.n	800a56a <USBD_StdEPReq+0x2b2>
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	3310      	adds	r3, #16
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4413      	add	r3, r2
 800a566:	3304      	adds	r3, #4
 800a568:	e00b      	b.n	800a582 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a570:	4613      	mov	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	4413      	add	r3, r2
 800a580:	3304      	adds	r3, #4
 800a582:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <USBD_StdEPReq+0x2d8>
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b80      	cmp	r3, #128	; 0x80
 800a58e:	d103      	bne.n	800a598 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	e00e      	b.n	800a5b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f004 f955 	bl	800e84c <USBD_LL_IsStallEP>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e002      	b.n	800a5b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fbfb 	bl	800adb8 <USBD_CtlSendData>
              break;
 800a5c2:	e004      	b.n	800a5ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fb85 	bl	800acd6 <USBD_CtlError>
              break;
 800a5cc:	bf00      	nop
          }
          break;
 800a5ce:	e004      	b.n	800a5da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fb7f 	bl	800acd6 <USBD_CtlError>
          break;
 800a5d8:	bf00      	nop
      }
      break;
 800a5da:	e005      	b.n	800a5e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fb79 	bl	800acd6 <USBD_CtlError>
      break;
 800a5e4:	e000      	b.n	800a5e8 <USBD_StdEPReq+0x330>
      break;
 800a5e6:	bf00      	nop
  }

  return ret;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	885b      	ldrh	r3, [r3, #2]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	2b0e      	cmp	r3, #14
 800a616:	f200 8152 	bhi.w	800a8be <USBD_GetDescriptor+0x2ca>
 800a61a:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <USBD_GetDescriptor+0x2c>)
 800a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a620:	0800a691 	.word	0x0800a691
 800a624:	0800a6a9 	.word	0x0800a6a9
 800a628:	0800a6e9 	.word	0x0800a6e9
 800a62c:	0800a8bf 	.word	0x0800a8bf
 800a630:	0800a8bf 	.word	0x0800a8bf
 800a634:	0800a85f 	.word	0x0800a85f
 800a638:	0800a88b 	.word	0x0800a88b
 800a63c:	0800a8bf 	.word	0x0800a8bf
 800a640:	0800a8bf 	.word	0x0800a8bf
 800a644:	0800a8bf 	.word	0x0800a8bf
 800a648:	0800a8bf 	.word	0x0800a8bf
 800a64c:	0800a8bf 	.word	0x0800a8bf
 800a650:	0800a8bf 	.word	0x0800a8bf
 800a654:	0800a8bf 	.word	0x0800a8bf
 800a658:	0800a65d 	.word	0x0800a65d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	7c12      	ldrb	r2, [r2, #16]
 800a674:	f107 0108 	add.w	r1, r7, #8
 800a678:	4610      	mov	r0, r2
 800a67a:	4798      	blx	r3
 800a67c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a67e:	e126      	b.n	800a8ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fb27 	bl	800acd6 <USBD_CtlError>
        err++;
 800a688:	7afb      	ldrb	r3, [r7, #11]
 800a68a:	3301      	adds	r3, #1
 800a68c:	72fb      	strb	r3, [r7, #11]
      break;
 800a68e:	e11e      	b.n	800a8ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	7c12      	ldrb	r2, [r2, #16]
 800a69c:	f107 0108 	add.w	r1, r7, #8
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4798      	blx	r3
 800a6a4:	60f8      	str	r0, [r7, #12]
      break;
 800a6a6:	e112      	b.n	800a8ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7c1b      	ldrb	r3, [r3, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10d      	bne.n	800a6cc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b8:	f107 0208 	add.w	r2, r7, #8
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
 800a6c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6ca:	e100      	b.n	800a8ce <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	f107 0208 	add.w	r2, r7, #8
 800a6d8:	4610      	mov	r0, r2
 800a6da:	4798      	blx	r3
 800a6dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	701a      	strb	r2, [r3, #0]
      break;
 800a6e6:	e0f2      	b.n	800a8ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	885b      	ldrh	r3, [r3, #2]
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b05      	cmp	r3, #5
 800a6f0:	f200 80ac 	bhi.w	800a84c <USBD_GetDescriptor+0x258>
 800a6f4:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <USBD_GetDescriptor+0x108>)
 800a6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fa:	bf00      	nop
 800a6fc:	0800a715 	.word	0x0800a715
 800a700:	0800a749 	.word	0x0800a749
 800a704:	0800a77d 	.word	0x0800a77d
 800a708:	0800a7b1 	.word	0x0800a7b1
 800a70c:	0800a7e5 	.word	0x0800a7e5
 800a710:	0800a819 	.word	0x0800a819
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	7c12      	ldrb	r2, [r2, #16]
 800a72c:	f107 0108 	add.w	r1, r7, #8
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a736:	e091      	b.n	800a85c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 facb 	bl	800acd6 <USBD_CtlError>
            err++;
 800a740:	7afb      	ldrb	r3, [r7, #11]
 800a742:	3301      	adds	r3, #1
 800a744:	72fb      	strb	r3, [r7, #11]
          break;
 800a746:	e089      	b.n	800a85c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00b      	beq.n	800a76c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	7c12      	ldrb	r2, [r2, #16]
 800a760:	f107 0108 	add.w	r1, r7, #8
 800a764:	4610      	mov	r0, r2
 800a766:	4798      	blx	r3
 800a768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a76a:	e077      	b.n	800a85c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fab1 	bl	800acd6 <USBD_CtlError>
            err++;
 800a774:	7afb      	ldrb	r3, [r7, #11]
 800a776:	3301      	adds	r3, #1
 800a778:	72fb      	strb	r3, [r7, #11]
          break;
 800a77a:	e06f      	b.n	800a85c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00b      	beq.n	800a7a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	f107 0108 	add.w	r1, r7, #8
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a79e:	e05d      	b.n	800a85c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa97 	bl	800acd6 <USBD_CtlError>
            err++;
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ae:	e055      	b.n	800a85c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	7c12      	ldrb	r2, [r2, #16]
 800a7c8:	f107 0108 	add.w	r1, r7, #8
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4798      	blx	r3
 800a7d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7d2:	e043      	b.n	800a85c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fa7d 	bl	800acd6 <USBD_CtlError>
            err++;
 800a7dc:	7afb      	ldrb	r3, [r7, #11]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7e2:	e03b      	b.n	800a85c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	7c12      	ldrb	r2, [r2, #16]
 800a7fc:	f107 0108 	add.w	r1, r7, #8
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
 800a804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a806:	e029      	b.n	800a85c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa63 	bl	800acd6 <USBD_CtlError>
            err++;
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	3301      	adds	r3, #1
 800a814:	72fb      	strb	r3, [r7, #11]
          break;
 800a816:	e021      	b.n	800a85c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00b      	beq.n	800a83c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	7c12      	ldrb	r2, [r2, #16]
 800a830:	f107 0108 	add.w	r1, r7, #8
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
 800a838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a83a:	e00f      	b.n	800a85c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa49 	bl	800acd6 <USBD_CtlError>
            err++;
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	3301      	adds	r3, #1
 800a848:	72fb      	strb	r3, [r7, #11]
          break;
 800a84a:	e007      	b.n	800a85c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa41 	bl	800acd6 <USBD_CtlError>
          err++;
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	3301      	adds	r3, #1
 800a858:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a85a:	bf00      	nop
      }
      break;
 800a85c:	e037      	b.n	800a8ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	7c1b      	ldrb	r3, [r3, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86e:	f107 0208 	add.w	r2, r7, #8
 800a872:	4610      	mov	r0, r2
 800a874:	4798      	blx	r3
 800a876:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a878:	e029      	b.n	800a8ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fa2a 	bl	800acd6 <USBD_CtlError>
        err++;
 800a882:	7afb      	ldrb	r3, [r7, #11]
 800a884:	3301      	adds	r3, #1
 800a886:	72fb      	strb	r3, [r7, #11]
      break;
 800a888:	e021      	b.n	800a8ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	7c1b      	ldrb	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10d      	bne.n	800a8ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	f107 0208 	add.w	r2, r7, #8
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4798      	blx	r3
 800a8a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	2207      	movs	r2, #7
 800a8aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8ac:	e00f      	b.n	800a8ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fa10 	bl	800acd6 <USBD_CtlError>
        err++;
 800a8b6:	7afb      	ldrb	r3, [r7, #11]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a8bc:	e007      	b.n	800a8ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fa08 	bl	800acd6 <USBD_CtlError>
      err++;
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	72fb      	strb	r3, [r7, #11]
      break;
 800a8cc:	bf00      	nop
  }

  if (err != 0U)
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d11e      	bne.n	800a912 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	88db      	ldrh	r3, [r3, #6]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d016      	beq.n	800a90a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a8dc:	893b      	ldrh	r3, [r7, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00e      	beq.n	800a900 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	88da      	ldrh	r2, [r3, #6]
 800a8e6:	893b      	ldrh	r3, [r7, #8]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	bf28      	it	cs
 800a8ec:	4613      	movcs	r3, r2
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8f2:	893b      	ldrh	r3, [r7, #8]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	68f9      	ldr	r1, [r7, #12]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fa5d 	bl	800adb8 <USBD_CtlSendData>
 800a8fe:	e009      	b.n	800a914 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f9e7 	bl	800acd6 <USBD_CtlError>
 800a908:	e004      	b.n	800a914 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 faae 	bl	800ae6c <USBD_CtlSendStatus>
 800a910:	e000      	b.n	800a914 <USBD_GetDescriptor+0x320>
    return;
 800a912:	bf00      	nop
  }
}
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop

0800a91c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	889b      	ldrh	r3, [r3, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d131      	bne.n	800a992 <USBD_SetAddress+0x76>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	88db      	ldrh	r3, [r3, #6]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d12d      	bne.n	800a992 <USBD_SetAddress+0x76>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	885b      	ldrh	r3, [r3, #2]
 800a93a:	2b7f      	cmp	r3, #127	; 0x7f
 800a93c:	d829      	bhi.n	800a992 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	885b      	ldrh	r3, [r3, #2]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a948:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b03      	cmp	r3, #3
 800a954:	d104      	bne.n	800a960 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f9bc 	bl	800acd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95e:	e01d      	b.n	800a99c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7bfa      	ldrb	r2, [r7, #15]
 800a964:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f003 ff99 	bl	800e8a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa7a 	bl	800ae6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d004      	beq.n	800a988 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2202      	movs	r2, #2
 800a982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a986:	e009      	b.n	800a99c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a990:	e004      	b.n	800a99c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f99e 	bl	800acd6 <USBD_CtlError>
  }
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	885b      	ldrh	r3, [r3, #2]
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	4b4e      	ldr	r3, [pc, #312]	; (800aaf4 <USBD_SetConfig+0x150>)
 800a9ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9bc:	4b4d      	ldr	r3, [pc, #308]	; (800aaf4 <USBD_SetConfig+0x150>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d905      	bls.n	800a9d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f985 	bl	800acd6 <USBD_CtlError>
    return USBD_FAIL;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e08c      	b.n	800aaea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d002      	beq.n	800a9e2 <USBD_SetConfig+0x3e>
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d029      	beq.n	800aa34 <USBD_SetConfig+0x90>
 800a9e0:	e075      	b.n	800aace <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a9e2:	4b44      	ldr	r3, [pc, #272]	; (800aaf4 <USBD_SetConfig+0x150>)
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d020      	beq.n	800aa2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a9ea:	4b42      	ldr	r3, [pc, #264]	; (800aaf4 <USBD_SetConfig+0x150>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9f4:	4b3f      	ldr	r3, [pc, #252]	; (800aaf4 <USBD_SetConfig+0x150>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7fe ffbd 	bl	800997a <USBD_SetClassConfig>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d008      	beq.n	800aa1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f962 	bl	800acd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2202      	movs	r2, #2
 800aa16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa1a:	e065      	b.n	800aae8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fa25 	bl	800ae6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2203      	movs	r2, #3
 800aa26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa2a:	e05d      	b.n	800aae8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fa1d 	bl	800ae6c <USBD_CtlSendStatus>
      break;
 800aa32:	e059      	b.n	800aae8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa34:	4b2f      	ldr	r3, [pc, #188]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d112      	bne.n	800aa62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa44:	4b2b      	ldr	r3, [pc, #172]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa4e:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7fe ffac 	bl	80099b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fa06 	bl	800ae6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa60:	e042      	b.n	800aae8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa62:	4b24      	ldr	r3, [pc, #144]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d02a      	beq.n	800aac6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7fe ff9a 	bl	80099b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa7e:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa88:	4b1a      	ldr	r3, [pc, #104]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7fe ff73 	bl	800997a <USBD_SetClassConfig>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00f      	beq.n	800aabe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f918 	bl	800acd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7fe ff7f 	bl	80099b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aabc:	e014      	b.n	800aae8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 f9d4 	bl	800ae6c <USBD_CtlSendStatus>
      break;
 800aac4:	e010      	b.n	800aae8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f9d0 	bl	800ae6c <USBD_CtlSendStatus>
      break;
 800aacc:	e00c      	b.n	800aae8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f900 	bl	800acd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aad6:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <USBD_SetConfig+0x150>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7fe ff68 	bl	80099b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aae2:	2303      	movs	r3, #3
 800aae4:	73fb      	strb	r3, [r7, #15]
      break;
 800aae6:	bf00      	nop
  }

  return ret;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000f5c 	.word	0x20000f5c

0800aaf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	88db      	ldrh	r3, [r3, #6]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d004      	beq.n	800ab14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f8e2 	bl	800acd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab12:	e023      	b.n	800ab5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	dc02      	bgt.n	800ab26 <USBD_GetConfig+0x2e>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	dc03      	bgt.n	800ab2c <USBD_GetConfig+0x34>
 800ab24:	e015      	b.n	800ab52 <USBD_GetConfig+0x5a>
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d00b      	beq.n	800ab42 <USBD_GetConfig+0x4a>
 800ab2a:	e012      	b.n	800ab52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3308      	adds	r3, #8
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f93c 	bl	800adb8 <USBD_CtlSendData>
        break;
 800ab40:	e00c      	b.n	800ab5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3304      	adds	r3, #4
 800ab46:	2201      	movs	r2, #1
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f934 	bl	800adb8 <USBD_CtlSendData>
        break;
 800ab50:	e004      	b.n	800ab5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f8be 	bl	800acd6 <USBD_CtlError>
        break;
 800ab5a:	bf00      	nop
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d81e      	bhi.n	800abba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	88db      	ldrh	r3, [r3, #6]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d004      	beq.n	800ab8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f8a5 	bl	800acd6 <USBD_CtlError>
        break;
 800ab8c:	e01a      	b.n	800abc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f043 0202 	orr.w	r2, r3, #2
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	330c      	adds	r3, #12
 800abae:	2202      	movs	r2, #2
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f900 	bl	800adb8 <USBD_CtlSendData>
      break;
 800abb8:	e004      	b.n	800abc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f88a 	bl	800acd6 <USBD_CtlError>
      break;
 800abc2:	bf00      	nop
  }
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	885b      	ldrh	r3, [r3, #2]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d107      	bne.n	800abee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f940 	bl	800ae6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800abec:	e013      	b.n	800ac16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d10b      	bne.n	800ac0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	0a1b      	lsrs	r3, r3, #8
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f930 	bl	800ae6c <USBD_CtlSendStatus>
}
 800ac0c:	e003      	b.n	800ac16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f860 	bl	800acd6 <USBD_CtlError>
}
 800ac16:	bf00      	nop
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b082      	sub	sp, #8
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	3b01      	subs	r3, #1
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d80b      	bhi.n	800ac4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d10c      	bne.n	800ac58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f910 	bl	800ae6c <USBD_CtlSendStatus>
      }
      break;
 800ac4c:	e004      	b.n	800ac58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f840 	bl	800acd6 <USBD_CtlError>
      break;
 800ac56:	e000      	b.n	800ac5a <USBD_ClrFeature+0x3c>
      break;
 800ac58:	bf00      	nop
  }
}
 800ac5a:	bf00      	nop
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	781a      	ldrb	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	781a      	ldrb	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff fa17 	bl	800a0c0 <SWAPBYTE>
 800ac92:	4603      	mov	r3, r0
 800ac94:	461a      	mov	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3301      	adds	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fa0a 	bl	800a0c0 <SWAPBYTE>
 800acac:	4603      	mov	r3, r0
 800acae:	461a      	mov	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3301      	adds	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3301      	adds	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff f9fd 	bl	800a0c0 <SWAPBYTE>
 800acc6:	4603      	mov	r3, r0
 800acc8:	461a      	mov	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	80da      	strh	r2, [r3, #6]
}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ace0:	2180      	movs	r1, #128	; 0x80
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f003 fd74 	bl	800e7d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ace8:	2100      	movs	r1, #0
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f003 fd70 	bl	800e7d0 <USBD_LL_StallEP>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d036      	beq.n	800ad7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad12:	6938      	ldr	r0, [r7, #16]
 800ad14:	f000 f836 	bl	800ad84 <USBD_GetLen>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7812      	ldrb	r2, [r2, #0]
 800ad30:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	3301      	adds	r3, #1
 800ad36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	2203      	movs	r2, #3
 800ad40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	3301      	adds	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad48:	e013      	b.n	800ad72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	4413      	add	r3, r2
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	7812      	ldrb	r2, [r2, #0]
 800ad54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	613b      	str	r3, [r7, #16]
    idx++;
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	4413      	add	r3, r2
 800ad68:	2200      	movs	r2, #0
 800ad6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e7      	bne.n	800ad4a <USBD_GetString+0x52>
 800ad7a:	e000      	b.n	800ad7e <USBD_GetString+0x86>
    return;
 800ad7c:	bf00      	nop
  }
}
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad94:	e005      	b.n	800ada2 <USBD_GetLen+0x1e>
  {
    len++;
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1f5      	bne.n	800ad96 <USBD_GetLen+0x12>
  }

  return len;
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	2100      	movs	r1, #0
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f003 fd7f 	bl	800e8e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	2100      	movs	r1, #0
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f003 fd6e 	bl	800e8e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2203      	movs	r2, #3
 800ae20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	2100      	movs	r1, #0
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f003 fd72 	bl	800e924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f003 fd61 	bl	800e924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2204      	movs	r2, #4
 800ae78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2100      	movs	r1, #0
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f003 fd2d 	bl	800e8e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2205      	movs	r2, #5
 800ae9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea2:	2300      	movs	r3, #0
 800aea4:	2200      	movs	r2, #0
 800aea6:	2100      	movs	r1, #0
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f003 fd3b 	bl	800e924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800aebc:	bf00      	nop
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aece:	f3ef 8305 	mrs	r3, IPSR
 800aed2:	60bb      	str	r3, [r7, #8]
  return(result);
 800aed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10f      	bne.n	800aefa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeda:	f3ef 8310 	mrs	r3, PRIMASK
 800aede:	607b      	str	r3, [r7, #4]
  return(result);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d105      	bne.n	800aef2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aee6:	f3ef 8311 	mrs	r3, BASEPRI
 800aeea:	603b      	str	r3, [r7, #0]
  return(result);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <osKernelInitialize+0x3a>
 800aef2:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <osKernelInitialize+0x64>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d103      	bne.n	800af02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aefa:	f06f 0305 	mvn.w	r3, #5
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	e00c      	b.n	800af1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800af02:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <osKernelInitialize+0x64>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d105      	bne.n	800af16 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800af0a:	4b08      	ldr	r3, [pc, #32]	; (800af2c <osKernelInitialize+0x64>)
 800af0c:	2201      	movs	r2, #1
 800af0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e002      	b.n	800af1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800af16:	f04f 33ff 	mov.w	r3, #4294967295
 800af1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800af1c:	68fb      	ldr	r3, [r7, #12]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	20000f60 	.word	0x20000f60

0800af30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af36:	f3ef 8305 	mrs	r3, IPSR
 800af3a:	60bb      	str	r3, [r7, #8]
  return(result);
 800af3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10f      	bne.n	800af62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af42:	f3ef 8310 	mrs	r3, PRIMASK
 800af46:	607b      	str	r3, [r7, #4]
  return(result);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d105      	bne.n	800af5a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af4e:	f3ef 8311 	mrs	r3, BASEPRI
 800af52:	603b      	str	r3, [r7, #0]
  return(result);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <osKernelStart+0x3a>
 800af5a:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <osKernelStart+0x68>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d103      	bne.n	800af6a <osKernelStart+0x3a>
    stat = osErrorISR;
 800af62:	f06f 0305 	mvn.w	r3, #5
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	e010      	b.n	800af8c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <osKernelStart+0x68>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d109      	bne.n	800af86 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af72:	f7ff ffa1 	bl	800aeb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af76:	4b08      	ldr	r3, [pc, #32]	; (800af98 <osKernelStart+0x68>)
 800af78:	2202      	movs	r2, #2
 800af7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af7c:	f001 fa2c 	bl	800c3d8 <vTaskStartScheduler>
      stat = osOK;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e002      	b.n	800af8c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
 800af8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800af8c:	68fb      	ldr	r3, [r7, #12]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20000f60 	.word	0x20000f60

0800af9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b090      	sub	sp, #64	; 0x40
 800afa0:	af04      	add	r7, sp, #16
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afac:	f3ef 8305 	mrs	r3, IPSR
 800afb0:	61fb      	str	r3, [r7, #28]
  return(result);
 800afb2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f040 808f 	bne.w	800b0d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afba:	f3ef 8310 	mrs	r3, PRIMASK
 800afbe:	61bb      	str	r3, [r7, #24]
  return(result);
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d105      	bne.n	800afd2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afc6:	f3ef 8311 	mrs	r3, BASEPRI
 800afca:	617b      	str	r3, [r7, #20]
  return(result);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <osThreadNew+0x3e>
 800afd2:	4b44      	ldr	r3, [pc, #272]	; (800b0e4 <osThreadNew+0x148>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d07e      	beq.n	800b0d8 <osThreadNew+0x13c>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d07b      	beq.n	800b0d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800afe0:	2380      	movs	r3, #128	; 0x80
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800afe4:	2318      	movs	r3, #24
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800afe8:	2300      	movs	r3, #0
 800afea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
 800aff0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d045      	beq.n	800b084 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <osThreadNew+0x6a>
        name = attr->name;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	2b00      	cmp	r3, #0
 800b018:	d008      	beq.n	800b02c <osThreadNew+0x90>
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	2b38      	cmp	r3, #56	; 0x38
 800b01e:	d805      	bhi.n	800b02c <osThreadNew+0x90>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <osThreadNew+0x94>
        return (NULL);
 800b02c:	2300      	movs	r3, #0
 800b02e:	e054      	b.n	800b0da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	089b      	lsrs	r3, r3, #2
 800b03e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <osThreadNew+0xca>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	2ba7      	cmp	r3, #167	; 0xa7
 800b04e:	d90a      	bls.n	800b066 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <osThreadNew+0xca>
        mem = 1;
 800b060:	2301      	movs	r3, #1
 800b062:	623b      	str	r3, [r7, #32]
 800b064:	e010      	b.n	800b088 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10c      	bne.n	800b088 <osThreadNew+0xec>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d108      	bne.n	800b088 <osThreadNew+0xec>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <osThreadNew+0xec>
          mem = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	623b      	str	r3, [r7, #32]
 800b082:	e001      	b.n	800b088 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d110      	bne.n	800b0b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b096:	9202      	str	r2, [sp, #8]
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f000 ffa1 	bl	800bfec <xTaskCreateStatic>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	613b      	str	r3, [r7, #16]
 800b0ae:	e013      	b.n	800b0d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d110      	bne.n	800b0d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	f107 0310 	add.w	r3, r7, #16
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 fff2 	bl	800c0b2 <xTaskCreate>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d001      	beq.n	800b0d8 <osThreadNew+0x13c>
          hTask = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b0d8:	693b      	ldr	r3, [r7, #16]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3730      	adds	r7, #48	; 0x30
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000f60 	.word	0x20000f60

0800b0e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f0:	f3ef 8305 	mrs	r3, IPSR
 800b0f4:	613b      	str	r3, [r7, #16]
  return(result);
 800b0f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10f      	bne.n	800b11c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b100:	60fb      	str	r3, [r7, #12]
  return(result);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d105      	bne.n	800b114 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b108:	f3ef 8311 	mrs	r3, BASEPRI
 800b10c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <osDelay+0x3c>
 800b114:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <osDelay+0x58>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d103      	bne.n	800b124 <osDelay+0x3c>
    stat = osErrorISR;
 800b11c:	f06f 0305 	mvn.w	r3, #5
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	e007      	b.n	800b134 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 f91c 	bl	800c36c <vTaskDelay>
    }
  }

  return (stat);
 800b134:	697b      	ldr	r3, [r7, #20]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000f60 	.word	0x20000f60

0800b144 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f002 fadf 	bl	800d710 <pvTimerGetTimerID>
 800b152:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d005      	beq.n	800b166 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	6852      	ldr	r2, [r2, #4]
 800b162:	4610      	mov	r0, r2
 800b164:	4798      	blx	r3
  }
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	; 0x38
 800b174:	af02      	add	r7, sp, #8
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	607a      	str	r2, [r7, #4]
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	460b      	mov	r3, r1
 800b17e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b180:	2300      	movs	r3, #0
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b184:	f3ef 8305 	mrs	r3, IPSR
 800b188:	61bb      	str	r3, [r7, #24]
  return(result);
 800b18a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d16a      	bne.n	800b266 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b190:	f3ef 8310 	mrs	r3, PRIMASK
 800b194:	617b      	str	r3, [r7, #20]
  return(result);
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d105      	bne.n	800b1a8 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b19c:	f3ef 8311 	mrs	r3, BASEPRI
 800b1a0:	613b      	str	r3, [r7, #16]
  return(result);
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <osTimerNew+0x40>
 800b1a8:	4b31      	ldr	r3, [pc, #196]	; (800b270 <osTimerNew+0x100>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d05a      	beq.n	800b266 <osTimerNew+0xf6>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d057      	beq.n	800b266 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b1b6:	2008      	movs	r0, #8
 800b1b8:	f002 fd04 	bl	800dbc4 <pvPortMalloc>
 800b1bc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d050      	beq.n	800b266 <osTimerNew+0xf6>
      callb->func = func;
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <osTimerNew+0x6c>
        reload = pdFALSE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1da:	e001      	b.n	800b1e0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	623b      	str	r3, [r7, #32]
      name = NULL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01c      	beq.n	800b22a <osTimerNew+0xba>
        if (attr->name != NULL) {
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <osTimerNew+0x8e>
          name = attr->name;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d006      	beq.n	800b214 <osTimerNew+0xa4>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	2b2b      	cmp	r3, #43	; 0x2b
 800b20c:	d902      	bls.n	800b214 <osTimerNew+0xa4>
          mem = 1;
 800b20e:	2301      	movs	r3, #1
 800b210:	623b      	str	r3, [r7, #32]
 800b212:	e00c      	b.n	800b22e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d108      	bne.n	800b22e <osTimerNew+0xbe>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <osTimerNew+0xbe>
            mem = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	623b      	str	r3, [r7, #32]
 800b228:	e001      	b.n	800b22e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d10c      	bne.n	800b24e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	4b0e      	ldr	r3, [pc, #56]	; (800b274 <osTimerNew+0x104>)
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b242:	2101      	movs	r1, #1
 800b244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b246:	f001 fed2 	bl	800cfee <xTimerCreateStatic>
 800b24a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b24c:	e00b      	b.n	800b266 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d108      	bne.n	800b266 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b254:	4b07      	ldr	r3, [pc, #28]	; (800b274 <osTimerNew+0x104>)
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b25c:	2101      	movs	r1, #1
 800b25e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b260:	f001 fea4 	bl	800cfac <xTimerCreate>
 800b264:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3730      	adds	r7, #48	; 0x30
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20000f60 	.word	0x20000f60
 800b274:	0800b145 	.word	0x0800b145

0800b278 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08c      	sub	sp, #48	; 0x30
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b284:	2300      	movs	r3, #0
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b288:	f3ef 8305 	mrs	r3, IPSR
 800b28c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b28e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b290:	2b00      	cmp	r3, #0
 800b292:	d16f      	bne.n	800b374 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b294:	f3ef 8310 	mrs	r3, PRIMASK
 800b298:	617b      	str	r3, [r7, #20]
  return(result);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d105      	bne.n	800b2ac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b2a4:	613b      	str	r3, [r7, #16]
  return(result);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <osMessageQueueNew+0x3c>
 800b2ac:	4b34      	ldr	r3, [pc, #208]	; (800b380 <osMessageQueueNew+0x108>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d05f      	beq.n	800b374 <osMessageQueueNew+0xfc>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d05c      	beq.n	800b374 <osMessageQueueNew+0xfc>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d059      	beq.n	800b374 <osMessageQueueNew+0xfc>
    mem = -1;
 800b2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d029      	beq.n	800b320 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d012      	beq.n	800b2fa <osMessageQueueNew+0x82>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b4f      	cmp	r3, #79	; 0x4f
 800b2da:	d90e      	bls.n	800b2fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00a      	beq.n	800b2fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	695a      	ldr	r2, [r3, #20]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68b9      	ldr	r1, [r7, #8]
 800b2ec:	fb01 f303 	mul.w	r3, r1, r3
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d302      	bcc.n	800b2fa <osMessageQueueNew+0x82>
        mem = 1;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	623b      	str	r3, [r7, #32]
 800b2f8:	e014      	b.n	800b324 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d110      	bne.n	800b324 <osMessageQueueNew+0xac>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10c      	bne.n	800b324 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d108      	bne.n	800b324 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d104      	bne.n	800b324 <osMessageQueueNew+0xac>
          mem = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	623b      	str	r3, [r7, #32]
 800b31e:	e001      	b.n	800b324 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d10b      	bne.n	800b342 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	2100      	movs	r1, #0
 800b334:	9100      	str	r1, [sp, #0]
 800b336:	68b9      	ldr	r1, [r7, #8]
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 f975 	bl	800b628 <xQueueGenericCreateStatic>
 800b33e:	6278      	str	r0, [r7, #36]	; 0x24
 800b340:	e008      	b.n	800b354 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d105      	bne.n	800b354 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b348:	2200      	movs	r2, #0
 800b34a:	68b9      	ldr	r1, [r7, #8]
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 f9ed 	bl	800b72c <xQueueGenericCreate>
 800b352:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	61fb      	str	r3, [r7, #28]
 800b366:	e001      	b.n	800b36c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b36c:	69f9      	ldr	r1, [r7, #28]
 800b36e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b370:	f000 fdde 	bl	800bf30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b376:	4618      	mov	r0, r3
 800b378:	3728      	adds	r7, #40	; 0x28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20000f60 	.word	0x20000f60

0800b384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4a07      	ldr	r2, [pc, #28]	; (800b3b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	4a06      	ldr	r2, [pc, #24]	; (800b3b4 <vApplicationGetIdleTaskMemory+0x30>)
 800b39a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2280      	movs	r2, #128	; 0x80
 800b3a0:	601a      	str	r2, [r3, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20000f64 	.word	0x20000f64
 800b3b4:	2000100c 	.word	0x2000100c

0800b3b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4a07      	ldr	r2, [pc, #28]	; (800b3e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b3c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	4a06      	ldr	r2, [pc, #24]	; (800b3e8 <vApplicationGetTimerTaskMemory+0x30>)
 800b3ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3d6:	601a      	str	r2, [r3, #0]
}
 800b3d8:	bf00      	nop
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	2000120c 	.word	0x2000120c
 800b3e8:	200012b4 	.word	0x200012b4

0800b3ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f103 0208 	add.w	r2, r3, #8
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f04f 32ff 	mov.w	r2, #4294967295
 800b404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f103 0208 	add.w	r2, r3, #8
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f103 0208 	add.w	r2, r3, #8
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b43a:	bf00      	nop
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b446:	b480      	push	{r7}
 800b448:	b085      	sub	sp, #20
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	689a      	ldr	r2, [r3, #8]
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	601a      	str	r2, [r3, #0]
}
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d103      	bne.n	800b4ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e00c      	b.n	800b4c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e002      	b.n	800b4bc <vListInsert+0x2e>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d2f6      	bcs.n	800b4b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	6892      	ldr	r2, [r2, #8]
 800b516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	6852      	ldr	r2, [r2, #4]
 800b520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d103      	bne.n	800b534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	1e5a      	subs	r2, r3, #1
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10c      	bne.n	800b582 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	b672      	cpsid	i
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	b662      	cpsie	i
 800b57c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b582:	f002 f9f3 	bl	800d96c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b592:	fb01 f303 	mul.w	r3, r1, r3
 800b596:	441a      	add	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	68f9      	ldr	r1, [r7, #12]
 800b5b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	441a      	add	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	22ff      	movs	r2, #255	; 0xff
 800b5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d114      	bne.n	800b602 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01a      	beq.n	800b616 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3310      	adds	r3, #16
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f001 f9b1 	bl	800c94c <xTaskRemoveFromEventList>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d012      	beq.n	800b616 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	; (800b624 <xQueueGenericReset+0xd0>)
 800b5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	e009      	b.n	800b616 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3310      	adds	r3, #16
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff fef0 	bl	800b3ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3324      	adds	r3, #36	; 0x24
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff feeb 	bl	800b3ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b616:	f002 f9dd 	bl	800d9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b61a:	2301      	movs	r3, #1
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	e000ed04 	.word	0xe000ed04

0800b628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b08e      	sub	sp, #56	; 0x38
 800b62c:	af02      	add	r7, sp, #8
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10c      	bne.n	800b656 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	b672      	cpsid	i
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	b662      	cpsie	i
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10c      	bne.n	800b676 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b660:	b672      	cpsid	i
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	b662      	cpsie	i
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <xQueueGenericCreateStatic+0x5a>
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <xQueueGenericCreateStatic+0x5e>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <xQueueGenericCreateStatic+0x60>
 800b686:	2300      	movs	r3, #0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10c      	bne.n	800b6a6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	b672      	cpsid	i
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	b662      	cpsie	i
 800b6a0:	623b      	str	r3, [r7, #32]
}
 800b6a2:	bf00      	nop
 800b6a4:	e7fe      	b.n	800b6a4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <xQueueGenericCreateStatic+0x8a>
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <xQueueGenericCreateStatic+0x8e>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e000      	b.n	800b6b8 <xQueueGenericCreateStatic+0x90>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10c      	bne.n	800b6d6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	b672      	cpsid	i
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	b662      	cpsie	i
 800b6d0:	61fb      	str	r3, [r7, #28]
}
 800b6d2:	bf00      	nop
 800b6d4:	e7fe      	b.n	800b6d4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6d6:	2350      	movs	r3, #80	; 0x50
 800b6d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b50      	cmp	r3, #80	; 0x50
 800b6de:	d00c      	beq.n	800b6fa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	b672      	cpsid	i
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	b662      	cpsie	i
 800b6f4:	61bb      	str	r3, [r7, #24]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b6fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00d      	beq.n	800b722 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b70e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	4613      	mov	r3, r2
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f847 	bl	800b7b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b724:	4618      	mov	r0, r3
 800b726:	3730      	adds	r7, #48	; 0x30
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08a      	sub	sp, #40	; 0x28
 800b730:	af02      	add	r7, sp, #8
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4613      	mov	r3, r2
 800b738:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10c      	bne.n	800b75a <xQueueGenericCreate+0x2e>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b744:	b672      	cpsid	i
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	b662      	cpsie	i
 800b754:	613b      	str	r3, [r7, #16]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b760:	2300      	movs	r3, #0
 800b762:	61fb      	str	r3, [r7, #28]
 800b764:	e004      	b.n	800b770 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	fb02 f303 	mul.w	r3, r2, r3
 800b76e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	3350      	adds	r3, #80	; 0x50
 800b774:	4618      	mov	r0, r3
 800b776:	f002 fa25 	bl	800dbc4 <pvPortMalloc>
 800b77a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d011      	beq.n	800b7a6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	3350      	adds	r3, #80	; 0x50
 800b78a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b794:	79fa      	ldrb	r2, [r7, #7]
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	4613      	mov	r3, r2
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f805 	bl	800b7b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
	}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	e002      	b.n	800b7d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b7de:	2101      	movs	r1, #1
 800b7e0:	69b8      	ldr	r0, [r7, #24]
 800b7e2:	f7ff feb7 	bl	800b554 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	78fa      	ldrb	r2, [r7, #3]
 800b7ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08e      	sub	sp, #56	; 0x38
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b806:	2300      	movs	r3, #0
 800b808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10c      	bne.n	800b82e <xQueueGenericSend+0x36>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	b672      	cpsid	i
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	b662      	cpsie	i
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d103      	bne.n	800b83c <xQueueGenericSend+0x44>
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <xQueueGenericSend+0x48>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e000      	b.n	800b842 <xQueueGenericSend+0x4a>
 800b840:	2300      	movs	r3, #0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10c      	bne.n	800b860 <xQueueGenericSend+0x68>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	b672      	cpsid	i
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	b662      	cpsie	i
 800b85a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	2b02      	cmp	r3, #2
 800b864:	d103      	bne.n	800b86e <xQueueGenericSend+0x76>
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d101      	bne.n	800b872 <xQueueGenericSend+0x7a>
 800b86e:	2301      	movs	r3, #1
 800b870:	e000      	b.n	800b874 <xQueueGenericSend+0x7c>
 800b872:	2300      	movs	r3, #0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10c      	bne.n	800b892 <xQueueGenericSend+0x9a>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	b672      	cpsid	i
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	b662      	cpsie	i
 800b88c:	623b      	str	r3, [r7, #32]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b892:	f001 fa5d 	bl	800cd50 <xTaskGetSchedulerState>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d102      	bne.n	800b8a2 <xQueueGenericSend+0xaa>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <xQueueGenericSend+0xae>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e000      	b.n	800b8a8 <xQueueGenericSend+0xb0>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10c      	bne.n	800b8c6 <xQueueGenericSend+0xce>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	b672      	cpsid	i
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	b662      	cpsie	i
 800b8c0:	61fb      	str	r3, [r7, #28]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8c6:	f002 f851 	bl	800d96c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d302      	bcc.n	800b8dc <xQueueGenericSend+0xe4>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d129      	bne.n	800b930 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	68b9      	ldr	r1, [r7, #8]
 800b8e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e2:	f000 fa15 	bl	800bd10 <prvCopyDataToQueue>
 800b8e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d010      	beq.n	800b912 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f2:	3324      	adds	r3, #36	; 0x24
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f001 f829 	bl	800c94c <xTaskRemoveFromEventList>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d013      	beq.n	800b928 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b900:	4b3f      	ldr	r3, [pc, #252]	; (800ba00 <xQueueGenericSend+0x208>)
 800b902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	e00a      	b.n	800b928 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b918:	4b39      	ldr	r3, [pc, #228]	; (800ba00 <xQueueGenericSend+0x208>)
 800b91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b928:	f002 f854 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e063      	b.n	800b9f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d103      	bne.n	800b93e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b936:	f002 f84d 	bl	800d9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e05c      	b.n	800b9f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b940:	2b00      	cmp	r3, #0
 800b942:	d106      	bne.n	800b952 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b944:	f107 0314 	add.w	r3, r7, #20
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 f865 	bl	800ca18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b94e:	2301      	movs	r3, #1
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b952:	f002 f83f 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b956:	f000 fdb3 	bl	800c4c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b95a:	f002 f807 	bl	800d96c <vPortEnterCritical>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b964:	b25b      	sxtb	r3, r3
 800b966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96a:	d103      	bne.n	800b974 <xQueueGenericSend+0x17c>
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b97a:	b25b      	sxtb	r3, r3
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b980:	d103      	bne.n	800b98a <xQueueGenericSend+0x192>
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b98a:	f002 f823 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b98e:	1d3a      	adds	r2, r7, #4
 800b990:	f107 0314 	add.w	r3, r7, #20
 800b994:	4611      	mov	r1, r2
 800b996:	4618      	mov	r0, r3
 800b998:	f001 f854 	bl	800ca44 <xTaskCheckForTimeOut>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d124      	bne.n	800b9ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9a4:	f000 faac 	bl	800bf00 <prvIsQueueFull>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d018      	beq.n	800b9e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	3310      	adds	r3, #16
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 ff74 	bl	800c8a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9be:	f000 fa37 	bl	800be30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9c2:	f000 fd8b 	bl	800c4dc <xTaskResumeAll>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f47f af7c 	bne.w	800b8c6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <xQueueGenericSend+0x208>)
 800b9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	e772      	b.n	800b8c6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e2:	f000 fa25 	bl	800be30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9e6:	f000 fd79 	bl	800c4dc <xTaskResumeAll>
 800b9ea:	e76c      	b.n	800b8c6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ee:	f000 fa1f 	bl	800be30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9f2:	f000 fd73 	bl	800c4dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3738      	adds	r7, #56	; 0x38
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	e000ed04 	.word	0xe000ed04

0800ba04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08e      	sub	sp, #56	; 0x38
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10c      	bne.n	800ba36 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	b672      	cpsid	i
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	b662      	cpsie	i
 800ba30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d103      	bne.n	800ba44 <xQueueGenericSendFromISR+0x40>
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <xQueueGenericSendFromISR+0x44>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e000      	b.n	800ba4a <xQueueGenericSendFromISR+0x46>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10c      	bne.n	800ba68 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	b672      	cpsid	i
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	b662      	cpsie	i
 800ba62:	623b      	str	r3, [r7, #32]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d103      	bne.n	800ba76 <xQueueGenericSendFromISR+0x72>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <xQueueGenericSendFromISR+0x76>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e000      	b.n	800ba7c <xQueueGenericSendFromISR+0x78>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10c      	bne.n	800ba9a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	b672      	cpsid	i
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	b662      	cpsie	i
 800ba94:	61fb      	str	r3, [r7, #28]
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba9a:	f002 f84f 	bl	800db3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba9e:	f3ef 8211 	mrs	r2, BASEPRI
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	b672      	cpsid	i
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	b662      	cpsie	i
 800bab6:	61ba      	str	r2, [r7, #24]
 800bab8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800baba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800babc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d302      	bcc.n	800bad0 <xQueueGenericSendFromISR+0xcc>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d12c      	bne.n	800bb2a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	68b9      	ldr	r1, [r7, #8]
 800bade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae0:	f000 f916 	bl	800bd10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bae4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baec:	d112      	bne.n	800bb14 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d016      	beq.n	800bb24 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	3324      	adds	r3, #36	; 0x24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 ff26 	bl	800c94c <xTaskRemoveFromEventList>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00e      	beq.n	800bb24 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00b      	beq.n	800bb24 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	e007      	b.n	800bb24 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb18:	3301      	adds	r3, #1
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	b25a      	sxtb	r2, r3
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb24:	2301      	movs	r3, #1
 800bb26:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bb28:	e001      	b.n	800bb2e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3738      	adds	r7, #56	; 0x38
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08c      	sub	sp, #48	; 0x30
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10c      	bne.n	800bb78 <xQueueReceive+0x34>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	b672      	cpsid	i
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	b662      	cpsie	i
 800bb72:	623b      	str	r3, [r7, #32]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <xQueueReceive+0x42>
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <xQueueReceive+0x46>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <xQueueReceive+0x48>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10c      	bne.n	800bbaa <xQueueReceive+0x66>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	b672      	cpsid	i
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	b662      	cpsie	i
 800bba4:	61fb      	str	r3, [r7, #28]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbaa:	f001 f8d1 	bl	800cd50 <xTaskGetSchedulerState>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <xQueueReceive+0x76>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <xQueueReceive+0x7a>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e000      	b.n	800bbc0 <xQueueReceive+0x7c>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10c      	bne.n	800bbde <xQueueReceive+0x9a>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	b672      	cpsid	i
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	b662      	cpsie	i
 800bbd8:	61bb      	str	r3, [r7, #24]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbde:	f001 fec5 	bl	800d96c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d01f      	beq.n	800bc2e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bbee:	68b9      	ldr	r1, [r7, #8]
 800bbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf2:	f000 f8f7 	bl	800bde4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	1e5a      	subs	r2, r3, #1
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00f      	beq.n	800bc26 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	3310      	adds	r3, #16
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fe9e 	bl	800c94c <xTaskRemoveFromEventList>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d007      	beq.n	800bc26 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc16:	4b3d      	ldr	r3, [pc, #244]	; (800bd0c <xQueueReceive+0x1c8>)
 800bc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc26:	f001 fed5 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e069      	b.n	800bd02 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d103      	bne.n	800bc3c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc34:	f001 fece 	bl	800d9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e062      	b.n	800bd02 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d106      	bne.n	800bc50 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc42:	f107 0310 	add.w	r3, r7, #16
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 fee6 	bl	800ca18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc50:	f001 fec0 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc54:	f000 fc34 	bl	800c4c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc58:	f001 fe88 	bl	800d96c <vPortEnterCritical>
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc62:	b25b      	sxtb	r3, r3
 800bc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc68:	d103      	bne.n	800bc72 <xQueueReceive+0x12e>
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc78:	b25b      	sxtb	r3, r3
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d103      	bne.n	800bc88 <xQueueReceive+0x144>
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc88:	f001 fea4 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc8c:	1d3a      	adds	r2, r7, #4
 800bc8e:	f107 0310 	add.w	r3, r7, #16
 800bc92:	4611      	mov	r1, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 fed5 	bl	800ca44 <xTaskCheckForTimeOut>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d123      	bne.n	800bce8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bca2:	f000 f917 	bl	800bed4 <prvIsQueueEmpty>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d017      	beq.n	800bcdc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	3324      	adds	r3, #36	; 0x24
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 fdf5 	bl	800c8a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcbc:	f000 f8b8 	bl	800be30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcc0:	f000 fc0c 	bl	800c4dc <xTaskResumeAll>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d189      	bne.n	800bbde <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bcca:	4b10      	ldr	r3, [pc, #64]	; (800bd0c <xQueueReceive+0x1c8>)
 800bccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	e780      	b.n	800bbde <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcde:	f000 f8a7 	bl	800be30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bce2:	f000 fbfb 	bl	800c4dc <xTaskResumeAll>
 800bce6:	e77a      	b.n	800bbde <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcea:	f000 f8a1 	bl	800be30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcee:	f000 fbf5 	bl	800c4dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf4:	f000 f8ee 	bl	800bed4 <prvIsQueueEmpty>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f43f af6f 	beq.w	800bbde <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3730      	adds	r7, #48	; 0x30
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	e000ed04 	.word	0xe000ed04

0800bd10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10d      	bne.n	800bd4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d14d      	bne.n	800bdd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 f826 	bl	800cd8c <xTaskPriorityDisinherit>
 800bd40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	609a      	str	r2, [r3, #8]
 800bd48:	e043      	b.n	800bdd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d119      	bne.n	800bd84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6858      	ldr	r0, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	461a      	mov	r2, r3
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	f002 ffec 	bl	800ed38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd68:	441a      	add	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d32b      	bcc.n	800bdd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	605a      	str	r2, [r3, #4]
 800bd82:	e026      	b.n	800bdd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68d8      	ldr	r0, [r3, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	f002 ffd2 	bl	800ed38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9c:	425b      	negs	r3, r3
 800bd9e:	441a      	add	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68da      	ldr	r2, [r3, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d207      	bcs.n	800bdc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	689a      	ldr	r2, [r3, #8]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb8:	425b      	negs	r3, r3
 800bdba:	441a      	add	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d105      	bne.n	800bdd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdda:	697b      	ldr	r3, [r7, #20]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d018      	beq.n	800be28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	441a      	add	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	68da      	ldr	r2, [r3, #12]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d303      	bcc.n	800be18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68d9      	ldr	r1, [r3, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be20:	461a      	mov	r2, r3
 800be22:	6838      	ldr	r0, [r7, #0]
 800be24:	f002 ff88 	bl	800ed38 <memcpy>
	}
}
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be38:	f001 fd98 	bl	800d96c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be44:	e011      	b.n	800be6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d012      	beq.n	800be74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	3324      	adds	r3, #36	; 0x24
 800be52:	4618      	mov	r0, r3
 800be54:	f000 fd7a 	bl	800c94c <xTaskRemoveFromEventList>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be5e:	f000 fe57 	bl	800cb10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	3b01      	subs	r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dce9      	bgt.n	800be46 <prvUnlockQueue+0x16>
 800be72:	e000      	b.n	800be76 <prvUnlockQueue+0x46>
					break;
 800be74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	22ff      	movs	r2, #255	; 0xff
 800be7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be7e:	f001 fda9 	bl	800d9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be82:	f001 fd73 	bl	800d96c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be8e:	e011      	b.n	800beb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d012      	beq.n	800bebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3310      	adds	r3, #16
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fd55 	bl	800c94c <xTaskRemoveFromEventList>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bea8:	f000 fe32 	bl	800cb10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800beac:	7bbb      	ldrb	r3, [r7, #14]
 800beae:	3b01      	subs	r3, #1
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800beb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dce9      	bgt.n	800be90 <prvUnlockQueue+0x60>
 800bebc:	e000      	b.n	800bec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	22ff      	movs	r2, #255	; 0xff
 800bec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bec8:	f001 fd84 	bl	800d9d4 <vPortExitCritical>
}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bedc:	f001 fd46 	bl	800d96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bee8:	2301      	movs	r3, #1
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e001      	b.n	800bef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bef2:	f001 fd6f 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800bef6:	68fb      	ldr	r3, [r7, #12]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf08:	f001 fd30 	bl	800d96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d102      	bne.n	800bf1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	e001      	b.n	800bf22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf22:	f001 fd57 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800bf26:	68fb      	ldr	r3, [r7, #12]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	e014      	b.n	800bf6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf40:	4a0f      	ldr	r2, [pc, #60]	; (800bf80 <vQueueAddToRegistry+0x50>)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10b      	bne.n	800bf64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf4c:	490c      	ldr	r1, [pc, #48]	; (800bf80 <vQueueAddToRegistry+0x50>)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf56:	4a0a      	ldr	r2, [pc, #40]	; (800bf80 <vQueueAddToRegistry+0x50>)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf62:	e006      	b.n	800bf72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3301      	adds	r3, #1
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b07      	cmp	r3, #7
 800bf6e:	d9e7      	bls.n	800bf40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf70:	bf00      	nop
 800bf72:	bf00      	nop
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	200016b4 	.word	0x200016b4

0800bf84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf94:	f001 fcea 	bl	800d96c <vPortEnterCritical>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf9e:	b25b      	sxtb	r3, r3
 800bfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa4:	d103      	bne.n	800bfae <vQueueWaitForMessageRestricted+0x2a>
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfb4:	b25b      	sxtb	r3, r3
 800bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfba:	d103      	bne.n	800bfc4 <vQueueWaitForMessageRestricted+0x40>
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfc4:	f001 fd06 	bl	800d9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d106      	bne.n	800bfde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	3324      	adds	r3, #36	; 0x24
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fc89 	bl	800c8f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bfde:	6978      	ldr	r0, [r7, #20]
 800bfe0:	f7ff ff26 	bl	800be30 <prvUnlockQueue>
	}
 800bfe4:	bf00      	nop
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08e      	sub	sp, #56	; 0x38
 800bff0:	af04      	add	r7, sp, #16
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10c      	bne.n	800c01a <xTaskCreateStatic+0x2e>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	b672      	cpsid	i
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	b662      	cpsie	i
 800c014:	623b      	str	r3, [r7, #32]
}
 800c016:	bf00      	nop
 800c018:	e7fe      	b.n	800c018 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10c      	bne.n	800c03a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	b672      	cpsid	i
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	b662      	cpsie	i
 800c034:	61fb      	str	r3, [r7, #28]
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c03a:	23a8      	movs	r3, #168	; 0xa8
 800c03c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	2ba8      	cmp	r3, #168	; 0xa8
 800c042:	d00c      	beq.n	800c05e <xTaskCreateStatic+0x72>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	b672      	cpsid	i
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	b662      	cpsie	i
 800c058:	61bb      	str	r3, [r7, #24]
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c05e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	2b00      	cmp	r3, #0
 800c064:	d01e      	beq.n	800c0a4 <xTaskCreateStatic+0xb8>
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d01b      	beq.n	800c0a4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	2202      	movs	r2, #2
 800c07a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c07e:	2300      	movs	r3, #0
 800c080:	9303      	str	r3, [sp, #12]
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	9302      	str	r3, [sp, #8]
 800c086:	f107 0314 	add.w	r3, r7, #20
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 f850 	bl	800c13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c09e:	f000 f8f5 	bl	800c28c <prvAddNewTaskToReadyList>
 800c0a2:	e001      	b.n	800c0a8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0a8:	697b      	ldr	r3, [r7, #20]
	}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3728      	adds	r7, #40	; 0x28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b08c      	sub	sp, #48	; 0x30
 800c0b6:	af04      	add	r7, sp, #16
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0c2:	88fb      	ldrh	r3, [r7, #6]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 fd7c 	bl	800dbc4 <pvPortMalloc>
 800c0cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00e      	beq.n	800c0f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0d4:	20a8      	movs	r0, #168	; 0xa8
 800c0d6:	f001 fd75 	bl	800dbc4 <pvPortMalloc>
 800c0da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800c0e8:	e005      	b.n	800c0f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0ea:	6978      	ldr	r0, [r7, #20]
 800c0ec:	f001 fe34 	bl	800dd58 <vPortFree>
 800c0f0:	e001      	b.n	800c0f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d017      	beq.n	800c12c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c104:	88fa      	ldrh	r2, [r7, #6]
 800c106:	2300      	movs	r3, #0
 800c108:	9303      	str	r3, [sp, #12]
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 f80e 	bl	800c13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c120:	69f8      	ldr	r0, [r7, #28]
 800c122:	f000 f8b3 	bl	800c28c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c126:	2301      	movs	r3, #1
 800c128:	61bb      	str	r3, [r7, #24]
 800c12a:	e002      	b.n	800c132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295
 800c130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c132:	69bb      	ldr	r3, [r7, #24]
	}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	461a      	mov	r2, r3
 800c154:	21a5      	movs	r1, #165	; 0xa5
 800c156:	f002 fd55 	bl	800ec04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c164:	440b      	add	r3, r1
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	f023 0307 	bic.w	r3, r3, #7
 800c172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f003 0307 	and.w	r3, r3, #7
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00c      	beq.n	800c198 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	b672      	cpsid	i
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	b662      	cpsie	i
 800c192:	617b      	str	r3, [r7, #20]
}
 800c194:	bf00      	nop
 800c196:	e7fe      	b.n	800c196 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d01f      	beq.n	800c1de <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c19e:	2300      	movs	r3, #0
 800c1a0:	61fb      	str	r3, [r7, #28]
 800c1a2:	e012      	b.n	800c1ca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	7819      	ldrb	r1, [r3, #0]
 800c1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3334      	adds	r3, #52	; 0x34
 800c1b4:	460a      	mov	r2, r1
 800c1b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	4413      	add	r3, r2
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d006      	beq.n	800c1d2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	61fb      	str	r3, [r7, #28]
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	2b0f      	cmp	r3, #15
 800c1ce:	d9e9      	bls.n	800c1a4 <prvInitialiseNewTask+0x68>
 800c1d0:	e000      	b.n	800c1d4 <prvInitialiseNewTask+0x98>
			{
				break;
 800c1d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1dc:	e003      	b.n	800c1e6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	2b37      	cmp	r3, #55	; 0x37
 800c1ea:	d901      	bls.n	800c1f0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1ec:	2337      	movs	r3, #55	; 0x37
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	2200      	movs	r2, #0
 800c200:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	3304      	adds	r3, #4
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff f910 	bl	800b42c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	3318      	adds	r3, #24
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff f90b 	bl	800b42c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	2200      	movs	r2, #0
 800c230:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	2200      	movs	r2, #0
 800c238:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	3354      	adds	r3, #84	; 0x54
 800c240:	224c      	movs	r2, #76	; 0x4c
 800c242:	2100      	movs	r1, #0
 800c244:	4618      	mov	r0, r3
 800c246:	f002 fcdd 	bl	800ec04 <memset>
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	4a0c      	ldr	r2, [pc, #48]	; (800c280 <prvInitialiseNewTask+0x144>)
 800c24e:	659a      	str	r2, [r3, #88]	; 0x58
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	4a0c      	ldr	r2, [pc, #48]	; (800c284 <prvInitialiseNewTask+0x148>)
 800c254:	65da      	str	r2, [r3, #92]	; 0x5c
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	4a0b      	ldr	r2, [pc, #44]	; (800c288 <prvInitialiseNewTask+0x14c>)
 800c25a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	68f9      	ldr	r1, [r7, #12]
 800c260:	69b8      	ldr	r0, [r7, #24]
 800c262:	f001 fa77 	bl	800d754 <pxPortInitialiseStack>
 800c266:	4602      	mov	r2, r0
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c278:	bf00      	nop
 800c27a:	3720      	adds	r7, #32
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	2000732c 	.word	0x2000732c
 800c284:	20007394 	.word	0x20007394
 800c288:	200073fc 	.word	0x200073fc

0800c28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c294:	f001 fb6a 	bl	800d96c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c298:	4b2d      	ldr	r3, [pc, #180]	; (800c350 <prvAddNewTaskToReadyList+0xc4>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3301      	adds	r3, #1
 800c29e:	4a2c      	ldr	r2, [pc, #176]	; (800c350 <prvAddNewTaskToReadyList+0xc4>)
 800c2a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c2a2:	4b2c      	ldr	r3, [pc, #176]	; (800c354 <prvAddNewTaskToReadyList+0xc8>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d109      	bne.n	800c2be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c2aa:	4a2a      	ldr	r2, [pc, #168]	; (800c354 <prvAddNewTaskToReadyList+0xc8>)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c2b0:	4b27      	ldr	r3, [pc, #156]	; (800c350 <prvAddNewTaskToReadyList+0xc4>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d110      	bne.n	800c2da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c2b8:	f000 fc4e 	bl	800cb58 <prvInitialiseTaskLists>
 800c2bc:	e00d      	b.n	800c2da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c2be:	4b26      	ldr	r3, [pc, #152]	; (800c358 <prvAddNewTaskToReadyList+0xcc>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d109      	bne.n	800c2da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2c6:	4b23      	ldr	r3, [pc, #140]	; (800c354 <prvAddNewTaskToReadyList+0xc8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d802      	bhi.n	800c2da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2d4:	4a1f      	ldr	r2, [pc, #124]	; (800c354 <prvAddNewTaskToReadyList+0xc8>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2da:	4b20      	ldr	r3, [pc, #128]	; (800c35c <prvAddNewTaskToReadyList+0xd0>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	4a1e      	ldr	r2, [pc, #120]	; (800c35c <prvAddNewTaskToReadyList+0xd0>)
 800c2e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2e4:	4b1d      	ldr	r3, [pc, #116]	; (800c35c <prvAddNewTaskToReadyList+0xd0>)
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f0:	4b1b      	ldr	r3, [pc, #108]	; (800c360 <prvAddNewTaskToReadyList+0xd4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d903      	bls.n	800c300 <prvAddNewTaskToReadyList+0x74>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	4a18      	ldr	r2, [pc, #96]	; (800c360 <prvAddNewTaskToReadyList+0xd4>)
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4a15      	ldr	r2, [pc, #84]	; (800c364 <prvAddNewTaskToReadyList+0xd8>)
 800c30e:	441a      	add	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3304      	adds	r3, #4
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7ff f895 	bl	800b446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c31c:	f001 fb5a 	bl	800d9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c320:	4b0d      	ldr	r3, [pc, #52]	; (800c358 <prvAddNewTaskToReadyList+0xcc>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00e      	beq.n	800c346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c328:	4b0a      	ldr	r3, [pc, #40]	; (800c354 <prvAddNewTaskToReadyList+0xc8>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c332:	429a      	cmp	r2, r3
 800c334:	d207      	bcs.n	800c346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c336:	4b0c      	ldr	r3, [pc, #48]	; (800c368 <prvAddNewTaskToReadyList+0xdc>)
 800c338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c346:	bf00      	nop
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20001bc8 	.word	0x20001bc8
 800c354:	200016f4 	.word	0x200016f4
 800c358:	20001bd4 	.word	0x20001bd4
 800c35c:	20001be4 	.word	0x20001be4
 800c360:	20001bd0 	.word	0x20001bd0
 800c364:	200016f8 	.word	0x200016f8
 800c368:	e000ed04 	.word	0xe000ed04

0800c36c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c374:	2300      	movs	r3, #0
 800c376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d019      	beq.n	800c3b2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c37e:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <vTaskDelay+0x64>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00c      	beq.n	800c3a0 <vTaskDelay+0x34>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38a:	b672      	cpsid	i
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	b662      	cpsie	i
 800c39a:	60bb      	str	r3, [r7, #8]
}
 800c39c:	bf00      	nop
 800c39e:	e7fe      	b.n	800c39e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c3a0:	f000 f88e 	bl	800c4c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fd62 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3ac:	f000 f896 	bl	800c4dc <xTaskResumeAll>
 800c3b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d107      	bne.n	800c3c8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c3b8:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <vTaskDelay+0x68>)
 800c3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3c8:	bf00      	nop
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20001bf0 	.word	0x20001bf0
 800c3d4:	e000ed04 	.word	0xe000ed04

0800c3d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3e6:	463a      	mov	r2, r7
 800c3e8:	1d39      	adds	r1, r7, #4
 800c3ea:	f107 0308 	add.w	r3, r7, #8
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe ffc8 	bl	800b384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	9202      	str	r2, [sp, #8]
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	2300      	movs	r3, #0
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	2300      	movs	r3, #0
 800c404:	460a      	mov	r2, r1
 800c406:	4926      	ldr	r1, [pc, #152]	; (800c4a0 <vTaskStartScheduler+0xc8>)
 800c408:	4826      	ldr	r0, [pc, #152]	; (800c4a4 <vTaskStartScheduler+0xcc>)
 800c40a:	f7ff fdef 	bl	800bfec <xTaskCreateStatic>
 800c40e:	4603      	mov	r3, r0
 800c410:	4a25      	ldr	r2, [pc, #148]	; (800c4a8 <vTaskStartScheduler+0xd0>)
 800c412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c414:	4b24      	ldr	r3, [pc, #144]	; (800c4a8 <vTaskStartScheduler+0xd0>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c41c:	2301      	movs	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	e001      	b.n	800c426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c422:	2300      	movs	r3, #0
 800c424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d102      	bne.n	800c432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c42c:	f000 fd74 	bl	800cf18 <xTimerCreateTimerTask>
 800c430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d11d      	bne.n	800c474 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	b672      	cpsid	i
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	b662      	cpsie	i
 800c44c:	613b      	str	r3, [r7, #16]
}
 800c44e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c450:	4b16      	ldr	r3, [pc, #88]	; (800c4ac <vTaskStartScheduler+0xd4>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3354      	adds	r3, #84	; 0x54
 800c456:	4a16      	ldr	r2, [pc, #88]	; (800c4b0 <vTaskStartScheduler+0xd8>)
 800c458:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c45a:	4b16      	ldr	r3, [pc, #88]	; (800c4b4 <vTaskStartScheduler+0xdc>)
 800c45c:	f04f 32ff 	mov.w	r2, #4294967295
 800c460:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <vTaskStartScheduler+0xe0>)
 800c464:	2201      	movs	r2, #1
 800c466:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c468:	4b14      	ldr	r3, [pc, #80]	; (800c4bc <vTaskStartScheduler+0xe4>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c46e:	f001 f9ff 	bl	800d870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c472:	e010      	b.n	800c496 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d10c      	bne.n	800c496 <vTaskStartScheduler+0xbe>
	__asm volatile
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	b672      	cpsid	i
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	b662      	cpsie	i
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <vTaskStartScheduler+0xbc>
}
 800c496:	bf00      	nop
 800c498:	3718      	adds	r7, #24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	0800eeac 	.word	0x0800eeac
 800c4a4:	0800cb29 	.word	0x0800cb29
 800c4a8:	20001bec 	.word	0x20001bec
 800c4ac:	200016f4 	.word	0x200016f4
 800c4b0:	2000015c 	.word	0x2000015c
 800c4b4:	20001be8 	.word	0x20001be8
 800c4b8:	20001bd4 	.word	0x20001bd4
 800c4bc:	20001bcc 	.word	0x20001bcc

0800c4c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c4c4:	4b04      	ldr	r3, [pc, #16]	; (800c4d8 <vTaskSuspendAll+0x18>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	4a03      	ldr	r2, [pc, #12]	; (800c4d8 <vTaskSuspendAll+0x18>)
 800c4cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c4ce:	bf00      	nop
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20001bf0 	.word	0x20001bf0

0800c4dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4ea:	4b43      	ldr	r3, [pc, #268]	; (800c5f8 <xTaskResumeAll+0x11c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10c      	bne.n	800c50c <xTaskResumeAll+0x30>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	b672      	cpsid	i
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	b662      	cpsie	i
 800c506:	603b      	str	r3, [r7, #0]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c50c:	f001 fa2e 	bl	800d96c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c510:	4b39      	ldr	r3, [pc, #228]	; (800c5f8 <xTaskResumeAll+0x11c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3b01      	subs	r3, #1
 800c516:	4a38      	ldr	r2, [pc, #224]	; (800c5f8 <xTaskResumeAll+0x11c>)
 800c518:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c51a:	4b37      	ldr	r3, [pc, #220]	; (800c5f8 <xTaskResumeAll+0x11c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d162      	bne.n	800c5e8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c522:	4b36      	ldr	r3, [pc, #216]	; (800c5fc <xTaskResumeAll+0x120>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d05e      	beq.n	800c5e8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c52a:	e02f      	b.n	800c58c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c52c:	4b34      	ldr	r3, [pc, #208]	; (800c600 <xTaskResumeAll+0x124>)
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3318      	adds	r3, #24
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe ffe1 	bl	800b500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3304      	adds	r3, #4
 800c542:	4618      	mov	r0, r3
 800c544:	f7fe ffdc 	bl	800b500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	4b2d      	ldr	r3, [pc, #180]	; (800c604 <xTaskResumeAll+0x128>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	429a      	cmp	r2, r3
 800c552:	d903      	bls.n	800c55c <xTaskResumeAll+0x80>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c558:	4a2a      	ldr	r2, [pc, #168]	; (800c604 <xTaskResumeAll+0x128>)
 800c55a:	6013      	str	r3, [r2, #0]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4a27      	ldr	r2, [pc, #156]	; (800c608 <xTaskResumeAll+0x12c>)
 800c56a:	441a      	add	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3304      	adds	r3, #4
 800c570:	4619      	mov	r1, r3
 800c572:	4610      	mov	r0, r2
 800c574:	f7fe ff67 	bl	800b446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57c:	4b23      	ldr	r3, [pc, #140]	; (800c60c <xTaskResumeAll+0x130>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c582:	429a      	cmp	r2, r3
 800c584:	d302      	bcc.n	800c58c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c586:	4b22      	ldr	r3, [pc, #136]	; (800c610 <xTaskResumeAll+0x134>)
 800c588:	2201      	movs	r2, #1
 800c58a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c58c:	4b1c      	ldr	r3, [pc, #112]	; (800c600 <xTaskResumeAll+0x124>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1cb      	bne.n	800c52c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c59a:	f000 fbb9 	bl	800cd10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c59e:	4b1d      	ldr	r3, [pc, #116]	; (800c614 <xTaskResumeAll+0x138>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d010      	beq.n	800c5cc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5aa:	f000 f859 	bl	800c660 <xTaskIncrementTick>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c5b4:	4b16      	ldr	r3, [pc, #88]	; (800c610 <xTaskResumeAll+0x134>)
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1f1      	bne.n	800c5aa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c5c6:	4b13      	ldr	r3, [pc, #76]	; (800c614 <xTaskResumeAll+0x138>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5cc:	4b10      	ldr	r3, [pc, #64]	; (800c610 <xTaskResumeAll+0x134>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d009      	beq.n	800c5e8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5d8:	4b0f      	ldr	r3, [pc, #60]	; (800c618 <xTaskResumeAll+0x13c>)
 800c5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e8:	f001 f9f4 	bl	800d9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20001bf0 	.word	0x20001bf0
 800c5fc:	20001bc8 	.word	0x20001bc8
 800c600:	20001b88 	.word	0x20001b88
 800c604:	20001bd0 	.word	0x20001bd0
 800c608:	200016f8 	.word	0x200016f8
 800c60c:	200016f4 	.word	0x200016f4
 800c610:	20001bdc 	.word	0x20001bdc
 800c614:	20001bd8 	.word	0x20001bd8
 800c618:	e000ed04 	.word	0xe000ed04

0800c61c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c622:	4b05      	ldr	r3, [pc, #20]	; (800c638 <xTaskGetTickCount+0x1c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c628:	687b      	ldr	r3, [r7, #4]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20001bcc 	.word	0x20001bcc

0800c63c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c642:	f001 fa7b 	bl	800db3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c646:	2300      	movs	r3, #0
 800c648:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c64a:	4b04      	ldr	r3, [pc, #16]	; (800c65c <xTaskGetTickCountFromISR+0x20>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c650:	683b      	ldr	r3, [r7, #0]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20001bcc 	.word	0x20001bcc

0800c660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c66a:	4b50      	ldr	r3, [pc, #320]	; (800c7ac <xTaskIncrementTick+0x14c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f040 808b 	bne.w	800c78a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c674:	4b4e      	ldr	r3, [pc, #312]	; (800c7b0 <xTaskIncrementTick+0x150>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3301      	adds	r3, #1
 800c67a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c67c:	4a4c      	ldr	r2, [pc, #304]	; (800c7b0 <xTaskIncrementTick+0x150>)
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d122      	bne.n	800c6ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c688:	4b4a      	ldr	r3, [pc, #296]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00c      	beq.n	800c6ac <xTaskIncrementTick+0x4c>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	b672      	cpsid	i
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	b662      	cpsie	i
 800c6a6:	603b      	str	r3, [r7, #0]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <xTaskIncrementTick+0x4a>
 800c6ac:	4b41      	ldr	r3, [pc, #260]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	60fb      	str	r3, [r7, #12]
 800c6b2:	4b41      	ldr	r3, [pc, #260]	; (800c7b8 <xTaskIncrementTick+0x158>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a3f      	ldr	r2, [pc, #252]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c6b8:	6013      	str	r3, [r2, #0]
 800c6ba:	4a3f      	ldr	r2, [pc, #252]	; (800c7b8 <xTaskIncrementTick+0x158>)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	4b3e      	ldr	r3, [pc, #248]	; (800c7bc <xTaskIncrementTick+0x15c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	4a3d      	ldr	r2, [pc, #244]	; (800c7bc <xTaskIncrementTick+0x15c>)
 800c6c8:	6013      	str	r3, [r2, #0]
 800c6ca:	f000 fb21 	bl	800cd10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6ce:	4b3c      	ldr	r3, [pc, #240]	; (800c7c0 <xTaskIncrementTick+0x160>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d349      	bcc.n	800c76c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6d8:	4b36      	ldr	r3, [pc, #216]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d104      	bne.n	800c6ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e2:	4b37      	ldr	r3, [pc, #220]	; (800c7c0 <xTaskIncrementTick+0x160>)
 800c6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e8:	601a      	str	r2, [r3, #0]
					break;
 800c6ea:	e03f      	b.n	800c76c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ec:	4b31      	ldr	r3, [pc, #196]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	429a      	cmp	r2, r3
 800c702:	d203      	bcs.n	800c70c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c704:	4a2e      	ldr	r2, [pc, #184]	; (800c7c0 <xTaskIncrementTick+0x160>)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c70a:	e02f      	b.n	800c76c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	3304      	adds	r3, #4
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe fef5 	bl	800b500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d004      	beq.n	800c728 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	3318      	adds	r3, #24
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe feec 	bl	800b500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72c:	4b25      	ldr	r3, [pc, #148]	; (800c7c4 <xTaskIncrementTick+0x164>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d903      	bls.n	800c73c <xTaskIncrementTick+0xdc>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	4a22      	ldr	r2, [pc, #136]	; (800c7c4 <xTaskIncrementTick+0x164>)
 800c73a:	6013      	str	r3, [r2, #0]
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c740:	4613      	mov	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4a1f      	ldr	r2, [pc, #124]	; (800c7c8 <xTaskIncrementTick+0x168>)
 800c74a:	441a      	add	r2, r3
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	3304      	adds	r3, #4
 800c750:	4619      	mov	r1, r3
 800c752:	4610      	mov	r0, r2
 800c754:	f7fe fe77 	bl	800b446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75c:	4b1b      	ldr	r3, [pc, #108]	; (800c7cc <xTaskIncrementTick+0x16c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c762:	429a      	cmp	r2, r3
 800c764:	d3b8      	bcc.n	800c6d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c766:	2301      	movs	r3, #1
 800c768:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c76a:	e7b5      	b.n	800c6d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c76c:	4b17      	ldr	r3, [pc, #92]	; (800c7cc <xTaskIncrementTick+0x16c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c772:	4915      	ldr	r1, [pc, #84]	; (800c7c8 <xTaskIncrementTick+0x168>)
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	440b      	add	r3, r1
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d907      	bls.n	800c794 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c784:	2301      	movs	r3, #1
 800c786:	617b      	str	r3, [r7, #20]
 800c788:	e004      	b.n	800c794 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c78a:	4b11      	ldr	r3, [pc, #68]	; (800c7d0 <xTaskIncrementTick+0x170>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	4a0f      	ldr	r2, [pc, #60]	; (800c7d0 <xTaskIncrementTick+0x170>)
 800c792:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c794:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <xTaskIncrementTick+0x174>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c7a0:	697b      	ldr	r3, [r7, #20]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20001bf0 	.word	0x20001bf0
 800c7b0:	20001bcc 	.word	0x20001bcc
 800c7b4:	20001b80 	.word	0x20001b80
 800c7b8:	20001b84 	.word	0x20001b84
 800c7bc:	20001be0 	.word	0x20001be0
 800c7c0:	20001be8 	.word	0x20001be8
 800c7c4:	20001bd0 	.word	0x20001bd0
 800c7c8:	200016f8 	.word	0x200016f8
 800c7cc:	200016f4 	.word	0x200016f4
 800c7d0:	20001bd8 	.word	0x20001bd8
 800c7d4:	20001bdc 	.word	0x20001bdc

0800c7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7de:	4b2b      	ldr	r3, [pc, #172]	; (800c88c <vTaskSwitchContext+0xb4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7e6:	4b2a      	ldr	r3, [pc, #168]	; (800c890 <vTaskSwitchContext+0xb8>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7ec:	e048      	b.n	800c880 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800c7ee:	4b28      	ldr	r3, [pc, #160]	; (800c890 <vTaskSwitchContext+0xb8>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f4:	4b27      	ldr	r3, [pc, #156]	; (800c894 <vTaskSwitchContext+0xbc>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	e012      	b.n	800c822 <vTaskSwitchContext+0x4a>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10c      	bne.n	800c81c <vTaskSwitchContext+0x44>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c806:	b672      	cpsid	i
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	b662      	cpsie	i
 800c816:	607b      	str	r3, [r7, #4]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <vTaskSwitchContext+0x42>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3b01      	subs	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	491d      	ldr	r1, [pc, #116]	; (800c898 <vTaskSwitchContext+0xc0>)
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	440b      	add	r3, r1
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d0e2      	beq.n	800c7fc <vTaskSwitchContext+0x24>
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4613      	mov	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4a15      	ldr	r2, [pc, #84]	; (800c898 <vTaskSwitchContext+0xc0>)
 800c842:	4413      	add	r3, r2
 800c844:	60bb      	str	r3, [r7, #8]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	605a      	str	r2, [r3, #4]
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	3308      	adds	r3, #8
 800c858:	429a      	cmp	r2, r3
 800c85a:	d104      	bne.n	800c866 <vTaskSwitchContext+0x8e>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	605a      	str	r2, [r3, #4]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	4a0b      	ldr	r2, [pc, #44]	; (800c89c <vTaskSwitchContext+0xc4>)
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	4a08      	ldr	r2, [pc, #32]	; (800c894 <vTaskSwitchContext+0xbc>)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c876:	4b09      	ldr	r3, [pc, #36]	; (800c89c <vTaskSwitchContext+0xc4>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3354      	adds	r3, #84	; 0x54
 800c87c:	4a08      	ldr	r2, [pc, #32]	; (800c8a0 <vTaskSwitchContext+0xc8>)
 800c87e:	6013      	str	r3, [r2, #0]
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	20001bf0 	.word	0x20001bf0
 800c890:	20001bdc 	.word	0x20001bdc
 800c894:	20001bd0 	.word	0x20001bd0
 800c898:	200016f8 	.word	0x200016f8
 800c89c:	200016f4 	.word	0x200016f4
 800c8a0:	2000015c 	.word	0x2000015c

0800c8a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10c      	bne.n	800c8ce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	b672      	cpsid	i
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	b662      	cpsie	i
 800c8c8:	60fb      	str	r3, [r7, #12]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8ce:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <vTaskPlaceOnEventList+0x48>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3318      	adds	r3, #24
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7fe fdd9 	bl	800b48e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8dc:	2101      	movs	r1, #1
 800c8de:	6838      	ldr	r0, [r7, #0]
 800c8e0:	f000 fac6 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
}
 800c8e4:	bf00      	nop
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	200016f4 	.word	0x200016f4

0800c8f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10c      	bne.n	800c91c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	b672      	cpsid	i
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	b662      	cpsie	i
 800c916:	617b      	str	r3, [r7, #20]
}
 800c918:	bf00      	nop
 800c91a:	e7fe      	b.n	800c91a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c91c:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <vTaskPlaceOnEventListRestricted+0x58>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3318      	adds	r3, #24
 800c922:	4619      	mov	r1, r3
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7fe fd8e 	bl	800b446 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c930:	f04f 33ff 	mov.w	r3, #4294967295
 800c934:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	68b8      	ldr	r0, [r7, #8]
 800c93a:	f000 fa99 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
	}
 800c93e:	bf00      	nop
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	200016f4 	.word	0x200016f4

0800c94c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10c      	bne.n	800c97c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	b672      	cpsid	i
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	b662      	cpsie	i
 800c976:	60fb      	str	r3, [r7, #12]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	3318      	adds	r3, #24
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fdbd 	bl	800b500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c986:	4b1e      	ldr	r3, [pc, #120]	; (800ca00 <xTaskRemoveFromEventList+0xb4>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d11d      	bne.n	800c9ca <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3304      	adds	r3, #4
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe fdb4 	bl	800b500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99c:	4b19      	ldr	r3, [pc, #100]	; (800ca04 <xTaskRemoveFromEventList+0xb8>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d903      	bls.n	800c9ac <xTaskRemoveFromEventList+0x60>
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	4a16      	ldr	r2, [pc, #88]	; (800ca04 <xTaskRemoveFromEventList+0xb8>)
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	4413      	add	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4a13      	ldr	r2, [pc, #76]	; (800ca08 <xTaskRemoveFromEventList+0xbc>)
 800c9ba:	441a      	add	r2, r3
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	f7fe fd3f 	bl	800b446 <vListInsertEnd>
 800c9c8:	e005      	b.n	800c9d6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	3318      	adds	r3, #24
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	480e      	ldr	r0, [pc, #56]	; (800ca0c <xTaskRemoveFromEventList+0xc0>)
 800c9d2:	f7fe fd38 	bl	800b446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9da:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <xTaskRemoveFromEventList+0xc4>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d905      	bls.n	800c9f0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <xTaskRemoveFromEventList+0xc8>)
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	e001      	b.n	800c9f4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9f4:	697b      	ldr	r3, [r7, #20]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001bf0 	.word	0x20001bf0
 800ca04:	20001bd0 	.word	0x20001bd0
 800ca08:	200016f8 	.word	0x200016f8
 800ca0c:	20001b88 	.word	0x20001b88
 800ca10:	200016f4 	.word	0x200016f4
 800ca14:	20001bdc 	.word	0x20001bdc

0800ca18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca20:	4b06      	ldr	r3, [pc, #24]	; (800ca3c <vTaskInternalSetTimeOutState+0x24>)
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <vTaskInternalSetTimeOutState+0x28>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	605a      	str	r2, [r3, #4]
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	20001be0 	.word	0x20001be0
 800ca40:	20001bcc 	.word	0x20001bcc

0800ca44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10c      	bne.n	800ca6e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	b672      	cpsid	i
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	b662      	cpsie	i
 800ca68:	613b      	str	r3, [r7, #16]
}
 800ca6a:	bf00      	nop
 800ca6c:	e7fe      	b.n	800ca6c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10c      	bne.n	800ca8e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	b672      	cpsid	i
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	b662      	cpsie	i
 800ca88:	60fb      	str	r3, [r7, #12]
}
 800ca8a:	bf00      	nop
 800ca8c:	e7fe      	b.n	800ca8c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ca8e:	f000 ff6d 	bl	800d96c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca92:	4b1d      	ldr	r3, [pc, #116]	; (800cb08 <xTaskCheckForTimeOut+0xc4>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	69ba      	ldr	r2, [r7, #24]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caaa:	d102      	bne.n	800cab2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800caac:	2300      	movs	r3, #0
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e023      	b.n	800cafa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	4b15      	ldr	r3, [pc, #84]	; (800cb0c <xTaskCheckForTimeOut+0xc8>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d007      	beq.n	800cace <xTaskCheckForTimeOut+0x8a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	69ba      	ldr	r2, [r7, #24]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d302      	bcc.n	800cace <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cac8:	2301      	movs	r3, #1
 800caca:	61fb      	str	r3, [r7, #28]
 800cacc:	e015      	b.n	800cafa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d20b      	bcs.n	800caf0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	1ad2      	subs	r2, r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff ff97 	bl	800ca18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caea:	2300      	movs	r3, #0
 800caec:	61fb      	str	r3, [r7, #28]
 800caee:	e004      	b.n	800cafa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800caf6:	2301      	movs	r3, #1
 800caf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cafa:	f000 ff6b 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800cafe:	69fb      	ldr	r3, [r7, #28]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	20001bcc 	.word	0x20001bcc
 800cb0c:	20001be0 	.word	0x20001be0

0800cb10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb14:	4b03      	ldr	r3, [pc, #12]	; (800cb24 <vTaskMissedYield+0x14>)
 800cb16:	2201      	movs	r2, #1
 800cb18:	601a      	str	r2, [r3, #0]
}
 800cb1a:	bf00      	nop
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	20001bdc 	.word	0x20001bdc

0800cb28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb30:	f000 f852 	bl	800cbd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb34:	4b06      	ldr	r3, [pc, #24]	; (800cb50 <prvIdleTask+0x28>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d9f9      	bls.n	800cb30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb3c:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <prvIdleTask+0x2c>)
 800cb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb4c:	e7f0      	b.n	800cb30 <prvIdleTask+0x8>
 800cb4e:	bf00      	nop
 800cb50:	200016f8 	.word	0x200016f8
 800cb54:	e000ed04 	.word	0xe000ed04

0800cb58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb5e:	2300      	movs	r3, #0
 800cb60:	607b      	str	r3, [r7, #4]
 800cb62:	e00c      	b.n	800cb7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	4613      	mov	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4a12      	ldr	r2, [pc, #72]	; (800cbb8 <prvInitialiseTaskLists+0x60>)
 800cb70:	4413      	add	r3, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fc3a 	bl	800b3ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	607b      	str	r3, [r7, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b37      	cmp	r3, #55	; 0x37
 800cb82:	d9ef      	bls.n	800cb64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb84:	480d      	ldr	r0, [pc, #52]	; (800cbbc <prvInitialiseTaskLists+0x64>)
 800cb86:	f7fe fc31 	bl	800b3ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb8a:	480d      	ldr	r0, [pc, #52]	; (800cbc0 <prvInitialiseTaskLists+0x68>)
 800cb8c:	f7fe fc2e 	bl	800b3ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb90:	480c      	ldr	r0, [pc, #48]	; (800cbc4 <prvInitialiseTaskLists+0x6c>)
 800cb92:	f7fe fc2b 	bl	800b3ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb96:	480c      	ldr	r0, [pc, #48]	; (800cbc8 <prvInitialiseTaskLists+0x70>)
 800cb98:	f7fe fc28 	bl	800b3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb9c:	480b      	ldr	r0, [pc, #44]	; (800cbcc <prvInitialiseTaskLists+0x74>)
 800cb9e:	f7fe fc25 	bl	800b3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cba2:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <prvInitialiseTaskLists+0x78>)
 800cba4:	4a05      	ldr	r2, [pc, #20]	; (800cbbc <prvInitialiseTaskLists+0x64>)
 800cba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cba8:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <prvInitialiseTaskLists+0x7c>)
 800cbaa:	4a05      	ldr	r2, [pc, #20]	; (800cbc0 <prvInitialiseTaskLists+0x68>)
 800cbac:	601a      	str	r2, [r3, #0]
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200016f8 	.word	0x200016f8
 800cbbc:	20001b58 	.word	0x20001b58
 800cbc0:	20001b6c 	.word	0x20001b6c
 800cbc4:	20001b88 	.word	0x20001b88
 800cbc8:	20001b9c 	.word	0x20001b9c
 800cbcc:	20001bb4 	.word	0x20001bb4
 800cbd0:	20001b80 	.word	0x20001b80
 800cbd4:	20001b84 	.word	0x20001b84

0800cbd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbde:	e019      	b.n	800cc14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbe0:	f000 fec4 	bl	800d96c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe4:	4b10      	ldr	r3, [pc, #64]	; (800cc28 <prvCheckTasksWaitingTermination+0x50>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe fc85 	bl	800b500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbf6:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <prvCheckTasksWaitingTermination+0x54>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	4a0b      	ldr	r2, [pc, #44]	; (800cc2c <prvCheckTasksWaitingTermination+0x54>)
 800cbfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc00:	4b0b      	ldr	r3, [pc, #44]	; (800cc30 <prvCheckTasksWaitingTermination+0x58>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	4a0a      	ldr	r2, [pc, #40]	; (800cc30 <prvCheckTasksWaitingTermination+0x58>)
 800cc08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc0a:	f000 fee3 	bl	800d9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f848 	bl	800cca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc14:	4b06      	ldr	r3, [pc, #24]	; (800cc30 <prvCheckTasksWaitingTermination+0x58>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1e1      	bne.n	800cbe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20001b9c 	.word	0x20001b9c
 800cc2c:	20001bc8 	.word	0x20001bc8
 800cc30:	20001bb0 	.word	0x20001bb0

0800cc34 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cc40:	e005      	b.n	800cc4e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3301      	adds	r3, #1
 800cc46:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2ba5      	cmp	r3, #165	; 0xa5
 800cc54:	d0f5      	beq.n	800cc42 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	089b      	lsrs	r3, r3, #2
 800cc5a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	b29b      	uxth	r3, r3
	}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b086      	sub	sp, #24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d102      	bne.n	800cc80 <uxTaskGetStackHighWaterMark+0x14>
 800cc7a:	4b09      	ldr	r3, [pc, #36]	; (800cca0 <uxTaskGetStackHighWaterMark+0x34>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	e000      	b.n	800cc82 <uxTaskGetStackHighWaterMark+0x16>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc88:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800cc8a:	6938      	ldr	r0, [r7, #16]
 800cc8c:	f7ff ffd2 	bl	800cc34 <prvTaskCheckFreeStackSpace>
 800cc90:	4603      	mov	r3, r0
 800cc92:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800cc94:	68fb      	ldr	r3, [r7, #12]
	}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	200016f4 	.word	0x200016f4

0800cca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3354      	adds	r3, #84	; 0x54
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f001 ffaf 	bl	800ec14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d108      	bne.n	800ccd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f001 f847 	bl	800dd58 <vPortFree>
				vPortFree( pxTCB );
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 f844 	bl	800dd58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccd0:	e01a      	b.n	800cd08 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d103      	bne.n	800cce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f001 f83b 	bl	800dd58 <vPortFree>
	}
 800cce2:	e011      	b.n	800cd08 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d00c      	beq.n	800cd08 <prvDeleteTCB+0x64>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	b672      	cpsid	i
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	b662      	cpsie	i
 800cd02:	60fb      	str	r3, [r7, #12]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <prvDeleteTCB+0x62>
	}
 800cd08:	bf00      	nop
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd16:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <prvResetNextTaskUnblockTime+0x38>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <prvResetNextTaskUnblockTime+0x3c>)
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd28:	e008      	b.n	800cd3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd2a:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <prvResetNextTaskUnblockTime+0x38>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4a04      	ldr	r2, [pc, #16]	; (800cd4c <prvResetNextTaskUnblockTime+0x3c>)
 800cd3a:	6013      	str	r3, [r2, #0]
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	20001b80 	.word	0x20001b80
 800cd4c:	20001be8 	.word	0x20001be8

0800cd50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <xTaskGetSchedulerState+0x34>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d102      	bne.n	800cd64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	607b      	str	r3, [r7, #4]
 800cd62:	e008      	b.n	800cd76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <xTaskGetSchedulerState+0x38>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d102      	bne.n	800cd72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	607b      	str	r3, [r7, #4]
 800cd70:	e001      	b.n	800cd76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd72:	2300      	movs	r3, #0
 800cd74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd76:	687b      	ldr	r3, [r7, #4]
	}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	20001bd4 	.word	0x20001bd4
 800cd88:	20001bf0 	.word	0x20001bf0

0800cd8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d05a      	beq.n	800ce58 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cda2:	4b30      	ldr	r3, [pc, #192]	; (800ce64 <xTaskPriorityDisinherit+0xd8>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d00c      	beq.n	800cdc6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	b672      	cpsid	i
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	b662      	cpsie	i
 800cdc0:	60fb      	str	r3, [r7, #12]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10c      	bne.n	800cde8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	b672      	cpsid	i
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	b662      	cpsie	i
 800cde2:	60bb      	str	r3, [r7, #8]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdec:	1e5a      	subs	r2, r3, #1
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d02c      	beq.n	800ce58 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d128      	bne.n	800ce58 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe fb78 	bl	800b500 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <xTaskPriorityDisinherit+0xdc>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d903      	bls.n	800ce38 <xTaskPriorityDisinherit+0xac>
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	4a0c      	ldr	r2, [pc, #48]	; (800ce68 <xTaskPriorityDisinherit+0xdc>)
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <xTaskPriorityDisinherit+0xe0>)
 800ce46:	441a      	add	r2, r3
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	f7fe faf9 	bl	800b446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce54:	2301      	movs	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce58:	697b      	ldr	r3, [r7, #20]
	}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	200016f4 	.word	0x200016f4
 800ce68:	20001bd0 	.word	0x20001bd0
 800ce6c:	200016f8 	.word	0x200016f8

0800ce70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce7a:	4b21      	ldr	r3, [pc, #132]	; (800cf00 <prvAddCurrentTaskToDelayedList+0x90>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce80:	4b20      	ldr	r3, [pc, #128]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe fb3a 	bl	800b500 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d10a      	bne.n	800ceaa <prvAddCurrentTaskToDelayedList+0x3a>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d007      	beq.n	800ceaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4619      	mov	r1, r3
 800cea2:	4819      	ldr	r0, [pc, #100]	; (800cf08 <prvAddCurrentTaskToDelayedList+0x98>)
 800cea4:	f7fe facf 	bl	800b446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cea8:	e026      	b.n	800cef8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4413      	add	r3, r2
 800ceb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ceb2:	4b14      	ldr	r3, [pc, #80]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d209      	bcs.n	800ced6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cec2:	4b12      	ldr	r3, [pc, #72]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f7fe fadd 	bl	800b48e <vListInsert>
}
 800ced4:	e010      	b.n	800cef8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ced6:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3304      	adds	r3, #4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fad3 	bl	800b48e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cee8:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d202      	bcs.n	800cef8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cef2:	4a08      	ldr	r2, [pc, #32]	; (800cf14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	6013      	str	r3, [r2, #0]
}
 800cef8:	bf00      	nop
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20001bcc 	.word	0x20001bcc
 800cf04:	200016f4 	.word	0x200016f4
 800cf08:	20001bb4 	.word	0x20001bb4
 800cf0c:	20001b84 	.word	0x20001b84
 800cf10:	20001b80 	.word	0x20001b80
 800cf14:	20001be8 	.word	0x20001be8

0800cf18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08a      	sub	sp, #40	; 0x28
 800cf1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf22:	f000 fbb5 	bl	800d690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf26:	4b1d      	ldr	r3, [pc, #116]	; (800cf9c <xTimerCreateTimerTask+0x84>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d021      	beq.n	800cf72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf36:	1d3a      	adds	r2, r7, #4
 800cf38:	f107 0108 	add.w	r1, r7, #8
 800cf3c:	f107 030c 	add.w	r3, r7, #12
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe fa39 	bl	800b3b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	9202      	str	r2, [sp, #8]
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	2302      	movs	r3, #2
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	2300      	movs	r3, #0
 800cf56:	460a      	mov	r2, r1
 800cf58:	4911      	ldr	r1, [pc, #68]	; (800cfa0 <xTimerCreateTimerTask+0x88>)
 800cf5a:	4812      	ldr	r0, [pc, #72]	; (800cfa4 <xTimerCreateTimerTask+0x8c>)
 800cf5c:	f7ff f846 	bl	800bfec <xTaskCreateStatic>
 800cf60:	4603      	mov	r3, r0
 800cf62:	4a11      	ldr	r2, [pc, #68]	; (800cfa8 <xTimerCreateTimerTask+0x90>)
 800cf64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf66:	4b10      	ldr	r3, [pc, #64]	; (800cfa8 <xTimerCreateTimerTask+0x90>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10c      	bne.n	800cf92 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	b672      	cpsid	i
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	b662      	cpsie	i
 800cf8c:	613b      	str	r3, [r7, #16]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800cf92:	697b      	ldr	r3, [r7, #20]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20001c24 	.word	0x20001c24
 800cfa0:	0800eeb4 	.word	0x0800eeb4
 800cfa4:	0800d229 	.word	0x0800d229
 800cfa8:	20001c28 	.word	0x20001c28

0800cfac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cfba:	202c      	movs	r0, #44	; 0x2c
 800cfbc:	f000 fe02 	bl	800dbc4 <pvPortMalloc>
 800cfc0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00d      	beq.n	800cfe4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	6a3b      	ldr	r3, [r7, #32]
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f847 	bl	800d072 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cfe4:	697b      	ldr	r3, [r7, #20]
	}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b08a      	sub	sp, #40	; 0x28
 800cff2:	af02      	add	r7, sp, #8
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
 800cffa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cffc:	232c      	movs	r3, #44	; 0x2c
 800cffe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	2b2c      	cmp	r3, #44	; 0x2c
 800d004:	d00c      	beq.n	800d020 <xTimerCreateStatic+0x32>
	__asm volatile
 800d006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00a:	b672      	cpsid	i
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	b662      	cpsie	i
 800d01a:	61bb      	str	r3, [r7, #24]
}
 800d01c:	bf00      	nop
 800d01e:	e7fe      	b.n	800d01e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d020:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10c      	bne.n	800d042 <xTimerCreateStatic+0x54>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02c:	b672      	cpsid	i
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	b662      	cpsie	i
 800d03c:	617b      	str	r3, [r7, #20]
}
 800d03e:	bf00      	nop
 800d040:	e7fe      	b.n	800d040 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d044:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00d      	beq.n	800d068 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	2202      	movs	r2, #2
 800d050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f000 f805 	bl	800d072 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d068:	69fb      	ldr	r3, [r7, #28]
	}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3720      	adds	r7, #32
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b086      	sub	sp, #24
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10c      	bne.n	800d0a0 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	b672      	cpsid	i
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	b662      	cpsie	i
 800d09a:	617b      	str	r3, [r7, #20]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01e      	beq.n	800d0e4 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d0a6:	f000 faf3 	bl	800d690 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	683a      	ldr	r2, [r7, #0]
 800d0ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	6a3a      	ldr	r2, [r7, #32]
 800d0c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe f9b0 	bl	800b42c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d008      	beq.n	800d0e4 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0d8:	f043 0304 	orr.w	r3, r3, #4
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d0e4:	bf00      	nop
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	; 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10c      	bne.n	800d11e <xTimerGenericCommand+0x32>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d108:	b672      	cpsid	i
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	b662      	cpsie	i
 800d118:	623b      	str	r3, [r7, #32]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d11e:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <xTimerGenericCommand+0x9c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d02a      	beq.n	800d17c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b05      	cmp	r3, #5
 800d136:	dc18      	bgt.n	800d16a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d138:	f7ff fe0a 	bl	800cd50 <xTaskGetSchedulerState>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d109      	bne.n	800d156 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d142:	4b11      	ldr	r3, [pc, #68]	; (800d188 <xTimerGenericCommand+0x9c>)
 800d144:	6818      	ldr	r0, [r3, #0]
 800d146:	f107 0110 	add.w	r1, r7, #16
 800d14a:	2300      	movs	r3, #0
 800d14c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d14e:	f7fe fb53 	bl	800b7f8 <xQueueGenericSend>
 800d152:	6278      	str	r0, [r7, #36]	; 0x24
 800d154:	e012      	b.n	800d17c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d156:	4b0c      	ldr	r3, [pc, #48]	; (800d188 <xTimerGenericCommand+0x9c>)
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	f107 0110 	add.w	r1, r7, #16
 800d15e:	2300      	movs	r3, #0
 800d160:	2200      	movs	r2, #0
 800d162:	f7fe fb49 	bl	800b7f8 <xQueueGenericSend>
 800d166:	6278      	str	r0, [r7, #36]	; 0x24
 800d168:	e008      	b.n	800d17c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d16a:	4b07      	ldr	r3, [pc, #28]	; (800d188 <xTimerGenericCommand+0x9c>)
 800d16c:	6818      	ldr	r0, [r3, #0]
 800d16e:	f107 0110 	add.w	r1, r7, #16
 800d172:	2300      	movs	r3, #0
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	f7fe fc45 	bl	800ba04 <xQueueGenericSendFromISR>
 800d17a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3728      	adds	r7, #40	; 0x28
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	20001c24 	.word	0x20001c24

0800d18c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b088      	sub	sp, #32
 800d190:	af02      	add	r7, sp, #8
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d196:	4b23      	ldr	r3, [pc, #140]	; (800d224 <prvProcessExpiredTimer+0x98>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe f9ab 	bl	800b500 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b0:	f003 0304 	and.w	r3, r3, #4
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d024      	beq.n	800d202 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	699a      	ldr	r2, [r3, #24]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	18d1      	adds	r1, r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	6978      	ldr	r0, [r7, #20]
 800d1c6:	f000 f8d3 	bl	800d370 <prvInsertTimerInActiveList>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d021      	beq.n	800d214 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	2100      	movs	r1, #0
 800d1da:	6978      	ldr	r0, [r7, #20]
 800d1dc:	f7ff ff86 	bl	800d0ec <xTimerGenericCommand>
 800d1e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d115      	bne.n	800d214 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	b672      	cpsid	i
 800d1ee:	f383 8811 	msr	BASEPRI, r3
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	b662      	cpsie	i
 800d1fc:	60fb      	str	r3, [r7, #12]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d208:	f023 0301 	bic.w	r3, r3, #1
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	6978      	ldr	r0, [r7, #20]
 800d21a:	4798      	blx	r3
}
 800d21c:	bf00      	nop
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	20001c1c 	.word	0x20001c1c

0800d228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	4618      	mov	r0, r3
 800d236:	f000 f857 	bl	800d2e8 <prvGetNextExpireTime>
 800d23a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	4619      	mov	r1, r3
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 f803 	bl	800d24c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d246:	f000 f8d5 	bl	800d3f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d24a:	e7f1      	b.n	800d230 <prvTimerTask+0x8>

0800d24c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d256:	f7ff f933 	bl	800c4c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 f866 	bl	800d330 <prvSampleTimeNow>
 800d264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d130      	bne.n	800d2ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10a      	bne.n	800d288 <prvProcessTimerOrBlockTask+0x3c>
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	429a      	cmp	r2, r3
 800d278:	d806      	bhi.n	800d288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d27a:	f7ff f92f 	bl	800c4dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d27e:	68f9      	ldr	r1, [r7, #12]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff ff83 	bl	800d18c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d286:	e024      	b.n	800d2d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d008      	beq.n	800d2a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d28e:	4b13      	ldr	r3, [pc, #76]	; (800d2dc <prvProcessTimerOrBlockTask+0x90>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <prvProcessTimerOrBlockTask+0x50>
 800d298:	2301      	movs	r3, #1
 800d29a:	e000      	b.n	800d29e <prvProcessTimerOrBlockTask+0x52>
 800d29c:	2300      	movs	r3, #0
 800d29e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <prvProcessTimerOrBlockTask+0x94>)
 800d2a2:	6818      	ldr	r0, [r3, #0]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	f7fe fe69 	bl	800bf84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2b2:	f7ff f913 	bl	800c4dc <xTaskResumeAll>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d2bc:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <prvProcessTimerOrBlockTask+0x98>)
 800d2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	f3bf 8f6f 	isb	sy
}
 800d2cc:	e001      	b.n	800d2d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d2ce:	f7ff f905 	bl	800c4dc <xTaskResumeAll>
}
 800d2d2:	bf00      	nop
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	20001c20 	.word	0x20001c20
 800d2e0:	20001c24 	.word	0x20001c24
 800d2e4:	e000ed04 	.word	0xe000ed04

0800d2e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2f0:	4b0e      	ldr	r3, [pc, #56]	; (800d32c <prvGetNextExpireTime+0x44>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <prvGetNextExpireTime+0x16>
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	e000      	b.n	800d300 <prvGetNextExpireTime+0x18>
 800d2fe:	2200      	movs	r2, #0
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d105      	bne.n	800d318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <prvGetNextExpireTime+0x44>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	e001      	b.n	800d31c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d31c:	68fb      	ldr	r3, [r7, #12]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20001c1c 	.word	0x20001c1c

0800d330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d338:	f7ff f970 	bl	800c61c <xTaskGetTickCount>
 800d33c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d33e:	4b0b      	ldr	r3, [pc, #44]	; (800d36c <prvSampleTimeNow+0x3c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	429a      	cmp	r2, r3
 800d346:	d205      	bcs.n	800d354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d348:	f000 f93c 	bl	800d5c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	e002      	b.n	800d35a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d35a:	4a04      	ldr	r2, [pc, #16]	; (800d36c <prvSampleTimeNow+0x3c>)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d360:	68fb      	ldr	r3, [r7, #12]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20001c2c 	.word	0x20001c2c

0800d370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
 800d37c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d37e:	2300      	movs	r3, #0
 800d380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	429a      	cmp	r2, r3
 800d394:	d812      	bhi.n	800d3bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	1ad2      	subs	r2, r2, r3
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d302      	bcc.n	800d3aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	617b      	str	r3, [r7, #20]
 800d3a8:	e01b      	b.n	800d3e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3aa:	4b10      	ldr	r3, [pc, #64]	; (800d3ec <prvInsertTimerInActiveList+0x7c>)
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	f7fe f86a 	bl	800b48e <vListInsert>
 800d3ba:	e012      	b.n	800d3e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d206      	bcs.n	800d3d2 <prvInsertTimerInActiveList+0x62>
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d302      	bcc.n	800d3d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	617b      	str	r3, [r7, #20]
 800d3d0:	e007      	b.n	800d3e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3d2:	4b07      	ldr	r3, [pc, #28]	; (800d3f0 <prvInsertTimerInActiveList+0x80>)
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f7fe f856 	bl	800b48e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d3e2:	697b      	ldr	r3, [r7, #20]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	20001c20 	.word	0x20001c20
 800d3f0:	20001c1c 	.word	0x20001c1c

0800d3f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08e      	sub	sp, #56	; 0x38
 800d3f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3fa:	e0d0      	b.n	800d59e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	da1a      	bge.n	800d438 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d402:	1d3b      	adds	r3, r7, #4
 800d404:	3304      	adds	r3, #4
 800d406:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10c      	bne.n	800d428 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d412:	b672      	cpsid	i
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	b662      	cpsie	i
 800d422:	61fb      	str	r3, [r7, #28]
}
 800d424:	bf00      	nop
 800d426:	e7fe      	b.n	800d426 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d42e:	6850      	ldr	r0, [r2, #4]
 800d430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d432:	6892      	ldr	r2, [r2, #8]
 800d434:	4611      	mov	r1, r2
 800d436:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f2c0 80af 	blt.w	800d59e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d004      	beq.n	800d456 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	3304      	adds	r3, #4
 800d450:	4618      	mov	r0, r3
 800d452:	f7fe f855 	bl	800b500 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d456:	463b      	mov	r3, r7
 800d458:	4618      	mov	r0, r3
 800d45a:	f7ff ff69 	bl	800d330 <prvSampleTimeNow>
 800d45e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b09      	cmp	r3, #9
 800d464:	f200 809a 	bhi.w	800d59c <prvProcessReceivedCommands+0x1a8>
 800d468:	a201      	add	r2, pc, #4	; (adr r2, 800d470 <prvProcessReceivedCommands+0x7c>)
 800d46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46e:	bf00      	nop
 800d470:	0800d499 	.word	0x0800d499
 800d474:	0800d499 	.word	0x0800d499
 800d478:	0800d499 	.word	0x0800d499
 800d47c:	0800d511 	.word	0x0800d511
 800d480:	0800d525 	.word	0x0800d525
 800d484:	0800d573 	.word	0x0800d573
 800d488:	0800d499 	.word	0x0800d499
 800d48c:	0800d499 	.word	0x0800d499
 800d490:	0800d511 	.word	0x0800d511
 800d494:	0800d525 	.word	0x0800d525
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d49e:	f043 0301 	orr.w	r3, r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	18d1      	adds	r1, r2, r3
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4b8:	f7ff ff5a 	bl	800d370 <prvInsertTimerInActiveList>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d06d      	beq.n	800d59e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d062      	beq.n	800d59e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4dc:	699b      	ldr	r3, [r3, #24]
 800d4de:	441a      	add	r2, r3
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ea:	f7ff fdff 	bl	800d0ec <xTimerGenericCommand>
 800d4ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d153      	bne.n	800d59e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fa:	b672      	cpsid	i
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	b662      	cpsie	i
 800d50a:	61bb      	str	r3, [r7, #24]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d516:	f023 0301 	bic.w	r3, r3, #1
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d522:	e03c      	b.n	800d59e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d52a:	f043 0301 	orr.w	r3, r3, #1
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10c      	bne.n	800d55e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d548:	b672      	cpsid	i
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	b662      	cpsie	i
 800d558:	617b      	str	r3, [r7, #20]
}
 800d55a:	bf00      	nop
 800d55c:	e7fe      	b.n	800d55c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	699a      	ldr	r2, [r3, #24]
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d564:	18d1      	adds	r1, r2, r3
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d56c:	f7ff ff00 	bl	800d370 <prvInsertTimerInActiveList>
					break;
 800d570:	e015      	b.n	800d59e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d103      	bne.n	800d588 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d582:	f000 fbe9 	bl	800dd58 <vPortFree>
 800d586:	e00a      	b.n	800d59e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d58e:	f023 0301 	bic.w	r3, r3, #1
 800d592:	b2da      	uxtb	r2, r3
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d59a:	e000      	b.n	800d59e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800d59c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d59e:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <prvProcessReceivedCommands+0x1cc>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	1d39      	adds	r1, r7, #4
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fe facc 	bl	800bb44 <xQueueReceive>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f47f af24 	bne.w	800d3fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop
 800d5b8:	3730      	adds	r7, #48	; 0x30
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20001c24 	.word	0x20001c24

0800d5c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5ca:	e04a      	b.n	800d662 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5cc:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <prvSwitchTimerLists+0xc4>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5d6:	4b2c      	ldr	r3, [pc, #176]	; (800d688 <prvSwitchTimerLists+0xc4>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fd ff8b 	bl	800b500 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5f8:	f003 0304 	and.w	r3, r3, #4
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d030      	beq.n	800d662 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	4413      	add	r3, r2
 800d608:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d90e      	bls.n	800d630 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d61e:	4b1a      	ldr	r3, [pc, #104]	; (800d688 <prvSwitchTimerLists+0xc4>)
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3304      	adds	r3, #4
 800d626:	4619      	mov	r1, r3
 800d628:	4610      	mov	r0, r2
 800d62a:	f7fd ff30 	bl	800b48e <vListInsert>
 800d62e:	e018      	b.n	800d662 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d630:	2300      	movs	r3, #0
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	2300      	movs	r3, #0
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	2100      	movs	r1, #0
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7ff fd56 	bl	800d0ec <xTimerGenericCommand>
 800d640:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10c      	bne.n	800d662 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	b672      	cpsid	i
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	b662      	cpsie	i
 800d65c:	603b      	str	r3, [r7, #0]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d662:	4b09      	ldr	r3, [pc, #36]	; (800d688 <prvSwitchTimerLists+0xc4>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1af      	bne.n	800d5cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d66c:	4b06      	ldr	r3, [pc, #24]	; (800d688 <prvSwitchTimerLists+0xc4>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d672:	4b06      	ldr	r3, [pc, #24]	; (800d68c <prvSwitchTimerLists+0xc8>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a04      	ldr	r2, [pc, #16]	; (800d688 <prvSwitchTimerLists+0xc4>)
 800d678:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d67a:	4a04      	ldr	r2, [pc, #16]	; (800d68c <prvSwitchTimerLists+0xc8>)
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	6013      	str	r3, [r2, #0]
}
 800d680:	bf00      	nop
 800d682:	3718      	adds	r7, #24
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	20001c1c 	.word	0x20001c1c
 800d68c:	20001c20 	.word	0x20001c20

0800d690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d696:	f000 f969 	bl	800d96c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <prvCheckForValidListAndQueue+0x60>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d120      	bne.n	800d6e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6a2:	4814      	ldr	r0, [pc, #80]	; (800d6f4 <prvCheckForValidListAndQueue+0x64>)
 800d6a4:	f7fd fea2 	bl	800b3ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6a8:	4813      	ldr	r0, [pc, #76]	; (800d6f8 <prvCheckForValidListAndQueue+0x68>)
 800d6aa:	f7fd fe9f 	bl	800b3ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6ae:	4b13      	ldr	r3, [pc, #76]	; (800d6fc <prvCheckForValidListAndQueue+0x6c>)
 800d6b0:	4a10      	ldr	r2, [pc, #64]	; (800d6f4 <prvCheckForValidListAndQueue+0x64>)
 800d6b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6b4:	4b12      	ldr	r3, [pc, #72]	; (800d700 <prvCheckForValidListAndQueue+0x70>)
 800d6b6:	4a10      	ldr	r2, [pc, #64]	; (800d6f8 <prvCheckForValidListAndQueue+0x68>)
 800d6b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	4b11      	ldr	r3, [pc, #68]	; (800d704 <prvCheckForValidListAndQueue+0x74>)
 800d6c0:	4a11      	ldr	r2, [pc, #68]	; (800d708 <prvCheckForValidListAndQueue+0x78>)
 800d6c2:	2110      	movs	r1, #16
 800d6c4:	200a      	movs	r0, #10
 800d6c6:	f7fd ffaf 	bl	800b628 <xQueueGenericCreateStatic>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4a08      	ldr	r2, [pc, #32]	; (800d6f0 <prvCheckForValidListAndQueue+0x60>)
 800d6ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d6d0:	4b07      	ldr	r3, [pc, #28]	; (800d6f0 <prvCheckForValidListAndQueue+0x60>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d005      	beq.n	800d6e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d6d8:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <prvCheckForValidListAndQueue+0x60>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	490b      	ldr	r1, [pc, #44]	; (800d70c <prvCheckForValidListAndQueue+0x7c>)
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe fc26 	bl	800bf30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6e4:	f000 f976 	bl	800d9d4 <vPortExitCritical>
}
 800d6e8:	bf00      	nop
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20001c24 	.word	0x20001c24
 800d6f4:	20001bf4 	.word	0x20001bf4
 800d6f8:	20001c08 	.word	0x20001c08
 800d6fc:	20001c1c 	.word	0x20001c1c
 800d700:	20001c20 	.word	0x20001c20
 800d704:	20001cd0 	.word	0x20001cd0
 800d708:	20001c30 	.word	0x20001c30
 800d70c:	0800eebc 	.word	0x0800eebc

0800d710 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10c      	bne.n	800d73c <pvTimerGetTimerID+0x2c>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	b672      	cpsid	i
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	b662      	cpsie	i
 800d736:	60fb      	str	r3, [r7, #12]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800d73c:	f000 f916 	bl	800d96c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	69db      	ldr	r3, [r3, #28]
 800d744:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d746:	f000 f945 	bl	800d9d4 <vPortExitCritical>

	return pvReturn;
 800d74a:	693b      	ldr	r3, [r7, #16]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3b04      	subs	r3, #4
 800d764:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3b04      	subs	r3, #4
 800d772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	f023 0201 	bic.w	r2, r3, #1
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3b04      	subs	r3, #4
 800d782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d784:	4a0c      	ldr	r2, [pc, #48]	; (800d7b8 <pxPortInitialiseStack+0x64>)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3b14      	subs	r3, #20
 800d78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3b04      	subs	r3, #4
 800d79a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f06f 0202 	mvn.w	r2, #2
 800d7a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3b20      	subs	r3, #32
 800d7a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	0800d7bd 	.word	0x0800d7bd

0800d7bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7c6:	4b14      	ldr	r3, [pc, #80]	; (800d818 <prvTaskExitError+0x5c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ce:	d00c      	beq.n	800d7ea <prvTaskExitError+0x2e>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	b672      	cpsid	i
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	b662      	cpsie	i
 800d7e4:	60fb      	str	r3, [r7, #12]
}
 800d7e6:	bf00      	nop
 800d7e8:	e7fe      	b.n	800d7e8 <prvTaskExitError+0x2c>
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	b672      	cpsid	i
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	b662      	cpsie	i
 800d7fe:	60bb      	str	r3, [r7, #8]
}
 800d800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d802:	bf00      	nop
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0fc      	beq.n	800d804 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d80a:	bf00      	nop
 800d80c:	bf00      	nop
 800d80e:	3714      	adds	r7, #20
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr
 800d818:	20000098 	.word	0x20000098
 800d81c:	00000000 	.word	0x00000000

0800d820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d820:	4b07      	ldr	r3, [pc, #28]	; (800d840 <pxCurrentTCBConst2>)
 800d822:	6819      	ldr	r1, [r3, #0]
 800d824:	6808      	ldr	r0, [r1, #0]
 800d826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82a:	f380 8809 	msr	PSP, r0
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f04f 0000 	mov.w	r0, #0
 800d836:	f380 8811 	msr	BASEPRI, r0
 800d83a:	4770      	bx	lr
 800d83c:	f3af 8000 	nop.w

0800d840 <pxCurrentTCBConst2>:
 800d840:	200016f4 	.word	0x200016f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d844:	bf00      	nop
 800d846:	bf00      	nop

0800d848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d848:	4808      	ldr	r0, [pc, #32]	; (800d86c <prvPortStartFirstTask+0x24>)
 800d84a:	6800      	ldr	r0, [r0, #0]
 800d84c:	6800      	ldr	r0, [r0, #0]
 800d84e:	f380 8808 	msr	MSP, r0
 800d852:	f04f 0000 	mov.w	r0, #0
 800d856:	f380 8814 	msr	CONTROL, r0
 800d85a:	b662      	cpsie	i
 800d85c:	b661      	cpsie	f
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	df00      	svc	0
 800d868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d86a:	bf00      	nop
 800d86c:	e000ed08 	.word	0xe000ed08

0800d870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d876:	4b37      	ldr	r3, [pc, #220]	; (800d954 <xPortStartScheduler+0xe4>)
 800d878:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	22ff      	movs	r2, #255	; 0xff
 800d886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	b2db      	uxtb	r3, r3
 800d894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	4b2f      	ldr	r3, [pc, #188]	; (800d958 <xPortStartScheduler+0xe8>)
 800d89c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d89e:	4b2f      	ldr	r3, [pc, #188]	; (800d95c <xPortStartScheduler+0xec>)
 800d8a0:	2207      	movs	r2, #7
 800d8a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8a4:	e009      	b.n	800d8ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d8a6:	4b2d      	ldr	r3, [pc, #180]	; (800d95c <xPortStartScheduler+0xec>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	4a2b      	ldr	r2, [pc, #172]	; (800d95c <xPortStartScheduler+0xec>)
 800d8ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ba:	78fb      	ldrb	r3, [r7, #3]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c2:	2b80      	cmp	r3, #128	; 0x80
 800d8c4:	d0ef      	beq.n	800d8a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8c6:	4b25      	ldr	r3, [pc, #148]	; (800d95c <xPortStartScheduler+0xec>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f1c3 0307 	rsb	r3, r3, #7
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d00c      	beq.n	800d8ec <xPortStartScheduler+0x7c>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	60bb      	str	r3, [r7, #8]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8ec:	4b1b      	ldr	r3, [pc, #108]	; (800d95c <xPortStartScheduler+0xec>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	4a1a      	ldr	r2, [pc, #104]	; (800d95c <xPortStartScheduler+0xec>)
 800d8f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d8f6:	4b19      	ldr	r3, [pc, #100]	; (800d95c <xPortStartScheduler+0xec>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8fe:	4a17      	ldr	r2, [pc, #92]	; (800d95c <xPortStartScheduler+0xec>)
 800d900:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	b2da      	uxtb	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d90a:	4b15      	ldr	r3, [pc, #84]	; (800d960 <xPortStartScheduler+0xf0>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a14      	ldr	r2, [pc, #80]	; (800d960 <xPortStartScheduler+0xf0>)
 800d910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d914:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d916:	4b12      	ldr	r3, [pc, #72]	; (800d960 <xPortStartScheduler+0xf0>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a11      	ldr	r2, [pc, #68]	; (800d960 <xPortStartScheduler+0xf0>)
 800d91c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d920:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d922:	f000 f8dd 	bl	800dae0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d926:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <xPortStartScheduler+0xf4>)
 800d928:	2200      	movs	r2, #0
 800d92a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d92c:	f000 f8fc 	bl	800db28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d930:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <xPortStartScheduler+0xf8>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a0c      	ldr	r2, [pc, #48]	; (800d968 <xPortStartScheduler+0xf8>)
 800d936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d93a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d93c:	f7ff ff84 	bl	800d848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d940:	f7fe ff4a 	bl	800c7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800d944:	f7ff ff3a 	bl	800d7bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	e000e400 	.word	0xe000e400
 800d958:	20001d20 	.word	0x20001d20
 800d95c:	20001d24 	.word	0x20001d24
 800d960:	e000ed20 	.word	0xe000ed20
 800d964:	20000098 	.word	0x20000098
 800d968:	e000ef34 	.word	0xe000ef34

0800d96c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	b672      	cpsid	i
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	b662      	cpsie	i
 800d986:	607b      	str	r3, [r7, #4]
}
 800d988:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <vPortEnterCritical+0x60>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	4a0e      	ldr	r2, [pc, #56]	; (800d9cc <vPortEnterCritical+0x60>)
 800d992:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d994:	4b0d      	ldr	r3, [pc, #52]	; (800d9cc <vPortEnterCritical+0x60>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d111      	bne.n	800d9c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d99c:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <vPortEnterCritical+0x64>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00c      	beq.n	800d9c0 <vPortEnterCritical+0x54>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	b672      	cpsid	i
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	b662      	cpsie	i
 800d9ba:	603b      	str	r3, [r7, #0]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <vPortEnterCritical+0x52>
	}
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	20000098 	.word	0x20000098
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9da:	4b13      	ldr	r3, [pc, #76]	; (800da28 <vPortExitCritical+0x54>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10c      	bne.n	800d9fc <vPortExitCritical+0x28>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	b672      	cpsid	i
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	b662      	cpsie	i
 800d9f6:	607b      	str	r3, [r7, #4]
}
 800d9f8:	bf00      	nop
 800d9fa:	e7fe      	b.n	800d9fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d9fc:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <vPortExitCritical+0x54>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3b01      	subs	r3, #1
 800da02:	4a09      	ldr	r2, [pc, #36]	; (800da28 <vPortExitCritical+0x54>)
 800da04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da06:	4b08      	ldr	r3, [pc, #32]	; (800da28 <vPortExitCritical+0x54>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <vPortExitCritical+0x46>
 800da0e:	2300      	movs	r3, #0
 800da10:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	f383 8811 	msr	BASEPRI, r3
}
 800da18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	20000098 	.word	0x20000098
 800da2c:	00000000 	.word	0x00000000

0800da30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da30:	f3ef 8009 	mrs	r0, PSP
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	4b15      	ldr	r3, [pc, #84]	; (800da90 <pxCurrentTCBConst>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	f01e 0f10 	tst.w	lr, #16
 800da40:	bf08      	it	eq
 800da42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4a:	6010      	str	r0, [r2, #0]
 800da4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da54:	b672      	cpsid	i
 800da56:	f380 8811 	msr	BASEPRI, r0
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	b662      	cpsie	i
 800da64:	f7fe feb8 	bl	800c7d8 <vTaskSwitchContext>
 800da68:	f04f 0000 	mov.w	r0, #0
 800da6c:	f380 8811 	msr	BASEPRI, r0
 800da70:	bc09      	pop	{r0, r3}
 800da72:	6819      	ldr	r1, [r3, #0]
 800da74:	6808      	ldr	r0, [r1, #0]
 800da76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7a:	f01e 0f10 	tst.w	lr, #16
 800da7e:	bf08      	it	eq
 800da80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da84:	f380 8809 	msr	PSP, r0
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop

0800da90 <pxCurrentTCBConst>:
 800da90:	200016f4 	.word	0x200016f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop

0800da98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa2:	b672      	cpsid	i
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	b662      	cpsie	i
 800dab2:	607b      	str	r3, [r7, #4]
}
 800dab4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dab6:	f7fe fdd3 	bl	800c660 <xTaskIncrementTick>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dac0:	4b06      	ldr	r3, [pc, #24]	; (800dadc <SysTick_Handler+0x44>)
 800dac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	2300      	movs	r3, #0
 800daca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f383 8811 	msr	BASEPRI, r3
}
 800dad2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	e000ed04 	.word	0xe000ed04

0800dae0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dae0:	b480      	push	{r7}
 800dae2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dae4:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <vPortSetupTimerInterrupt+0x34>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800daea:	4b0b      	ldr	r3, [pc, #44]	; (800db18 <vPortSetupTimerInterrupt+0x38>)
 800daec:	2200      	movs	r2, #0
 800daee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800daf0:	4b0a      	ldr	r3, [pc, #40]	; (800db1c <vPortSetupTimerInterrupt+0x3c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a0a      	ldr	r2, [pc, #40]	; (800db20 <vPortSetupTimerInterrupt+0x40>)
 800daf6:	fba2 2303 	umull	r2, r3, r2, r3
 800dafa:	099b      	lsrs	r3, r3, #6
 800dafc:	4a09      	ldr	r2, [pc, #36]	; (800db24 <vPortSetupTimerInterrupt+0x44>)
 800dafe:	3b01      	subs	r3, #1
 800db00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db02:	4b04      	ldr	r3, [pc, #16]	; (800db14 <vPortSetupTimerInterrupt+0x34>)
 800db04:	2207      	movs	r2, #7
 800db06:	601a      	str	r2, [r3, #0]
}
 800db08:	bf00      	nop
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	e000e010 	.word	0xe000e010
 800db18:	e000e018 	.word	0xe000e018
 800db1c:	20000000 	.word	0x20000000
 800db20:	10624dd3 	.word	0x10624dd3
 800db24:	e000e014 	.word	0xe000e014

0800db28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db38 <vPortEnableVFP+0x10>
 800db2c:	6801      	ldr	r1, [r0, #0]
 800db2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db32:	6001      	str	r1, [r0, #0]
 800db34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db36:	bf00      	nop
 800db38:	e000ed88 	.word	0xe000ed88

0800db3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db42:	f3ef 8305 	mrs	r3, IPSR
 800db46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b0f      	cmp	r3, #15
 800db4c:	d916      	bls.n	800db7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db4e:	4a19      	ldr	r2, [pc, #100]	; (800dbb4 <vPortValidateInterruptPriority+0x78>)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4413      	add	r3, r2
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db58:	4b17      	ldr	r3, [pc, #92]	; (800dbb8 <vPortValidateInterruptPriority+0x7c>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	7afa      	ldrb	r2, [r7, #11]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d20c      	bcs.n	800db7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	b672      	cpsid	i
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	b662      	cpsie	i
 800db76:	607b      	str	r3, [r7, #4]
}
 800db78:	bf00      	nop
 800db7a:	e7fe      	b.n	800db7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db7c:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <vPortValidateInterruptPriority+0x80>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db84:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <vPortValidateInterruptPriority+0x84>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d90c      	bls.n	800dba6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	b672      	cpsid	i
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	b662      	cpsie	i
 800dba0:	603b      	str	r3, [r7, #0]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <vPortValidateInterruptPriority+0x68>
	}
 800dba6:	bf00      	nop
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	e000e3f0 	.word	0xe000e3f0
 800dbb8:	20001d20 	.word	0x20001d20
 800dbbc:	e000ed0c 	.word	0xe000ed0c
 800dbc0:	20001d24 	.word	0x20001d24

0800dbc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08a      	sub	sp, #40	; 0x28
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbd0:	f7fe fc76 	bl	800c4c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbd4:	4b5b      	ldr	r3, [pc, #364]	; (800dd44 <pvPortMalloc+0x180>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d101      	bne.n	800dbe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbdc:	f000 f91a 	bl	800de14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbe0:	4b59      	ldr	r3, [pc, #356]	; (800dd48 <pvPortMalloc+0x184>)
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f040 8092 	bne.w	800dd12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01f      	beq.n	800dc34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dbf4:	2208      	movs	r2, #8
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f003 0307 	and.w	r3, r3, #7
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d016      	beq.n	800dc34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f023 0307 	bic.w	r3, r3, #7
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f003 0307 	and.w	r3, r3, #7
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00c      	beq.n	800dc34 <pvPortMalloc+0x70>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	b672      	cpsid	i
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	b662      	cpsie	i
 800dc2e:	617b      	str	r3, [r7, #20]
}
 800dc30:	bf00      	nop
 800dc32:	e7fe      	b.n	800dc32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d06b      	beq.n	800dd12 <pvPortMalloc+0x14e>
 800dc3a:	4b44      	ldr	r3, [pc, #272]	; (800dd4c <pvPortMalloc+0x188>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d866      	bhi.n	800dd12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc44:	4b42      	ldr	r3, [pc, #264]	; (800dd50 <pvPortMalloc+0x18c>)
 800dc46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc48:	4b41      	ldr	r3, [pc, #260]	; (800dd50 <pvPortMalloc+0x18c>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc4e:	e004      	b.n	800dc5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d903      	bls.n	800dc6c <pvPortMalloc+0xa8>
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1f1      	bne.n	800dc50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc6c:	4b35      	ldr	r3, [pc, #212]	; (800dd44 <pvPortMalloc+0x180>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d04d      	beq.n	800dd12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2208      	movs	r2, #8
 800dc7c:	4413      	add	r3, r2
 800dc7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	1ad2      	subs	r2, r2, r3
 800dc90:	2308      	movs	r3, #8
 800dc92:	005b      	lsls	r3, r3, #1
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d921      	bls.n	800dcdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	f003 0307 	and.w	r3, r3, #7
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00c      	beq.n	800dcc4 <pvPortMalloc+0x100>
	__asm volatile
 800dcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcae:	b672      	cpsid	i
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	b662      	cpsie	i
 800dcbe:	613b      	str	r3, [r7, #16]
}
 800dcc0:	bf00      	nop
 800dcc2:	e7fe      	b.n	800dcc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	1ad2      	subs	r2, r2, r3
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcd6:	69b8      	ldr	r0, [r7, #24]
 800dcd8:	f000 f8fe 	bl	800ded8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcdc:	4b1b      	ldr	r3, [pc, #108]	; (800dd4c <pvPortMalloc+0x188>)
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	4a19      	ldr	r2, [pc, #100]	; (800dd4c <pvPortMalloc+0x188>)
 800dce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcea:	4b18      	ldr	r3, [pc, #96]	; (800dd4c <pvPortMalloc+0x188>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4b19      	ldr	r3, [pc, #100]	; (800dd54 <pvPortMalloc+0x190>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d203      	bcs.n	800dcfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dcf6:	4b15      	ldr	r3, [pc, #84]	; (800dd4c <pvPortMalloc+0x188>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a16      	ldr	r2, [pc, #88]	; (800dd54 <pvPortMalloc+0x190>)
 800dcfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	4b11      	ldr	r3, [pc, #68]	; (800dd48 <pvPortMalloc+0x184>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	431a      	orrs	r2, r3
 800dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2200      	movs	r2, #0
 800dd10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd12:	f7fe fbe3 	bl	800c4dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00c      	beq.n	800dd3a <pvPortMalloc+0x176>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	b672      	cpsid	i
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	b662      	cpsie	i
 800dd34:	60fb      	str	r3, [r7, #12]
}
 800dd36:	bf00      	nop
 800dd38:	e7fe      	b.n	800dd38 <pvPortMalloc+0x174>
	return pvReturn;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3728      	adds	r7, #40	; 0x28
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	20005930 	.word	0x20005930
 800dd48:	2000593c 	.word	0x2000593c
 800dd4c:	20005934 	.word	0x20005934
 800dd50:	20005928 	.word	0x20005928
 800dd54:	20005938 	.word	0x20005938

0800dd58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d04c      	beq.n	800de04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd6a:	2308      	movs	r3, #8
 800dd6c:	425b      	negs	r3, r3
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	4413      	add	r3, r2
 800dd72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	4b23      	ldr	r3, [pc, #140]	; (800de0c <vPortFree+0xb4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4013      	ands	r3, r2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10c      	bne.n	800dda0 <vPortFree+0x48>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8a:	b672      	cpsid	i
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	b662      	cpsie	i
 800dd9a:	60fb      	str	r3, [r7, #12]
}
 800dd9c:	bf00      	nop
 800dd9e:	e7fe      	b.n	800dd9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00c      	beq.n	800ddc2 <vPortFree+0x6a>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	b672      	cpsid	i
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	b662      	cpsie	i
 800ddbc:	60bb      	str	r3, [r7, #8]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	4b11      	ldr	r3, [pc, #68]	; (800de0c <vPortFree+0xb4>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4013      	ands	r3, r2
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d019      	beq.n	800de04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d115      	bne.n	800de04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	685a      	ldr	r2, [r3, #4]
 800dddc:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <vPortFree+0xb4>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	43db      	mvns	r3, r3
 800dde2:	401a      	ands	r2, r3
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dde8:	f7fe fb6a 	bl	800c4c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <vPortFree+0xb8>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	4a06      	ldr	r2, [pc, #24]	; (800de10 <vPortFree+0xb8>)
 800ddf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ddfa:	6938      	ldr	r0, [r7, #16]
 800ddfc:	f000 f86c 	bl	800ded8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800de00:	f7fe fb6c 	bl	800c4dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de04:	bf00      	nop
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	2000593c 	.word	0x2000593c
 800de10:	20005934 	.word	0x20005934

0800de14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800de1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de20:	4b27      	ldr	r3, [pc, #156]	; (800dec0 <prvHeapInit+0xac>)
 800de22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00c      	beq.n	800de48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3307      	adds	r3, #7
 800de32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f023 0307 	bic.w	r3, r3, #7
 800de3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	4a1f      	ldr	r2, [pc, #124]	; (800dec0 <prvHeapInit+0xac>)
 800de44:	4413      	add	r3, r2
 800de46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de4c:	4a1d      	ldr	r2, [pc, #116]	; (800dec4 <prvHeapInit+0xb0>)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de52:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <prvHeapInit+0xb0>)
 800de54:	2200      	movs	r2, #0
 800de56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4413      	add	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de60:	2208      	movs	r2, #8
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	1a9b      	subs	r3, r3, r2
 800de66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f023 0307 	bic.w	r3, r3, #7
 800de6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <prvHeapInit+0xb4>)
 800de74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de76:	4b14      	ldr	r3, [pc, #80]	; (800dec8 <prvHeapInit+0xb4>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2200      	movs	r2, #0
 800de7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de7e:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <prvHeapInit+0xb4>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	1ad2      	subs	r2, r2, r3
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <prvHeapInit+0xb4>)
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4a0a      	ldr	r2, [pc, #40]	; (800decc <prvHeapInit+0xb8>)
 800dea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	4a09      	ldr	r2, [pc, #36]	; (800ded0 <prvHeapInit+0xbc>)
 800deaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800deac:	4b09      	ldr	r3, [pc, #36]	; (800ded4 <prvHeapInit+0xc0>)
 800deae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800deb2:	601a      	str	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	20001d28 	.word	0x20001d28
 800dec4:	20005928 	.word	0x20005928
 800dec8:	20005930 	.word	0x20005930
 800decc:	20005938 	.word	0x20005938
 800ded0:	20005934 	.word	0x20005934
 800ded4:	2000593c 	.word	0x2000593c

0800ded8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dee0:	4b28      	ldr	r3, [pc, #160]	; (800df84 <prvInsertBlockIntoFreeList+0xac>)
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	e002      	b.n	800deec <prvInsertBlockIntoFreeList+0x14>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	429a      	cmp	r2, r3
 800def4:	d8f7      	bhi.n	800dee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	4413      	add	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d108      	bne.n	800df1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	441a      	add	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	441a      	add	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d118      	bne.n	800df60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4b15      	ldr	r3, [pc, #84]	; (800df88 <prvInsertBlockIntoFreeList+0xb0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d00d      	beq.n	800df56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	441a      	add	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	e008      	b.n	800df68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df56:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <prvInsertBlockIntoFreeList+0xb0>)
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	e003      	b.n	800df68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d002      	beq.n	800df76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df76:	bf00      	nop
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	20005928 	.word	0x20005928
 800df88:	20005930 	.word	0x20005930

0800df8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df90:	2200      	movs	r2, #0
 800df92:	4912      	ldr	r1, [pc, #72]	; (800dfdc <MX_USB_DEVICE_Init+0x50>)
 800df94:	4812      	ldr	r0, [pc, #72]	; (800dfe0 <MX_USB_DEVICE_Init+0x54>)
 800df96:	f7fb fc73 	bl	8009880 <USBD_Init>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dfa0:	f7f4 f8e0 	bl	8002164 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dfa4:	490f      	ldr	r1, [pc, #60]	; (800dfe4 <MX_USB_DEVICE_Init+0x58>)
 800dfa6:	480e      	ldr	r0, [pc, #56]	; (800dfe0 <MX_USB_DEVICE_Init+0x54>)
 800dfa8:	f7fb fc9a 	bl	80098e0 <USBD_RegisterClass>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dfb2:	f7f4 f8d7 	bl	8002164 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dfb6:	490c      	ldr	r1, [pc, #48]	; (800dfe8 <MX_USB_DEVICE_Init+0x5c>)
 800dfb8:	4809      	ldr	r0, [pc, #36]	; (800dfe0 <MX_USB_DEVICE_Init+0x54>)
 800dfba:	f7fb fbd1 	bl	8009760 <USBD_CDC_RegisterInterface>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dfc4:	f7f4 f8ce 	bl	8002164 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dfc8:	4805      	ldr	r0, [pc, #20]	; (800dfe0 <MX_USB_DEVICE_Init+0x54>)
 800dfca:	f7fb fcbf 	bl	800994c <USBD_Start>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dfd4:	f7f4 f8c6 	bl	8002164 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dfd8:	bf00      	nop
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	200000b0 	.word	0x200000b0
 800dfe0:	20005940 	.word	0x20005940
 800dfe4:	20000018 	.word	0x20000018
 800dfe8:	2000009c 	.word	0x2000009c

0800dfec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dff0:	2200      	movs	r2, #0
 800dff2:	4905      	ldr	r1, [pc, #20]	; (800e008 <CDC_Init_FS+0x1c>)
 800dff4:	4805      	ldr	r0, [pc, #20]	; (800e00c <CDC_Init_FS+0x20>)
 800dff6:	f7fb fbcd 	bl	8009794 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dffa:	4905      	ldr	r1, [pc, #20]	; (800e010 <CDC_Init_FS+0x24>)
 800dffc:	4803      	ldr	r0, [pc, #12]	; (800e00c <CDC_Init_FS+0x20>)
 800dffe:	f7fb fbeb 	bl	80097d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e002:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e004:	4618      	mov	r0, r3
 800e006:	bd80      	pop	{r7, pc}
 800e008:	2000641c 	.word	0x2000641c
 800e00c:	20005940 	.word	0x20005940
 800e010:	20005c1c 	.word	0x20005c1c

0800e014 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e014:	b480      	push	{r7}
 800e016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e018:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	4603      	mov	r3, r0
 800e02c:	6039      	str	r1, [r7, #0]
 800e02e:	71fb      	strb	r3, [r7, #7]
 800e030:	4613      	mov	r3, r2
 800e032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	2b23      	cmp	r3, #35	; 0x23
 800e038:	d84a      	bhi.n	800e0d0 <CDC_Control_FS+0xac>
 800e03a:	a201      	add	r2, pc, #4	; (adr r2, 800e040 <CDC_Control_FS+0x1c>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e0d1 	.word	0x0800e0d1
 800e044:	0800e0d1 	.word	0x0800e0d1
 800e048:	0800e0d1 	.word	0x0800e0d1
 800e04c:	0800e0d1 	.word	0x0800e0d1
 800e050:	0800e0d1 	.word	0x0800e0d1
 800e054:	0800e0d1 	.word	0x0800e0d1
 800e058:	0800e0d1 	.word	0x0800e0d1
 800e05c:	0800e0d1 	.word	0x0800e0d1
 800e060:	0800e0d1 	.word	0x0800e0d1
 800e064:	0800e0d1 	.word	0x0800e0d1
 800e068:	0800e0d1 	.word	0x0800e0d1
 800e06c:	0800e0d1 	.word	0x0800e0d1
 800e070:	0800e0d1 	.word	0x0800e0d1
 800e074:	0800e0d1 	.word	0x0800e0d1
 800e078:	0800e0d1 	.word	0x0800e0d1
 800e07c:	0800e0d1 	.word	0x0800e0d1
 800e080:	0800e0d1 	.word	0x0800e0d1
 800e084:	0800e0d1 	.word	0x0800e0d1
 800e088:	0800e0d1 	.word	0x0800e0d1
 800e08c:	0800e0d1 	.word	0x0800e0d1
 800e090:	0800e0d1 	.word	0x0800e0d1
 800e094:	0800e0d1 	.word	0x0800e0d1
 800e098:	0800e0d1 	.word	0x0800e0d1
 800e09c:	0800e0d1 	.word	0x0800e0d1
 800e0a0:	0800e0d1 	.word	0x0800e0d1
 800e0a4:	0800e0d1 	.word	0x0800e0d1
 800e0a8:	0800e0d1 	.word	0x0800e0d1
 800e0ac:	0800e0d1 	.word	0x0800e0d1
 800e0b0:	0800e0d1 	.word	0x0800e0d1
 800e0b4:	0800e0d1 	.word	0x0800e0d1
 800e0b8:	0800e0d1 	.word	0x0800e0d1
 800e0bc:	0800e0d1 	.word	0x0800e0d1
 800e0c0:	0800e0d1 	.word	0x0800e0d1
 800e0c4:	0800e0d1 	.word	0x0800e0d1
 800e0c8:	0800e0d1 	.word	0x0800e0d1
 800e0cc:	0800e0d1 	.word	0x0800e0d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e0d0:	bf00      	nop
  }

  return (USBD_OK);
 800e0d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08a      	sub	sp, #40	; 0x28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e0ea:	6879      	ldr	r1, [r7, #4]
 800e0ec:	480b      	ldr	r0, [pc, #44]	; (800e11c <CDC_Receive_FS+0x3c>)
 800e0ee:	f7fb fb73 	bl	80097d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e0f2:	480a      	ldr	r0, [pc, #40]	; (800e11c <CDC_Receive_FS+0x3c>)
 800e0f4:	f7fb fb8e 	bl	8009814 <USBD_CDC_ReceivePacket>
  //uint8_t *data = "Hello World from USB CDC\n";
  uint8_t * command[8];
  //strcpy(command, Buf);
  //command[*Len] = "\0";
  SEGGER_SYSVIEW_PrintfHost("%d\n", *Len );
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4808      	ldr	r0, [pc, #32]	; (800e120 <CDC_Receive_FS+0x40>)
 800e100:	f7f3 fc14 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>

  //SEGGER_SYSVIEW_PrintfHost(command);

  xQueueSendFromISR(commandQueueHandle, Buf, 100);
 800e104:	4b07      	ldr	r3, [pc, #28]	; (800e124 <CDC_Receive_FS+0x44>)
 800e106:	6818      	ldr	r0, [r3, #0]
 800e108:	2300      	movs	r3, #0
 800e10a:	2264      	movs	r2, #100	; 0x64
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	f7fd fc79 	bl	800ba04 <xQueueGenericSendFromISR>



  return (USBD_OK);
 800e112:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e114:	4618      	mov	r0, r3
 800e116:	3728      	adds	r7, #40	; 0x28
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	20005940 	.word	0x20005940
 800e120:	0800eec4 	.word	0x0800eec4
 800e124:	20000ef8 	.word	0x20000ef8

0800e128 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e128:	b480      	push	{r7}
 800e12a:	b087      	sub	sp, #28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	4613      	mov	r3, r2
 800e134:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e136:	2300      	movs	r3, #0
 800e138:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	371c      	adds	r7, #28
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
	...

0800e14c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	4603      	mov	r3, r0
 800e154:	6039      	str	r1, [r7, #0]
 800e156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2212      	movs	r2, #18
 800e15c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e15e:	4b03      	ldr	r3, [pc, #12]	; (800e16c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e160:	4618      	mov	r0, r3
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr
 800e16c:	200000d0 	.word	0x200000d0

0800e170 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	6039      	str	r1, [r7, #0]
 800e17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2204      	movs	r2, #4
 800e180:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e182:	4b03      	ldr	r3, [pc, #12]	; (800e190 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e184:	4618      	mov	r0, r3
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	200000f0 	.word	0x200000f0

0800e194 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	4603      	mov	r3, r0
 800e19c:	6039      	str	r1, [r7, #0]
 800e19e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1a0:	79fb      	ldrb	r3, [r7, #7]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d105      	bne.n	800e1b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	4907      	ldr	r1, [pc, #28]	; (800e1c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e1aa:	4808      	ldr	r0, [pc, #32]	; (800e1cc <USBD_FS_ProductStrDescriptor+0x38>)
 800e1ac:	f7fc fda4 	bl	800acf8 <USBD_GetString>
 800e1b0:	e004      	b.n	800e1bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1b2:	683a      	ldr	r2, [r7, #0]
 800e1b4:	4904      	ldr	r1, [pc, #16]	; (800e1c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e1b6:	4805      	ldr	r0, [pc, #20]	; (800e1cc <USBD_FS_ProductStrDescriptor+0x38>)
 800e1b8:	f7fc fd9e 	bl	800acf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1bc:	4b02      	ldr	r3, [pc, #8]	; (800e1c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20006c1c 	.word	0x20006c1c
 800e1cc:	0800eec8 	.word	0x0800eec8

0800e1d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	6039      	str	r1, [r7, #0]
 800e1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	4904      	ldr	r1, [pc, #16]	; (800e1f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1e0:	4804      	ldr	r0, [pc, #16]	; (800e1f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1e2:	f7fc fd89 	bl	800acf8 <USBD_GetString>
  return USBD_StrDesc;
 800e1e6:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	20006c1c 	.word	0x20006c1c
 800e1f4:	0800eee0 	.word	0x0800eee0

0800e1f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	4603      	mov	r3, r0
 800e200:	6039      	str	r1, [r7, #0]
 800e202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	221a      	movs	r2, #26
 800e208:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e20a:	f000 f855 	bl	800e2b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e20e:	4b02      	ldr	r3, [pc, #8]	; (800e218 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	200000f4 	.word	0x200000f4

0800e21c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	6039      	str	r1, [r7, #0]
 800e226:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e228:	79fb      	ldrb	r3, [r7, #7]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d105      	bne.n	800e23a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	4907      	ldr	r1, [pc, #28]	; (800e250 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e232:	4808      	ldr	r0, [pc, #32]	; (800e254 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e234:	f7fc fd60 	bl	800acf8 <USBD_GetString>
 800e238:	e004      	b.n	800e244 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	4904      	ldr	r1, [pc, #16]	; (800e250 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e23e:	4805      	ldr	r0, [pc, #20]	; (800e254 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e240:	f7fc fd5a 	bl	800acf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e244:	4b02      	ldr	r3, [pc, #8]	; (800e250 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e246:	4618      	mov	r0, r3
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20006c1c 	.word	0x20006c1c
 800e254:	0800eef4 	.word	0x0800eef4

0800e258 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	6039      	str	r1, [r7, #0]
 800e262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	4907      	ldr	r1, [pc, #28]	; (800e28c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e26e:	4808      	ldr	r0, [pc, #32]	; (800e290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e270:	f7fc fd42 	bl	800acf8 <USBD_GetString>
 800e274:	e004      	b.n	800e280 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	4904      	ldr	r1, [pc, #16]	; (800e28c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e27a:	4805      	ldr	r0, [pc, #20]	; (800e290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e27c:	f7fc fd3c 	bl	800acf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e280:	4b02      	ldr	r3, [pc, #8]	; (800e28c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20006c1c 	.word	0x20006c1c
 800e290:	0800ef00 	.word	0x0800ef00

0800e294 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	6039      	str	r1, [r7, #0]
 800e29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	220c      	movs	r2, #12
 800e2a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e2a6:	4b03      	ldr	r3, [pc, #12]	; (800e2b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	200000e4 	.word	0x200000e4

0800e2b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2be:	4b0f      	ldr	r3, [pc, #60]	; (800e2fc <Get_SerialNum+0x44>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e2c4:	4b0e      	ldr	r3, [pc, #56]	; (800e300 <Get_SerialNum+0x48>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e2ca:	4b0e      	ldr	r3, [pc, #56]	; (800e304 <Get_SerialNum+0x4c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d009      	beq.n	800e2f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e2de:	2208      	movs	r2, #8
 800e2e0:	4909      	ldr	r1, [pc, #36]	; (800e308 <Get_SerialNum+0x50>)
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f814 	bl	800e310 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	4908      	ldr	r1, [pc, #32]	; (800e30c <Get_SerialNum+0x54>)
 800e2ec:	68b8      	ldr	r0, [r7, #8]
 800e2ee:	f000 f80f 	bl	800e310 <IntToUnicode>
  }
}
 800e2f2:	bf00      	nop
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	1ff0f420 	.word	0x1ff0f420
 800e300:	1ff0f424 	.word	0x1ff0f424
 800e304:	1ff0f428 	.word	0x1ff0f428
 800e308:	200000f6 	.word	0x200000f6
 800e30c:	20000106 	.word	0x20000106

0800e310 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4613      	mov	r3, r2
 800e31c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e322:	2300      	movs	r3, #0
 800e324:	75fb      	strb	r3, [r7, #23]
 800e326:	e027      	b.n	800e378 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	0f1b      	lsrs	r3, r3, #28
 800e32c:	2b09      	cmp	r3, #9
 800e32e:	d80b      	bhi.n	800e348 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	0f1b      	lsrs	r3, r3, #28
 800e334:	b2da      	uxtb	r2, r3
 800e336:	7dfb      	ldrb	r3, [r7, #23]
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	4619      	mov	r1, r3
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	440b      	add	r3, r1
 800e340:	3230      	adds	r2, #48	; 0x30
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
 800e346:	e00a      	b.n	800e35e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	0f1b      	lsrs	r3, r3, #28
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	7dfb      	ldrb	r3, [r7, #23]
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	4619      	mov	r1, r3
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	440b      	add	r3, r1
 800e358:	3237      	adds	r2, #55	; 0x37
 800e35a:	b2d2      	uxtb	r2, r2
 800e35c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	011b      	lsls	r3, r3, #4
 800e362:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e364:	7dfb      	ldrb	r3, [r7, #23]
 800e366:	005b      	lsls	r3, r3, #1
 800e368:	3301      	adds	r3, #1
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	4413      	add	r3, r2
 800e36e:	2200      	movs	r2, #0
 800e370:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e372:	7dfb      	ldrb	r3, [r7, #23]
 800e374:	3301      	adds	r3, #1
 800e376:	75fb      	strb	r3, [r7, #23]
 800e378:	7dfa      	ldrb	r2, [r7, #23]
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d3d3      	bcc.n	800e328 <IntToUnicode+0x18>
  }
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
	...

0800e390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b0ae      	sub	sp, #184	; 0xb8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e398:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	605a      	str	r2, [r3, #4]
 800e3a2:	609a      	str	r2, [r3, #8]
 800e3a4:	60da      	str	r2, [r3, #12]
 800e3a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e3a8:	f107 0314 	add.w	r3, r7, #20
 800e3ac:	2290      	movs	r2, #144	; 0x90
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f000 fc27 	bl	800ec04 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e3be:	d161      	bne.n	800e484 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e3c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e3c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e3cc:	f107 0314 	add.w	r3, r7, #20
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7f6 ffd1 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e3dc:	f7f3 fec2 	bl	8002164 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3e0:	4b2a      	ldr	r3, [pc, #168]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e4:	4a29      	ldr	r2, [pc, #164]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e3e6:	f043 0301 	orr.w	r3, r3, #1
 800e3ea:	6313      	str	r3, [r2, #48]	; 0x30
 800e3ec:	4b27      	ldr	r3, [pc, #156]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f0:	f003 0301 	and.w	r3, r3, #1
 800e3f4:	613b      	str	r3, [r7, #16]
 800e3f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e3f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800e3fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e400:	2302      	movs	r3, #2
 800e402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e406:	2300      	movs	r3, #0
 800e408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e40c:	2303      	movs	r3, #3
 800e40e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e412:	230a      	movs	r3, #10
 800e414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e418:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e41c:	4619      	mov	r1, r3
 800e41e:	481c      	ldr	r0, [pc, #112]	; (800e490 <HAL_PCD_MspInit+0x100>)
 800e420:	f7f4 fdac 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e424:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e42c:	2300      	movs	r3, #0
 800e42e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e432:	2300      	movs	r3, #0
 800e434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e438:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e43c:	4619      	mov	r1, r3
 800e43e:	4814      	ldr	r0, [pc, #80]	; (800e490 <HAL_PCD_MspInit+0x100>)
 800e440:	f7f4 fd9c 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e444:	4b11      	ldr	r3, [pc, #68]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e448:	4a10      	ldr	r2, [pc, #64]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e44a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e44e:	6353      	str	r3, [r2, #52]	; 0x34
 800e450:	4b0e      	ldr	r3, [pc, #56]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4b0b      	ldr	r3, [pc, #44]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e460:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e466:	6453      	str	r3, [r2, #68]	; 0x44
 800e468:	4b08      	ldr	r3, [pc, #32]	; (800e48c <HAL_PCD_MspInit+0xfc>)
 800e46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e470:	60bb      	str	r3, [r7, #8]
 800e472:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e474:	2200      	movs	r2, #0
 800e476:	2105      	movs	r1, #5
 800e478:	2043      	movs	r0, #67	; 0x43
 800e47a:	f7f4 fa2f 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e47e:	2043      	movs	r0, #67	; 0x43
 800e480:	f7f4 fa48 	bl	8002914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e484:	bf00      	nop
 800e486:	37b8      	adds	r7, #184	; 0xb8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	40023800 	.word	0x40023800
 800e490:	40020000 	.word	0x40020000

0800e494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	f7fb fa9b 	bl	80099e6 <USBD_LL_SetupStage>
}
 800e4b0:	bf00      	nop
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e4ca:	78fa      	ldrb	r2, [r7, #3]
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	00db      	lsls	r3, r3, #3
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	78fb      	ldrb	r3, [r7, #3]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f7fb fad5 	bl	8009a90 <USBD_LL_DataOutStage>
}
 800e4e6:	bf00      	nop
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e500:	78fa      	ldrb	r2, [r7, #3]
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	4613      	mov	r3, r2
 800e506:	00db      	lsls	r3, r3, #3
 800e508:	4413      	add	r3, r2
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	440b      	add	r3, r1
 800e50e:	334c      	adds	r3, #76	; 0x4c
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	78fb      	ldrb	r3, [r7, #3]
 800e514:	4619      	mov	r1, r3
 800e516:	f7fb fb6e 	bl	8009bf6 <USBD_LL_DataInStage>
}
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b082      	sub	sp, #8
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e530:	4618      	mov	r0, r3
 800e532:	f7fb fca2 	bl	8009e7a <USBD_LL_SOF>
}
 800e536:	bf00      	nop
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e546:	2301      	movs	r3, #1
 800e548:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d102      	bne.n	800e558 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e552:	2300      	movs	r3, #0
 800e554:	73fb      	strb	r3, [r7, #15]
 800e556:	e008      	b.n	800e56a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d102      	bne.n	800e566 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e560:	2301      	movs	r3, #1
 800e562:	73fb      	strb	r3, [r7, #15]
 800e564:	e001      	b.n	800e56a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e566:	f7f3 fdfd 	bl	8002164 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e570:	7bfa      	ldrb	r2, [r7, #15]
 800e572:	4611      	mov	r1, r2
 800e574:	4618      	mov	r0, r3
 800e576:	f7fb fc42 	bl	8009dfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e580:	4618      	mov	r0, r3
 800e582:	f7fb fbea 	bl	8009d5a <USBD_LL_Reset>
}
 800e586:	bf00      	nop
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
	...

0800e590 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fb fc3d 	bl	8009e1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	6812      	ldr	r2, [r2, #0]
 800e5b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5b6:	f043 0301 	orr.w	r3, r3, #1
 800e5ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a1b      	ldr	r3, [r3, #32]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d005      	beq.n	800e5d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5c4:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <HAL_PCD_SuspendCallback+0x48>)
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	4a03      	ldr	r2, [pc, #12]	; (800e5d8 <HAL_PCD_SuspendCallback+0x48>)
 800e5ca:	f043 0306 	orr.w	r3, r3, #6
 800e5ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	e000ed00 	.word	0xe000ed00

0800e5dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fb fc2d 	bl	8009e4a <USBD_LL_Resume>
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e60a:	78fa      	ldrb	r2, [r7, #3]
 800e60c:	4611      	mov	r1, r2
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fb fc85 	bl	8009f1e <USBD_LL_IsoOUTIncomplete>
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	460b      	mov	r3, r1
 800e626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e62e:	78fa      	ldrb	r2, [r7, #3]
 800e630:	4611      	mov	r1, r2
 800e632:	4618      	mov	r0, r3
 800e634:	f7fb fc41 	bl	8009eba <USBD_LL_IsoINIncomplete>
}
 800e638:	bf00      	nop
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fb fc97 	bl	8009f82 <USBD_LL_DevConnected>
}
 800e654:	bf00      	nop
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fb fc94 	bl	8009f98 <USBD_LL_DevDisconnected>
}
 800e670:	bf00      	nop
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d13c      	bne.n	800e702 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e688:	4a20      	ldr	r2, [pc, #128]	; (800e70c <USBD_LL_Init+0x94>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4a1e      	ldr	r2, [pc, #120]	; (800e70c <USBD_LL_Init+0x94>)
 800e694:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e698:	4b1c      	ldr	r3, [pc, #112]	; (800e70c <USBD_LL_Init+0x94>)
 800e69a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e69e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e6a0:	4b1a      	ldr	r3, [pc, #104]	; (800e70c <USBD_LL_Init+0x94>)
 800e6a2:	2206      	movs	r2, #6
 800e6a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6a6:	4b19      	ldr	r3, [pc, #100]	; (800e70c <USBD_LL_Init+0x94>)
 800e6a8:	2202      	movs	r2, #2
 800e6aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6ac:	4b17      	ldr	r3, [pc, #92]	; (800e70c <USBD_LL_Init+0x94>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6b2:	4b16      	ldr	r3, [pc, #88]	; (800e70c <USBD_LL_Init+0x94>)
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e6b8:	4b14      	ldr	r3, [pc, #80]	; (800e70c <USBD_LL_Init+0x94>)
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6be:	4b13      	ldr	r3, [pc, #76]	; (800e70c <USBD_LL_Init+0x94>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e6c4:	4b11      	ldr	r3, [pc, #68]	; (800e70c <USBD_LL_Init+0x94>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <USBD_LL_Init+0x94>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e6d0:	4b0e      	ldr	r3, [pc, #56]	; (800e70c <USBD_LL_Init+0x94>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e6d6:	480d      	ldr	r0, [pc, #52]	; (800e70c <USBD_LL_Init+0x94>)
 800e6d8:	f7f4 fe2f 	bl	800333a <HAL_PCD_Init>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e6e2:	f7f3 fd3f 	bl	8002164 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e6e6:	2180      	movs	r1, #128	; 0x80
 800e6e8:	4808      	ldr	r0, [pc, #32]	; (800e70c <USBD_LL_Init+0x94>)
 800e6ea:	f7f6 f8aa 	bl	8004842 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e6ee:	2240      	movs	r2, #64	; 0x40
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	4806      	ldr	r0, [pc, #24]	; (800e70c <USBD_LL_Init+0x94>)
 800e6f4:	f7f6 f85e 	bl	80047b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e6f8:	2280      	movs	r2, #128	; 0x80
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	4803      	ldr	r0, [pc, #12]	; (800e70c <USBD_LL_Init+0x94>)
 800e6fe:	f7f6 f859 	bl	80047b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20006e1c 	.word	0x20006e1c

0800e710 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e718:	2300      	movs	r3, #0
 800e71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e726:	4618      	mov	r0, r3
 800e728:	f7f4 ff2b 	bl	8003582 <HAL_PCD_Start>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e730:	7bfb      	ldrb	r3, [r7, #15]
 800e732:	4618      	mov	r0, r3
 800e734:	f000 f97e 	bl	800ea34 <USBD_Get_USB_Status>
 800e738:	4603      	mov	r3, r0
 800e73a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b084      	sub	sp, #16
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	4608      	mov	r0, r1
 800e750:	4611      	mov	r1, r2
 800e752:	461a      	mov	r2, r3
 800e754:	4603      	mov	r3, r0
 800e756:	70fb      	strb	r3, [r7, #3]
 800e758:	460b      	mov	r3, r1
 800e75a:	70bb      	strb	r3, [r7, #2]
 800e75c:	4613      	mov	r3, r2
 800e75e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e76e:	78bb      	ldrb	r3, [r7, #2]
 800e770:	883a      	ldrh	r2, [r7, #0]
 800e772:	78f9      	ldrb	r1, [r7, #3]
 800e774:	f7f5 fc18 	bl	8003fa8 <HAL_PCD_EP_Open>
 800e778:	4603      	mov	r3, r0
 800e77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 f958 	bl	800ea34 <USBD_Get_USB_Status>
 800e784:	4603      	mov	r3, r0
 800e786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e788:	7bbb      	ldrb	r3, [r7, #14]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	460b      	mov	r3, r1
 800e79c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7ac:	78fa      	ldrb	r2, [r7, #3]
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f5 fc61 	bl	8004078 <HAL_PCD_EP_Close>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7ba:	7bfb      	ldrb	r3, [r7, #15]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 f939 	bl	800ea34 <USBD_Get_USB_Status>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7ea:	78fa      	ldrb	r2, [r7, #3]
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7f5 fd39 	bl	8004266 <HAL_PCD_EP_SetStall>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 f91a 	bl	800ea34 <USBD_Get_USB_Status>
 800e800:	4603      	mov	r3, r0
 800e802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e804:	7bbb      	ldrb	r3, [r7, #14]
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	460b      	mov	r3, r1
 800e818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e828:	78fa      	ldrb	r2, [r7, #3]
 800e82a:	4611      	mov	r1, r2
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7f5 fd7e 	bl	800432e <HAL_PCD_EP_ClrStall>
 800e832:	4603      	mov	r3, r0
 800e834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e836:	7bfb      	ldrb	r3, [r7, #15]
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 f8fb 	bl	800ea34 <USBD_Get_USB_Status>
 800e83e:	4603      	mov	r3, r0
 800e840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e842:	7bbb      	ldrb	r3, [r7, #14]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b085      	sub	sp, #20
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e85e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e864:	2b00      	cmp	r3, #0
 800e866:	da0b      	bge.n	800e880 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e868:	78fb      	ldrb	r3, [r7, #3]
 800e86a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e86e:	68f9      	ldr	r1, [r7, #12]
 800e870:	4613      	mov	r3, r2
 800e872:	00db      	lsls	r3, r3, #3
 800e874:	4413      	add	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	440b      	add	r3, r1
 800e87a:	333e      	adds	r3, #62	; 0x3e
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	e00b      	b.n	800e898 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e886:	68f9      	ldr	r1, [r7, #12]
 800e888:	4613      	mov	r3, r2
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	4413      	add	r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	440b      	add	r3, r1
 800e892:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e896:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8be:	78fa      	ldrb	r2, [r7, #3]
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7f5 fb4b 	bl	8003f5e <HAL_PCD_SetAddress>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f000 f8b0 	bl	800ea34 <USBD_Get_USB_Status>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b086      	sub	sp, #24
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	60f8      	str	r0, [r7, #12]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	603b      	str	r3, [r7, #0]
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e900:	7af9      	ldrb	r1, [r7, #11]
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	f7f5 fc64 	bl	80041d2 <HAL_PCD_EP_Transmit>
 800e90a:	4603      	mov	r3, r0
 800e90c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e90e:	7dfb      	ldrb	r3, [r7, #23]
 800e910:	4618      	mov	r0, r3
 800e912:	f000 f88f 	bl	800ea34 <USBD_Get_USB_Status>
 800e916:	4603      	mov	r3, r0
 800e918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e91a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3718      	adds	r7, #24
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	607a      	str	r2, [r7, #4]
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	460b      	mov	r3, r1
 800e932:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e942:	7af9      	ldrb	r1, [r7, #11]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	f7f5 fbe0 	bl	800410c <HAL_PCD_EP_Receive>
 800e94c:	4603      	mov	r3, r0
 800e94e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e950:	7dfb      	ldrb	r3, [r7, #23]
 800e952:	4618      	mov	r0, r3
 800e954:	f000 f86e 	bl	800ea34 <USBD_Get_USB_Status>
 800e958:	4603      	mov	r3, r0
 800e95a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e95c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	460b      	mov	r3, r1
 800e970:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e978:	78fa      	ldrb	r2, [r7, #3]
 800e97a:	4611      	mov	r1, r2
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7f5 fc10 	bl	80041a2 <HAL_PCD_EP_GetRxCount>
 800e982:	4603      	mov	r3, r0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e998:	78fb      	ldrb	r3, [r7, #3]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d002      	beq.n	800e9a4 <HAL_PCDEx_LPM_Callback+0x18>
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d01f      	beq.n	800e9e2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e9a2:	e03b      	b.n	800ea1c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d007      	beq.n	800e9bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e9ac:	f000 f83c 	bl	800ea28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <HAL_PCDEx_LPM_Callback+0x98>)
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	4a1b      	ldr	r2, [pc, #108]	; (800ea24 <HAL_PCDEx_LPM_Callback+0x98>)
 800e9b6:	f023 0306 	bic.w	r3, r3, #6
 800e9ba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	6812      	ldr	r2, [r2, #0]
 800e9ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9ce:	f023 0301 	bic.w	r3, r3, #1
 800e9d2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fb fa35 	bl	8009e4a <USBD_LL_Resume>
    break;
 800e9e0:	e01c      	b.n	800ea1c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	6812      	ldr	r2, [r2, #0]
 800e9f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9f4:	f043 0301 	orr.w	r3, r3, #1
 800e9f8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7fb fa0c 	bl	8009e1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d005      	beq.n	800ea1a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea0e:	4b05      	ldr	r3, [pc, #20]	; (800ea24 <HAL_PCDEx_LPM_Callback+0x98>)
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	4a04      	ldr	r2, [pc, #16]	; (800ea24 <HAL_PCDEx_LPM_Callback+0x98>)
 800ea14:	f043 0306 	orr.w	r3, r3, #6
 800ea18:	6113      	str	r3, [r2, #16]
    break;
 800ea1a:	bf00      	nop
}
 800ea1c:	bf00      	nop
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	e000ed00 	.word	0xe000ed00

0800ea28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ea2c:	f7f3 f904 	bl	8001c38 <SystemClock_Config>
}
 800ea30:	bf00      	nop
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	2b03      	cmp	r3, #3
 800ea46:	d817      	bhi.n	800ea78 <USBD_Get_USB_Status+0x44>
 800ea48:	a201      	add	r2, pc, #4	; (adr r2, 800ea50 <USBD_Get_USB_Status+0x1c>)
 800ea4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4e:	bf00      	nop
 800ea50:	0800ea61 	.word	0x0800ea61
 800ea54:	0800ea67 	.word	0x0800ea67
 800ea58:	0800ea6d 	.word	0x0800ea6d
 800ea5c:	0800ea73 	.word	0x0800ea73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea60:	2300      	movs	r3, #0
 800ea62:	73fb      	strb	r3, [r7, #15]
    break;
 800ea64:	e00b      	b.n	800ea7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea66:	2303      	movs	r3, #3
 800ea68:	73fb      	strb	r3, [r7, #15]
    break;
 800ea6a:	e008      	b.n	800ea7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea70:	e005      	b.n	800ea7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea72:	2303      	movs	r3, #3
 800ea74:	73fb      	strb	r3, [r7, #15]
    break;
 800ea76:	e002      	b.n	800ea7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea78:	2303      	movs	r3, #3
 800ea7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea7c:	bf00      	nop
  }
  return usb_status;
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <malloc>:
 800ea8c:	4b02      	ldr	r3, [pc, #8]	; (800ea98 <malloc+0xc>)
 800ea8e:	4601      	mov	r1, r0
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	f000 b82b 	b.w	800eaec <_malloc_r>
 800ea96:	bf00      	nop
 800ea98:	2000015c 	.word	0x2000015c

0800ea9c <free>:
 800ea9c:	4b02      	ldr	r3, [pc, #8]	; (800eaa8 <free+0xc>)
 800ea9e:	4601      	mov	r1, r0
 800eaa0:	6818      	ldr	r0, [r3, #0]
 800eaa2:	f000 b957 	b.w	800ed54 <_free_r>
 800eaa6:	bf00      	nop
 800eaa8:	2000015c 	.word	0x2000015c

0800eaac <sbrk_aligned>:
 800eaac:	b570      	push	{r4, r5, r6, lr}
 800eaae:	4e0e      	ldr	r6, [pc, #56]	; (800eae8 <sbrk_aligned+0x3c>)
 800eab0:	460c      	mov	r4, r1
 800eab2:	6831      	ldr	r1, [r6, #0]
 800eab4:	4605      	mov	r5, r0
 800eab6:	b911      	cbnz	r1, 800eabe <sbrk_aligned+0x12>
 800eab8:	f000 f902 	bl	800ecc0 <_sbrk_r>
 800eabc:	6030      	str	r0, [r6, #0]
 800eabe:	4621      	mov	r1, r4
 800eac0:	4628      	mov	r0, r5
 800eac2:	f000 f8fd 	bl	800ecc0 <_sbrk_r>
 800eac6:	1c43      	adds	r3, r0, #1
 800eac8:	d00a      	beq.n	800eae0 <sbrk_aligned+0x34>
 800eaca:	1cc4      	adds	r4, r0, #3
 800eacc:	f024 0403 	bic.w	r4, r4, #3
 800ead0:	42a0      	cmp	r0, r4
 800ead2:	d007      	beq.n	800eae4 <sbrk_aligned+0x38>
 800ead4:	1a21      	subs	r1, r4, r0
 800ead6:	4628      	mov	r0, r5
 800ead8:	f000 f8f2 	bl	800ecc0 <_sbrk_r>
 800eadc:	3001      	adds	r0, #1
 800eade:	d101      	bne.n	800eae4 <sbrk_aligned+0x38>
 800eae0:	f04f 34ff 	mov.w	r4, #4294967295
 800eae4:	4620      	mov	r0, r4
 800eae6:	bd70      	pop	{r4, r5, r6, pc}
 800eae8:	20007328 	.word	0x20007328

0800eaec <_malloc_r>:
 800eaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaf0:	1ccd      	adds	r5, r1, #3
 800eaf2:	f025 0503 	bic.w	r5, r5, #3
 800eaf6:	3508      	adds	r5, #8
 800eaf8:	2d0c      	cmp	r5, #12
 800eafa:	bf38      	it	cc
 800eafc:	250c      	movcc	r5, #12
 800eafe:	2d00      	cmp	r5, #0
 800eb00:	4607      	mov	r7, r0
 800eb02:	db01      	blt.n	800eb08 <_malloc_r+0x1c>
 800eb04:	42a9      	cmp	r1, r5
 800eb06:	d905      	bls.n	800eb14 <_malloc_r+0x28>
 800eb08:	230c      	movs	r3, #12
 800eb0a:	603b      	str	r3, [r7, #0]
 800eb0c:	2600      	movs	r6, #0
 800eb0e:	4630      	mov	r0, r6
 800eb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ebe8 <_malloc_r+0xfc>
 800eb18:	f000 f868 	bl	800ebec <__malloc_lock>
 800eb1c:	f8d8 3000 	ldr.w	r3, [r8]
 800eb20:	461c      	mov	r4, r3
 800eb22:	bb5c      	cbnz	r4, 800eb7c <_malloc_r+0x90>
 800eb24:	4629      	mov	r1, r5
 800eb26:	4638      	mov	r0, r7
 800eb28:	f7ff ffc0 	bl	800eaac <sbrk_aligned>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	4604      	mov	r4, r0
 800eb30:	d155      	bne.n	800ebde <_malloc_r+0xf2>
 800eb32:	f8d8 4000 	ldr.w	r4, [r8]
 800eb36:	4626      	mov	r6, r4
 800eb38:	2e00      	cmp	r6, #0
 800eb3a:	d145      	bne.n	800ebc8 <_malloc_r+0xdc>
 800eb3c:	2c00      	cmp	r4, #0
 800eb3e:	d048      	beq.n	800ebd2 <_malloc_r+0xe6>
 800eb40:	6823      	ldr	r3, [r4, #0]
 800eb42:	4631      	mov	r1, r6
 800eb44:	4638      	mov	r0, r7
 800eb46:	eb04 0903 	add.w	r9, r4, r3
 800eb4a:	f000 f8b9 	bl	800ecc0 <_sbrk_r>
 800eb4e:	4581      	cmp	r9, r0
 800eb50:	d13f      	bne.n	800ebd2 <_malloc_r+0xe6>
 800eb52:	6821      	ldr	r1, [r4, #0]
 800eb54:	1a6d      	subs	r5, r5, r1
 800eb56:	4629      	mov	r1, r5
 800eb58:	4638      	mov	r0, r7
 800eb5a:	f7ff ffa7 	bl	800eaac <sbrk_aligned>
 800eb5e:	3001      	adds	r0, #1
 800eb60:	d037      	beq.n	800ebd2 <_malloc_r+0xe6>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	442b      	add	r3, r5
 800eb66:	6023      	str	r3, [r4, #0]
 800eb68:	f8d8 3000 	ldr.w	r3, [r8]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d038      	beq.n	800ebe2 <_malloc_r+0xf6>
 800eb70:	685a      	ldr	r2, [r3, #4]
 800eb72:	42a2      	cmp	r2, r4
 800eb74:	d12b      	bne.n	800ebce <_malloc_r+0xe2>
 800eb76:	2200      	movs	r2, #0
 800eb78:	605a      	str	r2, [r3, #4]
 800eb7a:	e00f      	b.n	800eb9c <_malloc_r+0xb0>
 800eb7c:	6822      	ldr	r2, [r4, #0]
 800eb7e:	1b52      	subs	r2, r2, r5
 800eb80:	d41f      	bmi.n	800ebc2 <_malloc_r+0xd6>
 800eb82:	2a0b      	cmp	r2, #11
 800eb84:	d917      	bls.n	800ebb6 <_malloc_r+0xca>
 800eb86:	1961      	adds	r1, r4, r5
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	6025      	str	r5, [r4, #0]
 800eb8c:	bf18      	it	ne
 800eb8e:	6059      	strne	r1, [r3, #4]
 800eb90:	6863      	ldr	r3, [r4, #4]
 800eb92:	bf08      	it	eq
 800eb94:	f8c8 1000 	streq.w	r1, [r8]
 800eb98:	5162      	str	r2, [r4, r5]
 800eb9a:	604b      	str	r3, [r1, #4]
 800eb9c:	4638      	mov	r0, r7
 800eb9e:	f104 060b 	add.w	r6, r4, #11
 800eba2:	f000 f829 	bl	800ebf8 <__malloc_unlock>
 800eba6:	f026 0607 	bic.w	r6, r6, #7
 800ebaa:	1d23      	adds	r3, r4, #4
 800ebac:	1af2      	subs	r2, r6, r3
 800ebae:	d0ae      	beq.n	800eb0e <_malloc_r+0x22>
 800ebb0:	1b9b      	subs	r3, r3, r6
 800ebb2:	50a3      	str	r3, [r4, r2]
 800ebb4:	e7ab      	b.n	800eb0e <_malloc_r+0x22>
 800ebb6:	42a3      	cmp	r3, r4
 800ebb8:	6862      	ldr	r2, [r4, #4]
 800ebba:	d1dd      	bne.n	800eb78 <_malloc_r+0x8c>
 800ebbc:	f8c8 2000 	str.w	r2, [r8]
 800ebc0:	e7ec      	b.n	800eb9c <_malloc_r+0xb0>
 800ebc2:	4623      	mov	r3, r4
 800ebc4:	6864      	ldr	r4, [r4, #4]
 800ebc6:	e7ac      	b.n	800eb22 <_malloc_r+0x36>
 800ebc8:	4634      	mov	r4, r6
 800ebca:	6876      	ldr	r6, [r6, #4]
 800ebcc:	e7b4      	b.n	800eb38 <_malloc_r+0x4c>
 800ebce:	4613      	mov	r3, r2
 800ebd0:	e7cc      	b.n	800eb6c <_malloc_r+0x80>
 800ebd2:	230c      	movs	r3, #12
 800ebd4:	603b      	str	r3, [r7, #0]
 800ebd6:	4638      	mov	r0, r7
 800ebd8:	f000 f80e 	bl	800ebf8 <__malloc_unlock>
 800ebdc:	e797      	b.n	800eb0e <_malloc_r+0x22>
 800ebde:	6025      	str	r5, [r4, #0]
 800ebe0:	e7dc      	b.n	800eb9c <_malloc_r+0xb0>
 800ebe2:	605b      	str	r3, [r3, #4]
 800ebe4:	deff      	udf	#255	; 0xff
 800ebe6:	bf00      	nop
 800ebe8:	20007324 	.word	0x20007324

0800ebec <__malloc_lock>:
 800ebec:	4801      	ldr	r0, [pc, #4]	; (800ebf4 <__malloc_lock+0x8>)
 800ebee:	f000 b8a1 	b.w	800ed34 <__retarget_lock_acquire_recursive>
 800ebf2:	bf00      	nop
 800ebf4:	20007468 	.word	0x20007468

0800ebf8 <__malloc_unlock>:
 800ebf8:	4801      	ldr	r0, [pc, #4]	; (800ec00 <__malloc_unlock+0x8>)
 800ebfa:	f000 b89c 	b.w	800ed36 <__retarget_lock_release_recursive>
 800ebfe:	bf00      	nop
 800ec00:	20007468 	.word	0x20007468

0800ec04 <memset>:
 800ec04:	4402      	add	r2, r0
 800ec06:	4603      	mov	r3, r0
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d100      	bne.n	800ec0e <memset+0xa>
 800ec0c:	4770      	bx	lr
 800ec0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ec12:	e7f9      	b.n	800ec08 <memset+0x4>

0800ec14 <_reclaim_reent>:
 800ec14:	4b29      	ldr	r3, [pc, #164]	; (800ecbc <_reclaim_reent+0xa8>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4283      	cmp	r3, r0
 800ec1a:	b570      	push	{r4, r5, r6, lr}
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	d04b      	beq.n	800ecb8 <_reclaim_reent+0xa4>
 800ec20:	69c3      	ldr	r3, [r0, #28]
 800ec22:	b143      	cbz	r3, 800ec36 <_reclaim_reent+0x22>
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d144      	bne.n	800ecb4 <_reclaim_reent+0xa0>
 800ec2a:	69e3      	ldr	r3, [r4, #28]
 800ec2c:	6819      	ldr	r1, [r3, #0]
 800ec2e:	b111      	cbz	r1, 800ec36 <_reclaim_reent+0x22>
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 f88f 	bl	800ed54 <_free_r>
 800ec36:	6961      	ldr	r1, [r4, #20]
 800ec38:	b111      	cbz	r1, 800ec40 <_reclaim_reent+0x2c>
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f000 f88a 	bl	800ed54 <_free_r>
 800ec40:	69e1      	ldr	r1, [r4, #28]
 800ec42:	b111      	cbz	r1, 800ec4a <_reclaim_reent+0x36>
 800ec44:	4620      	mov	r0, r4
 800ec46:	f000 f885 	bl	800ed54 <_free_r>
 800ec4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ec4c:	b111      	cbz	r1, 800ec54 <_reclaim_reent+0x40>
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f000 f880 	bl	800ed54 <_free_r>
 800ec54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec56:	b111      	cbz	r1, 800ec5e <_reclaim_reent+0x4a>
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 f87b 	bl	800ed54 <_free_r>
 800ec5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec60:	b111      	cbz	r1, 800ec68 <_reclaim_reent+0x54>
 800ec62:	4620      	mov	r0, r4
 800ec64:	f000 f876 	bl	800ed54 <_free_r>
 800ec68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec6a:	b111      	cbz	r1, 800ec72 <_reclaim_reent+0x5e>
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 f871 	bl	800ed54 <_free_r>
 800ec72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ec74:	b111      	cbz	r1, 800ec7c <_reclaim_reent+0x68>
 800ec76:	4620      	mov	r0, r4
 800ec78:	f000 f86c 	bl	800ed54 <_free_r>
 800ec7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ec7e:	b111      	cbz	r1, 800ec86 <_reclaim_reent+0x72>
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 f867 	bl	800ed54 <_free_r>
 800ec86:	6a23      	ldr	r3, [r4, #32]
 800ec88:	b1b3      	cbz	r3, 800ecb8 <_reclaim_reent+0xa4>
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec90:	4718      	bx	r3
 800ec92:	5949      	ldr	r1, [r1, r5]
 800ec94:	b941      	cbnz	r1, 800eca8 <_reclaim_reent+0x94>
 800ec96:	3504      	adds	r5, #4
 800ec98:	69e3      	ldr	r3, [r4, #28]
 800ec9a:	2d80      	cmp	r5, #128	; 0x80
 800ec9c:	68d9      	ldr	r1, [r3, #12]
 800ec9e:	d1f8      	bne.n	800ec92 <_reclaim_reent+0x7e>
 800eca0:	4620      	mov	r0, r4
 800eca2:	f000 f857 	bl	800ed54 <_free_r>
 800eca6:	e7c0      	b.n	800ec2a <_reclaim_reent+0x16>
 800eca8:	680e      	ldr	r6, [r1, #0]
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f000 f852 	bl	800ed54 <_free_r>
 800ecb0:	4631      	mov	r1, r6
 800ecb2:	e7ef      	b.n	800ec94 <_reclaim_reent+0x80>
 800ecb4:	2500      	movs	r5, #0
 800ecb6:	e7ef      	b.n	800ec98 <_reclaim_reent+0x84>
 800ecb8:	bd70      	pop	{r4, r5, r6, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000015c 	.word	0x2000015c

0800ecc0 <_sbrk_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4d06      	ldr	r5, [pc, #24]	; (800ecdc <_sbrk_r+0x1c>)
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	4608      	mov	r0, r1
 800ecca:	602b      	str	r3, [r5, #0]
 800eccc:	f7f3 fc8c 	bl	80025e8 <_sbrk>
 800ecd0:	1c43      	adds	r3, r0, #1
 800ecd2:	d102      	bne.n	800ecda <_sbrk_r+0x1a>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	b103      	cbz	r3, 800ecda <_sbrk_r+0x1a>
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	bd38      	pop	{r3, r4, r5, pc}
 800ecdc:	20007464 	.word	0x20007464

0800ece0 <__errno>:
 800ece0:	4b01      	ldr	r3, [pc, #4]	; (800ece8 <__errno+0x8>)
 800ece2:	6818      	ldr	r0, [r3, #0]
 800ece4:	4770      	bx	lr
 800ece6:	bf00      	nop
 800ece8:	2000015c 	.word	0x2000015c

0800ecec <__libc_init_array>:
 800ecec:	b570      	push	{r4, r5, r6, lr}
 800ecee:	4d0d      	ldr	r5, [pc, #52]	; (800ed24 <__libc_init_array+0x38>)
 800ecf0:	4c0d      	ldr	r4, [pc, #52]	; (800ed28 <__libc_init_array+0x3c>)
 800ecf2:	1b64      	subs	r4, r4, r5
 800ecf4:	10a4      	asrs	r4, r4, #2
 800ecf6:	2600      	movs	r6, #0
 800ecf8:	42a6      	cmp	r6, r4
 800ecfa:	d109      	bne.n	800ed10 <__libc_init_array+0x24>
 800ecfc:	4d0b      	ldr	r5, [pc, #44]	; (800ed2c <__libc_init_array+0x40>)
 800ecfe:	4c0c      	ldr	r4, [pc, #48]	; (800ed30 <__libc_init_array+0x44>)
 800ed00:	f000 f874 	bl	800edec <_init>
 800ed04:	1b64      	subs	r4, r4, r5
 800ed06:	10a4      	asrs	r4, r4, #2
 800ed08:	2600      	movs	r6, #0
 800ed0a:	42a6      	cmp	r6, r4
 800ed0c:	d105      	bne.n	800ed1a <__libc_init_array+0x2e>
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
 800ed10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed14:	4798      	blx	r3
 800ed16:	3601      	adds	r6, #1
 800ed18:	e7ee      	b.n	800ecf8 <__libc_init_array+0xc>
 800ed1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed1e:	4798      	blx	r3
 800ed20:	3601      	adds	r6, #1
 800ed22:	e7f2      	b.n	800ed0a <__libc_init_array+0x1e>
 800ed24:	0800f3c8 	.word	0x0800f3c8
 800ed28:	0800f3c8 	.word	0x0800f3c8
 800ed2c:	0800f3c8 	.word	0x0800f3c8
 800ed30:	0800f3cc 	.word	0x0800f3cc

0800ed34 <__retarget_lock_acquire_recursive>:
 800ed34:	4770      	bx	lr

0800ed36 <__retarget_lock_release_recursive>:
 800ed36:	4770      	bx	lr

0800ed38 <memcpy>:
 800ed38:	440a      	add	r2, r1
 800ed3a:	4291      	cmp	r1, r2
 800ed3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed40:	d100      	bne.n	800ed44 <memcpy+0xc>
 800ed42:	4770      	bx	lr
 800ed44:	b510      	push	{r4, lr}
 800ed46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed4e:	4291      	cmp	r1, r2
 800ed50:	d1f9      	bne.n	800ed46 <memcpy+0xe>
 800ed52:	bd10      	pop	{r4, pc}

0800ed54 <_free_r>:
 800ed54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed56:	2900      	cmp	r1, #0
 800ed58:	d044      	beq.n	800ede4 <_free_r+0x90>
 800ed5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5e:	9001      	str	r0, [sp, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f1a1 0404 	sub.w	r4, r1, #4
 800ed66:	bfb8      	it	lt
 800ed68:	18e4      	addlt	r4, r4, r3
 800ed6a:	f7ff ff3f 	bl	800ebec <__malloc_lock>
 800ed6e:	4a1e      	ldr	r2, [pc, #120]	; (800ede8 <_free_r+0x94>)
 800ed70:	9801      	ldr	r0, [sp, #4]
 800ed72:	6813      	ldr	r3, [r2, #0]
 800ed74:	b933      	cbnz	r3, 800ed84 <_free_r+0x30>
 800ed76:	6063      	str	r3, [r4, #4]
 800ed78:	6014      	str	r4, [r2, #0]
 800ed7a:	b003      	add	sp, #12
 800ed7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed80:	f7ff bf3a 	b.w	800ebf8 <__malloc_unlock>
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	d908      	bls.n	800ed9a <_free_r+0x46>
 800ed88:	6825      	ldr	r5, [r4, #0]
 800ed8a:	1961      	adds	r1, r4, r5
 800ed8c:	428b      	cmp	r3, r1
 800ed8e:	bf01      	itttt	eq
 800ed90:	6819      	ldreq	r1, [r3, #0]
 800ed92:	685b      	ldreq	r3, [r3, #4]
 800ed94:	1949      	addeq	r1, r1, r5
 800ed96:	6021      	streq	r1, [r4, #0]
 800ed98:	e7ed      	b.n	800ed76 <_free_r+0x22>
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	b10b      	cbz	r3, 800eda4 <_free_r+0x50>
 800eda0:	42a3      	cmp	r3, r4
 800eda2:	d9fa      	bls.n	800ed9a <_free_r+0x46>
 800eda4:	6811      	ldr	r1, [r2, #0]
 800eda6:	1855      	adds	r5, r2, r1
 800eda8:	42a5      	cmp	r5, r4
 800edaa:	d10b      	bne.n	800edc4 <_free_r+0x70>
 800edac:	6824      	ldr	r4, [r4, #0]
 800edae:	4421      	add	r1, r4
 800edb0:	1854      	adds	r4, r2, r1
 800edb2:	42a3      	cmp	r3, r4
 800edb4:	6011      	str	r1, [r2, #0]
 800edb6:	d1e0      	bne.n	800ed7a <_free_r+0x26>
 800edb8:	681c      	ldr	r4, [r3, #0]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	6053      	str	r3, [r2, #4]
 800edbe:	440c      	add	r4, r1
 800edc0:	6014      	str	r4, [r2, #0]
 800edc2:	e7da      	b.n	800ed7a <_free_r+0x26>
 800edc4:	d902      	bls.n	800edcc <_free_r+0x78>
 800edc6:	230c      	movs	r3, #12
 800edc8:	6003      	str	r3, [r0, #0]
 800edca:	e7d6      	b.n	800ed7a <_free_r+0x26>
 800edcc:	6825      	ldr	r5, [r4, #0]
 800edce:	1961      	adds	r1, r4, r5
 800edd0:	428b      	cmp	r3, r1
 800edd2:	bf04      	itt	eq
 800edd4:	6819      	ldreq	r1, [r3, #0]
 800edd6:	685b      	ldreq	r3, [r3, #4]
 800edd8:	6063      	str	r3, [r4, #4]
 800edda:	bf04      	itt	eq
 800eddc:	1949      	addeq	r1, r1, r5
 800edde:	6021      	streq	r1, [r4, #0]
 800ede0:	6054      	str	r4, [r2, #4]
 800ede2:	e7ca      	b.n	800ed7a <_free_r+0x26>
 800ede4:	b003      	add	sp, #12
 800ede6:	bd30      	pop	{r4, r5, pc}
 800ede8:	20007324 	.word	0x20007324

0800edec <_init>:
 800edec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edee:	bf00      	nop
 800edf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edf2:	bc08      	pop	{r3}
 800edf4:	469e      	mov	lr, r3
 800edf6:	4770      	bx	lr

0800edf8 <_fini>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	bf00      	nop
 800edfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edfe:	bc08      	pop	{r3}
 800ee00:	469e      	mov	lr, r3
 800ee02:	4770      	bx	lr
