
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff50  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08010150  08010150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010480  08010480  000122a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010480  08010480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010488  08010488  000122a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010488  08010488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801048c  0801048c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08010490  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  080105f0  00012160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  08010690  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007298  200002a0  08010730  000122a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007538  08010730  00012538  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f551  00000000  00000000  000122ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000624a  00000000  00000000  0004181f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023f8  00000000  00000000  00047a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bbc  00000000  00000000  00049e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003067b  00000000  00000000  0004ba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ca85  00000000  00000000  0007c09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00118073  00000000  00000000  000a8b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c0b97  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009c78  00000000  00000000  001c0bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000085  00000000  00000000  001ca854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08010138 	.word	0x08010138

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	08010138 	.word	0x08010138

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002bc 	.word	0x200002bc
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <_DoInit+0xa0>)
 8000678:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800067a:	22a8      	movs	r2, #168	@ 0xa8
 800067c:	2100      	movs	r1, #0
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f00f f932 	bl	800f8e8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2203      	movs	r2, #3
 8000688:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2203      	movs	r2, #3
 800068e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <_DoInit+0xa4>)
 8000694:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <_DoInit+0xa8>)
 800069a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2200      	movs	r2, #0
 80006b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <_DoInit+0xa4>)
 80006ba:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	4a17      	ldr	r2, [pc, #92]	@ (800071c <_DoInit+0xac>)
 80006c0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2210      	movs	r2, #16
 80006c6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006da:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	e00c      	b.n	80006fe <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f1c3 030f 	rsb	r3, r3, #15
 80006ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <_DoInit+0xb0>)
 80006ec:	5cd1      	ldrb	r1, [r2, r3]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	460a      	mov	r2, r1
 80006f6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d9ef      	bls.n	80006e4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000704:	f3bf 8f5f 	dmb	sy
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200002bc 	.word	0x200002bc
 8000714:	08010150 	.word	0x08010150
 8000718:	20000364 	.word	0x20000364
 800071c:	20000764 	.word	0x20000764
 8000720:	0801029c 	.word	0x0801029c

08000724 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000730:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <SEGGER_RTT_ReadNoLock+0x108>)
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <SEGGER_RTT_ReadNoLock+0x1e>
 800073e:	f7ff ff97 	bl	8000670 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	3360      	adds	r3, #96	@ 0x60
 800074e:	4a37      	ldr	r2, [pc, #220]	@ (800082c <SEGGER_RTT_ReadNoLock+0x108>)
 8000750:	4413      	add	r3, r2
 8000752:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	429a      	cmp	r2, r3
 800076e:	d92b      	bls.n	80007c8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4293      	cmp	r3, r2
 8000780:	bf28      	it	cs
 8000782:	4613      	movcs	r3, r2
 8000784:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078c:	4413      	add	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	6939      	ldr	r1, [r7, #16]
 8000794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000796:	f00f f941 	bl	800fa1c <memcpy>
    NumBytesRead += NumBytesRem;
 800079a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80007a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80007b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4413      	add	r3, r2
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d101      	bne.n	80007c8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4293      	cmp	r3, r2
 80007d6:	bf28      	it	cs
 80007d8:	4613      	movcs	r3, r2
 80007da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d019      	beq.n	8000816 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e8:	4413      	add	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	6939      	ldr	r1, [r7, #16]
 80007f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007f2:	f00f f913 	bl	800fa1c <memcpy>
    NumBytesRead += NumBytesRem;
 80007f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80007fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	4413      	add	r3, r2
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800080e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4413      	add	r3, r2
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8000816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000820:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000824:	4618      	mov	r0, r3
 8000826:	3730      	adds	r7, #48	@ 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200002bc 	.word	0x200002bc

08000830 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800083e:	4b3d      	ldr	r3, [pc, #244]	@ (8000934 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d101      	bne.n	8000850 <SEGGER_RTT_AllocUpBuffer+0x20>
 800084c:	f7ff ff10 	bl	8000670 <_DoInit>
  SEGGER_RTT_LOCK();
 8000850:	f3ef 8311 	mrs	r3, BASEPRI
 8000854:	f04f 0120 	mov.w	r1, #32
 8000858:	f381 8811 	msr	BASEPRI, r1
 800085c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800085e:	4b35      	ldr	r3, [pc, #212]	@ (8000934 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000860:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8000866:	6939      	ldr	r1, [r7, #16]
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	3304      	adds	r3, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d008      	beq.n	8000890 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3301      	adds	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	69fa      	ldr	r2, [r7, #28]
 800088a:	429a      	cmp	r2, r3
 800088c:	dbeb      	blt.n	8000866 <SEGGER_RTT_AllocUpBuffer+0x36>
 800088e:	e000      	b.n	8000892 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8000890:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	429a      	cmp	r2, r3
 800089a:	da3f      	bge.n	800091c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800089c:	6939      	ldr	r1, [r7, #16]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	440b      	add	r3, r1
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80008b0:	6939      	ldr	r1, [r7, #16]
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	440b      	add	r3, r1
 80008c0:	3304      	adds	r3, #4
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80008c6:	6939      	ldr	r1, [r7, #16]
 80008c8:	69fa      	ldr	r2, [r7, #28]
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	440b      	add	r3, r1
 80008d4:	3320      	adds	r3, #32
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80008da:	6939      	ldr	r1, [r7, #16]
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	3328      	adds	r3, #40	@ 0x28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80008ee:	6939      	ldr	r1, [r7, #16]
 80008f0:	69fa      	ldr	r2, [r7, #28]
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3324      	adds	r3, #36	@ 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000902:	6939      	ldr	r1, [r7, #16]
 8000904:	69fa      	ldr	r2, [r7, #28]
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	332c      	adds	r3, #44	@ 0x2c
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000916:	f3bf 8f5f 	dmb	sy
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000928:	69fb      	ldr	r3, [r7, #28]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200002bc 	.word	0x200002bc

08000938 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8000954:	f7ff fe8c 	bl	8000670 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800095a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d82c      	bhi.n	80009bc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8000962:	f3ef 8311 	mrs	r3, BASEPRI
 8000966:	f04f 0120 	mov.w	r1, #32
 800096a:	f381 8811 	msr	BASEPRI, r1
 800096e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	3360      	adds	r3, #96	@ 0x60
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	4413      	add	r3, r2
 8000980:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00e      	beq.n	80009a6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009aa:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80009ac:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ba:	e002      	b.n	80009c2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002bc 	.word	0x200002bc

080009d0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60fa      	str	r2, [r7, #12]
 80009e6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b80      	cmp	r3, #128	@ 0x80
 80009ec:	d90a      	bls.n	8000a04 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80009f2:	e007      	b.n	8000a04 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	1c53      	adds	r3, r2, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1c59      	adds	r1, r3, #1
 80009fe:	60f9      	str	r1, [r7, #12]
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <_EncodeStr+0x46>
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1ee      	bne.n	80009f4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	371c      	adds	r7, #28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3307      	adds	r3, #7
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a4e:	4b34      	ldr	r3, [pc, #208]	@ (8000b20 <_HandleIncomingPacket+0xd8>)
 8000a50:	7e1b      	ldrb	r3, [r3, #24]
 8000a52:	4618      	mov	r0, r3
 8000a54:	1cfb      	adds	r3, r7, #3
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff fe63 	bl	8000724 <SEGGER_RTT_ReadNoLock>
 8000a5e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d057      	beq.n	8000b16 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	2b80      	cmp	r3, #128	@ 0x80
 8000a6a:	d031      	beq.n	8000ad0 <_HandleIncomingPacket+0x88>
 8000a6c:	2b80      	cmp	r3, #128	@ 0x80
 8000a6e:	dc40      	bgt.n	8000af2 <_HandleIncomingPacket+0xaa>
 8000a70:	2b07      	cmp	r3, #7
 8000a72:	dc15      	bgt.n	8000aa0 <_HandleIncomingPacket+0x58>
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	dd3c      	ble.n	8000af2 <_HandleIncomingPacket+0xaa>
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d839      	bhi.n	8000af2 <_HandleIncomingPacket+0xaa>
 8000a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a84 <_HandleIncomingPacket+0x3c>)
 8000a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a84:	08000aa7 	.word	0x08000aa7
 8000a88:	08000aad 	.word	0x08000aad
 8000a8c:	08000ab3 	.word	0x08000ab3
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	08000abf 	.word	0x08000abf
 8000a98:	08000ac5 	.word	0x08000ac5
 8000a9c:	08000acb 	.word	0x08000acb
 8000aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa2:	d033      	beq.n	8000b0c <_HandleIncomingPacket+0xc4>
 8000aa4:	e025      	b.n	8000af2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000aa6:	f000 fbe3 	bl	8001270 <SEGGER_SYSVIEW_Start>
      break;
 8000aaa:	e034      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000aac:	f000 fc9a 	bl	80013e4 <SEGGER_SYSVIEW_Stop>
      break;
 8000ab0:	e031      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000ab2:	f000 fe73 	bl	800179c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000ab6:	e02e      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000ab8:	f000 fe38 	bl	800172c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000abc:	e02b      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000abe:	f000 fcb7 	bl	8001430 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000ac2:	e028      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000ac4:	f000 ff44 	bl	8001950 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000ac8:	e025      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000aca:	f000 ff23 	bl	8001914 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000ace:	e022      	b.n	8000b16 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <_HandleIncomingPacket+0xd8>)
 8000ad2:	7e1b      	ldrb	r3, [r3, #24]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	1cfb      	adds	r3, r7, #3
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	f7ff fe22 	bl	8000724 <SEGGER_RTT_ReadNoLock>
 8000ae0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d013      	beq.n	8000b10 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fe88 	bl	8001800 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000af0:	e00e      	b.n	8000b10 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da0c      	bge.n	8000b14 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <_HandleIncomingPacket+0xd8>)
 8000afc:	7e1b      	ldrb	r3, [r3, #24]
 8000afe:	4618      	mov	r0, r3
 8000b00:	1cfb      	adds	r3, r7, #3
 8000b02:	2201      	movs	r2, #1
 8000b04:	4619      	mov	r1, r3
 8000b06:	f7ff fe0d 	bl	8000724 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000b0a:	e003      	b.n	8000b14 <_HandleIncomingPacket+0xcc>
      break;
 8000b0c:	bf00      	nop
 8000b0e:	e002      	b.n	8000b16 <_HandleIncomingPacket+0xce>
      break;
 8000b10:	bf00      	nop
 8000b12:	e000      	b.n	8000b16 <_HandleIncomingPacket+0xce>
      break;
 8000b14:	bf00      	nop
    }
  }
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000b7c 	.word	0x20000b7c

08000b24 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	@ 0x30
 8000b28:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	3301      	adds	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b38:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b3e:	e00b      	b.n	8000b58 <_TrySendOverflowPacket+0x34>
 8000b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	09db      	lsrs	r3, r3, #7
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b5c:	d8f0      	bhi.n	8000b40 <_TrySendOverflowPacket+0x1c>
 8000b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000b6e:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <_TrySendOverflowPacket+0xe0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	623b      	str	r3, [r7, #32]
 8000b86:	e00b      	b.n	8000ba0 <_TrySendOverflowPacket+0x7c>
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8e:	1c59      	adds	r1, r3, #1
 8000b90:	6279      	str	r1, [r7, #36]	@ 0x24
 8000b92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	09db      	lsrs	r3, r3, #7
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba4:	d8f0      	bhi.n	8000b88 <_TrySendOverflowPacket+0x64>
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	627a      	str	r2, [r7, #36]	@ 0x24
 8000bac:	6a3a      	ldr	r2, [r7, #32]
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff fb3a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d009      	beq.n	8000bea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e004      	b.n	8000bf4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a03      	ldr	r2, [pc, #12]	@ (8000c00 <_TrySendOverflowPacket+0xdc>)
 8000bf2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000bf4:	693b      	ldr	r3, [r7, #16]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3730      	adds	r7, #48	@ 0x30
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000b7c 	.word	0x20000b7c
 8000c04:	e0001004 	.word	0xe0001004

08000c08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000c14:	4b98      	ldr	r3, [pc, #608]	@ (8000e78 <_SendPacket+0x270>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d010      	beq.n	8000c3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000c1c:	4b96      	ldr	r3, [pc, #600]	@ (8000e78 <_SendPacket+0x270>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 812d 	beq.w	8000e80 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000c26:	4b94      	ldr	r3, [pc, #592]	@ (8000e78 <_SendPacket+0x270>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d109      	bne.n	8000c42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000c2e:	f7ff ff79 	bl	8000b24 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000c32:	4b91      	ldr	r3, [pc, #580]	@ (8000e78 <_SendPacket+0x270>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	f040 8124 	bne.w	8000e84 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000c3c:	e001      	b.n	8000c42 <_SendPacket+0x3a>
    goto Send;
 8000c3e:	bf00      	nop
 8000c40:	e000      	b.n	8000c44 <_SendPacket+0x3c>
Send:
 8000c42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b1f      	cmp	r3, #31
 8000c48:	d809      	bhi.n	8000c5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000e78 <_SendPacket+0x270>)
 8000c4c:	69da      	ldr	r2, [r3, #28]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f040 8115 	bne.w	8000e88 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b17      	cmp	r3, #23
 8000c62:	d807      	bhi.n	8000c74 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e0c4      	b.n	8000dfe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c80:	d912      	bls.n	8000ca8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	09da      	lsrs	r2, r3, #7
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	60fa      	str	r2, [r7, #12]
 8000c9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e006      	b.n	8000cb6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8000cba:	d807      	bhi.n	8000ccc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e098      	b.n	8000dfe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000cd2:	d212      	bcs.n	8000cfa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	09da      	lsrs	r2, r3, #7
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	3a01      	subs	r2, #1
 8000cec:	60fa      	str	r2, [r7, #12]
 8000cee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e081      	b.n	8000dfe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000d00:	d21d      	bcs.n	8000d3e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	0b9a      	lsrs	r2, r3, #14
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	09db      	lsrs	r3, r3, #7
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	3a01      	subs	r2, #1
 8000d1c:	60fa      	str	r2, [r7, #12]
 8000d1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	3a01      	subs	r2, #1
 8000d30:	60fa      	str	r2, [r7, #12]
 8000d32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e05f      	b.n	8000dfe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d44:	d228      	bcs.n	8000d98 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	0d5a      	lsrs	r2, r3, #21
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0b9b      	lsrs	r3, r3, #14
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	60fa      	str	r2, [r7, #12]
 8000d62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	09db      	lsrs	r3, r3, #7
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	3a01      	subs	r2, #1
 8000d76:	60fa      	str	r2, [r7, #12]
 8000d78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	60fa      	str	r2, [r7, #12]
 8000d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e032      	b.n	8000dfe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0f1a      	lsrs	r2, r3, #28
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0d5b      	lsrs	r3, r3, #21
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	3a01      	subs	r2, #1
 8000db2:	60fa      	str	r2, [r7, #12]
 8000db4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0b9b      	lsrs	r3, r3, #14
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	60fa      	str	r2, [r7, #12]
 8000dca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	09db      	lsrs	r3, r3, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	60fa      	str	r2, [r7, #12]
 8000de0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	60fa      	str	r2, [r7, #12]
 8000df4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <_SendPacket+0x274>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <_SendPacket+0x270>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	623b      	str	r3, [r7, #32]
 8000e16:	e00b      	b.n	8000e30 <_SendPacket+0x228>
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	6279      	str	r1, [r7, #36]	@ 0x24
 8000e22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	09db      	lsrs	r3, r3, #7
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e34:	d8f0      	bhi.n	8000e18 <_SendPacket+0x210>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e3c:	6a3a      	ldr	r2, [r7, #32]
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <_SendPacket+0x270>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	f7ff f9f3 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000e5a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <_SendPacket+0x270>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	60d3      	str	r3, [r2, #12]
 8000e68:	e00f      	b.n	8000e8a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000e6a:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <_SendPacket+0x270>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b01      	ldr	r3, [pc, #4]	@ (8000e78 <_SendPacket+0x270>)
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e008      	b.n	8000e8a <_SendPacket+0x282>
 8000e78:	20000b7c 	.word	0x20000b7c
 8000e7c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000e80:	bf00      	nop
 8000e82:	e002      	b.n	8000e8a <_SendPacket+0x282>
      goto SendDone;
 8000e84:	bf00      	nop
 8000e86:	e000      	b.n	8000e8a <_SendPacket+0x282>
      goto SendDone;
 8000e88:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <_SendPacket+0x2d4>)
 8000e8c:	7e1b      	ldrb	r3, [r3, #24]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4a13      	ldr	r2, [pc, #76]	@ (8000ee0 <_SendPacket+0x2d8>)
 8000e92:	460b      	mov	r3, r1
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	440b      	add	r3, r1
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	336c      	adds	r3, #108	@ 0x6c
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <_SendPacket+0x2d4>)
 8000ea2:	7e1b      	ldrb	r3, [r3, #24]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	490e      	ldr	r1, [pc, #56]	@ (8000ee0 <_SendPacket+0x2d8>)
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4403      	add	r3, r0
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3370      	adds	r3, #112	@ 0x70
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d00b      	beq.n	8000ed2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <_SendPacket+0x2d4>)
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <_SendPacket+0x2d4>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000ec8:	f7ff fdbe 	bl	8000a48 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <_SendPacket+0x2d4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	@ 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000b7c 	.word	0x20000b7c
 8000ee0:	200002bc 	.word	0x200002bc

08000ee4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0a2      	sub	sp, #136	@ 0x88
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 8000efa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 8000f06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d01d      	beq.n	8000f4a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000f0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f12:	2b25      	cmp	r3, #37	@ 0x25
 8000f14:	d1f1      	bne.n	8000efa <_VPrintHost+0x16>
      c = *p;
 8000f16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1d19      	adds	r1, r3, #4
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6011      	str	r1, [r2, #0]
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000f34:	460a      	mov	r2, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	3388      	adds	r3, #136	@ 0x88
 8000f3a:	443b      	add	r3, r7
 8000f3c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f44:	2b10      	cmp	r3, #16
 8000f46:	d002      	beq.n	8000f4e <_VPrintHost+0x6a>
    c = *p++;
 8000f48:	e7d7      	b.n	8000efa <_VPrintHost+0x16>
      break;
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <_VPrintHost+0x6c>
        break;
 8000f4e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000f50:	f3ef 8311 	mrs	r3, BASEPRI
 8000f54:	f04f 0120 	mov.w	r1, #32
 8000f58:	f381 8811 	msr	BASEPRI, r1
 8000f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000f5e:	483f      	ldr	r0, [pc, #252]	@ (800105c <_VPrintHost+0x178>)
 8000f60:	f7ff fd66 	bl	8000a30 <_PreparePacket>
 8000f64:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000f6c:	f7ff fd30 	bl	80009d0 <_EncodeStr>
 8000f70:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 8000f72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f74:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f7a:	e00b      	b.n	8000f94 <_VPrintHost+0xb0>
 8000f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f82:	1c59      	adds	r1, r3, #1
 8000f84:	6779      	str	r1, [r7, #116]	@ 0x74
 8000f86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f98:	d8f0      	bhi.n	8000f7c <_VPrintHost+0x98>
 8000f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8000fa0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000fb4:	e00b      	b.n	8000fce <_VPrintHost+0xea>
 8000fb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fbc:	1c59      	adds	r1, r3, #1
 8000fbe:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8000fc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fca:	09db      	lsrs	r3, r3, #7
 8000fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fd2:	d8f0      	bhi.n	8000fb6 <_VPrintHost+0xd2>
 8000fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fda:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8000fec:	e022      	b.n	8001034 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ff0:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ffa:	e00b      	b.n	8001014 <_VPrintHost+0x130>
 8000ffc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001002:	1c59      	adds	r1, r3, #1
 8001004:	6679      	str	r1, [r7, #100]	@ 0x64
 8001006:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001010:	09db      	lsrs	r3, r3, #7
 8001012:	663b      	str	r3, [r7, #96]	@ 0x60
 8001014:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001016:	2b7f      	cmp	r3, #127	@ 0x7f
 8001018:	d8f0      	bhi.n	8000ffc <_VPrintHost+0x118>
 800101a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001020:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001028:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 800102a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800102e:	3304      	adds	r3, #4
 8001030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8001034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001038:	1e5a      	subs	r2, r3, #1
 800103a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1d5      	bne.n	8000fee <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8001042:	221a      	movs	r2, #26
 8001044:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001046:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001048:	f7ff fdde 	bl	8000c08 <_SendPacket>
    RECORD_END();
 800104c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800104e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3788      	adds	r7, #136	@ 0x88
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000bac 	.word	0x20000bac

08001060 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800106e:	2300      	movs	r3, #0
 8001070:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001074:	4917      	ldr	r1, [pc, #92]	@ (80010d4 <SEGGER_SYSVIEW_Init+0x74>)
 8001076:	4818      	ldr	r0, [pc, #96]	@ (80010d8 <SEGGER_SYSVIEW_Init+0x78>)
 8001078:	f7ff fbda 	bl	8000830 <SEGGER_RTT_AllocUpBuffer>
 800107c:	4603      	mov	r3, r0
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 8001082:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 8001086:	785a      	ldrb	r2, [r3, #1]
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 800108a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 800108e:	7e1b      	ldrb	r3, [r3, #24]
 8001090:	4618      	mov	r0, r3
 8001092:	2300      	movs	r3, #0
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2308      	movs	r3, #8
 8001098:	4a11      	ldr	r2, [pc, #68]	@ (80010e0 <SEGGER_SYSVIEW_Init+0x80>)
 800109a:	490f      	ldr	r1, [pc, #60]	@ (80010d8 <SEGGER_SYSVIEW_Init+0x78>)
 800109c:	f7ff fc4c 	bl	8000938 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <SEGGER_SYSVIEW_Init+0x84>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010ac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80010ae:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80010b4:	4a09      	ldr	r2, [pc, #36]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SEGGER_SYSVIEW_Init+0x7c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000774 	.word	0x20000774
 80010d8:	08010164 	.word	0x08010164
 80010dc:	20000b7c 	.word	0x20000b7c
 80010e0:	20000b74 	.word	0x20000b74
 80010e4:	e0001004 	.word	0xe0001004

080010e8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6113      	str	r3, [r2, #16]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000b7c 	.word	0x20000b7c

08001108 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001110:	f3ef 8311 	mrs	r3, BASEPRI
 8001114:	f04f 0120 	mov.w	r1, #32
 8001118:	f381 8811 	msr	BASEPRI, r1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4808      	ldr	r0, [pc, #32]	@ (8001140 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001120:	f7ff fc86 	bl	8000a30 <_PreparePacket>
 8001124:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f7ff fd6c 	bl	8000c08 <_SendPacket>
  RECORD_END();
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f383 8811 	msr	BASEPRI, r3
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000bac 	.word	0x20000bac

08001144 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800114e:	f3ef 8311 	mrs	r3, BASEPRI
 8001152:	f04f 0120 	mov.w	r1, #32
 8001156:	f381 8811 	msr	BASEPRI, r1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	4816      	ldr	r0, [pc, #88]	@ (80011b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800115e:	f7ff fc67 	bl	8000a30 <_PreparePacket>
 8001162:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	e00b      	b.n	800118a <SEGGER_SYSVIEW_RecordU32+0x46>
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	1c59      	adds	r1, r3, #1
 800117a:	61f9      	str	r1, [r7, #28]
 800117c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	09db      	lsrs	r3, r3, #7
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b7f      	cmp	r3, #127	@ 0x7f
 800118e:	d8f0      	bhi.n	8001172 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	61fa      	str	r2, [r7, #28]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	6938      	ldr	r0, [r7, #16]
 80011a6:	f7ff fd2f 	bl	8000c08 <_SendPacket>
  RECORD_END();
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f383 8811 	msr	BASEPRI, r3
}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000bac 	.word	0x20000bac

080011bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80011c8:	f3ef 8311 	mrs	r3, BASEPRI
 80011cc:	f04f 0120 	mov.w	r1, #32
 80011d0:	f381 8811 	msr	BASEPRI, r1
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	4825      	ldr	r0, [pc, #148]	@ (800126c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80011d8:	f7ff fc2a 	bl	8000a30 <_PreparePacket>
 80011dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ea:	e00b      	b.n	8001204 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80011ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f2:	1c59      	adds	r1, r3, #1
 80011f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80011f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001200:	09db      	lsrs	r3, r3, #7
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001206:	2b7f      	cmp	r3, #127	@ 0x7f
 8001208:	d8f0      	bhi.n	80011ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800120a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001218:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	e00b      	b.n	800123c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	6279      	str	r1, [r7, #36]	@ 0x24
 800122e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	09db      	lsrs	r3, r3, #7
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001240:	d8f0      	bhi.n	8001224 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	627a      	str	r2, [r7, #36]	@ 0x24
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6979      	ldr	r1, [r7, #20]
 8001256:	69b8      	ldr	r0, [r7, #24]
 8001258:	f7ff fcd6 	bl	8000c08 <_SendPacket>
  RECORD_END();
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f383 8811 	msr	BASEPRI, r3
}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	@ 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000bac 	.word	0x20000bac

08001270 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001276:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800127c:	f3ef 8311 	mrs	r3, BASEPRI
 8001280:	f04f 0120 	mov.w	r1, #32
 8001284:	f381 8811 	msr	BASEPRI, r1
 8001288:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800128a:	4b53      	ldr	r3, [pc, #332]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	220a      	movs	r2, #10
 8001290:	4952      	ldr	r1, [pc, #328]	@ (80013dc <SEGGER_SYSVIEW_Start+0x16c>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ffd4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800129e:	200a      	movs	r0, #10
 80012a0:	f7ff ff32 	bl	8001108 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80012a4:	f3ef 8311 	mrs	r3, BASEPRI
 80012a8:	f04f 0120 	mov.w	r1, #32
 80012ac:	f381 8811 	msr	BASEPRI, r1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	484b      	ldr	r0, [pc, #300]	@ (80013e0 <SEGGER_SYSVIEW_Start+0x170>)
 80012b4:	f7ff fbbc 	bl	8000a30 <_PreparePacket>
 80012b8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012c2:	4b45      	ldr	r3, [pc, #276]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012c8:	e00b      	b.n	80012e2 <SEGGER_SYSVIEW_Start+0x72>
 80012ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d0:	1c59      	adds	r1, r3, #1
 80012d2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80012d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012de:	09db      	lsrs	r3, r3, #7
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e6:	d8f0      	bhi.n	80012ca <SEGGER_SYSVIEW_Start+0x5a>
 80012e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80012ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	e00b      	b.n	800131c <SEGGER_SYSVIEW_Start+0xac>
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	1c59      	adds	r1, r3, #1
 800130c:	6279      	str	r1, [r7, #36]	@ 0x24
 800130e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	09db      	lsrs	r3, r3, #7
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001320:	d8f0      	bhi.n	8001304 <SEGGER_SYSVIEW_Start+0x94>
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	627a      	str	r2, [r7, #36]	@ 0x24
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	e00b      	b.n	8001356 <SEGGER_SYSVIEW_Start+0xe6>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	1c59      	adds	r1, r3, #1
 8001346:	61f9      	str	r1, [r7, #28]
 8001348:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	09db      	lsrs	r3, r3, #7
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b7f      	cmp	r3, #127	@ 0x7f
 800135a:	d8f0      	bhi.n	800133e <SEGGER_SYSVIEW_Start+0xce>
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	61fa      	str	r2, [r7, #28]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	e00b      	b.n	800138e <SEGGER_SYSVIEW_Start+0x11e>
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	6179      	str	r1, [r7, #20]
 8001380:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	09db      	lsrs	r3, r3, #7
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b7f      	cmp	r3, #127	@ 0x7f
 8001392:	d8f0      	bhi.n	8001376 <SEGGER_SYSVIEW_Start+0x106>
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	617a      	str	r2, [r7, #20]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80013a4:	2218      	movs	r2, #24
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fc2d 	bl	8000c08 <_SendPacket>
      RECORD_END();
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 80013b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <SEGGER_SYSVIEW_Start+0x168>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80013c2:	f000 f9eb 	bl	800179c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80013c6:	f000 f9b1 	bl	800172c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80013ca:	f000 fac1 	bl	8001950 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80013ce:	bf00      	nop
 80013d0:	3730      	adds	r7, #48	@ 0x30
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000b7c 	.word	0x20000b7c
 80013dc:	080102b0 	.word	0x080102b0
 80013e0:	20000bac 	.word	0x20000bac

080013e4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80013ea:	f3ef 8311 	mrs	r3, BASEPRI
 80013ee:	f04f 0120 	mov.w	r1, #32
 80013f2:	f381 8811 	msr	BASEPRI, r1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <SEGGER_SYSVIEW_Stop+0x44>)
 80013fa:	f7ff fb19 	bl	8000a30 <_PreparePacket>
 80013fe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <SEGGER_SYSVIEW_Stop+0x48>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001408:	220b      	movs	r2, #11
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fbfb 	bl	8000c08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SEGGER_SYSVIEW_Stop+0x48>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f383 8811 	msr	BASEPRI, r3
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000bac 	.word	0x20000bac
 800142c:	20000b7c 	.word	0x20000b7c

08001430 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001436:	f3ef 8311 	mrs	r3, BASEPRI
 800143a:	f04f 0120 	mov.w	r1, #32
 800143e:	f381 8811 	msr	BASEPRI, r1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4845      	ldr	r0, [pc, #276]	@ (800155c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001446:	f7ff faf3 	bl	8000a30 <_PreparePacket>
 800144a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001454:	4b42      	ldr	r3, [pc, #264]	@ (8001560 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800145a:	e00b      	b.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800145c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800145e:	b2da      	uxtb	r2, r3
 8001460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001470:	09db      	lsrs	r3, r3, #7
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	2b7f      	cmp	r3, #127	@ 0x7f
 8001478:	d8f0      	bhi.n	800145c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800147a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001488:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
 800148e:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	e00b      	b.n	80014ae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	1c59      	adds	r1, r3, #1
 800149e:	6279      	str	r1, [r7, #36]	@ 0x24
 80014a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	09db      	lsrs	r3, r3, #7
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80014b2:	d8f0      	bhi.n	8001496 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80014ba:	6a3a      	ldr	r2, [r7, #32]
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e00b      	b.n	80014e8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	1c59      	adds	r1, r3, #1
 80014d8:	61f9      	str	r1, [r7, #28]
 80014da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	09db      	lsrs	r3, r3, #7
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ec:	d8f0      	bhi.n	80014d0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	61fa      	str	r2, [r7, #28]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	e00b      	b.n	8001520 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1c59      	adds	r1, r3, #1
 8001510:	6179      	str	r1, [r7, #20]
 8001512:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	09db      	lsrs	r3, r3, #7
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b7f      	cmp	r3, #127	@ 0x7f
 8001524:	d8f0      	bhi.n	8001508 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	617a      	str	r2, [r7, #20]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001536:	2218      	movs	r2, #24
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f7ff fb64 	bl	8000c08 <_SendPacket>
  RECORD_END();
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800154e:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	4798      	blx	r3
  }
}
 8001554:	bf00      	nop
 8001556:	3730      	adds	r7, #48	@ 0x30
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000bac 	.word	0x20000bac
 8001560:	20000b7c 	.word	0x20000b7c

08001564 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b092      	sub	sp, #72	@ 0x48
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800156c:	f3ef 8311 	mrs	r3, BASEPRI
 8001570:	f04f 0120 	mov.w	r1, #32
 8001574:	f381 8811 	msr	BASEPRI, r1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	486a      	ldr	r0, [pc, #424]	@ (8001724 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800157c:	f7ff fa58 	bl	8000a30 <_PreparePacket>
 8001580:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	647b      	str	r3, [r7, #68]	@ 0x44
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b66      	ldr	r3, [pc, #408]	@ (8001728 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
 8001596:	e00b      	b.n	80015b0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800159a:	b2da      	uxtb	r2, r3
 800159c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800159e:	1c59      	adds	r1, r3, #1
 80015a0:	6479      	str	r1, [r7, #68]	@ 0x44
 80015a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015ac:	09db      	lsrs	r3, r3, #7
 80015ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80015b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015b4:	d8f0      	bhi.n	8001598 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80015b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80015bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015d0:	e00b      	b.n	80015ea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80015d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80015dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e6:	09db      	lsrs	r3, r3, #7
 80015e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80015ee:	d8f0      	bhi.n	80015d2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80015f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015fe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2220      	movs	r2, #32
 8001606:	4619      	mov	r1, r3
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff f9e1 	bl	80009d0 <_EncodeStr>
 800160e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001610:	2209      	movs	r2, #9
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	6938      	ldr	r0, [r7, #16]
 8001616:	f7ff faf7 	bl	8000c08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
 800162e:	e00b      	b.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001632:	b2da      	uxtb	r2, r3
 8001634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	6379      	str	r1, [r7, #52]	@ 0x34
 800163a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001644:	09db      	lsrs	r3, r3, #7
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
 8001648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164a:	2b7f      	cmp	r3, #127	@ 0x7f
 800164c:	d8f0      	bhi.n	8001630 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800164e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	637a      	str	r2, [r7, #52]	@ 0x34
 8001654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800165c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001668:	e00b      	b.n	8001682 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166c:	b2da      	uxtb	r2, r3
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	1c59      	adds	r1, r3, #1
 8001672:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001674:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167e:	09db      	lsrs	r3, r3, #7
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001684:	2b7f      	cmp	r3, #127	@ 0x7f
 8001686:	d8f0      	bhi.n	800166a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8001688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800168e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	e00b      	b.n	80016bc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	1c59      	adds	r1, r3, #1
 80016ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80016ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	09db      	lsrs	r3, r3, #7
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	2b7f      	cmp	r3, #127	@ 0x7f
 80016c0:	d8f0      	bhi.n	80016a4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80016c8:	6a3a      	ldr	r2, [r7, #32]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e00b      	b.n	80016f4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	61f9      	str	r1, [r7, #28]
 80016e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	09db      	lsrs	r3, r3, #7
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016f8:	d8f0      	bhi.n	80016dc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	61fa      	str	r2, [r7, #28]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800170a:	2215      	movs	r2, #21
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	6938      	ldr	r0, [r7, #16]
 8001710:	f7ff fa7a 	bl	8000c08 <_SendPacket>
  RECORD_END();
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f383 8811 	msr	BASEPRI, r3
}
 800171a:	bf00      	nop
 800171c:	3748      	adds	r7, #72	@ 0x48
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000bac 	.word	0x20000bac
 8001728:	20000b7c 	.word	0x20000b7c

0800172c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001742:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4798      	blx	r3
  }
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000b7c 	.word	0x20000b7c

08001754 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800175c:	f3ef 8311 	mrs	r3, BASEPRI
 8001760:	f04f 0120 	mov.w	r1, #32
 8001764:	f381 8811 	msr	BASEPRI, r1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	480b      	ldr	r0, [pc, #44]	@ (8001798 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800176c:	f7ff f960 	bl	8000a30 <_PreparePacket>
 8001770:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	6938      	ldr	r0, [r7, #16]
 8001778:	f7ff f92a 	bl	80009d0 <_EncodeStr>
 800177c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800177e:	220e      	movs	r2, #14
 8001780:	68f9      	ldr	r1, [r7, #12]
 8001782:	6938      	ldr	r0, [r7, #16]
 8001784:	f7ff fa40 	bl	8000c08 <_SendPacket>
  RECORD_END();
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f383 8811 	msr	BASEPRI, r3
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000bac 	.word	0x20000bac

0800179c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01a      	beq.n	80017e0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4798      	blx	r3
 80017bc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80017c0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80017c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	000a      	movs	r2, r1
 80017d0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80017d2:	4613      	mov	r3, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	200d      	movs	r0, #13
 80017da:	f7ff fcef 	bl	80011bc <SEGGER_SYSVIEW_RecordU32x2>
 80017de:	e006      	b.n	80017ee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	200c      	movs	r0, #12
 80017e8:	f7ff fcac 	bl	8001144 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000b7c 	.word	0x20000b7c
 80017fc:	e0001004 	.word	0xe0001004

08001800 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	@ 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800180a:	4b40      	ldr	r3, [pc, #256]	@ (800190c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d077      	beq.n	8001902 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001812:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800181c:	e008      	b.n	8001830 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800181e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	3301      	adds	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001834:	429a      	cmp	r2, r3
 8001836:	d3f2      	bcc.n	800181e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001838:	e000      	b.n	800183c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800183a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d055      	beq.n	80018ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001842:	f3ef 8311 	mrs	r3, BASEPRI
 8001846:	f04f 0120 	mov.w	r1, #32
 800184a:	f381 8811 	msr	BASEPRI, r1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	482f      	ldr	r0, [pc, #188]	@ (8001910 <SEGGER_SYSVIEW_SendModule+0x110>)
 8001852:	f7ff f8ed 	bl	8000a30 <_PreparePacket>
 8001856:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	e00b      	b.n	800187e <SEGGER_SYSVIEW_SendModule+0x7e>
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	1c59      	adds	r1, r3, #1
 800186e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001870:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	09db      	lsrs	r3, r3, #7
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	2b7f      	cmp	r3, #127	@ 0x7f
 8001882:	d8f0      	bhi.n	8001866 <SEGGER_SYSVIEW_SendModule+0x66>
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	627a      	str	r2, [r7, #36]	@ 0x24
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e00b      	b.n	80018b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	61f9      	str	r1, [r7, #28]
 80018aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	09db      	lsrs	r3, r3, #7
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80018bc:	d8f0      	bhi.n	80018a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	61fa      	str	r2, [r7, #28]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	4619      	mov	r1, r3
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff f87a 	bl	80009d0 <_EncodeStr>
 80018dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80018de:	2216      	movs	r2, #22
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	6938      	ldr	r0, [r7, #16]
 80018e4:	f7ff f990 	bl	8000c08 <_SendPacket>
      RECORD_END();
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80018ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <SEGGER_SYSVIEW_SendModule+0x102>
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80018fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4798      	blx	r3
    }
  }
}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	@ 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000ba4 	.word	0x20000ba4
 8001910:	20000bac 	.word	0x20000bac

08001914 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00f      	beq.n	8001942 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f2      	bne.n	8001928 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000ba4 	.word	0x20000ba4

08001950 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001956:	f3ef 8311 	mrs	r3, BASEPRI
 800195a:	f04f 0120 	mov.w	r1, #32
 800195e:	f381 8811 	msr	BASEPRI, r1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4817      	ldr	r0, [pc, #92]	@ (80019c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001966:	f7ff f863 	bl	8000a30 <_PreparePacket>
 800196a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e00b      	b.n	8001994 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	1c59      	adds	r1, r3, #1
 8001984:	6179      	str	r1, [r7, #20]
 8001986:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	09db      	lsrs	r3, r3, #7
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2b7f      	cmp	r3, #127	@ 0x7f
 8001998:	d8f0      	bhi.n	800197c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	617a      	str	r2, [r7, #20]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019aa:	221b      	movs	r2, #27
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7ff f92a 	bl	8000c08 <_SendPacket>
  RECORD_END();
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f383 8811 	msr	BASEPRI, r3
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000bac 	.word	0x20000bac
 80019c8:	20000ba8 	.word	0x20000ba8

080019cc <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019cc:	b40f      	push	{r0, r1, r2, r3}
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	461a      	mov	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	6938      	ldr	r0, [r7, #16]
 80019e2:	f7ff fa7f 	bl	8000ee4 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019f0:	b004      	add	sp, #16
 80019f2:	4770      	bx	lr

080019f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80019f8:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <_cbSendSystemDesc+0x14>)
 80019fa:	f7ff feab 	bl	8001754 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80019fe:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <_cbSendSystemDesc+0x18>)
 8001a00:	f7ff fea8 	bl	8001754 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	0801016c 	.word	0x0801016c
 8001a0c:	080101a0 	.word	0x080101a0

08001a10 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <SEGGER_SYSVIEW_Conf+0x24>)
 8001a1e:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <SEGGER_SYSVIEW_Conf+0x28>)
 8001a20:	f7ff fb1e 	bl	8001060 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a24:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001a28:	f7ff fb5e 	bl	80010e8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	080019f5 	.word	0x080019f5
 8001a38:	080102bc 	.word	0x080102bc

08001a3c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e048      	b.n	8001ada <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001a48:	4929      	ldr	r1, [pc, #164]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00b fe8f 	bl	800d77c <uxTaskGetStackHighWaterMark>
 8001a5e:	4601      	mov	r1, r0
 8001a60:	4823      	ldr	r0, [pc, #140]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	3310      	adds	r3, #16
 8001a70:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a72:	491f      	ldr	r1, [pc, #124]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	491b      	ldr	r1, [pc, #108]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	3304      	adds	r3, #4
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	4c16      	ldr	r4, [pc, #88]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4423      	add	r3, r4
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	681c      	ldr	r4, [r3, #0]
 8001aa6:	4d12      	ldr	r5, [pc, #72]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	442b      	add	r3, r5
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	681d      	ldr	r5, [r3, #0]
 8001ab8:	4e0d      	ldr	r6, [pc, #52]	@ (8001af0 <_cbSendTaskList+0xb4>)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4433      	add	r3, r6
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	462b      	mov	r3, r5
 8001ace:	4622      	mov	r2, r4
 8001ad0:	f000 f855 	bl	8001b7e <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <_cbSendTaskList+0xb8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3b1      	bcc.n	8001a48 <_cbSendTaskList+0xc>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000c90 	.word	0x20000c90
 8001af4:	20000d30 	.word	0x20000d30

08001af8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001b00:	f00b fb1e 	bl	800d140 <xTaskGetTickCountFromISR>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2200      	movs	r2, #0
 8001b08:	469a      	mov	sl, r3
 8001b0a:	4693      	mov	fp, r2
 8001b0c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	f04f 0a00 	mov.w	sl, #0
 8001b1c:	f04f 0b00 	mov.w	fp, #0
 8001b20:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b24:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001b28:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001b2c:	4652      	mov	r2, sl
 8001b2e:	465b      	mov	r3, fp
 8001b30:	1a14      	subs	r4, r2, r0
 8001b32:	eb63 0501 	sbc.w	r5, r3, r1
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	00ab      	lsls	r3, r5, #2
 8001b40:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b44:	00a2      	lsls	r2, r4, #2
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	eb14 0800 	adds.w	r8, r4, r0
 8001b4e:	eb45 0901 	adc.w	r9, r5, r1
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b66:	4690      	mov	r8, r2
 8001b68:	4699      	mov	r9, r3
 8001b6a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b7e <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b08a      	sub	sp, #40	@ 0x28
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2214      	movs	r2, #20
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00d fea7 	bl	800f8e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fcd6 	bl	8001564 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	@ 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <CheckCRC>:
 * @param Len	number of bytes in Buffer, including 4 byte
 * 				CRC-32
 */

bool CheckCRC(const uint8_t *Buff, const uint32_t Len)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	//make sure args and crc32 return are not NULL
	if(!Buff || !Len){
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <CheckCRC+0x16>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <CheckCRC+0x1a>
		return false;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e03d      	b.n	8001c56 <CheckCRC+0x96>
	}
	//Use HAL provided CRC32 module to calculate sum
	uint32_t result = HAL_CRC_Calculate(&hcrc, (uint32_t*)Buff, 4);
 8001bda:	2204      	movs	r2, #4
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4820      	ldr	r0, [pc, #128]	@ (8001c60 <CheckCRC+0xa0>)
 8001be0:	f001 f962 	bl	8002ea8 <HAL_CRC_Calculate>
 8001be4:	6138      	str	r0, [r7, #16]
	result = result ^ ~0U;
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	613b      	str	r3, [r7, #16]

	if(!result){
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <CheckCRC+0x36>
		return false;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e02f      	b.n	8001c56 <CheckCRC+0x96>
	}
	//for each byte of crc32 in packet, ensure equality with crc32 calculated on packet contents
	for (int i = 0; i < 4; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e028      	b.n	8001c4e <CheckCRC+0x8e>
	{
		uint32_t hashresult = result & (0x000000FF << (8 * i));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	22ff      	movs	r2, #255	@ 0xff
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
		char hex[3];
		//first 2 digits of each hash result is used; all other digits are significant but always 0
		sprintf(hex, "%02x", hashresult >> (8 * i));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	40da      	lsrs	r2, r3
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	4912      	ldr	r1, [pc, #72]	@ (8001c64 <CheckCRC+0xa4>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00d fe43 	bl	800f8a8 <siprintf>

		uint8_t uint8_value = strtoul(hex, NULL, 16);
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	2210      	movs	r2, #16
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00d fe32 	bl	800f894 <strtoul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	72fb      	strb	r3, [r7, #11]

		if (uint8_value != Buff[i + 5])
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3305      	adds	r3, #5
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	7afa      	ldrb	r2, [r7, #11]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <CheckCRC+0x88>
		{
			return false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e006      	b.n	8001c56 <CheckCRC+0x96>
	for (int i = 0; i < 4; i++)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	ddd3      	ble.n	8001bfc <CheckCRC+0x3c>
		}
	}

	return true;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000d6c 	.word	0x20000d6c
 8001c64:	080101b0 	.word	0x080101b0

08001c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6c:	f000 ff85 	bl	8002b7a <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001c70:	f7ff fece 	bl	8001a10 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c74:	f000 f85e 	bl	8001d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f000 fac0 	bl	80021fc <MX_GPIO_Init>
  MX_ETH_Init();
 8001c7c:	f000 f8ee 	bl	8001e5c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001c80:	f000 fa8c 	bl	800219c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001c84:	f000 f9b0 	bl	8001fe8 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001c88:	f000 fa26 	bl	80020d8 <MX_TIM12_Init>
  MX_TIM3_Init();
 8001c8c:	f000 f934 	bl	8001ef8 <MX_TIM3_Init>
  MX_CRC_Init();
 8001c90:	f000 f8c2 	bl	8001e18 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c94:	2104      	movs	r1, #4
 8001c96:	4819      	ldr	r0, [pc, #100]	@ (8001cfc <main+0x94>)
 8001c98:	f004 fd04 	bl	80066a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4818      	ldr	r0, [pc, #96]	@ (8001d00 <main+0x98>)
 8001ca0:	f004 fd00 	bl	80066a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	4817      	ldr	r0, [pc, #92]	@ (8001d04 <main+0x9c>)
 8001ca8:	f004 fcfc 	bl	80066a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cac:	f009 fdea 	bl	800b884 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ledBlinkTimer */
  ledBlinkTimerHandle = osTimerNew(ledBlinkTimerEntry, osTimerPeriodic, NULL, &ledBlinkTimer_attributes);
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <main+0xa0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4815      	ldr	r0, [pc, #84]	@ (8001d0c <main+0xa4>)
 8001cb8:	f009 ff38 	bl	800bb2c <osTimerNew>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a14      	ldr	r2, [pc, #80]	@ (8001d10 <main+0xa8>)
 8001cc0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <main+0xac>)
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	2010      	movs	r0, #16
 8001cc8:	f00a f83e 	bl	800bd48 <osMessageQueueNew>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <main+0xb0>)
 8001cd0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cd2:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <main+0xb4>)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4812      	ldr	r0, [pc, #72]	@ (8001d20 <main+0xb8>)
 8001cd8:	f009 fe3e 	bl	800b958 <osThreadNew>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <main+0xbc>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001ce2:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <main+0xc0>)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4811      	ldr	r0, [pc, #68]	@ (8001d2c <main+0xc4>)
 8001ce8:	f009 fe36 	bl	800b958 <osThreadNew>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a10      	ldr	r2, [pc, #64]	@ (8001d30 <main+0xc8>)
 8001cf0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cf2:	f009 fdfb 	bl	800b8ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cf6:	bf00      	nop
 8001cf8:	e7fd      	b.n	8001cf6 <main+0x8e>
 8001cfa:	bf00      	nop
 8001cfc:	20000e8c 	.word	0x20000e8c
 8001d00:	20000ed8 	.word	0x20000ed8
 8001d04:	20000e40 	.word	0x20000e40
 8001d08:	08010324 	.word	0x08010324
 8001d0c:	08002435 	.word	0x08002435
 8001d10:	20000fb8 	.word	0x20000fb8
 8001d14:	0801030c 	.word	0x0801030c
 8001d18:	20000fb4 	.word	0x20000fb4
 8001d1c:	080102c4 	.word	0x080102c4
 8001d20:	08002311 	.word	0x08002311
 8001d24:	20000fac 	.word	0x20000fac
 8001d28:	080102e8 	.word	0x080102e8
 8001d2c:	08002325 	.word	0x08002325
 8001d30:	20000fb0 	.word	0x20000fb0

08001d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b094      	sub	sp, #80	@ 0x50
 8001d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	2234      	movs	r2, #52	@ 0x34
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00d fdd0 	bl	800f8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d58:	f003 f9e4 	bl	8005124 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <SystemClock_Config+0xdc>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	4a2b      	ldr	r2, [pc, #172]	@ (8001e10 <SystemClock_Config+0xdc>)
 8001d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <SystemClock_Config+0xdc>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d74:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <SystemClock_Config+0xe0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <SystemClock_Config+0xe0>)
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <SystemClock_Config+0xe0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d94:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001d98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001da4:	2304      	movs	r3, #4
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001da8:	2360      	movs	r3, #96	@ 0x60
 8001daa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db0:	2304      	movs	r3, #4
 8001db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fa11 	bl	80051e4 <HAL_RCC_OscConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dc8:	f000 fb8e 	bl	80024e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dcc:	f003 f9ba 	bl	8005144 <HAL_PWREx_EnableOverDrive>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dd6:	f000 fb87 	bl	80024e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dda:	230f      	movs	r3, #15
 8001ddc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dde:	2302      	movs	r3, #2
 8001de0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	2103      	movs	r1, #3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fca2 	bl	8005740 <HAL_RCC_ClockConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e02:	f000 fb71 	bl	80024e8 <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	3750      	adds	r7, #80	@ 0x50
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <MX_CRC_Init+0x40>)
 8001e20:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001e34:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	@ (8001e54 <MX_CRC_Init+0x3c>)
 8001e42:	f000 ffcd 	bl	8002de0 <HAL_CRC_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001e4c:	f000 fb4c 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000d6c 	.word	0x20000d6c
 8001e58:	40023000 	.word	0x40023000

08001e5c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001e62:	4a20      	ldr	r2, [pc, #128]	@ (8001ee4 <MX_ETH_Init+0x88>)
 8001e64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e74:	22e1      	movs	r2, #225	@ 0xe1
 8001e76:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001e8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ee8 <MX_ETH_Init+0x8c>)
 8001e8e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001e92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e96:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001e9a:	4a14      	ldr	r2, [pc, #80]	@ (8001eec <MX_ETH_Init+0x90>)
 8001e9c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001ea0:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <MX_ETH_Init+0x94>)
 8001ea2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001ea6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001eaa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001eac:	480c      	ldr	r0, [pc, #48]	@ (8001ee0 <MX_ETH_Init+0x84>)
 8001eae:	f001 f995 	bl	80031dc <HAL_ETH_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001eb8:	f000 fb16 	bl	80024e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ebc:	2238      	movs	r2, #56	@ 0x38
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <MX_ETH_Init+0x98>)
 8001ec2:	f00d fd11 	bl	800f8e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <MX_ETH_Init+0x98>)
 8001ec8:	2221      	movs	r2, #33	@ 0x21
 8001eca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_ETH_Init+0x98>)
 8001ece:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001ed2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <MX_ETH_Init+0x98>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000d90 	.word	0x20000d90
 8001ee4:	40028000 	.word	0x40028000
 8001ee8:	20000fcc 	.word	0x20000fcc
 8001eec:	20000200 	.word	0x20000200
 8001ef0:	20000160 	.word	0x20000160
 8001ef4:	20000d34 	.word	0x20000d34

08001ef8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	@ 0x38
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]
 8001f26:	615a      	str	r2, [r3, #20]
 8001f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe4 <MX_TIM3_Init+0xec>)
 8001f2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f30:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f3c:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f44:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f4a:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f50:	4823      	ldr	r0, [pc, #140]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f52:	f004 fa75 	bl	8006440 <HAL_TIM_Base_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f5c:	f000 fac4 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481c      	ldr	r0, [pc, #112]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f6e:	f004 fec7 	bl	8006d00 <HAL_TIM_ConfigClockSource>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f78:	f000 fab6 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f7c:	4818      	ldr	r0, [pc, #96]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f7e:	f004 fb2f 	bl	80065e0 <HAL_TIM_PWM_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f88:	f000 faae 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4811      	ldr	r0, [pc, #68]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001f9c:	f005 fb60 	bl	8007660 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fa6:	f000 fa9f 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001faa:	2360      	movs	r3, #96	@ 0x60
 8001fac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001fc2:	f004 fd89 	bl	8006ad8 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001fcc:	f000 fa8c 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <MX_TIM3_Init+0xe8>)
 8001fd2:	f000 fbd7 	bl	8002784 <HAL_TIM_MspPostInit>

}
 8001fd6:	bf00      	nop
 8001fd8:	3738      	adds	r7, #56	@ 0x38
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000e40 	.word	0x20000e40
 8001fe4:	40000400 	.word	0x40000400

08001fe8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	@ 0x38
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	615a      	str	r2, [r3, #20]
 8002018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800201a:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800201c:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <MX_TIM4_Init+0xec>)
 800201e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800202c:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800202e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002032:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002040:	4823      	ldr	r0, [pc, #140]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 8002042:	f004 f9fd 	bl	8006440 <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800204c:	f000 fa4c 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800205e:	f004 fe4f 	bl	8006d00 <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002068:	f000 fa3e 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800206c:	4818      	ldr	r0, [pc, #96]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800206e:	f004 fab7 	bl	80065e0 <HAL_TIM_PWM_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002078:	f000 fa36 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800208c:	f005 fae8 	bl	8007660 <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002096:	f000 fa27 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209a:	2360      	movs	r3, #96	@ 0x60
 800209c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	2204      	movs	r2, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 80020b2:	f004 fd11 	bl	8006ad8 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80020bc:	f000 fa14 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 80020c2:	f000 fb5f 	bl	8002784 <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3738      	adds	r7, #56	@ 0x38
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000e8c 	.word	0x20000e8c
 80020d4:	40000800 	.word	0x40000800

080020d8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	@ 0x30
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	f107 0320 	add.w	r3, r7, #32
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002100:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <MX_TIM12_Init+0xc0>)
 8002102:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002104:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <MX_TIM12_Init+0xbc>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002110:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002116:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002118:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <MX_TIM12_Init+0xbc>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002120:	2280      	movs	r2, #128	@ 0x80
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002124:	481b      	ldr	r0, [pc, #108]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002126:	f004 f98b 	bl	8006440 <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002130:	f000 f9da 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002138:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	4619      	mov	r1, r3
 8002140:	4814      	ldr	r0, [pc, #80]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002142:	f004 fddd 	bl	8006d00 <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800214c:	f000 f9cc 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002150:	4810      	ldr	r0, [pc, #64]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002152:	f004 fa45 	bl	80065e0 <HAL_TIM_PWM_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800215c:	f000 f9c4 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002160:	2360      	movs	r3, #96	@ 0x60
 8002162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	4807      	ldr	r0, [pc, #28]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002178:	f004 fcae 	bl	8006ad8 <HAL_TIM_PWM_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002182:	f000 f9b1 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002186:	4803      	ldr	r0, [pc, #12]	@ (8002194 <MX_TIM12_Init+0xbc>)
 8002188:	f000 fafc 	bl	8002784 <HAL_TIM_MspPostInit>

}
 800218c:	bf00      	nop
 800218e:	3730      	adds	r7, #48	@ 0x30
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000ed8 	.word	0x20000ed8
 8002198:	40001800 	.word	0x40001800

0800219c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021a2:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <MX_USART3_UART_Init+0x5c>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_USART3_UART_Init+0x58>)
 80021e0:	f005 faea 	bl	80077b8 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021ea:	f000 f97d 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000f24 	.word	0x20000f24
 80021f8:	40004800 	.word	0x40004800

080021fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	@ 0x30
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	4b3c      	ldr	r3, [pc, #240]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b39      	ldr	r3, [pc, #228]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222a:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <MX_GPIO_Init+0x108>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a35      	ldr	r2, [pc, #212]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b30      	ldr	r3, [pc, #192]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <MX_GPIO_Init+0x108>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a29      	ldr	r2, [pc, #164]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <MX_GPIO_Init+0x108>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <MX_GPIO_Init+0x108>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2140      	movs	r1, #64	@ 0x40
 80022a6:	4818      	ldr	r0, [pc, #96]	@ (8002308 <MX_GPIO_Init+0x10c>)
 80022a8:	f001 fc6a 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4812      	ldr	r0, [pc, #72]	@ (800230c <MX_GPIO_Init+0x110>)
 80022c4:	f001 fab0 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80022c8:	2340      	movs	r3, #64	@ 0x40
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	4619      	mov	r1, r3
 80022de:	480a      	ldr	r0, [pc, #40]	@ (8002308 <MX_GPIO_Init+0x10c>)
 80022e0:	f001 faa2 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4804      	ldr	r0, [pc, #16]	@ (8002308 <MX_GPIO_Init+0x10c>)
 80022f8:	f001 fa96 	bl	8003828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022fc:	bf00      	nop
 80022fe:	3730      	adds	r7, #48	@ 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	40021800 	.word	0x40021800
 800230c:	40020800 	.word	0x40020800

08002310 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002318:	f00c fc10 	bl	800eb3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
    osDelay(1);
 800231c:	2001      	movs	r0, #1
 800231e:	f009 fbc1 	bl	800baa4 <osDelay>
 8002322:	e7fb      	b.n	800231c <StartDefaultTask+0xc>

08002324 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	@ 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]



  for(;;)
  {
    osDelay(1);
 800232c:	2001      	movs	r0, #1
 800232e:	f009 fbb9 	bl	800baa4 <osDelay>
    uint8_t command[32];
    if (xQueueReceive(commandQueueHandle, &command, 100) == pdPASS){
 8002332:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <commandReaderEntry+0xd8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f107 0108 	add.w	r1, r7, #8
 800233a:	2264      	movs	r2, #100	@ 0x64
 800233c:	4618      	mov	r0, r3
 800233e:	f00a f979 	bl	800c634 <xQueueReceive>
 8002342:	4603      	mov	r3, r0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d1f1      	bne.n	800232c <commandReaderEntry+0x8>
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", command[1]);
    	//SEGGER_SYSVIEW_PrintfHost("%p \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%u \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%x \n", (void*)command);

    	SEGGER_SYSVIEW_PrintfHost("begin:");
 8002348:	482d      	ldr	r0, [pc, #180]	@ (8002400 <commandReaderEntry+0xdc>)
 800234a:	f7ff fb3f 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002352:	e00b      	b.n	800236c <commandReaderEntry+0x48>
    		SEGGER_SYSVIEW_PrintfHost("%d \n", command[i]);
 8002354:	f107 0208 	add.w	r2, r7, #8
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	4828      	ldr	r0, [pc, #160]	@ (8002404 <commandReaderEntry+0xe0>)
 8002362:	f7ff fb33 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 8002366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002368:	3301      	adds	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236e:	2b09      	cmp	r3, #9
 8002370:	ddf0      	ble.n	8002354 <commandReaderEntry+0x30>
    	}
    	SEGGER_SYSVIEW_PrintfHost("end");
 8002372:	4825      	ldr	r0, [pc, #148]	@ (8002408 <commandReaderEntry+0xe4>)
 8002374:	f7ff fb2a 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>
    	crccheck = CheckCRC(command, 9);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	2109      	movs	r1, #9
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc1e 	bl	8001bc0 <CheckCRC>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    	SEGGER_SYSVIEW_PrintfHost("crc pass? %d \n", crccheck);
 800238a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800238e:	4619      	mov	r1, r3
 8002390:	481e      	ldr	r0, [pc, #120]	@ (800240c <commandReaderEntry+0xe8>)
 8002392:	f7ff fb1b 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>

    	if(command[1] == 3){
 8002396:	7a7b      	ldrb	r3, [r7, #9]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d10c      	bne.n	80023b6 <commandReaderEntry+0x92>
    		SEGGER_SYSVIEW_PrintfHost("blinker %d \n", command[1]);
 800239c:	7a7b      	ldrb	r3, [r7, #9]
 800239e:	4619      	mov	r1, r3
 80023a0:	481b      	ldr	r0, [pc, #108]	@ (8002410 <commandReaderEntry+0xec>)
 80023a2:	f7ff fb13 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>
    		osTimerStart(ledBlinkTimerHandle, 500 / portTICK_PERIOD_MS);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <commandReaderEntry+0xf0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f009 fc40 	bl	800bc34 <osTimerStart>
 80023b4:	e009      	b.n	80023ca <commandReaderEntry+0xa6>
    	}

    	else{
    		SEGGER_SYSVIEW_PrintfHost("no blinker %d \n", command[1]);
 80023b6:	7a7b      	ldrb	r3, [r7, #9]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4817      	ldr	r0, [pc, #92]	@ (8002418 <commandReaderEntry+0xf4>)
 80023bc:	f7ff fb06 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>
    		osTimerStop(ledBlinkTimerHandle);
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <commandReaderEntry+0xf0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f009 fc75 	bl	800bcb4 <osTimerStop>
    	}

    	TIM12_CH1_RED = (command[2] * 256);
 80023ca:	7abb      	ldrb	r3, [r7, #10]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	4a13      	ldr	r2, [pc, #76]	@ (800241c <commandReaderEntry+0xf8>)
 80023d0:	6013      	str	r3, [r2, #0]
    	TIM12->CCR1 = TIM12_CH1_RED;
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <commandReaderEntry+0xf8>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <commandReaderEntry+0xfc>)
 80023d8:	635a      	str	r2, [r3, #52]	@ 0x34

    	TIM3_CH3_GREEN = (command[3] * 256);
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4a11      	ldr	r2, [pc, #68]	@ (8002424 <commandReaderEntry+0x100>)
 80023e0:	6013      	str	r3, [r2, #0]
    	TIM3->CCR3 = TIM3_CH3_GREEN;
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <commandReaderEntry+0x100>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <commandReaderEntry+0x104>)
 80023e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    	TIM4_CH2_BLUE = (command[4] * 256);
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4a0f      	ldr	r2, [pc, #60]	@ (800242c <commandReaderEntry+0x108>)
 80023f0:	6013      	str	r3, [r2, #0]
    	TIM4->CCR2 = TIM4_CH2_BLUE;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <commandReaderEntry+0x108>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <commandReaderEntry+0x10c>)
 80023f8:	639a      	str	r2, [r3, #56]	@ 0x38
  {
 80023fa:	e797      	b.n	800232c <commandReaderEntry+0x8>
 80023fc:	20000fb4 	.word	0x20000fb4
 8002400:	080101f4 	.word	0x080101f4
 8002404:	080101fc 	.word	0x080101fc
 8002408:	08010204 	.word	0x08010204
 800240c:	08010208 	.word	0x08010208
 8002410:	08010218 	.word	0x08010218
 8002414:	20000fb8 	.word	0x20000fb8
 8002418:	08010228 	.word	0x08010228
 800241c:	20000fc0 	.word	0x20000fc0
 8002420:	40001800 	.word	0x40001800
 8002424:	20000fc4 	.word	0x20000fc4
 8002428:	40000400 	.word	0x40000400
 800242c:	20000fc8 	.word	0x20000fc8
 8002430:	40000800 	.word	0x40000800

08002434 <ledBlinkTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* ledBlinkTimerEntry function */
void ledBlinkTimerEntry(void *argument)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledBlinkTimerEntry */

  ledblink = !ledblink;
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <ledBlinkTimerEntry+0x70>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <ledBlinkTimerEntry+0x70>)
 8002458:	701a      	strb	r2, [r3, #0]
  if(ledblink){
 800245a:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <ledBlinkTimerEntry+0x70>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <ledBlinkTimerEntry+0x48>
	  TIM12->CCR1 = TIM12_CH1_RED;
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <ledBlinkTimerEntry+0x74>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <ledBlinkTimerEntry+0x78>)
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR3 = TIM3_CH3_GREEN;
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <ledBlinkTimerEntry+0x7c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <ledBlinkTimerEntry+0x80>)
 8002470:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM4->CCR2 = TIM4_CH2_BLUE;
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <ledBlinkTimerEntry+0x84>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <ledBlinkTimerEntry+0x88>)
 8002478:	639a      	str	r2, [r3, #56]	@ 0x38
 800247a:	e008      	b.n	800248e <ledBlinkTimerEntry+0x5a>
  }
  else{
	  TIM12->CCR1 = 0;
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <ledBlinkTimerEntry+0x78>)
 800247e:	2200      	movs	r2, #0
 8002480:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR3 = 0;
 8002482:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <ledBlinkTimerEntry+0x80>)
 8002484:	2200      	movs	r2, #0
 8002486:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM4->CCR2 = 0;
 8002488:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <ledBlinkTimerEntry+0x88>)
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  SEGGER_SYSVIEW_PrintfHost("%d \n", ledblink);
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <ledBlinkTimerEntry+0x70>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	480a      	ldr	r0, [pc, #40]	@ (80024c0 <ledBlinkTimerEntry+0x8c>)
 8002496:	f7ff fa99 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>
  /* USER CODE END ledBlinkTimerEntry */
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000fbc 	.word	0x20000fbc
 80024a8:	20000fc0 	.word	0x20000fc0
 80024ac:	40001800 	.word	0x40001800
 80024b0:	20000fc4 	.word	0x20000fc4
 80024b4:	40000400 	.word	0x40000400
 80024b8:	20000fc8 	.word	0x20000fc8
 80024bc:	40000800 	.word	0x40000800
 80024c0:	080101fc 	.word	0x080101fc

080024c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024d6:	f000 fb5d 	bl	8002b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40001000 	.word	0x40001000

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ec:	b672      	cpsid	i
}
 80024ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <Error_Handler+0x8>

080024f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_MspInit+0x4c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <HAL_MspInit+0x4c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	@ 0x40
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_MspInit+0x4c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_MspInit+0x4c>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800251c:	6453      	str	r3, [r2, #68]	@ 0x44
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	210f      	movs	r1, #15
 800252e:	f06f 0001 	mvn.w	r0, #1
 8002532:	f000 fc2b 	bl	8002d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_CRC_MspInit+0x38>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10b      	bne.n	800256e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_CRC_MspInit+0x3c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <HAL_CRC_MspInit+0x3c>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <HAL_CRC_MspInit+0x3c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023000 	.word	0x40023000
 8002580:	40023800 	.word	0x40023800

08002584 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	@ 0x38
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a4e      	ldr	r2, [pc, #312]	@ (80026dc <HAL_ETH_MspInit+0x158>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f040 8096 	bne.w	80026d4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80025a8:	4b4d      	ldr	r3, [pc, #308]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4a4c      	ldr	r2, [pc, #304]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b4:	4b4a      	ldr	r3, [pc, #296]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025bc:	623b      	str	r3, [r7, #32]
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	4a46      	ldr	r2, [pc, #280]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80025cc:	4b44      	ldr	r3, [pc, #272]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	4a40      	ldr	r2, [pc, #256]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e4:	4b3e      	ldr	r3, [pc, #248]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f0:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	4a3a      	ldr	r2, [pc, #232]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fc:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b35      	ldr	r3, [pc, #212]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	4a34      	ldr	r2, [pc, #208]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6313      	str	r3, [r2, #48]	@ 0x30
 8002614:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002620:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	4a2e      	ldr	r2, [pc, #184]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	6313      	str	r3, [r2, #48]	@ 0x30
 800262c:	4b2c      	ldr	r3, [pc, #176]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002638:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	4a28      	ldr	r2, [pc, #160]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 800263e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002642:	6313      	str	r3, [r2, #48]	@ 0x30
 8002644:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_ETH_MspInit+0x15c>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002650:	2332      	movs	r3, #50	@ 0x32
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002660:	230b      	movs	r3, #11
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	481e      	ldr	r0, [pc, #120]	@ (80026e4 <HAL_ETH_MspInit+0x160>)
 800266c:	f001 f8dc 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002670:	2386      	movs	r3, #134	@ 0x86
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002680:	230b      	movs	r3, #11
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	4817      	ldr	r0, [pc, #92]	@ (80026e8 <HAL_ETH_MspInit+0x164>)
 800268c:	f001 f8cc 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026a2:	230b      	movs	r3, #11
 80026a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026aa:	4619      	mov	r1, r3
 80026ac:	480f      	ldr	r0, [pc, #60]	@ (80026ec <HAL_ETH_MspInit+0x168>)
 80026ae:	f001 f8bb 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026c4:	230b      	movs	r3, #11
 80026c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	4808      	ldr	r0, [pc, #32]	@ (80026f0 <HAL_ETH_MspInit+0x16c>)
 80026d0:	f001 f8aa 	bl	8003828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80026d4:	bf00      	nop
 80026d6:	3738      	adds	r7, #56	@ 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40028000 	.word	0x40028000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40021800 	.word	0x40021800

080026f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <HAL_TIM_Base_MspInit+0x80>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	4a1b      	ldr	r2, [pc, #108]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6413      	str	r3, [r2, #64]	@ 0x40
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800271e:	e022      	b.n	8002766 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a15      	ldr	r2, [pc, #84]	@ (800277c <HAL_TIM_Base_MspInit+0x88>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10c      	bne.n	8002744 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6413      	str	r3, [r2, #64]	@ 0x40
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
}
 8002742:	e010      	b.n	8002766 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM12)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <HAL_TIM_Base_MspInit+0x8c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10b      	bne.n	8002766 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_TIM_Base_MspInit+0x84>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40000400 	.word	0x40000400
 8002778:	40023800 	.word	0x40023800
 800277c:	40000800 	.word	0x40000800
 8002780:	40001800 	.word	0x40001800

08002784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a33      	ldr	r2, [pc, #204]	@ (8002870 <HAL_TIM_MspPostInit+0xec>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11c      	bne.n	80027e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b30      	ldr	r3, [pc, #192]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ce:	2302      	movs	r3, #2
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4827      	ldr	r0, [pc, #156]	@ (8002878 <HAL_TIM_MspPostInit+0xf4>)
 80027da:	f001 f825 	bl	8003828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80027de:	e043      	b.n	8002868 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a25      	ldr	r2, [pc, #148]	@ (800287c <HAL_TIM_MspPostInit+0xf8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d11c      	bne.n	8002824 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a21      	ldr	r2, [pc, #132]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002812:	2302      	movs	r3, #2
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4816      	ldr	r0, [pc, #88]	@ (8002878 <HAL_TIM_MspPostInit+0xf4>)
 800281e:	f001 f803 	bl	8003828 <HAL_GPIO_Init>
}
 8002822:	e021      	b.n	8002868 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <HAL_TIM_MspPostInit+0xfc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d11c      	bne.n	8002868 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_TIM_MspPostInit+0xf0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002846:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002858:	2309      	movs	r3, #9
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <HAL_TIM_MspPostInit+0xf4>)
 8002864:	f000 ffe0 	bl	8003828 <HAL_GPIO_Init>
}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40000400 	.word	0x40000400
 8002874:	40023800 	.word	0x40023800
 8002878:	40020400 	.word	0x40020400
 800287c:	40000800 	.word	0x40000800
 8002880:	40001800 	.word	0x40001800

08002884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b0ae      	sub	sp, #184	@ 0xb8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2290      	movs	r2, #144	@ 0x90
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f00d f81f 	bl	800f8e8 <memset>
  if(huart->Instance==USART3)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <HAL_UART_MspInit+0xb4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d13c      	bne.n	800292e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028ba:	2300      	movs	r3, #0
 80028bc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 f994 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028ce:	f7ff fe0b 	bl	80024e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_UART_MspInit+0xb8>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	4a19      	ldr	r2, [pc, #100]	@ (800293c <HAL_UART_MspInit+0xb8>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_UART_MspInit+0xb8>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <HAL_UART_MspInit+0xb8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a13      	ldr	r2, [pc, #76]	@ (800293c <HAL_UART_MspInit+0xb8>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_UART_MspInit+0xb8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002902:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800291c:	2307      	movs	r3, #7
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002922:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	@ (8002940 <HAL_UART_MspInit+0xbc>)
 800292a:	f000 ff7d 	bl	8003828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	37b8      	adds	r7, #184	@ 0xb8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40004800 	.word	0x40004800
 800293c:	40023800 	.word	0x40023800
 8002940:	40020c00 	.word	0x40020c00

08002944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	@ 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002954:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_InitTick+0xe0>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <HAL_InitTick+0xe0>)
 800295a:	f043 0310 	orr.w	r3, r3, #16
 800295e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002960:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <HAL_InitTick+0xe0>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800296c:	f107 0210 	add.w	r2, r7, #16
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f003 f908 	bl	8005b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002986:	f003 f8d9 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 800298a:	6378      	str	r0, [r7, #52]	@ 0x34
 800298c:	e004      	b.n	8002998 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800298e:	f003 f8d5 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 8002992:	4603      	mov	r3, r0
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	4a23      	ldr	r2, [pc, #140]	@ (8002a28 <HAL_InitTick+0xe4>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	3b01      	subs	r3, #1
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <HAL_InitTick+0xec>)
 80029aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029ac:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029b4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80029cc:	4817      	ldr	r0, [pc, #92]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029ce:	f003 fd37 	bl	8006440 <HAL_TIM_Base_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80029d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d11b      	bne.n	8002a18 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80029e0:	4812      	ldr	r0, [pc, #72]	@ (8002a2c <HAL_InitTick+0xe8>)
 80029e2:	f003 fd85 	bl	80064f0 <HAL_TIM_Base_Start_IT>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80029ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029f4:	2036      	movs	r0, #54	@ 0x36
 80029f6:	f000 f9e5 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d808      	bhi.n	8002a12 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	2036      	movs	r0, #54	@ 0x36
 8002a06:	f000 f9c1 	bl	8002d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <HAL_InitTick+0xf0>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e002      	b.n	8002a18 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3738      	adds	r7, #56	@ 0x38
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	20000fd4 	.word	0x20000fd4
 8002a30:	40001000 	.word	0x40001000
 8002a34:	20000004 	.word	0x20000004

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <NMI_Handler+0x4>

08002a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <HardFault_Handler+0x4>

08002a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <MemManage_Handler+0x4>

08002a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <BusFault_Handler+0x4>

08002a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <UsageFault_Handler+0x4>

08002a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <TIM6_DAC_IRQHandler+0x10>)
 8002a76:	f003 ff0f 	bl	8006898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000fd4 	.word	0x20000fd4

08002a84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <OTG_FS_IRQHandler+0x10>)
 8002a8a:	f001 f9d8 	bl	8003e3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20006ee8 	.word	0x20006ee8

08002a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa0:	4a14      	ldr	r2, [pc, #80]	@ (8002af4 <_sbrk+0x5c>)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <_sbrk+0x60>)
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <_sbrk+0x64>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <_sbrk+0x68>)
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac8:	f00c ff7c 	bl	800f9c4 <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e009      	b.n	8002aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	@ (8002afc <_sbrk+0x64>)
 8002ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20080000 	.word	0x20080000
 8002af8:	00000400 	.word	0x00000400
 8002afc:	20001020 	.word	0x20001020
 8002b00:	20007538 	.word	0x20007538

08002b04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <SystemInit+0x20>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0e:	4a05      	ldr	r2, [pc, #20]	@ (8002b24 <SystemInit+0x20>)
 8002b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b2c:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b2e:	490e      	ldr	r1, [pc, #56]	@ (8002b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b30:	4a0e      	ldr	r2, [pc, #56]	@ (8002b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b34:	e002      	b.n	8002b3c <LoopCopyDataInit>

08002b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3a:	3304      	adds	r3, #4

08002b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b40:	d3f9      	bcc.n	8002b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b42:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b44:	4c0b      	ldr	r4, [pc, #44]	@ (8002b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b48:	e001      	b.n	8002b4e <LoopFillZerobss>

08002b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b4c:	3204      	adds	r2, #4

08002b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b50:	d3fb      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b52:	f7ff ffd7 	bl	8002b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b56:	f00c ff3b 	bl	800f9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5a:	f7ff f885 	bl	8001c68 <main>
  bx  lr    
 8002b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002b6c:	08010490 	.word	0x08010490
  ldr r2, =_sbss
 8002b70:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8002b74:	20007538 	.word	0x20007538

08002b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC_IRQHandler>

08002b7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7e:	2003      	movs	r0, #3
 8002b80:	f000 f8f9 	bl	8002d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b84:	200f      	movs	r0, #15
 8002b86:	f7ff fedd 	bl	8002944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8a:	f7ff fcb3 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	20001024 	.word	0x20001024

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20001024 	.word	0x20001024

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000008 	.word	0x20000008

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <__NVIC_SetPriorityGrouping+0x40>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <__NVIC_SetPriorityGrouping+0x40>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	05fa0000 	.word	0x05fa0000

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	@ (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	@ (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ff4c 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9e:	f7ff ff61 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	6978      	ldr	r0, [r7, #20]
 8002daa:	f7ff ffb1 	bl	8002d10 <NVIC_EncodePriority>
 8002dae:	4602      	mov	r2, r0
 8002db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff80 	bl	8002cbc <__NVIC_SetPriority>
}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff54 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e054      	b.n	8002e9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7f5b      	ldrb	r3, [r3, #29]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fb9e 	bl	8002544 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	791b      	ldrb	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10c      	bne.n	8002e30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_CRC_Init+0xc4>)
 8002e1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0218 	bic.w	r2, r2, #24
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	e00c      	b.n	8002e4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6899      	ldr	r1, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f948 	bl	80030d0 <HAL_CRCEx_Polynomial_Set>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e028      	b.n	8002e9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	795b      	ldrb	r3, [r3, #5]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	e004      	b.n	8002e68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6912      	ldr	r2, [r2, #16]
 8002e66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	04c11db7 	.word	0x04c11db7

08002ea8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d006      	beq.n	8002ee4 <HAL_CRC_Calculate+0x3c>
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d829      	bhi.n	8002f2e <HAL_CRC_Calculate+0x86>
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d019      	beq.n	8002f12 <HAL_CRC_Calculate+0x6a>
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d01e      	beq.n	8002f20 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002ee2:	e024      	b.n	8002f2e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e00a      	b.n	8002f00 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	441a      	add	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3f0      	bcc.n	8002eea <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
      break;
 8002f10:	e00e      	b.n	8002f30 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f812 	bl	8002f40 <CRC_Handle_8>
 8002f1c:	6138      	str	r0, [r7, #16]
      break;
 8002f1e:	e007      	b.n	8002f30 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f899 	bl	800305c <CRC_Handle_16>
 8002f2a:	6138      	str	r0, [r7, #16]
      break;
 8002f2c:	e000      	b.n	8002f30 <HAL_CRC_Calculate+0x88>
      break;
 8002f2e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002f36:	693b      	ldr	r3, [r7, #16]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e023      	b.n	8002f9a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	3301      	adds	r3, #1
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	440b      	add	r3, r1
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002f6c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	440b      	add	r3, r1
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002f7c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3303      	adds	r3, #3
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	440b      	add	r3, r1
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002f90:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3d6      	bcc.n	8002f52 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04d      	beq.n	800304a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d116      	bne.n	8003000 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	440b      	add	r3, r1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b21b      	sxth	r3, r3
 8002ff2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	8b7a      	ldrh	r2, [r7, #26]
 8002ffe:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b03      	cmp	r3, #3
 8003008:	d11f      	bne.n	800304a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	b21a      	sxth	r2, r3
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3301      	adds	r3, #1
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	440b      	add	r3, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b21b      	sxth	r3, r3
 8003026:	4313      	orrs	r3, r2
 8003028:	b21b      	sxth	r3, r3
 800302a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	8b7a      	ldrh	r2, [r7, #26]
 8003036:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3724      	adds	r7, #36	@ 0x24
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e013      	b.n	8003096 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4413      	add	r3, r2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	041a      	lsls	r2, r3, #16
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	440b      	add	r3, r1
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3301      	adds	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	429a      	cmp	r2, r3
 800309e:	d3e6      	bcc.n	800306e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	881a      	ldrh	r2, [r3, #0]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80030e0:	231f      	movs	r3, #31
 80030e2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80030e4:	bf00      	nop
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	613a      	str	r2, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <HAL_CRCEx_Polynomial_Set+0x34>
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b18      	cmp	r3, #24
 8003108:	d846      	bhi.n	8003198 <HAL_CRCEx_Polynomial_Set+0xc8>
 800310a:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <HAL_CRCEx_Polynomial_Set+0x40>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	0800319f 	.word	0x0800319f
 8003114:	08003199 	.word	0x08003199
 8003118:	08003199 	.word	0x08003199
 800311c:	08003199 	.word	0x08003199
 8003120:	08003199 	.word	0x08003199
 8003124:	08003199 	.word	0x08003199
 8003128:	08003199 	.word	0x08003199
 800312c:	08003199 	.word	0x08003199
 8003130:	0800318d 	.word	0x0800318d
 8003134:	08003199 	.word	0x08003199
 8003138:	08003199 	.word	0x08003199
 800313c:	08003199 	.word	0x08003199
 8003140:	08003199 	.word	0x08003199
 8003144:	08003199 	.word	0x08003199
 8003148:	08003199 	.word	0x08003199
 800314c:	08003199 	.word	0x08003199
 8003150:	08003181 	.word	0x08003181
 8003154:	08003199 	.word	0x08003199
 8003158:	08003199 	.word	0x08003199
 800315c:	08003199 	.word	0x08003199
 8003160:	08003199 	.word	0x08003199
 8003164:	08003199 	.word	0x08003199
 8003168:	08003199 	.word	0x08003199
 800316c:	08003199 	.word	0x08003199
 8003170:	08003175 	.word	0x08003175
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d913      	bls.n	80031a2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800317e:	e010      	b.n	80031a2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b07      	cmp	r3, #7
 8003184:	d90f      	bls.n	80031a6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800318a:	e00c      	b.n	80031a6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d90b      	bls.n	80031aa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003196:	e008      	b.n	80031aa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
      break;
 800319c:	e006      	b.n	80031ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800319e:	bf00      	nop
 80031a0:	e004      	b.n	80031ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80031a2:	bf00      	nop
 80031a4:	e002      	b.n	80031ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80031aa:	bf00      	nop
  }
  if (status == HAL_OK)
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 0118 	bic.w	r1, r3, #24
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06a      	b.n	80032c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2223      	movs	r2, #35	@ 0x23
 80031fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff f9bf 	bl	8002584 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <HAL_ETH_Init+0xf0>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	4a30      	ldr	r2, [pc, #192]	@ (80032cc <HAL_ETH_Init+0xf0>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003210:	6453      	str	r3, [r2, #68]	@ 0x44
 8003212:	4b2e      	ldr	r3, [pc, #184]	@ (80032cc <HAL_ETH_Init+0xf0>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800321e:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <HAL_ETH_Init+0xf4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a2b      	ldr	r2, [pc, #172]	@ (80032d0 <HAL_ETH_Init+0xf4>)
 8003224:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003228:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800322a:	4b29      	ldr	r3, [pc, #164]	@ (80032d0 <HAL_ETH_Init+0xf4>)
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4927      	ldr	r1, [pc, #156]	@ (80032d0 <HAL_ETH_Init+0xf4>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_ETH_Init+0xf4>)
 800323a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003252:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003254:	f7ff fcb2 	bl	8002bbc <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800325a:	e011      	b.n	8003280 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800325c:	f7ff fcae 	bl	8002bbc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800326a:	d909      	bls.n	8003280 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2204      	movs	r2, #4
 8003270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	22e0      	movs	r2, #224	@ 0xe0
 8003278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e021      	b.n	80032c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e4      	bne.n	800325c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f958 	bl	8003548 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f9ff 	bl	800369c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa55 	bl	800374e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f9bd 	bl	800362c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2210      	movs	r2, #16
 80032be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40013800 	.word	0x40013800

080032d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4b51      	ldr	r3, [pc, #324]	@ (8003430 <ETH_SetMACConfig+0x15c>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	7c1b      	ldrb	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <ETH_SetMACConfig+0x28>
 80032f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032fa:	e000      	b.n	80032fe <ETH_SetMACConfig+0x2a>
 80032fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	7c5b      	ldrb	r3, [r3, #17]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <ETH_SetMACConfig+0x38>
 8003306:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800330a:	e000      	b.n	800330e <ETH_SetMACConfig+0x3a>
 800330c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800330e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003314:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	7fdb      	ldrb	r3, [r3, #31]
 800331a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800331c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	7f92      	ldrb	r2, [r2, #30]
 8003328:	2a00      	cmp	r2, #0
 800332a:	d102      	bne.n	8003332 <ETH_SetMACConfig+0x5e>
 800332c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003330:	e000      	b.n	8003334 <ETH_SetMACConfig+0x60>
 8003332:	2200      	movs	r2, #0
                        macconf->Speed |
 8003334:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	7f1b      	ldrb	r3, [r3, #28]
 800333a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800333c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003342:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800334a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003352:	2a00      	cmp	r2, #0
 8003354:	d102      	bne.n	800335c <ETH_SetMACConfig+0x88>
 8003356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800335a:	e000      	b.n	800335e <ETH_SetMACConfig+0x8a>
 800335c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800335e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	7bdb      	ldrb	r3, [r3, #15]
 8003364:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003366:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800336c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003374:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003376:	4313      	orrs	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800338e:	2001      	movs	r0, #1
 8003390:	f7ff fc20 	bl	8002bd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80033aa:	4013      	ands	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	d101      	bne.n	80033c2 <ETH_SetMACConfig+0xee>
 80033be:	2280      	movs	r2, #128	@ 0x80
 80033c0:	e000      	b.n	80033c4 <ETH_SetMACConfig+0xf0>
 80033c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80033d2:	2a01      	cmp	r2, #1
 80033d4:	d101      	bne.n	80033da <ETH_SetMACConfig+0x106>
 80033d6:	2208      	movs	r2, #8
 80033d8:	e000      	b.n	80033dc <ETH_SetMACConfig+0x108>
 80033da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80033e4:	2a01      	cmp	r2, #1
 80033e6:	d101      	bne.n	80033ec <ETH_SetMACConfig+0x118>
 80033e8:	2204      	movs	r2, #4
 80033ea:	e000      	b.n	80033ee <ETH_SetMACConfig+0x11a>
 80033ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80033f6:	2a01      	cmp	r2, #1
 80033f8:	d101      	bne.n	80033fe <ETH_SetMACConfig+0x12a>
 80033fa:	2202      	movs	r2, #2
 80033fc:	e000      	b.n	8003400 <ETH_SetMACConfig+0x12c>
 80033fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003400:	4313      	orrs	r3, r2
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003418:	2001      	movs	r0, #1
 800341a:	f7ff fbdb 	bl	8002bd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	ff20810f 	.word	0xff20810f

08003434 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <ETH_SetDMAConfig+0x110>)
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	7b1b      	ldrb	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <ETH_SetDMAConfig+0x2c>
 800345a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800345e:	e000      	b.n	8003462 <ETH_SetDMAConfig+0x2e>
 8003460:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	7b5b      	ldrb	r3, [r3, #13]
 8003466:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003468:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	7f52      	ldrb	r2, [r2, #29]
 800346e:	2a00      	cmp	r2, #0
 8003470:	d102      	bne.n	8003478 <ETH_SetDMAConfig+0x44>
 8003472:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003476:	e000      	b.n	800347a <ETH_SetDMAConfig+0x46>
 8003478:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800347a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	7b9b      	ldrb	r3, [r3, #14]
 8003480:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003482:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003488:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	7f1b      	ldrb	r3, [r3, #28]
 800348e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003490:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	7f9b      	ldrb	r3, [r3, #30]
 8003496:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003498:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800349e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034a8:	4313      	orrs	r3, r2
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b8:	461a      	mov	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fb82 	bl	8002bd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d8:	461a      	mov	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	791b      	ldrb	r3, [r3, #4]
 80034e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003506:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800350c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003516:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800351a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003528:	2001      	movs	r0, #1
 800352a:	f7ff fb53 	bl	8002bd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	f8de3f23 	.word	0xf8de3f23

08003548 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0a6      	sub	sp, #152	@ 0x98
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800355c:	2300      	movs	r3, #0
 800355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003584:	2300      	movs	r3, #0
 8003586:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800358e:	2300      	movs	r3, #0
 8003590:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80035b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fe86 	bl	80032d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035fc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003602:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003604:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003608:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003610:	2300      	movs	r3, #0
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff08 	bl	8003434 <ETH_SetDMAConfig>
}
 8003624:	bf00      	nop
 8003626:	3798      	adds	r7, #152	@ 0x98
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3305      	adds	r3, #5
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	3204      	adds	r2, #4
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <ETH_MACAddressConfig+0x68>)
 800364e:	4413      	add	r3, r2
 8003650:	461a      	mov	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3303      	adds	r3, #3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	061a      	lsls	r2, r3, #24
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3302      	adds	r3, #2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3301      	adds	r3, #1
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4313      	orrs	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <ETH_MACAddressConfig+0x6c>)
 800367e:	4413      	add	r3, r2
 8003680:	461a      	mov	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	6013      	str	r3, [r2, #0]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40028040 	.word	0x40028040
 8003698:	40028044 	.word	0x40028044

0800369c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e03e      	b.n	8003728 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68d9      	ldr	r1, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	3206      	adds	r2, #6
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d80c      	bhi.n	800370c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68d9      	ldr	r1, [r3, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	440b      	add	r3, r1
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e004      	b.n	8003716 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d9bd      	bls.n	80036aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003740:	611a      	str	r2, [r3, #16]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e046      	b.n	80037ea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6919      	ldr	r1, [r3, #16]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003798:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80037a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	3212      	adds	r2, #18
 80037b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d80c      	bhi.n	80037da <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6919      	ldr	r1, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e004      	b.n	80037e4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	461a      	mov	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d9b5      	bls.n	800375c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e175      	b.n	8003b34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8164 	bne.w	8003b2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x56>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80be 	beq.w	8003b2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	4b66      	ldr	r3, [pc, #408]	@ (8003b4c <HAL_GPIO_Init+0x324>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	4a65      	ldr	r2, [pc, #404]	@ (8003b4c <HAL_GPIO_Init+0x324>)
 80039b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039be:	4b63      	ldr	r3, [pc, #396]	@ (8003b4c <HAL_GPIO_Init+0x324>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039ca:	4a61      	ldr	r2, [pc, #388]	@ (8003b50 <HAL_GPIO_Init+0x328>)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a58      	ldr	r2, [pc, #352]	@ (8003b54 <HAL_GPIO_Init+0x32c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d037      	beq.n	8003a66 <HAL_GPIO_Init+0x23e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a57      	ldr	r2, [pc, #348]	@ (8003b58 <HAL_GPIO_Init+0x330>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_GPIO_Init+0x23a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a56      	ldr	r2, [pc, #344]	@ (8003b5c <HAL_GPIO_Init+0x334>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d02b      	beq.n	8003a5e <HAL_GPIO_Init+0x236>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a55      	ldr	r2, [pc, #340]	@ (8003b60 <HAL_GPIO_Init+0x338>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d025      	beq.n	8003a5a <HAL_GPIO_Init+0x232>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a54      	ldr	r2, [pc, #336]	@ (8003b64 <HAL_GPIO_Init+0x33c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01f      	beq.n	8003a56 <HAL_GPIO_Init+0x22e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a53      	ldr	r2, [pc, #332]	@ (8003b68 <HAL_GPIO_Init+0x340>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d019      	beq.n	8003a52 <HAL_GPIO_Init+0x22a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_GPIO_Init+0x344>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_GPIO_Init+0x226>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a51      	ldr	r2, [pc, #324]	@ (8003b70 <HAL_GPIO_Init+0x348>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00d      	beq.n	8003a4a <HAL_GPIO_Init+0x222>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a50      	ldr	r2, [pc, #320]	@ (8003b74 <HAL_GPIO_Init+0x34c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <HAL_GPIO_Init+0x21e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4f      	ldr	r2, [pc, #316]	@ (8003b78 <HAL_GPIO_Init+0x350>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_GPIO_Init+0x21a>
 8003a3e:	2309      	movs	r3, #9
 8003a40:	e012      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a42:	230a      	movs	r3, #10
 8003a44:	e010      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a46:	2308      	movs	r3, #8
 8003a48:	e00e      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	e00c      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a4e:	2306      	movs	r3, #6
 8003a50:	e00a      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a52:	2305      	movs	r3, #5
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x240>
 8003a66:	2300      	movs	r3, #0
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	@ (8003b50 <HAL_GPIO_Init+0x328>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b3d      	ldr	r3, [pc, #244]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aaa:	4a34      	ldr	r2, [pc, #208]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b32      	ldr	r3, [pc, #200]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad4:	4a29      	ldr	r2, [pc, #164]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ada:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afe:	4a1f      	ldr	r2, [pc, #124]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <HAL_GPIO_Init+0x354>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	f67f ae86 	bls.w	8003848 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3724      	adds	r7, #36	@ 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40021c00 	.word	0x40021c00
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40022400 	.word	0x40022400
 8003b7c:	40013c00 	.word	0x40013c00

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b90:	787b      	ldrb	r3, [r7, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b9c:	e003      	b.n	8003ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	041a      	lsls	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	619a      	str	r2, [r3, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb4:	b08f      	sub	sp, #60	@ 0x3c
 8003bb6:	af0a      	add	r7, sp, #40	@ 0x28
 8003bb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e116      	b.n	8003df2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f00b f9ae 	bl	800ef40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2203      	movs	r2, #3
 8003be8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 fb4b 	bl	800829e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	687e      	ldr	r6, [r7, #4]
 8003c10:	466d      	mov	r5, sp
 8003c12:	f106 0410 	add.w	r4, r6, #16
 8003c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c26:	1d33      	adds	r3, r6, #4
 8003c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c2a:	6838      	ldr	r0, [r7, #0]
 8003c2c:	f004 fa2c 	bl	8008088 <USB_CoreInit>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0d7      	b.n	8003df2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f004 fb39 	bl	80082c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e04a      	b.n	8003cea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	333d      	adds	r3, #61	@ 0x3d
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	333c      	adds	r3, #60	@ 0x3c
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	b298      	uxth	r0, r3
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3344      	adds	r3, #68	@ 0x44
 8003c90:	4602      	mov	r2, r0
 8003c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3340      	adds	r3, #64	@ 0x40
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3348      	adds	r3, #72	@ 0x48
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334c      	adds	r3, #76	@ 0x4c
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3354      	adds	r3, #84	@ 0x54
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d3af      	bcc.n	8003c54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	e044      	b.n	8003d84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	3301      	adds	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3b5      	bcc.n	8003cfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	687e      	ldr	r6, [r7, #4]
 8003d96:	466d      	mov	r5, sp
 8003d98:	f106 0410 	add.w	r4, r6, #16
 8003d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dac:	1d33      	adds	r3, r6, #4
 8003dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003db0:	6838      	ldr	r0, [r7, #0]
 8003db2:	f004 fad1 	bl	8008358 <USB_DevInit>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e014      	b.n	8003df2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f001 f97b 	bl	80050dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f005 fc1f 	bl	800962e <USB_DevDisconnect>

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dfa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_PCD_Start+0x16>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e012      	b.n	8003e36 <HAL_PCD_Start+0x3c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f004 fa2d 	bl	800827c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f005 fbe0 	bl	80095ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e3e:	b590      	push	{r4, r7, lr}
 8003e40:	b08d      	sub	sp, #52	@ 0x34
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f005 fc9e 	bl	8009796 <USB_GetMode>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 84b7 	bne.w	80047d0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f005 fc02 	bl	8009670 <USB_ReadInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 84ad 	beq.w	80047ce <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f005 fbef 	bl	8009670 <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d107      	bne.n	8003eac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f002 0202 	and.w	r2, r2, #2
 8003eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f005 fbdd 	bl	8009670 <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d161      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0210 	bic.w	r2, r2, #16
 8003ece:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f003 020f 	and.w	r2, r3, #15
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	3304      	adds	r3, #4
 8003eee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	0c5b      	lsrs	r3, r3, #17
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d124      	bne.n	8003f46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d035      	beq.n	8003f74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6a38      	ldr	r0, [r7, #32]
 8003f1c:	f005 fa14 	bl	8009348 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f2c:	441a      	add	r2, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3e:	441a      	add	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	621a      	str	r2, [r3, #32]
 8003f44:	e016      	b.n	8003f74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	0c5b      	lsrs	r3, r3, #17
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d110      	bne.n	8003f74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f58:	2208      	movs	r2, #8
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6a38      	ldr	r0, [r7, #32]
 8003f5e:	f005 f9f3 	bl	8009348 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	6a1a      	ldr	r2, [r3, #32]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f6e:	441a      	add	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0210 	orr.w	r2, r2, #16
 8003f82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f005 fb71 	bl	8009670 <USB_ReadInterrupts>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f98:	f040 80a7 	bne.w	80040ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f005 fb76 	bl	8009696 <USB_ReadDevAllOutEpInterrupt>
 8003faa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003fac:	e099      	b.n	80040e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 808e 	beq.w	80040d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f005 fb9a 	bl	80096fe <USB_ReadDevOutEPInterrupt>
 8003fca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fef0 	bl	8004dd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00c      	beq.n	8004014 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004006:	461a      	mov	r2, r3
 8004008:	2308      	movs	r3, #8
 800400a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800400c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 ffc6 	bl	8004fa0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402a:	461a      	mov	r2, r3
 800402c:	2310      	movs	r3, #16
 800402e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d030      	beq.n	800409c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b80      	cmp	r3, #128	@ 0x80
 8004044:	d109      	bne.n	800405a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004058:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	78db      	ldrb	r3, [r3, #3]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d108      	bne.n	800408a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f00b f88f 	bl	800f1a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	2302      	movs	r3, #2
 800409a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	2320      	movs	r3, #32
 80040b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ce:	461a      	mov	r2, r3
 80040d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	3301      	adds	r3, #1
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f af62 	bne.w	8003fae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f005 fabe 	bl	8009670 <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040fe:	f040 80db 	bne.w	80042b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f005 fadf 	bl	80096ca <USB_ReadDevAllInEpInterrupt>
 800410c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004112:	e0cd      	b.n	80042b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80c2 	beq.w	80042a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f005 fb05 	bl	800973a <USB_ReadDevInEPInterrupt>
 8004130:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d057      	beq.n	80041ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	2201      	movs	r2, #1
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800415c:	4013      	ands	r3, r2
 800415e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416c:	461a      	mov	r2, r3
 800416e:	2301      	movs	r3, #1
 8004170:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d132      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	334c      	adds	r3, #76	@ 0x4c
 800418a:	6819      	ldr	r1, [r3, #0]
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4403      	add	r3, r0
 800419a:	3348      	adds	r3, #72	@ 0x48
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4419      	add	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4403      	add	r3, r0
 80041ae:	334c      	adds	r3, #76	@ 0x4c
 80041b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d113      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x3a2>
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	3354      	adds	r3, #84	@ 0x54
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80041d8:	461a      	mov	r2, r3
 80041da:	2101      	movs	r1, #1
 80041dc:	f005 fb0e 	bl	80097fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f00a ff59 	bl	800f09e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004202:	461a      	mov	r2, r3
 8004204:	2308      	movs	r3, #8
 8004206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421e:	461a      	mov	r2, r3
 8004220:	2310      	movs	r3, #16
 8004222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423a:	461a      	mov	r2, r3
 800423c:	2340      	movs	r3, #64	@ 0x40
 800423e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d023      	beq.n	8004292 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800424a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800424c:	6a38      	ldr	r0, [r7, #32]
 800424e:	f004 f9e1 	bl	8008614 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3338      	adds	r3, #56	@ 0x38
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	78db      	ldrb	r3, [r3, #3]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d108      	bne.n	8004280 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f00a ffa6 	bl	800f1cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800428c:	461a      	mov	r2, r3
 800428e:	2302      	movs	r3, #2
 8004290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800429c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fd08 	bl	8004cb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	3301      	adds	r3, #1
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f47f af2e 	bne.w	8004114 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f005 f9d7 	bl	8009670 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042cc:	d122      	bne.n	8004314 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042f4:	2100      	movs	r1, #0
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f00b f920 	bl	800f53c <HAL_PCDEx_LPM_Callback>
 80042fc:	e002      	b.n	8004304 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f00a ff44 	bl	800f18c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f005 f9a9 	bl	8009670 <USB_ReadInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004328:	d112      	bne.n	8004350 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f00a ff00 	bl	800f140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800434e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f005 f98b 	bl	8009670 <USB_ReadInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004364:	d121      	bne.n	80043aa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004374:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800439a:	2101      	movs	r1, #1
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f00b f8cd 	bl	800f53c <HAL_PCDEx_LPM_Callback>
 80043a2:	e002      	b.n	80043aa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f00a fecb 	bl	800f140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f005 f95e 	bl	8009670 <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	f040 80b7 	bne.w	8004530 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2110      	movs	r1, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 f919 	bl	8008614 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e6:	e046      	b.n	8004476 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800441a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004428:	461a      	mov	r2, r3
 800442a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800442e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800444a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800444e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800446a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800446e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	3301      	adds	r3, #1
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447c:	429a      	cmp	r2, r3
 800447e:	d3b3      	bcc.n	80043e8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800448e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004492:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ac:	f043 030b 	orr.w	r3, r3, #11
 80044b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044c2:	f043 030b 	orr.w	r3, r3, #11
 80044c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80044c8:	e015      	b.n	80044f6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d8:	4619      	mov	r1, r3
 80044da:	f242 032b 	movw	r3, #8235	@ 0x202b
 80044de:	4313      	orrs	r3, r2
 80044e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044f0:	f043 030b 	orr.w	r3, r3, #11
 80044f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004504:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004508:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800451a:	461a      	mov	r2, r3
 800451c:	f005 f96e 	bl	80097fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800452e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f005 f89b 	bl	8009670 <USB_ReadInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004544:	d124      	bne.n	8004590 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f005 f932 	bl	80097b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f004 f8da 	bl	800870e <USB_GetDevSpeed>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681c      	ldr	r4, [r3, #0]
 8004566:	f001 fadd 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 800456a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	4620      	mov	r0, r4
 8004576:	f003 fddf 	bl	8008138 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f00a fdb7 	bl	800f0ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800458e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f005 f86b 	bl	8009670 <USB_ReadInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d10a      	bne.n	80045ba <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f00a fd94 	bl	800f0d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f002 0208 	and.w	r2, r2, #8
 80045b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f005 f856 	bl	8009670 <USB_ReadInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d122      	bne.n	8004614 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045da:	2301      	movs	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045de:	e014      	b.n	800460a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fb27 	bl	8004c52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	3301      	adds	r3, #1
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004610:	429a      	cmp	r2, r3
 8004612:	d3e5      	bcc.n	80045e0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f005 f829 	bl	8009670 <USB_ReadInterrupts>
 800461e:	4603      	mov	r3, r0
 8004620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004628:	d13b      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800462a:	2301      	movs	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
 800462e:	e02b      	b.n	8004688 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3340      	adds	r3, #64	@ 0x40
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d115      	bne.n	8004682 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004656:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	da12      	bge.n	8004682 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	333f      	adds	r3, #63	@ 0x3f
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004678:	b2db      	uxtb	r3, r3
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fae8 	bl	8004c52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	3301      	adds	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468e:	429a      	cmp	r2, r3
 8004690:	d3ce      	bcc.n	8004630 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80046a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 ffe2 	bl	8009670 <USB_ReadInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b6:	d155      	bne.n	8004764 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b8:	2301      	movs	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80046bc:	e045      	b.n	800474a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d12e      	bne.n	8004744 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da2b      	bge.n	8004744 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80046f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d121      	bne.n	8004744 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800473c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004740:	6053      	str	r3, [r2, #4]
            break;
 8004742:	e007      	b.n	8004754 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	3301      	adds	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004750:	429a      	cmp	r2, r3
 8004752:	d3b4      	bcc.n	80046be <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f004 ff81 	bl	8009670 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d10a      	bne.n	8004790 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f00a fd38 	bl	800f1f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800478e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f004 ff6b 	bl	8009670 <USB_ReadInterrupts>
 800479a:	4603      	mov	r3, r0
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d115      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f00a fd28 	bl	800f20c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	e000      	b.n	80047d0 <HAL_PCD_IRQHandler+0x992>
      return;
 80047ce:	bf00      	nop
    }
  }
}
 80047d0:	3734      	adds	r7, #52	@ 0x34
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}

080047d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_SetAddress+0x1a>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e013      	b.n	8004818 <HAL_PCD_SetAddress+0x42>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f004 fec9 	bl	80095a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	70fb      	strb	r3, [r7, #3]
 8004832:	460b      	mov	r3, r1
 8004834:	803b      	strh	r3, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800483e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004842:	2b00      	cmp	r3, #0
 8004844:	da0f      	bge.n	8004866 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	3338      	adds	r3, #56	@ 0x38
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	705a      	strb	r2, [r3, #1]
 8004864:	e00f      	b.n	8004886 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	3304      	adds	r3, #4
 800487e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004892:	883a      	ldrh	r2, [r7, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	78ba      	ldrb	r2, [r7, #2]
 800489c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048b0:	78bb      	ldrb	r3, [r7, #2]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d102      	bne.n	80048bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_PCD_EP_Open+0xaa>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e00e      	b.n	80048e8 <HAL_PCD_EP_Open+0xc8>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	4618      	mov	r0, r3
 80048da:	f003 ff3d 	bl	8008758 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80048e6:	7afb      	ldrb	r3, [r7, #11]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004900:	2b00      	cmp	r3, #0
 8004902:	da0f      	bge.n	8004924 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 020f 	and.w	r2, r3, #15
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	3338      	adds	r3, #56	@ 0x38
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4413      	add	r3, r2
 8004918:	3304      	adds	r3, #4
 800491a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	705a      	strb	r2, [r3, #1]
 8004922:	e00f      	b.n	8004944 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_PCD_EP_Close+0x6e>
 800495a:	2302      	movs	r3, #2
 800495c:	e00e      	b.n	800497c <HAL_PCD_EP_Close+0x8c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	4618      	mov	r0, r3
 800496e:	f003 ff7b 	bl	8008868 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	460b      	mov	r3, r1
 8004992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004994:	7afb      	ldrb	r3, [r7, #11]
 8004996:	f003 020f 	and.w	r2, r3, #15
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	3304      	adds	r3, #4
 80049ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d102      	bne.n	80049e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049e0:	7afb      	ldrb	r3, [r7, #11]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	6979      	ldr	r1, [r7, #20]
 80049f8:	f004 fa62 	bl	8008ec0 <USB_EP0StartXfer>
 80049fc:	e008      	b.n	8004a10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6979      	ldr	r1, [r7, #20]
 8004a0c:	f004 f808 	bl	8008a20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8004a3c:	681b      	ldr	r3, [r3, #0]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	460b      	mov	r3, r1
 8004a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3338      	adds	r3, #56	@ 0x38
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2200      	movs	r2, #0
 8004a82:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2201      	movs	r2, #1
 8004a88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d102      	bne.n	8004aa4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	f004 fa00 	bl	8008ec0 <USB_EP0StartXfer>
 8004ac0:	e008      	b.n	8004ad4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	f003 ffa6 	bl	8008a20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d901      	bls.n	8004afc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e050      	b.n	8004b9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da0f      	bge.n	8004b24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	3338      	adds	r3, #56	@ 0x38
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	705a      	strb	r2, [r3, #1]
 8004b22:	e00d      	b.n	8004b40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b24:	78fa      	ldrb	r2, [r7, #3]
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_PCD_EP_SetStall+0x82>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e01e      	b.n	8004b9e <HAL_PCD_EP_SetStall+0xc0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 fc42 	bl	80093f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	b2d9      	uxtb	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f004 fe34 	bl	80097fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d901      	bls.n	8004bc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e042      	b.n	8004c4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	da0f      	bge.n	8004bec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	3338      	adds	r3, #56	@ 0x38
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4413      	add	r3, r2
 8004be0:	3304      	adds	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	705a      	strb	r2, [r3, #1]
 8004bea:	e00f      	b.n	8004c0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	f003 020f 	and.w	r2, r3, #15
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_PCD_EP_ClrStall+0x86>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e00e      	b.n	8004c4a <HAL_PCD_EP_ClrStall+0xa4>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68f9      	ldr	r1, [r7, #12]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f004 fc4a 	bl	80094d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da0c      	bge.n	8004c80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3338      	adds	r3, #56	@ 0x38
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e00c      	b.n	8004c9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	3304      	adds	r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f004 fa69 	bl	8009178 <USB_EPStopXfer>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004caa:	7afb      	ldrb	r3, [r7, #11]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	@ 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	3338      	adds	r3, #56	@ 0x38
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3304      	adds	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d901      	bls.n	8004cec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e06c      	b.n	8004dc6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d902      	bls.n	8004d08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3303      	adds	r3, #3
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d10:	e02b      	b.n	8004d6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d902      	bls.n	8004d2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3303      	adds	r3, #3
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6919      	ldr	r1, [r3, #16]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	6978      	ldr	r0, [r7, #20]
 8004d4e:	f004 fabd 	bl	80092cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	441a      	add	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1a      	ldr	r2, [r3, #32]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d809      	bhi.n	8004d94 <PCD_WriteEmptyTxFifo+0xe0>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d203      	bcs.n	8004d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1be      	bne.n	8004d12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d811      	bhi.n	8004dc4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	2201      	movs	r2, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	6939      	ldr	r1, [r7, #16]
 8004dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	333c      	adds	r3, #60	@ 0x3c
 8004de8:	3304      	adds	r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d17b      	bne.n	8004efe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4a61      	ldr	r2, [pc, #388]	@ (8004f98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f240 80b9 	bls.w	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80b3 	beq.w	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e32:	461a      	mov	r2, r3
 8004e34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e38:	6093      	str	r3, [r2, #8]
 8004e3a:	e0a7      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e52:	461a      	mov	r2, r3
 8004e54:	2320      	movs	r3, #32
 8004e56:	6093      	str	r3, [r2, #8]
 8004e58:	e098      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f040 8093 	bne.w	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4a4b      	ldr	r2, [pc, #300]	@ (8004f98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d90f      	bls.n	8004e8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e8a:	6093      	str	r3, [r2, #8]
 8004e8c:	e07e      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	0159      	lsls	r1, r3, #5
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	440b      	add	r3, r1
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d114      	bne.n	8004ef0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2101      	movs	r1, #1
 8004edc:	f004 fc8e 	bl	80097fc <USB_EP0_OutStart>
 8004ee0:	e006      	b.n	8004ef0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f00a f8b6 	bl	800f068 <HAL_PCD_DataOutStageCallback>
 8004efc:	e046      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4a26      	ldr	r2, [pc, #152]	@ (8004f9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d124      	bne.n	8004f50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	6093      	str	r3, [r2, #8]
 8004f24:	e032      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2320      	movs	r3, #32
 8004f40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f00a f88d 	bl	800f068 <HAL_PCD_DataOutStageCallback>
 8004f4e:	e01d      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d114      	bne.n	8004f80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	f004 fc3e 	bl	80097fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f00a f86e 	bl	800f068 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	4f54300a 	.word	0x4f54300a
 8004f9c:	4f54310a 	.word	0x4f54310a

08004fa0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	333c      	adds	r3, #60	@ 0x3c
 8004fb8:	3304      	adds	r3, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <PCD_EP_OutSetupPacket_int+0x88>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d90e      	bls.n	8004ff4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f00a f825 	bl	800f044 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8005028 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d90c      	bls.n	800501c <PCD_EP_OutSetupPacket_int+0x7c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d108      	bne.n	800501c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005014:	461a      	mov	r2, r3
 8005016:	2101      	movs	r1, #1
 8005018:	f004 fbf0 	bl	80097fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	4f54300a 	.word	0x4f54300a

0800502c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
 8005038:	4613      	mov	r3, r2
 800503a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800504a:	883b      	ldrh	r3, [r7, #0]
 800504c:	0419      	lsls	r1, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	430a      	orrs	r2, r1
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28
 8005058:	e028      	b.n	80050ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e00d      	b.n	800508a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	3340      	adds	r3, #64	@ 0x40
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	3301      	adds	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	3b01      	subs	r3, #1
 8005090:	429a      	cmp	r2, r3
 8005092:	d3ec      	bcc.n	800506e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005094:	883b      	ldrh	r3, [r7, #0]
 8005096:	0418      	lsls	r0, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	3b01      	subs	r3, #1
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	4302      	orrs	r2, r0
 80050a4:	3340      	adds	r3, #64	@ 0x40
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_PCDEx_ActivateLPM+0x44>)
 800510c:	4313      	orrs	r3, r2
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	10000003 	.word	0x10000003

08005124 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005128:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a04      	ldr	r2, [pc, #16]	@ (8005140 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800512e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40007000 	.word	0x40007000

08005144 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800514e:	4b23      	ldr	r3, [pc, #140]	@ (80051dc <HAL_PWREx_EnableOverDrive+0x98>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	4a22      	ldr	r2, [pc, #136]	@ (80051dc <HAL_PWREx_EnableOverDrive+0x98>)
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005158:	6413      	str	r3, [r2, #64]	@ 0x40
 800515a:	4b20      	ldr	r3, [pc, #128]	@ (80051dc <HAL_PWREx_EnableOverDrive+0x98>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005166:	4b1e      	ldr	r3, [pc, #120]	@ (80051e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1d      	ldr	r2, [pc, #116]	@ (80051e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005170:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005172:	f7fd fd23 	bl	8002bbc <HAL_GetTick>
 8005176:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005178:	e009      	b.n	800518e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800517a:	f7fd fd1f 	bl	8002bbc <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005188:	d901      	bls.n	800518e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e022      	b.n	80051d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800518e:	4b14      	ldr	r3, [pc, #80]	@ (80051e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519a:	d1ee      	bne.n	800517a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800519c:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0f      	ldr	r2, [pc, #60]	@ (80051e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a8:	f7fd fd08 	bl	8002bbc <HAL_GetTick>
 80051ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051ae:	e009      	b.n	80051c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051b0:	f7fd fd04 	bl	8002bbc <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051be:	d901      	bls.n	80051c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e007      	b.n	80051d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051c4:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051d0:	d1ee      	bne.n	80051b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40007000 	.word	0x40007000

080051e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e29b      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8087 	beq.w	8005316 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005208:	4b96      	ldr	r3, [pc, #600]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b04      	cmp	r3, #4
 8005212:	d00c      	beq.n	800522e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005214:	4b93      	ldr	r3, [pc, #588]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b08      	cmp	r3, #8
 800521e:	d112      	bne.n	8005246 <HAL_RCC_OscConfig+0x62>
 8005220:	4b90      	ldr	r3, [pc, #576]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800522c:	d10b      	bne.n	8005246 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522e:	4b8d      	ldr	r3, [pc, #564]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d06c      	beq.n	8005314 <HAL_RCC_OscConfig+0x130>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d168      	bne.n	8005314 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e275      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524e:	d106      	bne.n	800525e <HAL_RCC_OscConfig+0x7a>
 8005250:	4b84      	ldr	r3, [pc, #528]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a83      	ldr	r2, [pc, #524]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e02e      	b.n	80052bc <HAL_RCC_OscConfig+0xd8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0x9c>
 8005266:	4b7f      	ldr	r3, [pc, #508]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a7e      	ldr	r2, [pc, #504]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800526c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b7c      	ldr	r3, [pc, #496]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7b      	ldr	r2, [pc, #492]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e01d      	b.n	80052bc <HAL_RCC_OscConfig+0xd8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0xc0>
 800528a:	4b76      	ldr	r3, [pc, #472]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a75      	ldr	r2, [pc, #468]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b73      	ldr	r3, [pc, #460]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a72      	ldr	r2, [pc, #456]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0xd8>
 80052a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a6e      	ldr	r2, [pc, #440]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80052aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80052b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d013      	beq.n	80052ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fd fc7a 	bl	8002bbc <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fd fc76 	bl	8002bbc <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	@ 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e229      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	4b61      	ldr	r3, [pc, #388]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0xe8>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd fc66 	bl	8002bbc <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f4:	f7fd fc62 	bl	8002bbc <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	@ 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e215      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005306:	4b57      	ldr	r3, [pc, #348]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x110>
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d069      	beq.n	80053f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005322:	4b50      	ldr	r3, [pc, #320]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532e:	4b4d      	ldr	r3, [pc, #308]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b08      	cmp	r3, #8
 8005338:	d11c      	bne.n	8005374 <HAL_RCC_OscConfig+0x190>
 800533a:	4b4a      	ldr	r3, [pc, #296]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d116      	bne.n	8005374 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005346:	4b47      	ldr	r3, [pc, #284]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_RCC_OscConfig+0x17a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d001      	beq.n	800535e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e1e9      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535e:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	493d      	ldr	r1, [pc, #244]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005372:	e040      	b.n	80053f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d023      	beq.n	80053c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800537c:	4b39      	ldr	r3, [pc, #228]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a38      	ldr	r2, [pc, #224]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fd fc18 	bl	8002bbc <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005390:	f7fd fc14 	bl	8002bbc <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e1c7      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a2:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4929      	ldr	r1, [pc, #164]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
 80053c2:	e018      	b.n	80053f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c4:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd fbf4 	bl	8002bbc <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fd fbf0 	bl	8002bbc <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1a3      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d038      	beq.n	8005474 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d019      	beq.n	800543e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540a:	4b16      	ldr	r3, [pc, #88]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 800540c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540e:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fd fbd1 	bl	8002bbc <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800541e:	f7fd fbcd 	bl	8002bbc <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e180      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005430:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x23a>
 800543c:	e01a      	b.n	8005474 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005442:	4a08      	ldr	r2, [pc, #32]	@ (8005464 <HAL_RCC_OscConfig+0x280>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544a:	f7fd fbb7 	bl	8002bbc <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	e00a      	b.n	8005468 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005452:	f7fd fbb3 	bl	8002bbc <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d903      	bls.n	8005468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e166      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
 8005464:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005468:	4b92      	ldr	r3, [pc, #584]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800546a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ee      	bne.n	8005452 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a4 	beq.w	80055ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005482:	4b8c      	ldr	r3, [pc, #560]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	4b89      	ldr	r3, [pc, #548]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	4a88      	ldr	r2, [pc, #544]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005498:	6413      	str	r3, [r2, #64]	@ 0x40
 800549a:	4b86      	ldr	r3, [pc, #536]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	60bb      	str	r3, [r7, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a6:	2301      	movs	r3, #1
 80054a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054aa:	4b83      	ldr	r3, [pc, #524]	@ (80056b8 <HAL_RCC_OscConfig+0x4d4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d118      	bne.n	80054e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80054b6:	4b80      	ldr	r3, [pc, #512]	@ (80056b8 <HAL_RCC_OscConfig+0x4d4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a7f      	ldr	r2, [pc, #508]	@ (80056b8 <HAL_RCC_OscConfig+0x4d4>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c2:	f7fd fb7b 	bl	8002bbc <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ca:	f7fd fb77 	bl	8002bbc <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b64      	cmp	r3, #100	@ 0x64
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e12a      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054dc:	4b76      	ldr	r3, [pc, #472]	@ (80056b8 <HAL_RCC_OscConfig+0x4d4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <HAL_RCC_OscConfig+0x31a>
 80054f0:	4b70      	ldr	r3, [pc, #448]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f4:	4a6f      	ldr	r2, [pc, #444]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80054fc:	e02d      	b.n	800555a <HAL_RCC_OscConfig+0x376>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <HAL_RCC_OscConfig+0x33c>
 8005506:	4b6b      	ldr	r3, [pc, #428]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	4a6a      	ldr	r2, [pc, #424]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6713      	str	r3, [r2, #112]	@ 0x70
 8005512:	4b68      	ldr	r3, [pc, #416]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005516:	4a67      	ldr	r2, [pc, #412]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005518:	f023 0304 	bic.w	r3, r3, #4
 800551c:	6713      	str	r3, [r2, #112]	@ 0x70
 800551e:	e01c      	b.n	800555a <HAL_RCC_OscConfig+0x376>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b05      	cmp	r3, #5
 8005526:	d10c      	bne.n	8005542 <HAL_RCC_OscConfig+0x35e>
 8005528:	4b62      	ldr	r3, [pc, #392]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	4a61      	ldr	r2, [pc, #388]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	6713      	str	r3, [r2, #112]	@ 0x70
 8005534:	4b5f      	ldr	r3, [pc, #380]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005538:	4a5e      	ldr	r2, [pc, #376]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005540:	e00b      	b.n	800555a <HAL_RCC_OscConfig+0x376>
 8005542:	4b5c      	ldr	r3, [pc, #368]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005546:	4a5b      	ldr	r2, [pc, #364]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	6713      	str	r3, [r2, #112]	@ 0x70
 800554e:	4b59      	ldr	r3, [pc, #356]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	4a58      	ldr	r2, [pc, #352]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d015      	beq.n	800558e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005562:	f7fd fb2b 	bl	8002bbc <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	e00a      	b.n	8005580 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556a:	f7fd fb27 	bl	8002bbc <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e0d8      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005580:	4b4c      	ldr	r3, [pc, #304]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0ee      	beq.n	800556a <HAL_RCC_OscConfig+0x386>
 800558c:	e014      	b.n	80055b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558e:	f7fd fb15 	bl	8002bbc <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005594:	e00a      	b.n	80055ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005596:	f7fd fb11 	bl	8002bbc <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e0c2      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ac:	4b41      	ldr	r3, [pc, #260]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ee      	bne.n	8005596 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055be:	4b3d      	ldr	r3, [pc, #244]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	4a3c      	ldr	r2, [pc, #240]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80055c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80ae 	beq.w	8005730 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d4:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d06d      	beq.n	80056bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d14b      	bne.n	8005680 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e8:	4b32      	ldr	r3, [pc, #200]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a31      	ldr	r2, [pc, #196]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80055ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd fae2 	bl	8002bbc <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fd fade 	bl	8002bbc <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e091      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560e:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3b01      	subs	r3, #1
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	071b      	lsls	r3, r3, #28
 8005646:	491b      	ldr	r1, [pc, #108]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b19      	ldr	r3, [pc, #100]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fd fab0 	bl	8002bbc <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005660:	f7fd faac 	bl	8002bbc <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e05f      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x47c>
 800567e:	e057      	b.n	8005730 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005680:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0b      	ldr	r2, [pc, #44]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 8005686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fd fa96 	bl	8002bbc <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fd fa92 	bl	8002bbc <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e045      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	4b03      	ldr	r3, [pc, #12]	@ (80056b4 <HAL_RCC_OscConfig+0x4d0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x4b0>
 80056b2:	e03d      	b.n	8005730 <HAL_RCC_OscConfig+0x54c>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80056bc:	4b1f      	ldr	r3, [pc, #124]	@ (800573c <HAL_RCC_OscConfig+0x558>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d030      	beq.n	800572c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d129      	bne.n	800572c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d122      	bne.n	800572c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d119      	bne.n	800572c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	3b01      	subs	r3, #1
 8005706:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d10f      	bne.n	800572c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d107      	bne.n	800572c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800

08005740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0d0      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005758:	4b6a      	ldr	r3, [pc, #424]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d910      	bls.n	8005788 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b67      	ldr	r3, [pc, #412]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 020f 	bic.w	r2, r3, #15
 800576e:	4965      	ldr	r1, [pc, #404]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	4313      	orrs	r3, r2
 8005774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a58      	ldr	r2, [pc, #352]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a52      	ldr	r2, [pc, #328]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d040      	beq.n	8005864 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d115      	bne.n	8005822 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d107      	bne.n	8005812 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005802:	4b41      	ldr	r3, [pc, #260]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e073      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005812:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06b      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005822:	4b39      	ldr	r3, [pc, #228]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4936      	ldr	r1, [pc, #216]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005834:	f7fd f9c2 	bl	8002bbc <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583a:	e00a      	b.n	8005852 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583c:	f7fd f9be 	bl	8002bbc <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e053      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	4b2d      	ldr	r3, [pc, #180]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 020c 	and.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	429a      	cmp	r2, r3
 8005862:	d1eb      	bne.n	800583c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005864:	4b27      	ldr	r3, [pc, #156]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d210      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005872:	4b24      	ldr	r3, [pc, #144]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 020f 	bic.w	r2, r3, #15
 800587a:	4922      	ldr	r1, [pc, #136]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058be:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490a      	ldr	r1, [pc, #40]	@ (800590c <HAL_RCC_ClockConfig+0x1cc>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	@ (8005910 <HAL_RCC_ClockConfig+0x1d0>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <HAL_RCC_ClockConfig+0x1d4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd f826 	bl	8002944 <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023c00 	.word	0x40023c00
 8005908:	40023800 	.word	0x40023800
 800590c:	08010334 	.word	0x08010334
 8005910:	20000000 	.word	0x20000000
 8005914:	20000004 	.word	0x20000004

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b094      	sub	sp, #80	@ 0x50
 800591e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	647b      	str	r3, [r7, #68]	@ 0x44
 8005924:	2300      	movs	r3, #0
 8005926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005928:	2300      	movs	r3, #0
 800592a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005930:	4b79      	ldr	r3, [pc, #484]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d00d      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x40>
 800593c:	2b08      	cmp	r3, #8
 800593e:	f200 80e1 	bhi.w	8005b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x34>
 8005946:	2b04      	cmp	r3, #4
 8005948:	d003      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x3a>
 800594a:	e0db      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b73      	ldr	r3, [pc, #460]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800594e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005950:	e0db      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005952:	4b73      	ldr	r3, [pc, #460]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005954:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005956:	e0d8      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005958:	4b6f      	ldr	r3, [pc, #444]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005960:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005962:	4b6d      	ldr	r3, [pc, #436]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596e:	4b6a      	ldr	r3, [pc, #424]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	2200      	movs	r2, #0
 8005976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005978:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
 8005986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	0159      	lsls	r1, r3, #5
 8005998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800599c:	0150      	lsls	r0, r2, #5
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4621      	mov	r1, r4
 80059a4:	1a51      	subs	r1, r2, r1
 80059a6:	6139      	str	r1, [r7, #16]
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb63 0301 	sbc.w	r3, r3, r1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059bc:	4659      	mov	r1, fp
 80059be:	018b      	lsls	r3, r1, #6
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059c6:	4651      	mov	r1, sl
 80059c8:	018a      	lsls	r2, r1, #6
 80059ca:	4651      	mov	r1, sl
 80059cc:	ebb2 0801 	subs.w	r8, r2, r1
 80059d0:	4659      	mov	r1, fp
 80059d2:	eb63 0901 	sbc.w	r9, r3, r1
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ea:	4690      	mov	r8, r2
 80059ec:	4699      	mov	r9, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	eb18 0303 	adds.w	r3, r8, r3
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	462b      	mov	r3, r5
 80059f8:	eb49 0303 	adc.w	r3, r9, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	024b      	lsls	r3, r1, #9
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a14:	4621      	mov	r1, r4
 8005a16:	024a      	lsls	r2, r1, #9
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1e:	2200      	movs	r2, #0
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a28:	f7fa fcaa 	bl	8000380 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a34:	e058      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a36:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	4611      	mov	r1, r2
 8005a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a62:	0150      	lsls	r0, r2, #5
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4641      	mov	r1, r8
 8005a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a6e:	4649      	mov	r1, r9
 8005a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a88:	ebb2 040a 	subs.w	r4, r2, sl
 8005a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	00eb      	lsls	r3, r5, #3
 8005a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9e:	00e2      	lsls	r2, r4, #3
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	464b      	mov	r3, r9
 8005aac:	eb45 0303 	adc.w	r3, r5, r3
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005abe:	4629      	mov	r1, r5
 8005ac0:	028b      	lsls	r3, r1, #10
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac8:	4621      	mov	r1, r4
 8005aca:	028a      	lsls	r2, r1, #10
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005adc:	f7fa fc50 	bl	8000380 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	0c1b      	lsrs	r3, r3, #16
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	3301      	adds	r3, #1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005af8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b02:	e002      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3750      	adds	r7, #80	@ 0x50
 8005b10:	46bd      	mov	sp, r7
 8005b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	00f42400 	.word	0x00f42400
 8005b20:	007a1200 	.word	0x007a1200

08005b24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b28:	4b03      	ldr	r3, [pc, #12]	@ (8005b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000000 	.word	0x20000000

08005b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b40:	f7ff fff0 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	0a9b      	lsrs	r3, r3, #10
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	4903      	ldr	r1, [pc, #12]	@ (8005b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b52:	5ccb      	ldrb	r3, [r1, r3]
 8005b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	08010344 	.word	0x08010344

08005b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b68:	f7ff ffdc 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	0b5b      	lsrs	r3, r3, #13
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	4903      	ldr	r1, [pc, #12]	@ (8005b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b7a:	5ccb      	ldrb	r3, [r1, r3]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40023800 	.word	0x40023800
 8005b88:	08010344 	.word	0x08010344

08005b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	220f      	movs	r2, #15
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b9c:	4b12      	ldr	r3, [pc, #72]	@ (8005be8 <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0203 	and.w	r2, r3, #3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8005be8 <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <HAL_RCC_GetClockConfig+0x5c>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005bc0:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <HAL_RCC_GetClockConfig+0x5c>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bce:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <HAL_RCC_GetClockConfig+0x60>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	601a      	str	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40023c00 	.word	0x40023c00

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d012      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c18:	4b69      	ldr	r3, [pc, #420]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a68      	ldr	r2, [pc, #416]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005c22:	6093      	str	r3, [r2, #8]
 8005c24:	4b66      	ldr	r3, [pc, #408]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2c:	4964      	ldr	r1, [pc, #400]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	4959      	ldr	r1, [pc, #356]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c68:	d101      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d017      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c86:	4b4e      	ldr	r3, [pc, #312]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	494a      	ldr	r1, [pc, #296]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ca4:	d101      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 808b 	beq.w	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	4a39      	ldr	r2, [pc, #228]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce0:	4b37      	ldr	r3, [pc, #220]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cec:	4b35      	ldr	r3, [pc, #212]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a34      	ldr	r2, [pc, #208]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf8:	f7fc ff60 	bl	8002bbc <HAL_GetTick>
 8005cfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d00:	f7fc ff5c 	bl	8002bbc <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	@ 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e38f      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d12:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d1e:	4b28      	ldr	r3, [pc, #160]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d035      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d02e      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d3c:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d46:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d52:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d56:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d5e:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d64:	4b16      	ldr	r3, [pc, #88]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d114      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fc ff24 	bl	8002bbc <HAL_GetTick>
 8005d74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fc ff20 	bl	8002bbc <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e351      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0ee      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da6:	d111      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005db4:	4b04      	ldr	r3, [pc, #16]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005db6:	400b      	ands	r3, r1
 8005db8:	4901      	ldr	r1, [pc, #4]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	0ffffcff 	.word	0x0ffffcff
 8005dcc:	4bac      	ldr	r3, [pc, #688]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	4aab      	ldr	r2, [pc, #684]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005dd6:	6093      	str	r3, [r2, #8]
 8005dd8:	4ba9      	ldr	r3, [pc, #676]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de4:	49a6      	ldr	r1, [pc, #664]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d010      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005df6:	4ba2      	ldr	r3, [pc, #648]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dfc:	4aa0      	ldr	r2, [pc, #640]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005e06:	4b9e      	ldr	r3, [pc, #632]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e08:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	499b      	ldr	r1, [pc, #620]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e24:	4b96      	ldr	r3, [pc, #600]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e32:	4993      	ldr	r1, [pc, #588]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e46:	4b8e      	ldr	r3, [pc, #568]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e54:	498a      	ldr	r1, [pc, #552]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e68:	4b85      	ldr	r3, [pc, #532]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e76:	4982      	ldr	r1, [pc, #520]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e98:	4979      	ldr	r1, [pc, #484]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eac:	4b74      	ldr	r3, [pc, #464]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb2:	f023 0203 	bic.w	r2, r3, #3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	4971      	ldr	r1, [pc, #452]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ece:	4b6c      	ldr	r3, [pc, #432]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed4:	f023 020c 	bic.w	r2, r3, #12
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005edc:	4968      	ldr	r1, [pc, #416]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ef0:	4b63      	ldr	r3, [pc, #396]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efe:	4960      	ldr	r1, [pc, #384]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f12:	4b5b      	ldr	r3, [pc, #364]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f18:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f20:	4957      	ldr	r1, [pc, #348]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f34:	4b52      	ldr	r3, [pc, #328]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f42:	494f      	ldr	r1, [pc, #316]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f56:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f64:	4946      	ldr	r1, [pc, #280]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005f78:	4b41      	ldr	r3, [pc, #260]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f86:	493e      	ldr	r1, [pc, #248]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005f9a:	4b39      	ldr	r3, [pc, #228]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa8:	4935      	ldr	r1, [pc, #212]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fbc:	4b30      	ldr	r3, [pc, #192]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fca:	492d      	ldr	r1, [pc, #180]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d011      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005fde:	4b28      	ldr	r3, [pc, #160]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fec:	4924      	ldr	r1, [pc, #144]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ffc:	d101      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800600e:	2301      	movs	r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800601e:	4b18      	ldr	r3, [pc, #96]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006024:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602c:	4914      	ldr	r1, [pc, #80]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006040:	4b0f      	ldr	r3, [pc, #60]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006046:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006050:	490b      	ldr	r1, [pc, #44]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00f      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006064:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006074:	4902      	ldr	r1, [pc, #8]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800607c:	e002      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006090:	4b8a      	ldr	r3, [pc, #552]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006096:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a0:	4986      	ldr	r1, [pc, #536]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060b4:	4b81      	ldr	r3, [pc, #516]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060c4:	497d      	ldr	r1, [pc, #500]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d006      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80d6 	beq.w	800628c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060e0:	4b76      	ldr	r3, [pc, #472]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a75      	ldr	r2, [pc, #468]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ec:	f7fc fd66 	bl	8002bbc <HAL_GetTick>
 80060f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060f4:	f7fc fd62 	bl	8002bbc <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b64      	cmp	r3, #100	@ 0x64
 8006100:	d901      	bls.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e195      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006106:	4b6d      	ldr	r3, [pc, #436]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d021      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006122:	2b00      	cmp	r3, #0
 8006124:	d11d      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006126:	4b65      	ldr	r3, [pc, #404]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006134:	4b61      	ldr	r3, [pc, #388]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800613a:	0e1b      	lsrs	r3, r3, #24
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	019a      	lsls	r2, r3, #6
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	071b      	lsls	r3, r3, #28
 800615a:	4958      	ldr	r1, [pc, #352]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02e      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800618c:	d129      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800618e:	4b4b      	ldr	r3, [pc, #300]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800619c:	4b47      	ldr	r3, [pc, #284]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a2:	0f1b      	lsrs	r3, r3, #28
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	019a      	lsls	r2, r3, #6
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	431a      	orrs	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	071b      	lsls	r3, r3, #28
 80061c2:	493e      	ldr	r1, [pc, #248]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061ca:	4b3c      	ldr	r3, [pc, #240]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061d0:	f023 021f 	bic.w	r2, r3, #31
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d8:	3b01      	subs	r3, #1
 80061da:	4938      	ldr	r1, [pc, #224]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01d      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061ee:	4b33      	ldr	r3, [pc, #204]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f4:	0e1b      	lsrs	r3, r3, #24
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061fc:	4b2f      	ldr	r3, [pc, #188]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006202:	0f1b      	lsrs	r3, r3, #28
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	019a      	lsls	r2, r3, #6
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	431a      	orrs	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	061b      	lsls	r3, r3, #24
 800621c:	431a      	orrs	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	071b      	lsls	r3, r3, #28
 8006222:	4926      	ldr	r1, [pc, #152]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d011      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	019a      	lsls	r2, r3, #6
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	061b      	lsls	r3, r3, #24
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	071b      	lsls	r3, r3, #28
 8006252:	491a      	ldr	r1, [pc, #104]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800625a:	4b18      	ldr	r3, [pc, #96]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006260:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fc fca9 	bl	8002bbc <HAL_GetTick>
 800626a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800626c:	e008      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800626e:	f7fc fca5 	bl	8002bbc <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b64      	cmp	r3, #100	@ 0x64
 800627a:	d901      	bls.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e0d8      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006280:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b01      	cmp	r3, #1
 8006290:	f040 80ce 	bne.w	8006430 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006294:	4b09      	ldr	r3, [pc, #36]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a08      	ldr	r2, [pc, #32]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800629a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800629e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a0:	f7fc fc8c 	bl	8002bbc <HAL_GetTick>
 80062a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062a6:	e00b      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062a8:	f7fc fc88 	bl	8002bbc <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	@ 0x64
 80062b4:	d904      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0bb      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062c0:	4b5e      	ldr	r3, [pc, #376]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062cc:	d0ec      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d02e      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d12a      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80062f6:	4b51      	ldr	r3, [pc, #324]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006304:	4b4d      	ldr	r3, [pc, #308]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630a:	0f1b      	lsrs	r3, r3, #28
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	019a      	lsls	r2, r3, #6
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	041b      	lsls	r3, r3, #16
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	061b      	lsls	r3, r3, #24
 8006324:	431a      	orrs	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	071b      	lsls	r3, r3, #28
 800632a:	4944      	ldr	r1, [pc, #272]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006332:	4b42      	ldr	r3, [pc, #264]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006338:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006340:	3b01      	subs	r3, #1
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	493d      	ldr	r1, [pc, #244]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d022      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800635c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006360:	d11d      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006362:	4b36      	ldr	r3, [pc, #216]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006368:	0e1b      	lsrs	r3, r3, #24
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006370:	4b32      	ldr	r3, [pc, #200]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006376:	0f1b      	lsrs	r3, r3, #28
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	019a      	lsls	r2, r3, #6
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	431a      	orrs	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	061b      	lsls	r3, r3, #24
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	071b      	lsls	r3, r3, #28
 8006396:	4929      	ldr	r1, [pc, #164]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d028      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063aa:	4b24      	ldr	r3, [pc, #144]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	0e1b      	lsrs	r3, r3, #24
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063b8:	4b20      	ldr	r3, [pc, #128]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	019a      	lsls	r2, r3, #6
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	071b      	lsls	r3, r3, #28
 80063de:	4917      	ldr	r1, [pc, #92]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063e6:	4b15      	ldr	r3, [pc, #84]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	4911      	ldr	r1, [pc, #68]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063fc:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0e      	ldr	r2, [pc, #56]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006408:	f7fc fbd8 	bl	8002bbc <HAL_GetTick>
 800640c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006410:	f7fc fbd4 	bl	8002bbc <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b64      	cmp	r3, #100	@ 0x64
 800641c:	d901      	bls.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e007      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006422:	4b06      	ldr	r3, [pc, #24]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800642a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800642e:	d1ef      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40023800 	.word	0x40023800

08006440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e049      	b.n	80064e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fc f944 	bl	80026f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f000 fd30 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e054      	b.n	80065b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a26      	ldr	r2, [pc, #152]	@ (80065c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006532:	d01d      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a22      	ldr	r2, [pc, #136]	@ (80065c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a21      	ldr	r2, [pc, #132]	@ (80065c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1f      	ldr	r2, [pc, #124]	@ (80065cc <HAL_TIM_Base_Start_IT+0xdc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x80>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d115      	bne.n	800659c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	4b19      	ldr	r3, [pc, #100]	@ (80065dc <HAL_TIM_Base_Start_IT+0xec>)
 8006578:	4013      	ands	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b06      	cmp	r3, #6
 8006580:	d015      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0xbe>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006588:	d011      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659a:	e008      	b.n	80065ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	e000      	b.n	80065b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40010400 	.word	0x40010400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40001800 	.word	0x40001800
 80065dc:	00010007 	.word	0x00010007

080065e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e049      	b.n	8006686 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f841 	bl	800668e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f000 fc60 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
	...

080066a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <HAL_TIM_PWM_Start+0x24>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e03c      	b.n	8006742 <HAL_TIM_PWM_Start+0x9e>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d109      	bne.n	80066e2 <HAL_TIM_PWM_Start+0x3e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	bf14      	ite	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	2300      	moveq	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	e02f      	b.n	8006742 <HAL_TIM_PWM_Start+0x9e>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d109      	bne.n	80066fc <HAL_TIM_PWM_Start+0x58>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	e022      	b.n	8006742 <HAL_TIM_PWM_Start+0x9e>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b0c      	cmp	r3, #12
 8006700:	d109      	bne.n	8006716 <HAL_TIM_PWM_Start+0x72>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	bf14      	ite	ne
 800670e:	2301      	movne	r3, #1
 8006710:	2300      	moveq	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	e015      	b.n	8006742 <HAL_TIM_PWM_Start+0x9e>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b10      	cmp	r3, #16
 800671a:	d109      	bne.n	8006730 <HAL_TIM_PWM_Start+0x8c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	bf14      	ite	ne
 8006728:	2301      	movne	r3, #1
 800672a:	2300      	moveq	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	e008      	b.n	8006742 <HAL_TIM_PWM_Start+0x9e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	bf14      	ite	ne
 800673c:	2301      	movne	r3, #1
 800673e:	2300      	moveq	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e092      	b.n	8006870 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_TIM_PWM_Start+0xb6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006758:	e023      	b.n	80067a2 <HAL_TIM_PWM_Start+0xfe>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d104      	bne.n	800676a <HAL_TIM_PWM_Start+0xc6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006768:	e01b      	b.n	80067a2 <HAL_TIM_PWM_Start+0xfe>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d104      	bne.n	800677a <HAL_TIM_PWM_Start+0xd6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006778:	e013      	b.n	80067a2 <HAL_TIM_PWM_Start+0xfe>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d104      	bne.n	800678a <HAL_TIM_PWM_Start+0xe6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006788:	e00b      	b.n	80067a2 <HAL_TIM_PWM_Start+0xfe>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b10      	cmp	r3, #16
 800678e:	d104      	bne.n	800679a <HAL_TIM_PWM_Start+0xf6>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006798:	e003      	b.n	80067a2 <HAL_TIM_PWM_Start+0xfe>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 ff32 	bl	8007614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a30      	ldr	r2, [pc, #192]	@ (8006878 <HAL_TIM_PWM_Start+0x1d4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_PWM_Start+0x120>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2f      	ldr	r2, [pc, #188]	@ (800687c <HAL_TIM_PWM_Start+0x1d8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_PWM_Start+0x124>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <HAL_TIM_PWM_Start+0x126>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a25      	ldr	r2, [pc, #148]	@ (8006878 <HAL_TIM_PWM_Start+0x1d4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f0:	d01d      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a22      	ldr	r2, [pc, #136]	@ (8006880 <HAL_TIM_PWM_Start+0x1dc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a20      	ldr	r2, [pc, #128]	@ (8006884 <HAL_TIM_PWM_Start+0x1e0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1f      	ldr	r2, [pc, #124]	@ (8006888 <HAL_TIM_PWM_Start+0x1e4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a19      	ldr	r2, [pc, #100]	@ (800687c <HAL_TIM_PWM_Start+0x1d8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <HAL_TIM_PWM_Start+0x1e8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_TIM_PWM_Start+0x18a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a19      	ldr	r2, [pc, #100]	@ (8006890 <HAL_TIM_PWM_Start+0x1ec>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d115      	bne.n	800685a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	4b17      	ldr	r3, [pc, #92]	@ (8006894 <HAL_TIM_PWM_Start+0x1f0>)
 8006836:	4013      	ands	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b06      	cmp	r3, #6
 800683e:	d015      	beq.n	800686c <HAL_TIM_PWM_Start+0x1c8>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006846:	d011      	beq.n	800686c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006858:	e008      	b.n	800686c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e000      	b.n	800686e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40010000 	.word	0x40010000
 800687c:	40010400 	.word	0x40010400
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00
 800688c:	40014000 	.word	0x40014000
 8006890:	40001800 	.word	0x40001800
 8006894:	00010007 	.word	0x00010007

08006898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d122      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d11b      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0202 	mvn.w	r2, #2
 80068c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fae4 	bl	8006ea8 <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fad6 	bl	8006e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fae7 	bl	8006ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d122      	bne.n	8006948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b04      	cmp	r3, #4
 800690e:	d11b      	bne.n	8006948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0204 	mvn.w	r2, #4
 8006918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 faba 	bl	8006ea8 <HAL_TIM_IC_CaptureCallback>
 8006934:	e005      	b.n	8006942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 faac 	bl	8006e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fabd 	bl	8006ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b08      	cmp	r3, #8
 8006954:	d122      	bne.n	800699c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b08      	cmp	r3, #8
 8006962:	d11b      	bne.n	800699c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0208 	mvn.w	r2, #8
 800696c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2204      	movs	r2, #4
 8006972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa90 	bl	8006ea8 <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa82 	bl	8006e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fa93 	bl	8006ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0310 	and.w	r3, r3, #16
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d122      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d11b      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0210 	mvn.w	r2, #16
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2208      	movs	r2, #8
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa66 	bl	8006ea8 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa58 	bl	8006e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa69 	bl	8006ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d10e      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0201 	mvn.w	r2, #1
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fd54 	bl	80024c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a26:	2b80      	cmp	r3, #128	@ 0x80
 8006a28:	d10e      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a34:	2b80      	cmp	r3, #128	@ 0x80
 8006a36:	d107      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fea4 	bl	8007790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a56:	d10e      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a62:	2b80      	cmp	r3, #128	@ 0x80
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fe97 	bl	80077a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b40      	cmp	r3, #64	@ 0x40
 8006a82:	d10e      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa17 	bl	8006ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d10e      	bne.n	8006ace <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d107      	bne.n	8006ace <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f06f 0220 	mvn.w	r2, #32
 8006ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fe57 	bl	800777c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e0ff      	b.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b14      	cmp	r3, #20
 8006b02:	f200 80f0 	bhi.w	8006ce6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006ce7 	.word	0x08006ce7
 8006b14:	08006ce7 	.word	0x08006ce7
 8006b18:	08006ce7 	.word	0x08006ce7
 8006b1c:	08006ba1 	.word	0x08006ba1
 8006b20:	08006ce7 	.word	0x08006ce7
 8006b24:	08006ce7 	.word	0x08006ce7
 8006b28:	08006ce7 	.word	0x08006ce7
 8006b2c:	08006be3 	.word	0x08006be3
 8006b30:	08006ce7 	.word	0x08006ce7
 8006b34:	08006ce7 	.word	0x08006ce7
 8006b38:	08006ce7 	.word	0x08006ce7
 8006b3c:	08006c23 	.word	0x08006c23
 8006b40:	08006ce7 	.word	0x08006ce7
 8006b44:	08006ce7 	.word	0x08006ce7
 8006b48:	08006ce7 	.word	0x08006ce7
 8006b4c:	08006c65 	.word	0x08006c65
 8006b50:	08006ce7 	.word	0x08006ce7
 8006b54:	08006ce7 	.word	0x08006ce7
 8006b58:	08006ce7 	.word	0x08006ce7
 8006b5c:	08006ca5 	.word	0x08006ca5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fa5c 	bl	8007024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0208 	orr.w	r2, r2, #8
 8006b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0204 	bic.w	r2, r2, #4
 8006b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	619a      	str	r2, [r3, #24]
      break;
 8006b9e:	e0a5      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 faae 	bl	8007108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6999      	ldr	r1, [r3, #24]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	619a      	str	r2, [r3, #24]
      break;
 8006be0:	e084      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fb05 	bl	80071f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0208 	orr.w	r2, r2, #8
 8006bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0204 	bic.w	r2, r2, #4
 8006c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69d9      	ldr	r1, [r3, #28]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	61da      	str	r2, [r3, #28]
      break;
 8006c20:	e064      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fb5b 	bl	80072e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69d9      	ldr	r1, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	021a      	lsls	r2, r3, #8
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	61da      	str	r2, [r3, #28]
      break;
 8006c62:	e043      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb92 	bl	8007394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0208 	orr.w	r2, r2, #8
 8006c7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0204 	bic.w	r2, r2, #4
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ca2:	e023      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fbc4 	bl	8007438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	021a      	lsls	r2, r3, #8
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ce4:	e002      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop

08006d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_TIM_ConfigClockSource+0x1c>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e0b4      	b.n	8006e86 <HAL_TIM_ConfigClockSource+0x186>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	4b56      	ldr	r3, [pc, #344]	@ (8006e90 <HAL_TIM_ConfigClockSource+0x190>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d54:	d03e      	beq.n	8006dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d5a:	f200 8087 	bhi.w	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d62:	f000 8086 	beq.w	8006e72 <HAL_TIM_ConfigClockSource+0x172>
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6a:	d87f      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d6c:	2b70      	cmp	r3, #112	@ 0x70
 8006d6e:	d01a      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0xa6>
 8006d70:	2b70      	cmp	r3, #112	@ 0x70
 8006d72:	d87b      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d74:	2b60      	cmp	r3, #96	@ 0x60
 8006d76:	d050      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x11a>
 8006d78:	2b60      	cmp	r3, #96	@ 0x60
 8006d7a:	d877      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b50      	cmp	r3, #80	@ 0x50
 8006d7e:	d03c      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0xfa>
 8006d80:	2b50      	cmp	r3, #80	@ 0x50
 8006d82:	d873      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	d058      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x13a>
 8006d88:	2b40      	cmp	r3, #64	@ 0x40
 8006d8a:	d86f      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b30      	cmp	r3, #48	@ 0x30
 8006d8e:	d064      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006d90:	2b30      	cmp	r3, #48	@ 0x30
 8006d92:	d86b      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d060      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d867      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d05c      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d05a      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	e062      	b.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db6:	f000 fc0d 	bl	80075d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	609a      	str	r2, [r3, #8]
      break;
 8006dd2:	e04f      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006de4:	f000 fbf6 	bl	80075d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df6:	609a      	str	r2, [r3, #8]
      break;
 8006df8:	e03c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	461a      	mov	r2, r3
 8006e08:	f000 fb6a 	bl	80074e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2150      	movs	r1, #80	@ 0x50
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fbc3 	bl	800759e <TIM_ITRx_SetConfig>
      break;
 8006e18:	e02c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	461a      	mov	r2, r3
 8006e28:	f000 fb89 	bl	800753e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2160      	movs	r1, #96	@ 0x60
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fbb3 	bl	800759e <TIM_ITRx_SetConfig>
      break;
 8006e38:	e01c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	461a      	mov	r2, r3
 8006e48:	f000 fb4a 	bl	80074e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2140      	movs	r1, #64	@ 0x40
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fba3 	bl	800759e <TIM_ITRx_SetConfig>
      break;
 8006e58:	e00c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f000 fb9a 	bl	800759e <TIM_ITRx_SetConfig>
      break;
 8006e6a:	e003      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e70:	e000      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	fffeff88 	.word	0xfffeff88

08006e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a40      	ldr	r2, [pc, #256]	@ (8006ff8 <TIM_Base_SetConfig+0x114>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f02:	d00f      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a3d      	ldr	r2, [pc, #244]	@ (8006ffc <TIM_Base_SetConfig+0x118>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00b      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8007000 <TIM_Base_SetConfig+0x11c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3b      	ldr	r2, [pc, #236]	@ (8007004 <TIM_Base_SetConfig+0x120>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8007008 <TIM_Base_SetConfig+0x124>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2f      	ldr	r2, [pc, #188]	@ (8006ff8 <TIM_Base_SetConfig+0x114>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d02b      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f44:	d027      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2c      	ldr	r2, [pc, #176]	@ (8006ffc <TIM_Base_SetConfig+0x118>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d023      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2b      	ldr	r2, [pc, #172]	@ (8007000 <TIM_Base_SetConfig+0x11c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01f      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2a      	ldr	r2, [pc, #168]	@ (8007004 <TIM_Base_SetConfig+0x120>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01b      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a29      	ldr	r2, [pc, #164]	@ (8007008 <TIM_Base_SetConfig+0x124>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d017      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a28      	ldr	r2, [pc, #160]	@ (800700c <TIM_Base_SetConfig+0x128>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a27      	ldr	r2, [pc, #156]	@ (8007010 <TIM_Base_SetConfig+0x12c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a26      	ldr	r2, [pc, #152]	@ (8007014 <TIM_Base_SetConfig+0x130>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a25      	ldr	r2, [pc, #148]	@ (8007018 <TIM_Base_SetConfig+0x134>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a24      	ldr	r2, [pc, #144]	@ (800701c <TIM_Base_SetConfig+0x138>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a23      	ldr	r2, [pc, #140]	@ (8007020 <TIM_Base_SetConfig+0x13c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff8 <TIM_Base_SetConfig+0x114>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_Base_SetConfig+0xf8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8007008 <TIM_Base_SetConfig+0x124>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	615a      	str	r2, [r3, #20]
}
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40010400 	.word	0x40010400
 800700c:	40014000 	.word	0x40014000
 8007010:	40014400 	.word	0x40014400
 8007014:	40014800 	.word	0x40014800
 8007018:	40001800 	.word	0x40001800
 800701c:	40001c00 	.word	0x40001c00
 8007020:	40002000 	.word	0x40002000

08007024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4b2b      	ldr	r3, [pc, #172]	@ (80070fc <TIM_OC1_SetConfig+0xd8>)
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 0302 	bic.w	r3, r3, #2
 800706c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a21      	ldr	r2, [pc, #132]	@ (8007100 <TIM_OC1_SetConfig+0xdc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_OC1_SetConfig+0x64>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a20      	ldr	r2, [pc, #128]	@ (8007104 <TIM_OC1_SetConfig+0xe0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d10c      	bne.n	80070a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f023 0308 	bic.w	r3, r3, #8
 800708e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f023 0304 	bic.w	r3, r3, #4
 80070a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a16      	ldr	r2, [pc, #88]	@ (8007100 <TIM_OC1_SetConfig+0xdc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <TIM_OC1_SetConfig+0x8e>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <TIM_OC1_SetConfig+0xe0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d111      	bne.n	80070d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	621a      	str	r2, [r3, #32]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	fffeff8f 	.word	0xfffeff8f
 8007100:	40010000 	.word	0x40010000
 8007104:	40010400 	.word	0x40010400

08007108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0210 	bic.w	r2, r3, #16
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4b2e      	ldr	r3, [pc, #184]	@ (80071ec <TIM_OC2_SetConfig+0xe4>)
 8007134:	4013      	ands	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800713e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0320 	bic.w	r3, r3, #32
 8007152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a23      	ldr	r2, [pc, #140]	@ (80071f0 <TIM_OC2_SetConfig+0xe8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d003      	beq.n	8007170 <TIM_OC2_SetConfig+0x68>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a22      	ldr	r2, [pc, #136]	@ (80071f4 <TIM_OC2_SetConfig+0xec>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d10d      	bne.n	800718c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a18      	ldr	r2, [pc, #96]	@ (80071f0 <TIM_OC2_SetConfig+0xe8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_OC2_SetConfig+0x94>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a17      	ldr	r2, [pc, #92]	@ (80071f4 <TIM_OC2_SetConfig+0xec>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d113      	bne.n	80071c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	feff8fff 	.word	0xfeff8fff
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400

080071f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4b2d      	ldr	r3, [pc, #180]	@ (80072d8 <TIM_OC3_SetConfig+0xe0>)
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a22      	ldr	r2, [pc, #136]	@ (80072dc <TIM_OC3_SetConfig+0xe4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC3_SetConfig+0x66>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <TIM_OC3_SetConfig+0xe8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d10d      	bne.n	800727a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a17      	ldr	r2, [pc, #92]	@ (80072dc <TIM_OC3_SetConfig+0xe4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC3_SetConfig+0x92>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a16      	ldr	r2, [pc, #88]	@ (80072e0 <TIM_OC3_SetConfig+0xe8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d113      	bne.n	80072b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	fffeff8f 	.word	0xfffeff8f
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40010400 	.word	0x40010400

080072e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4b1e      	ldr	r3, [pc, #120]	@ (8007388 <TIM_OC4_SetConfig+0xa4>)
 8007310:	4013      	ands	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800732e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	031b      	lsls	r3, r3, #12
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a13      	ldr	r2, [pc, #76]	@ (800738c <TIM_OC4_SetConfig+0xa8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d003      	beq.n	800734c <TIM_OC4_SetConfig+0x68>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a12      	ldr	r2, [pc, #72]	@ (8007390 <TIM_OC4_SetConfig+0xac>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d109      	bne.n	8007360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	019b      	lsls	r3, r3, #6
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	feff8fff 	.word	0xfeff8fff
 800738c:	40010000 	.word	0x40010000
 8007390:	40010400 	.word	0x40010400

08007394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4b1b      	ldr	r3, [pc, #108]	@ (800742c <TIM_OC5_SetConfig+0x98>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a12      	ldr	r2, [pc, #72]	@ (8007430 <TIM_OC5_SetConfig+0x9c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d003      	beq.n	80073f2 <TIM_OC5_SetConfig+0x5e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a11      	ldr	r2, [pc, #68]	@ (8007434 <TIM_OC5_SetConfig+0xa0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d109      	bne.n	8007406 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	621a      	str	r2, [r3, #32]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	fffeff8f 	.word	0xfffeff8f
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400

08007438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4b1c      	ldr	r3, [pc, #112]	@ (80074d4 <TIM_OC6_SetConfig+0x9c>)
 8007464:	4013      	ands	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800747a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	051b      	lsls	r3, r3, #20
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a13      	ldr	r2, [pc, #76]	@ (80074d8 <TIM_OC6_SetConfig+0xa0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_OC6_SetConfig+0x60>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a12      	ldr	r2, [pc, #72]	@ (80074dc <TIM_OC6_SetConfig+0xa4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d109      	bne.n	80074ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800749e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	feff8fff 	.word	0xfeff8fff
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40010400 	.word	0x40010400

080074e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f023 0201 	bic.w	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800750a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f023 030a 	bic.w	r3, r3, #10
 800751c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800753e:	b480      	push	{r7}
 8007540:	b087      	sub	sp, #28
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0210 	bic.w	r2, r3, #16
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	031b      	lsls	r3, r3, #12
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800757a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f043 0307 	orr.w	r3, r3, #7
 80075c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	609a      	str	r2, [r3, #8]
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	021a      	lsls	r2, r3, #8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	609a      	str	r2, [r3, #8]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	2201      	movs	r2, #1
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a1a      	ldr	r2, [r3, #32]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	43db      	mvns	r3, r3
 8007636:	401a      	ands	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1a      	ldr	r2, [r3, #32]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
}
 8007652:	bf00      	nop
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007674:	2302      	movs	r3, #2
 8007676:	e06d      	b.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a30      	ldr	r2, [pc, #192]	@ (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d108      	bne.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80076b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a20      	ldr	r2, [pc, #128]	@ (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d022      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ea:	d01d      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d018      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	@ (800776c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a1a      	ldr	r2, [pc, #104]	@ (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00e      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a15      	ldr	r2, [pc, #84]	@ (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d009      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a16      	ldr	r2, [pc, #88]	@ (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a15      	ldr	r2, [pc, #84]	@ (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d10c      	bne.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800772e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4313      	orrs	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	40010000 	.word	0x40010000
 8007764:	40010400 	.word	0x40010400
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	40014000 	.word	0x40014000
 8007778:	40001800 	.word	0x40001800

0800777c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e040      	b.n	800784c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fb f852 	bl	8002884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2224      	movs	r2, #36	@ 0x24
 80077e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f82c 	bl	8007854 <UART_SetConfig>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e022      	b.n	800784c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa84 	bl	8007d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fb0b 	bl	8007e60 <UART_CheckIdleState>
 800784a:	4603      	mov	r3, r0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	4ba6      	ldr	r3, [pc, #664]	@ (8007b18 <UART_SetConfig+0x2c4>)
 8007880:	4013      	ands	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	430b      	orrs	r3, r1
 800788a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a94      	ldr	r2, [pc, #592]	@ (8007b1c <UART_SetConfig+0x2c8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d120      	bne.n	8007912 <UART_SetConfig+0xbe>
 80078d0:	4b93      	ldr	r3, [pc, #588]	@ (8007b20 <UART_SetConfig+0x2cc>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d816      	bhi.n	800790c <UART_SetConfig+0xb8>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <UART_SetConfig+0x90>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	08007901 	.word	0x08007901
 80078ec:	080078fb 	.word	0x080078fb
 80078f0:	08007907 	.word	0x08007907
 80078f4:	2301      	movs	r3, #1
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e150      	b.n	8007b9c <UART_SetConfig+0x348>
 80078fa:	2302      	movs	r3, #2
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e14d      	b.n	8007b9c <UART_SetConfig+0x348>
 8007900:	2304      	movs	r3, #4
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e14a      	b.n	8007b9c <UART_SetConfig+0x348>
 8007906:	2308      	movs	r3, #8
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e147      	b.n	8007b9c <UART_SetConfig+0x348>
 800790c:	2310      	movs	r3, #16
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e144      	b.n	8007b9c <UART_SetConfig+0x348>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a83      	ldr	r2, [pc, #524]	@ (8007b24 <UART_SetConfig+0x2d0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d132      	bne.n	8007982 <UART_SetConfig+0x12e>
 800791c:	4b80      	ldr	r3, [pc, #512]	@ (8007b20 <UART_SetConfig+0x2cc>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b0c      	cmp	r3, #12
 8007928:	d828      	bhi.n	800797c <UART_SetConfig+0x128>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <UART_SetConfig+0xdc>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007965 	.word	0x08007965
 8007934:	0800797d 	.word	0x0800797d
 8007938:	0800797d 	.word	0x0800797d
 800793c:	0800797d 	.word	0x0800797d
 8007940:	08007971 	.word	0x08007971
 8007944:	0800797d 	.word	0x0800797d
 8007948:	0800797d 	.word	0x0800797d
 800794c:	0800797d 	.word	0x0800797d
 8007950:	0800796b 	.word	0x0800796b
 8007954:	0800797d 	.word	0x0800797d
 8007958:	0800797d 	.word	0x0800797d
 800795c:	0800797d 	.word	0x0800797d
 8007960:	08007977 	.word	0x08007977
 8007964:	2300      	movs	r3, #0
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e118      	b.n	8007b9c <UART_SetConfig+0x348>
 800796a:	2302      	movs	r3, #2
 800796c:	77fb      	strb	r3, [r7, #31]
 800796e:	e115      	b.n	8007b9c <UART_SetConfig+0x348>
 8007970:	2304      	movs	r3, #4
 8007972:	77fb      	strb	r3, [r7, #31]
 8007974:	e112      	b.n	8007b9c <UART_SetConfig+0x348>
 8007976:	2308      	movs	r3, #8
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e10f      	b.n	8007b9c <UART_SetConfig+0x348>
 800797c:	2310      	movs	r3, #16
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e10c      	b.n	8007b9c <UART_SetConfig+0x348>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a68      	ldr	r2, [pc, #416]	@ (8007b28 <UART_SetConfig+0x2d4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d120      	bne.n	80079ce <UART_SetConfig+0x17a>
 800798c:	4b64      	ldr	r3, [pc, #400]	@ (8007b20 <UART_SetConfig+0x2cc>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007992:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007996:	2b30      	cmp	r3, #48	@ 0x30
 8007998:	d013      	beq.n	80079c2 <UART_SetConfig+0x16e>
 800799a:	2b30      	cmp	r3, #48	@ 0x30
 800799c:	d814      	bhi.n	80079c8 <UART_SetConfig+0x174>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d009      	beq.n	80079b6 <UART_SetConfig+0x162>
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d810      	bhi.n	80079c8 <UART_SetConfig+0x174>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <UART_SetConfig+0x15c>
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d006      	beq.n	80079bc <UART_SetConfig+0x168>
 80079ae:	e00b      	b.n	80079c8 <UART_SetConfig+0x174>
 80079b0:	2300      	movs	r3, #0
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e0f2      	b.n	8007b9c <UART_SetConfig+0x348>
 80079b6:	2302      	movs	r3, #2
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e0ef      	b.n	8007b9c <UART_SetConfig+0x348>
 80079bc:	2304      	movs	r3, #4
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e0ec      	b.n	8007b9c <UART_SetConfig+0x348>
 80079c2:	2308      	movs	r3, #8
 80079c4:	77fb      	strb	r3, [r7, #31]
 80079c6:	e0e9      	b.n	8007b9c <UART_SetConfig+0x348>
 80079c8:	2310      	movs	r3, #16
 80079ca:	77fb      	strb	r3, [r7, #31]
 80079cc:	e0e6      	b.n	8007b9c <UART_SetConfig+0x348>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a56      	ldr	r2, [pc, #344]	@ (8007b2c <UART_SetConfig+0x2d8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d120      	bne.n	8007a1a <UART_SetConfig+0x1c6>
 80079d8:	4b51      	ldr	r3, [pc, #324]	@ (8007b20 <UART_SetConfig+0x2cc>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079e4:	d013      	beq.n	8007a0e <UART_SetConfig+0x1ba>
 80079e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079e8:	d814      	bhi.n	8007a14 <UART_SetConfig+0x1c0>
 80079ea:	2b80      	cmp	r3, #128	@ 0x80
 80079ec:	d009      	beq.n	8007a02 <UART_SetConfig+0x1ae>
 80079ee:	2b80      	cmp	r3, #128	@ 0x80
 80079f0:	d810      	bhi.n	8007a14 <UART_SetConfig+0x1c0>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <UART_SetConfig+0x1a8>
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d006      	beq.n	8007a08 <UART_SetConfig+0x1b4>
 80079fa:	e00b      	b.n	8007a14 <UART_SetConfig+0x1c0>
 80079fc:	2300      	movs	r3, #0
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e0cc      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a02:	2302      	movs	r3, #2
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e0c9      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e0c6      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a0e:	2308      	movs	r3, #8
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e0c3      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a14:	2310      	movs	r3, #16
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	e0c0      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a44      	ldr	r2, [pc, #272]	@ (8007b30 <UART_SetConfig+0x2dc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d125      	bne.n	8007a70 <UART_SetConfig+0x21c>
 8007a24:	4b3e      	ldr	r3, [pc, #248]	@ (8007b20 <UART_SetConfig+0x2cc>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a32:	d017      	beq.n	8007a64 <UART_SetConfig+0x210>
 8007a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a38:	d817      	bhi.n	8007a6a <UART_SetConfig+0x216>
 8007a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a3e:	d00b      	beq.n	8007a58 <UART_SetConfig+0x204>
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a44:	d811      	bhi.n	8007a6a <UART_SetConfig+0x216>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <UART_SetConfig+0x1fe>
 8007a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a4e:	d006      	beq.n	8007a5e <UART_SetConfig+0x20a>
 8007a50:	e00b      	b.n	8007a6a <UART_SetConfig+0x216>
 8007a52:	2300      	movs	r3, #0
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e0a1      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e09e      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	77fb      	strb	r3, [r7, #31]
 8007a62:	e09b      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a64:	2308      	movs	r3, #8
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e098      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a6a:	2310      	movs	r3, #16
 8007a6c:	77fb      	strb	r3, [r7, #31]
 8007a6e:	e095      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2f      	ldr	r2, [pc, #188]	@ (8007b34 <UART_SetConfig+0x2e0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d125      	bne.n	8007ac6 <UART_SetConfig+0x272>
 8007a7a:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <UART_SetConfig+0x2cc>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a88:	d017      	beq.n	8007aba <UART_SetConfig+0x266>
 8007a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a8e:	d817      	bhi.n	8007ac0 <UART_SetConfig+0x26c>
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a94:	d00b      	beq.n	8007aae <UART_SetConfig+0x25a>
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a9a:	d811      	bhi.n	8007ac0 <UART_SetConfig+0x26c>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <UART_SetConfig+0x254>
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa4:	d006      	beq.n	8007ab4 <UART_SetConfig+0x260>
 8007aa6:	e00b      	b.n	8007ac0 <UART_SetConfig+0x26c>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e076      	b.n	8007b9c <UART_SetConfig+0x348>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e073      	b.n	8007b9c <UART_SetConfig+0x348>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e070      	b.n	8007b9c <UART_SetConfig+0x348>
 8007aba:	2308      	movs	r3, #8
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e06d      	b.n	8007b9c <UART_SetConfig+0x348>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	77fb      	strb	r3, [r7, #31]
 8007ac4:	e06a      	b.n	8007b9c <UART_SetConfig+0x348>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <UART_SetConfig+0x2e4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d138      	bne.n	8007b42 <UART_SetConfig+0x2ee>
 8007ad0:	4b13      	ldr	r3, [pc, #76]	@ (8007b20 <UART_SetConfig+0x2cc>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007ada:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ade:	d017      	beq.n	8007b10 <UART_SetConfig+0x2bc>
 8007ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ae4:	d82a      	bhi.n	8007b3c <UART_SetConfig+0x2e8>
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aea:	d00b      	beq.n	8007b04 <UART_SetConfig+0x2b0>
 8007aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007af0:	d824      	bhi.n	8007b3c <UART_SetConfig+0x2e8>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <UART_SetConfig+0x2aa>
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007afa:	d006      	beq.n	8007b0a <UART_SetConfig+0x2b6>
 8007afc:	e01e      	b.n	8007b3c <UART_SetConfig+0x2e8>
 8007afe:	2300      	movs	r3, #0
 8007b00:	77fb      	strb	r3, [r7, #31]
 8007b02:	e04b      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b04:	2302      	movs	r3, #2
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e048      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b0a:	2304      	movs	r3, #4
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e045      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b10:	2308      	movs	r3, #8
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e042      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b16:	bf00      	nop
 8007b18:	efff69f3 	.word	0xefff69f3
 8007b1c:	40011000 	.word	0x40011000
 8007b20:	40023800 	.word	0x40023800
 8007b24:	40004400 	.word	0x40004400
 8007b28:	40004800 	.word	0x40004800
 8007b2c:	40004c00 	.word	0x40004c00
 8007b30:	40005000 	.word	0x40005000
 8007b34:	40011400 	.word	0x40011400
 8007b38:	40007800 	.word	0x40007800
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e02c      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a72      	ldr	r2, [pc, #456]	@ (8007d10 <UART_SetConfig+0x4bc>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d125      	bne.n	8007b98 <UART_SetConfig+0x344>
 8007b4c:	4b71      	ldr	r3, [pc, #452]	@ (8007d14 <UART_SetConfig+0x4c0>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007b56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007b5a:	d017      	beq.n	8007b8c <UART_SetConfig+0x338>
 8007b5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007b60:	d817      	bhi.n	8007b92 <UART_SetConfig+0x33e>
 8007b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b66:	d00b      	beq.n	8007b80 <UART_SetConfig+0x32c>
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6c:	d811      	bhi.n	8007b92 <UART_SetConfig+0x33e>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <UART_SetConfig+0x326>
 8007b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b76:	d006      	beq.n	8007b86 <UART_SetConfig+0x332>
 8007b78:	e00b      	b.n	8007b92 <UART_SetConfig+0x33e>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e00d      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b80:	2302      	movs	r3, #2
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e00a      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b86:	2304      	movs	r3, #4
 8007b88:	77fb      	strb	r3, [r7, #31]
 8007b8a:	e007      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	77fb      	strb	r3, [r7, #31]
 8007b90:	e004      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b92:	2310      	movs	r3, #16
 8007b94:	77fb      	strb	r3, [r7, #31]
 8007b96:	e001      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ba4:	d15b      	bne.n	8007c5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ba6:	7ffb      	ldrb	r3, [r7, #31]
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d828      	bhi.n	8007bfe <UART_SetConfig+0x3aa>
 8007bac:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <UART_SetConfig+0x360>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007be1 	.word	0x08007be1
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007bff 	.word	0x08007bff
 8007bc4:	08007bef 	.word	0x08007bef
 8007bc8:	08007bff 	.word	0x08007bff
 8007bcc:	08007bff 	.word	0x08007bff
 8007bd0:	08007bff 	.word	0x08007bff
 8007bd4:	08007bf7 	.word	0x08007bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd8:	f7fd ffb0 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 8007bdc:	61b8      	str	r0, [r7, #24]
        break;
 8007bde:	e013      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd ffc0 	bl	8005b64 <HAL_RCC_GetPCLK2Freq>
 8007be4:	61b8      	str	r0, [r7, #24]
        break;
 8007be6:	e00f      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007be8:	4b4b      	ldr	r3, [pc, #300]	@ (8007d18 <UART_SetConfig+0x4c4>)
 8007bea:	61bb      	str	r3, [r7, #24]
        break;
 8007bec:	e00c      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bee:	f7fd fe93 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8007bf2:	61b8      	str	r0, [r7, #24]
        break;
 8007bf4:	e008      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bfa:	61bb      	str	r3, [r7, #24]
        break;
 8007bfc:	e004      	b.n	8007c08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	77bb      	strb	r3, [r7, #30]
        break;
 8007c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d074      	beq.n	8007cf8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	005a      	lsls	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	441a      	add	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d916      	bls.n	8007c58 <UART_SetConfig+0x404>
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c30:	d212      	bcs.n	8007c58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f023 030f 	bic.w	r3, r3, #15
 8007c3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	89fa      	ldrh	r2, [r7, #14]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e04f      	b.n	8007cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	77bb      	strb	r3, [r7, #30]
 8007c5c:	e04c      	b.n	8007cf8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c5e:	7ffb      	ldrb	r3, [r7, #31]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d828      	bhi.n	8007cb6 <UART_SetConfig+0x462>
 8007c64:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <UART_SetConfig+0x418>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007c99 	.word	0x08007c99
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	08007cb7 	.word	0x08007cb7
 8007c7c:	08007ca7 	.word	0x08007ca7
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007cb7 	.word	0x08007cb7
 8007c88:	08007cb7 	.word	0x08007cb7
 8007c8c:	08007caf 	.word	0x08007caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fd ff54 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 8007c94:	61b8      	str	r0, [r7, #24]
        break;
 8007c96:	e013      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c98:	f7fd ff64 	bl	8005b64 <HAL_RCC_GetPCLK2Freq>
 8007c9c:	61b8      	str	r0, [r7, #24]
        break;
 8007c9e:	e00f      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <UART_SetConfig+0x4c4>)
 8007ca2:	61bb      	str	r3, [r7, #24]
        break;
 8007ca4:	e00c      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca6:	f7fd fe37 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8007caa:	61b8      	str	r0, [r7, #24]
        break;
 8007cac:	e008      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb2:	61bb      	str	r3, [r7, #24]
        break;
 8007cb4:	e004      	b.n	8007cc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8007cbe:	bf00      	nop
    }

    if (pclk != 0U)
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d018      	beq.n	8007cf8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	085a      	lsrs	r2, r3, #1
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	441a      	add	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d909      	bls.n	8007cf4 <UART_SetConfig+0x4a0>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce6:	d205      	bcs.n	8007cf4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60da      	str	r2, [r3, #12]
 8007cf2:	e001      	b.n	8007cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d04:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	40007c00 	.word	0x40007c00
 8007d14:	40023800 	.word	0x40023800
 8007d18:	00f42400 	.word	0x00f42400

08007d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01a      	beq.n	8007e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e1a:	d10a      	bne.n	8007e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e70:	f7fa fea4 	bl	8002bbc <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10e      	bne.n	8007ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f831 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e027      	b.n	8007ef2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d10e      	bne.n	8007ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f81b 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e011      	b.n	8007ef2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b09c      	sub	sp, #112	@ 0x70
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0a:	e0a7      	b.n	800805c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	f000 80a3 	beq.w	800805c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f16:	f7fa fe51 	bl	8002bbc <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d13f      	bne.n	8007fac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007f40:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007f50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e6      	bne.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f7e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007f80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e5      	bne.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2220      	movs	r2, #32
 8007f96:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e068      	b.n	800807e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d050      	beq.n	800805c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc8:	d148      	bne.n	800805c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fd2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e6      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3308      	adds	r3, #8
 800800c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	613b      	str	r3, [r7, #16]
   return(result);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3308      	adds	r3, #8
 8008024:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008026:	623a      	str	r2, [r7, #32]
 8008028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	69f9      	ldr	r1, [r7, #28]
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	61bb      	str	r3, [r7, #24]
   return(result);
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e5      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2220      	movs	r2, #32
 800803e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e010      	b.n	800807e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69da      	ldr	r2, [r3, #28]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4013      	ands	r3, r2
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	429a      	cmp	r2, r3
 8008078:	f43f af48 	beq.w	8007f0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3770      	adds	r7, #112	@ 0x70
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008088:	b084      	sub	sp, #16
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	f107 001c 	add.w	r0, r7, #28
 8008096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	2b01      	cmp	r3, #1
 800809e:	d120      	bne.n	80080e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	4b20      	ldr	r3, [pc, #128]	@ (8008134 <USB_CoreInit+0xac>)
 80080b2:	4013      	ands	r3, r2
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d105      	bne.n	80080d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fbee 	bl	80098b8 <USB_CoreReset>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
 80080e0:	e010      	b.n	8008104 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 fbe2 	bl	80098b8 <USB_CoreReset>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10b      	bne.n	8008122 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f043 0206 	orr.w	r2, r3, #6
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800812e:	b004      	add	sp, #16
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	ffbdffbf 	.word	0xffbdffbf

08008138 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d165      	bne.n	8008218 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a41      	ldr	r2, [pc, #260]	@ (8008254 <USB_SetTurnaroundTime+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d906      	bls.n	8008162 <USB_SetTurnaroundTime+0x2a>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4a40      	ldr	r2, [pc, #256]	@ (8008258 <USB_SetTurnaroundTime+0x120>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d202      	bcs.n	8008162 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800815c:	230f      	movs	r3, #15
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e062      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4a3c      	ldr	r2, [pc, #240]	@ (8008258 <USB_SetTurnaroundTime+0x120>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d306      	bcc.n	8008178 <USB_SetTurnaroundTime+0x40>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	4a3b      	ldr	r2, [pc, #236]	@ (800825c <USB_SetTurnaroundTime+0x124>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d202      	bcs.n	8008178 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008172:	230e      	movs	r3, #14
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	e057      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4a38      	ldr	r2, [pc, #224]	@ (800825c <USB_SetTurnaroundTime+0x124>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d306      	bcc.n	800818e <USB_SetTurnaroundTime+0x56>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4a37      	ldr	r2, [pc, #220]	@ (8008260 <USB_SetTurnaroundTime+0x128>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d202      	bcs.n	800818e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008188:	230d      	movs	r3, #13
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e04c      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4a33      	ldr	r2, [pc, #204]	@ (8008260 <USB_SetTurnaroundTime+0x128>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d306      	bcc.n	80081a4 <USB_SetTurnaroundTime+0x6c>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4a32      	ldr	r2, [pc, #200]	@ (8008264 <USB_SetTurnaroundTime+0x12c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d802      	bhi.n	80081a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800819e:	230c      	movs	r3, #12
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e041      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <USB_SetTurnaroundTime+0x12c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d906      	bls.n	80081ba <USB_SetTurnaroundTime+0x82>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008268 <USB_SetTurnaroundTime+0x130>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d802      	bhi.n	80081ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081b4:	230b      	movs	r3, #11
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e036      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4a2a      	ldr	r2, [pc, #168]	@ (8008268 <USB_SetTurnaroundTime+0x130>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d906      	bls.n	80081d0 <USB_SetTurnaroundTime+0x98>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4a29      	ldr	r2, [pc, #164]	@ (800826c <USB_SetTurnaroundTime+0x134>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d802      	bhi.n	80081d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081ca:	230a      	movs	r3, #10
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e02b      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4a26      	ldr	r2, [pc, #152]	@ (800826c <USB_SetTurnaroundTime+0x134>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d906      	bls.n	80081e6 <USB_SetTurnaroundTime+0xae>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4a25      	ldr	r2, [pc, #148]	@ (8008270 <USB_SetTurnaroundTime+0x138>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d202      	bcs.n	80081e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081e0:	2309      	movs	r3, #9
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	e020      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4a21      	ldr	r2, [pc, #132]	@ (8008270 <USB_SetTurnaroundTime+0x138>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d306      	bcc.n	80081fc <USB_SetTurnaroundTime+0xc4>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4a20      	ldr	r2, [pc, #128]	@ (8008274 <USB_SetTurnaroundTime+0x13c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d802      	bhi.n	80081fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081f6:	2308      	movs	r3, #8
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e015      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008274 <USB_SetTurnaroundTime+0x13c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d906      	bls.n	8008212 <USB_SetTurnaroundTime+0xda>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <USB_SetTurnaroundTime+0x140>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d202      	bcs.n	8008212 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800820c:	2307      	movs	r3, #7
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e00a      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008212:	2306      	movs	r3, #6
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e007      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800821e:	2309      	movs	r3, #9
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e001      	b.n	8008228 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008224:	2309      	movs	r3, #9
 8008226:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	029b      	lsls	r3, r3, #10
 800823c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008240:	431a      	orrs	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	00d8acbf 	.word	0x00d8acbf
 8008258:	00e4e1c0 	.word	0x00e4e1c0
 800825c:	00f42400 	.word	0x00f42400
 8008260:	01067380 	.word	0x01067380
 8008264:	011a499f 	.word	0x011a499f
 8008268:	01312cff 	.word	0x01312cff
 800826c:	014ca43f 	.word	0x014ca43f
 8008270:	016e3600 	.word	0x016e3600
 8008274:	01a6ab1f 	.word	0x01a6ab1f
 8008278:	01e84800 	.word	0x01e84800

0800827c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f043 0201 	orr.w	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d115      	bne.n	800830e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082ee:	2001      	movs	r0, #1
 80082f0:	f7fa fc70 	bl	8002bd4 <HAL_Delay>
      ms++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 fa4b 	bl	8009796 <USB_GetMode>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d01e      	beq.n	8008344 <USB_SetCurrentMode+0x84>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b31      	cmp	r3, #49	@ 0x31
 800830a:	d9f0      	bls.n	80082ee <USB_SetCurrentMode+0x2e>
 800830c:	e01a      	b.n	8008344 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d115      	bne.n	8008340 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008320:	2001      	movs	r0, #1
 8008322:	f7fa fc57 	bl	8002bd4 <HAL_Delay>
      ms++;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fa32 	bl	8009796 <USB_GetMode>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <USB_SetCurrentMode+0x84>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b31      	cmp	r3, #49	@ 0x31
 800833c:	d9f0      	bls.n	8008320 <USB_SetCurrentMode+0x60>
 800833e:	e001      	b.n	8008344 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e005      	b.n	8008350 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b32      	cmp	r3, #50	@ 0x32
 8008348:	d101      	bne.n	800834e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008358:	b084      	sub	sp, #16
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	e009      	b.n	800838c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	3340      	adds	r3, #64	@ 0x40
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b0e      	cmp	r3, #14
 8008390:	d9f2      	bls.n	8008378 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11c      	bne.n	80083d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a6:	f043 0302 	orr.w	r3, r3, #2
 80083aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	e005      	b.n	80083de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083e4:	461a      	mov	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f0:	4619      	mov	r1, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f8:	461a      	mov	r2, r3
 80083fa:	680b      	ldr	r3, [r1, #0]
 80083fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	2b01      	cmp	r3, #1
 8008402:	d10c      	bne.n	800841e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800840a:	2100      	movs	r1, #0
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f965 	bl	80086dc <USB_SetDevSpeed>
 8008412:	e008      	b.n	8008426 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008414:	2101      	movs	r1, #1
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f960 	bl	80086dc <USB_SetDevSpeed>
 800841c:	e003      	b.n	8008426 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800841e:	2103      	movs	r1, #3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f95b 	bl	80086dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008426:	2110      	movs	r1, #16
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f8f3 	bl	8008614 <USB_FlushTxFifo>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f91f 	bl	800867c <USB_FlushRxFifo>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844e:	461a      	mov	r2, r3
 8008450:	2300      	movs	r3, #0
 8008452:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800845a:	461a      	mov	r2, r3
 800845c:	2300      	movs	r3, #0
 800845e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008466:	461a      	mov	r2, r3
 8008468:	2300      	movs	r3, #0
 800846a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800846c:	2300      	movs	r3, #0
 800846e:	613b      	str	r3, [r7, #16]
 8008470:	e043      	b.n	80084fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008488:	d118      	bne.n	80084bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849c:	461a      	mov	r2, r3
 800849e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e013      	b.n	80084ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b2:	461a      	mov	r2, r3
 80084b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	e008      	b.n	80084ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c8:	461a      	mov	r2, r3
 80084ca:	2300      	movs	r3, #0
 80084cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084da:	461a      	mov	r2, r3
 80084dc:	2300      	movs	r3, #0
 80084de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ec:	461a      	mov	r2, r3
 80084ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3301      	adds	r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d3b7      	bcc.n	8008472 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008502:	2300      	movs	r3, #0
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	e043      	b.n	8008590 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800851a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800851e:	d118      	bne.n	8008552 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008532:	461a      	mov	r2, r3
 8008534:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	e013      	b.n	8008564 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008548:	461a      	mov	r2, r3
 800854a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	e008      	b.n	8008564 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855e:	461a      	mov	r2, r3
 8008560:	2300      	movs	r3, #0
 8008562:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008570:	461a      	mov	r2, r3
 8008572:	2300      	movs	r3, #0
 8008574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008582:	461a      	mov	r2, r3
 8008584:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008588:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3301      	adds	r3, #1
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	429a      	cmp	r2, r3
 8008596:	d3b7      	bcc.n	8008508 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80085b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d105      	bne.n	80085cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f043 0210 	orr.w	r2, r3, #16
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	4b0e      	ldr	r3, [pc, #56]	@ (800860c <USB_DevInit+0x2b4>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f043 0208 	orr.w	r2, r3, #8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d105      	bne.n	80085fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <USB_DevInit+0x2b8>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008608:	b004      	add	sp, #16
 800860a:	4770      	bx	lr
 800860c:	803c3800 	.word	0x803c3800
 8008610:	40000004 	.word	0x40000004

08008614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3301      	adds	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4a13      	ldr	r2, [pc, #76]	@ (8008678 <USB_FlushTxFifo+0x64>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d901      	bls.n	8008634 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e01b      	b.n	800866c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	daf2      	bge.n	8008622 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	019b      	lsls	r3, r3, #6
 8008644:	f043 0220 	orr.w	r2, r3, #32
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3301      	adds	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4a08      	ldr	r2, [pc, #32]	@ (8008678 <USB_FlushTxFifo+0x64>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d901      	bls.n	800865e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e006      	b.n	800866c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b20      	cmp	r3, #32
 8008668:	d0f0      	beq.n	800864c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	00030d40 	.word	0x00030d40

0800867c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4a11      	ldr	r2, [pc, #68]	@ (80086d8 <USB_FlushRxFifo+0x5c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e018      	b.n	80086cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	daf2      	bge.n	8008688 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2210      	movs	r2, #16
 80086aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a08      	ldr	r2, [pc, #32]	@ (80086d8 <USB_FlushRxFifo+0x5c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d901      	bls.n	80086be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e006      	b.n	80086cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	f003 0310 	and.w	r3, r3, #16
 80086c6:	2b10      	cmp	r3, #16
 80086c8:	d0f0      	beq.n	80086ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	00030d40 	.word	0x00030d40

080086dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086fc:	4313      	orrs	r3, r2
 80086fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800870e:	b480      	push	{r7}
 8008710:	b087      	sub	sp, #28
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 0306 	and.w	r3, r3, #6
 8008726:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
 8008732:	e00a      	b.n	800874a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d002      	beq.n	8008740 <USB_GetDevSpeed+0x32>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b06      	cmp	r3, #6
 800873e:	d102      	bne.n	8008746 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008740:	2302      	movs	r3, #2
 8008742:	75fb      	strb	r3, [r7, #23]
 8008744:	e001      	b.n	800874a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008746:	230f      	movs	r3, #15
 8008748:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800874a:	7dfb      	ldrb	r3, [r7, #23]
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d139      	bne.n	80087e8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800877a:	69da      	ldr	r2, [r3, #28]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	2101      	movs	r1, #1
 8008786:	fa01 f303 	lsl.w	r3, r1, r3
 800878a:	b29b      	uxth	r3, r3
 800878c:	68f9      	ldr	r1, [r7, #12]
 800878e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008792:	4313      	orrs	r3, r2
 8008794:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d153      	bne.n	8008854 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	791b      	ldrb	r3, [r3, #4]
 80087c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	059b      	lsls	r3, r3, #22
 80087ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087d0:	431a      	orrs	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	0159      	lsls	r1, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	440b      	add	r3, r1
 80087da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087de:	4619      	mov	r1, r3
 80087e0:	4b20      	ldr	r3, [pc, #128]	@ (8008864 <USB_ActivateEndpoint+0x10c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	600b      	str	r3, [r1, #0]
 80087e6:	e035      	b.n	8008854 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ee:	69da      	ldr	r2, [r3, #28]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	2101      	movs	r1, #1
 80087fa:	fa01 f303 	lsl.w	r3, r1, r3
 80087fe:	041b      	lsls	r3, r3, #16
 8008800:	68f9      	ldr	r1, [r7, #12]
 8008802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008806:	4313      	orrs	r3, r2
 8008808:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d119      	bne.n	8008854 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	791b      	ldrb	r3, [r3, #4]
 800883a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800883c:	430b      	orrs	r3, r1
 800883e:	431a      	orrs	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	0159      	lsls	r1, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	440b      	add	r3, r1
 8008848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884c:	4619      	mov	r1, r3
 800884e:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <USB_ActivateEndpoint+0x10c>)
 8008850:	4313      	orrs	r3, r2
 8008852:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	10008000 	.word	0x10008000

08008868 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d161      	bne.n	8008948 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008896:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800889a:	d11f      	bne.n	80088dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	2101      	movs	r1, #1
 80088ee:	fa01 f303 	lsl.w	r3, r1, r3
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	43db      	mvns	r3, r3
 80088f6:	68f9      	ldr	r1, [r7, #12]
 80088f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088fc:	4013      	ands	r3, r2
 80088fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	2101      	movs	r1, #1
 8008912:	fa01 f303 	lsl.w	r3, r1, r3
 8008916:	b29b      	uxth	r3, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008920:	4013      	ands	r3, r2
 8008922:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	0159      	lsls	r1, r3, #5
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	440b      	add	r3, r1
 800893a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893e:	4619      	mov	r1, r3
 8008940:	4b35      	ldr	r3, [pc, #212]	@ (8008a18 <USB_DeactivateEndpoint+0x1b0>)
 8008942:	4013      	ands	r3, r2
 8008944:	600b      	str	r3, [r1, #0]
 8008946:	e060      	b.n	8008a0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800895a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800895e:	d11f      	bne.n	80089a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800897a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800897e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	0151      	lsls	r1, r2, #5
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	440a      	add	r2, r1
 8008996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800899a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800899e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	2101      	movs	r1, #1
 80089b2:	fa01 f303 	lsl.w	r3, r1, r3
 80089b6:	041b      	lsls	r3, r3, #16
 80089b8:	43db      	mvns	r3, r3
 80089ba:	68f9      	ldr	r1, [r7, #12]
 80089bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089c0:	4013      	ands	r3, r2
 80089c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ca:	69da      	ldr	r2, [r3, #28]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 030f 	and.w	r3, r3, #15
 80089d4:	2101      	movs	r1, #1
 80089d6:	fa01 f303 	lsl.w	r3, r1, r3
 80089da:	041b      	lsls	r3, r3, #16
 80089dc:	43db      	mvns	r3, r3
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089e4:	4013      	ands	r3, r2
 80089e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	0159      	lsls	r1, r3, #5
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	440b      	add	r3, r1
 80089fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a02:	4619      	mov	r1, r3
 8008a04:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <USB_DeactivateEndpoint+0x1b4>)
 8008a06:	4013      	ands	r3, r2
 8008a08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	ec337800 	.word	0xec337800
 8008a1c:	eff37800 	.word	0xeff37800

08008a20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	@ 0x28
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	f040 8163 	bne.w	8008d08 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d132      	bne.n	8008ab0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	0159      	lsls	r1, r3, #5
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	440b      	add	r3, r1
 8008a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a64:	4619      	mov	r1, r3
 8008a66:	4ba5      	ldr	r3, [pc, #660]	@ (8008cfc <USB_EPStartXfer+0x2dc>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	0159      	lsls	r1, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	440b      	add	r3, r1
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4b95      	ldr	r3, [pc, #596]	@ (8008d00 <USB_EPStartXfer+0x2e0>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	610b      	str	r3, [r1, #16]
 8008aae:	e074      	b.n	8008b9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008abc:	691a      	ldr	r2, [r3, #16]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	0159      	lsls	r1, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	440b      	add	r3, r1
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aca:	4619      	mov	r1, r3
 8008acc:	4b8c      	ldr	r3, [pc, #560]	@ (8008d00 <USB_EPStartXfer+0x2e0>)
 8008ace:	4013      	ands	r3, r2
 8008ad0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ade:	691a      	ldr	r2, [r3, #16]
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	0159      	lsls	r1, r3, #5
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	440b      	add	r3, r1
 8008ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aec:	4619      	mov	r1, r3
 8008aee:	4b83      	ldr	r3, [pc, #524]	@ (8008cfc <USB_EPStartXfer+0x2dc>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b00:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6999      	ldr	r1, [r3, #24]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	440b      	add	r3, r1
 8008b0c:	1e59      	subs	r1, r3, #1
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b16:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b18:	4b7a      	ldr	r3, [pc, #488]	@ (8008d04 <USB_EPStartXfer+0x2e4>)
 8008b1a:	400b      	ands	r3, r1
 8008b1c:	69b9      	ldr	r1, [r7, #24]
 8008b1e:	0148      	lsls	r0, r1, #5
 8008b20:	69f9      	ldr	r1, [r7, #28]
 8008b22:	4401      	add	r1, r0
 8008b24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	0148      	lsls	r0, r1, #5
 8008b46:	69f9      	ldr	r1, [r7, #28]
 8008b48:	4401      	add	r1, r0
 8008b4a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	791b      	ldrb	r3, [r3, #4]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d11f      	bne.n	8008b9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b74:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008b78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d14b      	bne.n	8008c38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	791b      	ldrb	r3, [r3, #4]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d128      	bne.n	8008c16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d110      	bne.n	8008bf6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	0151      	lsls	r1, r2, #5
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	440a      	add	r2, r1
 8008bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	e00f      	b.n	8008c16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	0151      	lsls	r1, r2, #5
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	440a      	add	r2, r1
 8008c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e137      	b.n	8008ea8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	0151      	lsls	r1, r2, #5
 8008c4a:	69fa      	ldr	r2, [r7, #28]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	791b      	ldrb	r3, [r3, #4]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d015      	beq.n	8008c8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 811f 	beq.w	8008ea8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c80:	69f9      	ldr	r1, [r7, #28]
 8008c82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c86:	4313      	orrs	r3, r2
 8008c88:	634b      	str	r3, [r1, #52]	@ 0x34
 8008c8a:	e10d      	b.n	8008ea8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d110      	bne.n	8008cbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	0151      	lsls	r1, r2, #5
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	440a      	add	r2, r1
 8008cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e00f      	b.n	8008cde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cdc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6919      	ldr	r1, [r3, #16]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	b298      	uxth	r0, r3
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 faea 	bl	80092cc <USB_WritePacket>
 8008cf8:	e0d6      	b.n	8008ea8 <USB_EPStartXfer+0x488>
 8008cfa:	bf00      	nop
 8008cfc:	e007ffff 	.word	0xe007ffff
 8008d00:	fff80000 	.word	0xfff80000
 8008d04:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	0159      	lsls	r1, r3, #5
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	440b      	add	r3, r1
 8008d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d22:	4619      	mov	r1, r3
 8008d24:	4b63      	ldr	r3, [pc, #396]	@ (8008eb4 <USB_EPStartXfer+0x494>)
 8008d26:	4013      	ands	r3, r2
 8008d28:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	0159      	lsls	r1, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	440b      	add	r3, r1
 8008d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d44:	4619      	mov	r1, r3
 8008d46:	4b5c      	ldr	r3, [pc, #368]	@ (8008eb8 <USB_EPStartXfer+0x498>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d123      	bne.n	8008d9c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d60:	691a      	ldr	r2, [r3, #16]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d6a:	69b9      	ldr	r1, [r7, #24]
 8008d6c:	0148      	lsls	r0, r1, #5
 8008d6e:	69f9      	ldr	r1, [r7, #28]
 8008d70:	4401      	add	r1, r0
 8008d72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d76:	4313      	orrs	r3, r2
 8008d78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d98:	6113      	str	r3, [r2, #16]
 8008d9a:	e037      	b.n	8008e0c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	699a      	ldr	r2, [r3, #24]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	4413      	add	r3, r2
 8008da6:	1e5a      	subs	r2, r3, #1
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	8afa      	ldrh	r2, [r7, #22]
 8008db8:	fb03 f202 	mul.w	r2, r3, r2
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	8afb      	ldrh	r3, [r7, #22]
 8008dd0:	04d9      	lsls	r1, r3, #19
 8008dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8008ebc <USB_EPStartXfer+0x49c>)
 8008dd4:	400b      	ands	r3, r1
 8008dd6:	69b9      	ldr	r1, [r7, #24]
 8008dd8:	0148      	lsls	r0, r1, #5
 8008dda:	69f9      	ldr	r1, [r7, #28]
 8008ddc:	4401      	add	r1, r0
 8008dde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008de2:	4313      	orrs	r3, r2
 8008de4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dfc:	69b9      	ldr	r1, [r7, #24]
 8008dfe:	0148      	lsls	r0, r1, #5
 8008e00:	69f9      	ldr	r1, [r7, #28]
 8008e02:	4401      	add	r1, r0
 8008e04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d10d      	bne.n	8008e2e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6919      	ldr	r1, [r3, #16]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	791b      	ldrb	r3, [r3, #4]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d128      	bne.n	8008e88 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d110      	bne.n	8008e68 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e00f      	b.n	8008e88 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ea2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	fff80000 	.word	0xfff80000
 8008eb8:	e007ffff 	.word	0xe007ffff
 8008ebc:	1ff80000 	.word	0x1ff80000

08008ec0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	f040 80ce 	bne.w	800907e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d132      	bne.n	8008f50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	0159      	lsls	r1, r3, #5
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	440b      	add	r3, r1
 8008f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f04:	4619      	mov	r1, r3
 8008f06:	4b9a      	ldr	r3, [pc, #616]	@ (8009170 <USB_EP0StartXfer+0x2b0>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	0159      	lsls	r1, r3, #5
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	440b      	add	r3, r1
 8008f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f46:	4619      	mov	r1, r3
 8008f48:	4b8a      	ldr	r3, [pc, #552]	@ (8009174 <USB_EP0StartXfer+0x2b4>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	610b      	str	r3, [r1, #16]
 8008f4e:	e04e      	b.n	8008fee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	691a      	ldr	r2, [r3, #16]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	0159      	lsls	r1, r3, #5
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	440b      	add	r3, r1
 8008f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4b81      	ldr	r3, [pc, #516]	@ (8009174 <USB_EP0StartXfer+0x2b4>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	0159      	lsls	r1, r3, #5
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	440b      	add	r3, r1
 8008f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4b78      	ldr	r3, [pc, #480]	@ (8009170 <USB_EP0StartXfer+0x2b0>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d903      	bls.n	8008fa8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	0151      	lsls	r1, r2, #5
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd4:	691a      	ldr	r2, [r3, #16]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fde:	6939      	ldr	r1, [r7, #16]
 8008fe0:	0148      	lsls	r0, r1, #5
 8008fe2:	6979      	ldr	r1, [r7, #20]
 8008fe4:	4401      	add	r1, r0
 8008fe6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fea:	4313      	orrs	r3, r2
 8008fec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d11e      	bne.n	8009032 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009008:	461a      	mov	r2, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	0151      	lsls	r1, r2, #5
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	440a      	add	r2, r1
 8009026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800902a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	e097      	b.n	8009162 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	0151      	lsls	r1, r2, #5
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	440a      	add	r2, r1
 8009048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800904c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009050:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 8083 	beq.w	8009162 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	2101      	movs	r1, #1
 800906e:	fa01 f303 	lsl.w	r3, r1, r3
 8009072:	6979      	ldr	r1, [r7, #20]
 8009074:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009078:	4313      	orrs	r3, r2
 800907a:	634b      	str	r3, [r1, #52]	@ 0x34
 800907c:	e071      	b.n	8009162 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	0159      	lsls	r1, r3, #5
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	440b      	add	r3, r1
 8009094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009098:	4619      	mov	r1, r3
 800909a:	4b36      	ldr	r3, [pc, #216]	@ (8009174 <USB_EP0StartXfer+0x2b4>)
 800909c:	4013      	ands	r3, r2
 800909e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ac:	691a      	ldr	r2, [r3, #16]
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	0159      	lsls	r1, r3, #5
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	440b      	add	r3, r1
 80090b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ba:	4619      	mov	r1, r3
 80090bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009170 <USB_EP0StartXfer+0x2b0>)
 80090be:	4013      	ands	r3, r2
 80090c0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009110:	6939      	ldr	r1, [r7, #16]
 8009112:	0148      	lsls	r0, r1, #5
 8009114:	6979      	ldr	r1, [r7, #20]
 8009116:	4401      	add	r1, r0
 8009118:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800911c:	4313      	orrs	r3, r2
 800911e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d10d      	bne.n	8009142 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6919      	ldr	r1, [r3, #16]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800913e:	460a      	mov	r2, r1
 8009140:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	440a      	add	r2, r1
 8009158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800915c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009160:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	e007ffff 	.word	0xe007ffff
 8009174:	fff80000 	.word	0xfff80000

08009178 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d14a      	bne.n	800922c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091ae:	f040 8086 	bne.w	80092be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	7812      	ldrb	r2, [r2, #0]
 80091c6:	0151      	lsls	r1, r2, #5
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	440a      	add	r2, r1
 80091cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80091d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3301      	adds	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009206:	4293      	cmp	r3, r2
 8009208:	d902      	bls.n	8009210 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
          break;
 800920e:	e056      	b.n	80092be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009228:	d0e7      	beq.n	80091fa <USB_EPStopXfer+0x82>
 800922a:	e048      	b.n	80092be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009244:	d13b      	bne.n	80092be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	7812      	ldrb	r2, [r2, #0]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009264:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009268:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	7812      	ldrb	r2, [r2, #0]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009288:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800928c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3301      	adds	r3, #1
 8009292:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f242 7210 	movw	r2, #10000	@ 0x2710
 800929a:	4293      	cmp	r3, r2
 800929c:	d902      	bls.n	80092a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	75fb      	strb	r3, [r7, #23]
          break;
 80092a2:	e00c      	b.n	80092be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092bc:	d0e7      	beq.n	800928e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092be:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b089      	sub	sp, #36	@ 0x24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4611      	mov	r1, r2
 80092d8:	461a      	mov	r2, r3
 80092da:	460b      	mov	r3, r1
 80092dc:	71fb      	strb	r3, [r7, #7]
 80092de:	4613      	mov	r3, r2
 80092e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d123      	bne.n	800933a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092f2:	88bb      	ldrh	r3, [r7, #4]
 80092f4:	3303      	adds	r3, #3
 80092f6:	089b      	lsrs	r3, r3, #2
 80092f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092fa:	2300      	movs	r3, #0
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	e018      	b.n	8009332 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	031a      	lsls	r2, r3, #12
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	4413      	add	r3, r2
 8009308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800930c:	461a      	mov	r2, r3
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	3301      	adds	r3, #1
 8009318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	3301      	adds	r3, #1
 800931e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3301      	adds	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	3301      	adds	r3, #1
 800932a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	3301      	adds	r3, #1
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	429a      	cmp	r2, r3
 8009338:	d3e2      	bcc.n	8009300 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3724      	adds	r7, #36	@ 0x24
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009348:	b480      	push	{r7}
 800934a:	b08b      	sub	sp, #44	@ 0x2c
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800935e:	88fb      	ldrh	r3, [r7, #6]
 8009360:	089b      	lsrs	r3, r3, #2
 8009362:	b29b      	uxth	r3, r3
 8009364:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800936e:	2300      	movs	r3, #0
 8009370:	623b      	str	r3, [r7, #32]
 8009372:	e014      	b.n	800939e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	3301      	adds	r3, #1
 8009384:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009388:	3301      	adds	r3, #1
 800938a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	3301      	adds	r3, #1
 8009390:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	3301      	adds	r3, #1
 8009396:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	3301      	adds	r3, #1
 800939c:	623b      	str	r3, [r7, #32]
 800939e:	6a3a      	ldr	r2, [r7, #32]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d3e6      	bcc.n	8009374 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093a6:	8bfb      	ldrh	r3, [r7, #30]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01e      	beq.n	80093ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093b6:	461a      	mov	r2, r3
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	6812      	ldr	r2, [r2, #0]
 80093be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	701a      	strb	r2, [r3, #0]
      i++;
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	3301      	adds	r3, #1
 80093d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	3301      	adds	r3, #1
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80093de:	8bfb      	ldrh	r3, [r7, #30]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093e4:	8bfb      	ldrh	r3, [r7, #30]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1ea      	bne.n	80093c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	372c      	adds	r7, #44	@ 0x2c
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d12c      	bne.n	800946e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	db12      	blt.n	800944c <USB_EPSetStall+0x54>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00f      	beq.n	800944c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	440a      	add	r2, r1
 8009442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009446:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800944a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	0151      	lsls	r1, r2, #5
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	440a      	add	r2, r1
 8009462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	e02b      	b.n	80094c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	db12      	blt.n	80094a6 <USB_EPSetStall+0xae>
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00f      	beq.n	80094a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	440a      	add	r2, r1
 800949c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d128      	bne.n	8009542 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	440a      	add	r2, r1
 8009506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800950a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800950e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	2b03      	cmp	r3, #3
 8009516:	d003      	beq.n	8009520 <USB_EPClearStall+0x4c>
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	791b      	ldrb	r3, [r3, #4]
 800951c:	2b02      	cmp	r3, #2
 800951e:	d138      	bne.n	8009592 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	0151      	lsls	r1, r2, #5
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	440a      	add	r2, r1
 8009536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	e027      	b.n	8009592 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	0151      	lsls	r1, r2, #5
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	440a      	add	r2, r1
 8009558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800955c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009560:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	791b      	ldrb	r3, [r3, #4]
 8009566:	2b03      	cmp	r3, #3
 8009568:	d003      	beq.n	8009572 <USB_EPClearStall+0x9e>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	791b      	ldrb	r3, [r3, #4]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d10f      	bne.n	8009592 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	0151      	lsls	r1, r2, #5
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	440a      	add	r2, r1
 8009588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800958c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009590:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80095c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095da:	4313      	orrs	r3, r2
 80095dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800961a:	f023 0302 	bic.w	r3, r3, #2
 800961e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800962e:	b480      	push	{r7}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009648:	f023 0303 	bic.w	r3, r3, #3
 800964c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800965c:	f043 0302 	orr.w	r3, r3, #2
 8009660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4013      	ands	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009688:	68fb      	ldr	r3, [r7, #12]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	4013      	ands	r3, r2
 80096b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	0c1b      	lsrs	r3, r3, #16
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4013      	ands	r3, r2
 80096ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	b29b      	uxth	r3, r3
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	4013      	ands	r3, r2
 800972a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800972c:	68bb      	ldr	r3, [r7, #8]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800973a:	b480      	push	{r7}
 800973c:	b087      	sub	sp, #28
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800975c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	f003 030f 	and.w	r3, r3, #15
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	01db      	lsls	r3, r3, #7
 800976c:	b2db      	uxtb	r3, r3
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4013      	ands	r3, r2
 8009786:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009788:	68bb      	ldr	r3, [r7, #8]
}
 800978a:	4618      	mov	r0, r3
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0301 	and.w	r3, r3, #1
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
	...

080097b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ce:	4619      	mov	r1, r3
 80097d0:	4b09      	ldr	r3, [pc, #36]	@ (80097f8 <USB_ActivateSetup+0x44>)
 80097d2:	4013      	ands	r3, r2
 80097d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	fffff800 	.word	0xfffff800

080097fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	460b      	mov	r3, r1
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	333c      	adds	r3, #60	@ 0x3c
 8009812:	3304      	adds	r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	4a26      	ldr	r2, [pc, #152]	@ (80098b4 <USB_EP0_OutStart+0xb8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d90a      	bls.n	8009836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800982c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009830:	d101      	bne.n	8009836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e037      	b.n	80098a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983c:	461a      	mov	r2, r3
 800983e:	2300      	movs	r3, #0
 8009840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009850:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009864:	f043 0318 	orr.w	r3, r3, #24
 8009868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009878:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800987c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d10f      	bne.n	80098a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988a:	461a      	mov	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800989e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80098a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	371c      	adds	r7, #28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	4f54300a 	.word	0x4f54300a

080098b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4a13      	ldr	r2, [pc, #76]	@ (800991c <USB_CoreReset+0x64>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d901      	bls.n	80098d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e01b      	b.n	800990e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	daf2      	bge.n	80098c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f043 0201 	orr.w	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4a09      	ldr	r2, [pc, #36]	@ (800991c <USB_CoreReset+0x64>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d901      	bls.n	8009900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e006      	b.n	800990e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b01      	cmp	r3, #1
 800990a:	d0f0      	beq.n	80098ee <USB_CoreReset+0x36>

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	00030d40 	.word	0x00030d40

08009920 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800992c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009930:	f005 fe84 	bl	800f63c <malloc>
 8009934:	4603      	mov	r3, r0
 8009936:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d109      	bne.n	8009952 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	32b0      	adds	r2, #176	@ 0xb0
 8009948:	2100      	movs	r1, #0
 800994a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800994e:	2302      	movs	r3, #2
 8009950:	e0d4      	b.n	8009afc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009952:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009956:	2100      	movs	r1, #0
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f005 ffc5 	bl	800f8e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32b0      	adds	r2, #176	@ 0xb0
 8009968:	68f9      	ldr	r1, [r7, #12]
 800996a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	32b0      	adds	r2, #176	@ 0xb0
 8009978:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	7c1b      	ldrb	r3, [r3, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d138      	bne.n	80099fc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800998a:	4b5e      	ldr	r3, [pc, #376]	@ (8009b04 <USBD_CDC_Init+0x1e4>)
 800998c:	7819      	ldrb	r1, [r3, #0]
 800998e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009992:	2202      	movs	r2, #2
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f005 fcae 	bl	800f2f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800999a:	4b5a      	ldr	r3, [pc, #360]	@ (8009b04 <USBD_CDC_Init+0x1e4>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 020f 	and.w	r2, r3, #15
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	3324      	adds	r3, #36	@ 0x24
 80099b0:	2201      	movs	r2, #1
 80099b2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099b4:	4b54      	ldr	r3, [pc, #336]	@ (8009b08 <USBD_CDC_Init+0x1e8>)
 80099b6:	7819      	ldrb	r1, [r3, #0]
 80099b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099bc:	2202      	movs	r2, #2
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f005 fc99 	bl	800f2f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099c4:	4b50      	ldr	r3, [pc, #320]	@ (8009b08 <USBD_CDC_Init+0x1e8>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	440b      	add	r3, r1
 80099d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099dc:	2201      	movs	r2, #1
 80099de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099e0:	4b4a      	ldr	r3, [pc, #296]	@ (8009b0c <USBD_CDC_Init+0x1ec>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	3326      	adds	r3, #38	@ 0x26
 80099f6:	2210      	movs	r2, #16
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	e035      	b.n	8009a68 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099fc:	4b41      	ldr	r3, [pc, #260]	@ (8009b04 <USBD_CDC_Init+0x1e4>)
 80099fe:	7819      	ldrb	r1, [r3, #0]
 8009a00:	2340      	movs	r3, #64	@ 0x40
 8009a02:	2202      	movs	r2, #2
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f005 fc76 	bl	800f2f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b04 <USBD_CDC_Init+0x1e4>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	f003 020f 	and.w	r2, r3, #15
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3324      	adds	r3, #36	@ 0x24
 8009a20:	2201      	movs	r2, #1
 8009a22:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a24:	4b38      	ldr	r3, [pc, #224]	@ (8009b08 <USBD_CDC_Init+0x1e8>)
 8009a26:	7819      	ldrb	r1, [r3, #0]
 8009a28:	2340      	movs	r3, #64	@ 0x40
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f005 fc62 	bl	800f2f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a32:	4b35      	ldr	r3, [pc, #212]	@ (8009b08 <USBD_CDC_Init+0x1e8>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f003 020f 	and.w	r2, r3, #15
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8009b0c <USBD_CDC_Init+0x1ec>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	f003 020f 	and.w	r2, r3, #15
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	3326      	adds	r3, #38	@ 0x26
 8009a64:	2210      	movs	r2, #16
 8009a66:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a68:	4b28      	ldr	r3, [pc, #160]	@ (8009b0c <USBD_CDC_Init+0x1ec>)
 8009a6a:	7819      	ldrb	r1, [r3, #0]
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	2203      	movs	r2, #3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f005 fc40 	bl	800f2f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a76:	4b25      	ldr	r3, [pc, #148]	@ (8009b0c <USBD_CDC_Init+0x1ec>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	f003 020f 	and.w	r2, r3, #15
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	3324      	adds	r3, #36	@ 0x24
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	33b0      	adds	r3, #176	@ 0xb0
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e018      	b.n	8009afc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	7c1b      	ldrb	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10a      	bne.n	8009ae8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <USBD_CDC_Init+0x1e8>)
 8009ad4:	7819      	ldrb	r1, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f005 fcf7 	bl	800f4d4 <USBD_LL_PrepareReceive>
 8009ae6:	e008      	b.n	8009afa <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ae8:	4b07      	ldr	r3, [pc, #28]	@ (8009b08 <USBD_CDC_Init+0x1e8>)
 8009aea:	7819      	ldrb	r1, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009af2:	2340      	movs	r3, #64	@ 0x40
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f005 fced 	bl	800f4d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20000093 	.word	0x20000093
 8009b08:	20000094 	.word	0x20000094
 8009b0c:	20000095 	.word	0x20000095

08009b10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8009c08 <USBD_CDC_DeInit+0xf8>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f005 fc0d 	bl	800f342 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009b28:	4b37      	ldr	r3, [pc, #220]	@ (8009c08 <USBD_CDC_DeInit+0xf8>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	f003 020f 	and.w	r2, r3, #15
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	4613      	mov	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	440b      	add	r3, r1
 8009b3c:	3324      	adds	r3, #36	@ 0x24
 8009b3e:	2200      	movs	r2, #0
 8009b40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b42:	4b32      	ldr	r3, [pc, #200]	@ (8009c0c <USBD_CDC_DeInit+0xfc>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f005 fbfa 	bl	800f342 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c0c <USBD_CDC_DeInit+0xfc>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f003 020f 	and.w	r2, r3, #15
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b66:	2200      	movs	r2, #0
 8009b68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009b6a:	4b29      	ldr	r3, [pc, #164]	@ (8009c10 <USBD_CDC_DeInit+0x100>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f005 fbe6 	bl	800f342 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b76:	4b26      	ldr	r3, [pc, #152]	@ (8009c10 <USBD_CDC_DeInit+0x100>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	f003 020f 	and.w	r2, r3, #15
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	440b      	add	r3, r1
 8009b8a:	3324      	adds	r3, #36	@ 0x24
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b90:	4b1f      	ldr	r3, [pc, #124]	@ (8009c10 <USBD_CDC_DeInit+0x100>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3326      	adds	r3, #38	@ 0x26
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	32b0      	adds	r2, #176	@ 0xb0
 8009bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01f      	beq.n	8009bfc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	33b0      	adds	r3, #176	@ 0xb0
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	32b0      	adds	r2, #176	@ 0xb0
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f005 fd34 	bl	800f64c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	32b0      	adds	r2, #176	@ 0xb0
 8009bee:	2100      	movs	r1, #0
 8009bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000093 	.word	0x20000093
 8009c0c:	20000094 	.word	0x20000094
 8009c10:	20000095 	.word	0x20000095

08009c14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	32b0      	adds	r2, #176	@ 0xb0
 8009c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e0bf      	b.n	8009dc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d050      	beq.n	8009cf2 <USBD_CDC_Setup+0xde>
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	f040 80af 	bne.w	8009db4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	88db      	ldrh	r3, [r3, #6]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d03a      	beq.n	8009cd4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	b25b      	sxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	da1b      	bge.n	8009ca0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	33b0      	adds	r3, #176	@ 0xb0
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	88d2      	ldrh	r2, [r2, #6]
 8009c84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	88db      	ldrh	r3, [r3, #6]
 8009c8a:	2b07      	cmp	r3, #7
 8009c8c:	bf28      	it	cs
 8009c8e:	2307      	movcs	r3, #7
 8009c90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	89fa      	ldrh	r2, [r7, #14]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fd6b 	bl	800b774 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c9e:	e090      	b.n	8009dc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	785a      	ldrb	r2, [r3, #1]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	88db      	ldrh	r3, [r3, #6]
 8009cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8009cb0:	d803      	bhi.n	8009cba <USBD_CDC_Setup+0xa6>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	88db      	ldrh	r3, [r3, #6]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	e000      	b.n	8009cbc <USBD_CDC_Setup+0xa8>
 8009cba:	2240      	movs	r2, #64	@ 0x40
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009cc2:	6939      	ldr	r1, [r7, #16]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 fd7d 	bl	800b7cc <USBD_CtlPrepareRx>
      break;
 8009cd2:	e076      	b.n	8009dc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	33b0      	adds	r3, #176	@ 0xb0
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	7850      	ldrb	r0, [r2, #1]
 8009cea:	2200      	movs	r2, #0
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	4798      	blx	r3
      break;
 8009cf0:	e067      	b.n	8009dc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	2b0b      	cmp	r3, #11
 8009cf8:	d851      	bhi.n	8009d9e <USBD_CDC_Setup+0x18a>
 8009cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009d00 <USBD_CDC_Setup+0xec>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d31 	.word	0x08009d31
 8009d04:	08009dad 	.word	0x08009dad
 8009d08:	08009d9f 	.word	0x08009d9f
 8009d0c:	08009d9f 	.word	0x08009d9f
 8009d10:	08009d9f 	.word	0x08009d9f
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009d9f 	.word	0x08009d9f
 8009d1c:	08009d9f 	.word	0x08009d9f
 8009d20:	08009d9f 	.word	0x08009d9f
 8009d24:	08009d9f 	.word	0x08009d9f
 8009d28:	08009d5b 	.word	0x08009d5b
 8009d2c:	08009d85 	.word	0x08009d85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d107      	bne.n	8009d4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d3c:	f107 030a 	add.w	r3, r7, #10
 8009d40:	2202      	movs	r2, #2
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fd15 	bl	800b774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d4a:	e032      	b.n	8009db2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 fc9f 	bl	800b692 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	75fb      	strb	r3, [r7, #23]
          break;
 8009d58:	e02b      	b.n	8009db2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d107      	bne.n	8009d76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d66:	f107 030d 	add.w	r3, r7, #13
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 fd00 	bl	800b774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d74:	e01d      	b.n	8009db2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fc8a 	bl	800b692 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	75fb      	strb	r3, [r7, #23]
          break;
 8009d82:	e016      	b.n	8009db2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d00f      	beq.n	8009db0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f001 fc7d 	bl	800b692 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d9c:	e008      	b.n	8009db0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fc76 	bl	800b692 <USBD_CtlError>
          ret = USBD_FAIL;
 8009da6:	2303      	movs	r3, #3
 8009da8:	75fb      	strb	r3, [r7, #23]
          break;
 8009daa:	e002      	b.n	8009db2 <USBD_CDC_Setup+0x19e>
          break;
 8009dac:	bf00      	nop
 8009dae:	e008      	b.n	8009dc2 <USBD_CDC_Setup+0x1ae>
          break;
 8009db0:	bf00      	nop
      }
      break;
 8009db2:	e006      	b.n	8009dc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 fc6b 	bl	800b692 <USBD_CtlError>
      ret = USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	32b0      	adds	r2, #176	@ 0xb0
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e065      	b.n	8009ec2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	32b0      	adds	r2, #176	@ 0xb0
 8009e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	f003 020f 	and.w	r2, r3, #15
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	3318      	adds	r3, #24
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02f      	beq.n	8009e80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	f003 020f 	and.w	r2, r3, #15
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	3318      	adds	r3, #24
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	78fb      	ldrb	r3, [r7, #3]
 8009e38:	f003 010f 	and.w	r1, r3, #15
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	440b      	add	r3, r1
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4403      	add	r3, r0
 8009e48:	3348      	adds	r3, #72	@ 0x48
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e50:	fb01 f303 	mul.w	r3, r1, r3
 8009e54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d112      	bne.n	8009e80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	f003 020f 	and.w	r2, r3, #15
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3318      	adds	r3, #24
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e72:	78f9      	ldrb	r1, [r7, #3]
 8009e74:	2300      	movs	r3, #0
 8009e76:	2200      	movs	r2, #0
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f005 fb0a 	bl	800f492 <USBD_LL_Transmit>
 8009e7e:	e01f      	b.n	8009ec0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	33b0      	adds	r3, #176	@ 0xb0
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d010      	beq.n	8009ec0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	33b0      	adds	r3, #176	@ 0xb0
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	32b0      	adds	r2, #176	@ 0xb0
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	32b0      	adds	r2, #176	@ 0xb0
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e01a      	b.n	8009f32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f005 fb08 	bl	800f516 <USBD_LL_GetRxDataSize>
 8009f06:	4602      	mov	r2, r0
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	33b0      	adds	r3, #176	@ 0xb0
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	32b0      	adds	r2, #176	@ 0xb0
 8009f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e024      	b.n	8009fa6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	33b0      	adds	r3, #176	@ 0xb0
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d019      	beq.n	8009fa4 <USBD_CDC_EP0_RxReady+0x6a>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009f76:	2bff      	cmp	r3, #255	@ 0xff
 8009f78:	d014      	beq.n	8009fa4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	33b0      	adds	r3, #176	@ 0xb0
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	22ff      	movs	r2, #255	@ 0xff
 8009fa0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fb8:	2182      	movs	r1, #130	@ 0x82
 8009fba:	4818      	ldr	r0, [pc, #96]	@ (800a01c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fbc:	f000 fd09 	bl	800a9d2 <USBD_GetEpDesc>
 8009fc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	4815      	ldr	r0, [pc, #84]	@ (800a01c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fc6:	f000 fd04 	bl	800a9d2 <USBD_GetEpDesc>
 8009fca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fcc:	2181      	movs	r1, #129	@ 0x81
 8009fce:	4813      	ldr	r0, [pc, #76]	@ (800a01c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fd0:	f000 fcff 	bl	800a9d2 <USBD_GetEpDesc>
 8009fd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2210      	movs	r2, #16
 8009fe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ff0:	711a      	strb	r2, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d006      	beq.n	800a00a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a004:	711a      	strb	r2, [r3, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2243      	movs	r2, #67	@ 0x43
 800a00e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a010:	4b02      	ldr	r3, [pc, #8]	@ (800a01c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20000050 	.word	0x20000050

0800a020 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a028:	2182      	movs	r1, #130	@ 0x82
 800a02a:	4818      	ldr	r0, [pc, #96]	@ (800a08c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a02c:	f000 fcd1 	bl	800a9d2 <USBD_GetEpDesc>
 800a030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a032:	2101      	movs	r1, #1
 800a034:	4815      	ldr	r0, [pc, #84]	@ (800a08c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a036:	f000 fccc 	bl	800a9d2 <USBD_GetEpDesc>
 800a03a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a03c:	2181      	movs	r1, #129	@ 0x81
 800a03e:	4813      	ldr	r0, [pc, #76]	@ (800a08c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a040:	f000 fcc7 	bl	800a9d2 <USBD_GetEpDesc>
 800a044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2210      	movs	r2, #16
 800a050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d006      	beq.n	800a066 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2200      	movs	r2, #0
 800a05c:	711a      	strb	r2, [r3, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f042 0202 	orr.w	r2, r2, #2
 800a064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	711a      	strb	r2, [r3, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f042 0202 	orr.w	r2, r2, #2
 800a078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2243      	movs	r2, #67	@ 0x43
 800a07e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a080:	4b02      	ldr	r3, [pc, #8]	@ (800a08c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000050 	.word	0x20000050

0800a090 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a098:	2182      	movs	r1, #130	@ 0x82
 800a09a:	4818      	ldr	r0, [pc, #96]	@ (800a0fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a09c:	f000 fc99 	bl	800a9d2 <USBD_GetEpDesc>
 800a0a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	4815      	ldr	r0, [pc, #84]	@ (800a0fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0a6:	f000 fc94 	bl	800a9d2 <USBD_GetEpDesc>
 800a0aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0ac:	2181      	movs	r1, #129	@ 0x81
 800a0ae:	4813      	ldr	r0, [pc, #76]	@ (800a0fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0b0:	f000 fc8f 	bl	800a9d2 <USBD_GetEpDesc>
 800a0b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2210      	movs	r2, #16
 800a0c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0d0:	711a      	strb	r2, [r3, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0e4:	711a      	strb	r2, [r3, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2243      	movs	r2, #67	@ 0x43
 800a0ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0f0:	4b02      	ldr	r3, [pc, #8]	@ (800a0fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000050 	.word	0x20000050

0800a100 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	220a      	movs	r2, #10
 800a10c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a10e:	4b03      	ldr	r3, [pc, #12]	@ (800a11c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	2000000c 	.word	0x2000000c

0800a120 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	e009      	b.n	800a148 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	33b0      	adds	r3, #176	@ 0xb0
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	32b0      	adds	r2, #176	@ 0xb0
 800a16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a176:	2303      	movs	r3, #3
 800a178:	e008      	b.n	800a18c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	371c      	adds	r7, #28
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	32b0      	adds	r2, #176	@ 0xb0
 800a1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e004      	b.n	800a1c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
	...

0800a1d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	32b0      	adds	r2, #176	@ 0xb0
 800a1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	32b0      	adds	r2, #176	@ 0xb0
 800a1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e018      	b.n	800a234 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7c1b      	ldrb	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a20a:	4b0c      	ldr	r3, [pc, #48]	@ (800a23c <USBD_CDC_ReceivePacket+0x68>)
 800a20c:	7819      	ldrb	r1, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f005 f95b 	bl	800f4d4 <USBD_LL_PrepareReceive>
 800a21e:	e008      	b.n	800a232 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a220:	4b06      	ldr	r3, [pc, #24]	@ (800a23c <USBD_CDC_ReceivePacket+0x68>)
 800a222:	7819      	ldrb	r1, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a22a:	2340      	movs	r3, #64	@ 0x40
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f005 f951 	bl	800f4d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000094 	.word	0x20000094

0800a240 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a254:	2303      	movs	r3, #3
 800a256:	e01f      	b.n	800a298 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	79fa      	ldrb	r2, [r7, #7]
 800a28a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f004 ffcb 	bl	800f228 <USBD_LL_Init>
 800a292:	4603      	mov	r3, r0
 800a294:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a296:	7dfb      	ldrb	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e025      	b.n	800a304 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	32ae      	adds	r2, #174	@ 0xae
 800a2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00f      	beq.n	800a2f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32ae      	adds	r2, #174	@ 0xae
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e4:	f107 020e 	add.w	r2, r7, #14
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f004 ffd3 	bl	800f2c0 <USBD_LL_Start>
 800a31a:	4603      	mov	r3, r0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a32c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a350:	2b00      	cmp	r3, #0
 800a352:	d009      	beq.n	800a368 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a398:	2303      	movs	r3, #3
 800a39a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f001 f930 	bl	800b61e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3da:	f003 031f 	and.w	r3, r3, #31
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d01a      	beq.n	800a418 <USBD_LL_SetupStage+0x72>
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d822      	bhi.n	800a42c <USBD_LL_SetupStage+0x86>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <USBD_LL_SetupStage+0x4a>
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d00a      	beq.n	800a404 <USBD_LL_SetupStage+0x5e>
 800a3ee:	e01d      	b.n	800a42c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fb5d 	bl	800aab8 <USBD_StdDevReq>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]
      break;
 800a402:	e020      	b.n	800a446 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fbc5 	bl	800ab9c <USBD_StdItfReq>
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]
      break;
 800a416:	e016      	b.n	800a446 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fc27 	bl	800ac74 <USBD_StdEPReq>
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
      break;
 800a42a:	e00c      	b.n	800a446 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a432:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a436:	b2db      	uxtb	r3, r3
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f004 ffa0 	bl	800f380 <USBD_LL_StallEP>
 800a440:	4603      	mov	r3, r0
 800a442:	73fb      	strb	r3, [r7, #15]
      break;
 800a444:	bf00      	nop
  }

  return ret;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	460b      	mov	r3, r1
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d16e      	bne.n	800a546 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a46e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a476:	2b03      	cmp	r3, #3
 800a478:	f040 8098 	bne.w	800a5ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	689a      	ldr	r2, [r3, #8]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	429a      	cmp	r2, r3
 800a486:	d913      	bls.n	800a4b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	1ad2      	subs	r2, r2, r3
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	bf28      	it	cs
 800a4a2:	4613      	movcs	r3, r2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f001 f9ac 	bl	800b806 <USBD_CtlContinueRx>
 800a4ae:	e07d      	b.n	800a5ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a4b6:	f003 031f 	and.w	r3, r3, #31
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d014      	beq.n	800a4e8 <USBD_LL_DataOutStage+0x98>
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d81d      	bhi.n	800a4fe <USBD_LL_DataOutStage+0xae>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <USBD_LL_DataOutStage+0x7c>
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d003      	beq.n	800a4d2 <USBD_LL_DataOutStage+0x82>
 800a4ca:	e018      	b.n	800a4fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	75bb      	strb	r3, [r7, #22]
            break;
 800a4d0:	e018      	b.n	800a504 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	4619      	mov	r1, r3
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f000 fa5e 	bl	800a99e <USBD_CoreFindIF>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	75bb      	strb	r3, [r7, #22]
            break;
 800a4e6:	e00d      	b.n	800a504 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 fa60 	bl	800a9b8 <USBD_CoreFindEP>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	75bb      	strb	r3, [r7, #22]
            break;
 800a4fc:	e002      	b.n	800a504 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75bb      	strb	r3, [r7, #22]
            break;
 800a502:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a504:	7dbb      	ldrb	r3, [r7, #22]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d119      	bne.n	800a53e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b03      	cmp	r3, #3
 800a514:	d113      	bne.n	800a53e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a516:	7dba      	ldrb	r2, [r7, #22]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	32ae      	adds	r2, #174	@ 0xae
 800a51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00b      	beq.n	800a53e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a526:	7dba      	ldrb	r2, [r7, #22]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a52e:	7dba      	ldrb	r2, [r7, #22]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	32ae      	adds	r2, #174	@ 0xae
 800a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f001 f972 	bl	800b828 <USBD_CtlSendStatus>
 800a544:	e032      	b.n	800a5ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	4619      	mov	r1, r3
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fa31 	bl	800a9b8 <USBD_CoreFindEP>
 800a556:	4603      	mov	r3, r0
 800a558:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a55a:	7dbb      	ldrb	r3, [r7, #22]
 800a55c:	2bff      	cmp	r3, #255	@ 0xff
 800a55e:	d025      	beq.n	800a5ac <USBD_LL_DataOutStage+0x15c>
 800a560:	7dbb      	ldrb	r3, [r7, #22]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d122      	bne.n	800a5ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d117      	bne.n	800a5a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a572:	7dba      	ldrb	r2, [r7, #22]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	32ae      	adds	r2, #174	@ 0xae
 800a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00f      	beq.n	800a5a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a582:	7dba      	ldrb	r2, [r7, #22]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a58a:	7dba      	ldrb	r2, [r7, #22]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	32ae      	adds	r2, #174	@ 0xae
 800a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	7afa      	ldrb	r2, [r7, #11]
 800a598:	4611      	mov	r1, r2
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	4798      	blx	r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	e000      	b.n	800a5ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b086      	sub	sp, #24
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	607a      	str	r2, [r7, #4]
 800a5c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d16f      	bne.n	800a6aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3314      	adds	r3, #20
 800a5ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d15a      	bne.n	800a690 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d914      	bls.n	800a610 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f001 f8d4 	bl	800b7aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a602:	2300      	movs	r3, #0
 800a604:	2200      	movs	r2, #0
 800a606:	2100      	movs	r1, #0
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f004 ff63 	bl	800f4d4 <USBD_LL_PrepareReceive>
 800a60e:	e03f      	b.n	800a690 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	68da      	ldr	r2, [r3, #12]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d11c      	bne.n	800a656 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a624:	429a      	cmp	r2, r3
 800a626:	d316      	bcc.n	800a656 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a632:	429a      	cmp	r2, r3
 800a634:	d20f      	bcs.n	800a656 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a636:	2200      	movs	r2, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f001 f8b5 	bl	800b7aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a648:	2300      	movs	r3, #0
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f004 ff40 	bl	800f4d4 <USBD_LL_PrepareReceive>
 800a654:	e01c      	b.n	800a690 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d10f      	bne.n	800a682 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a682:	2180      	movs	r1, #128	@ 0x80
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f004 fe7b 	bl	800f380 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 f8df 	bl	800b84e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d03a      	beq.n	800a710 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fe42 	bl	800a324 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a6a8:	e032      	b.n	800a710 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f97f 	bl	800a9b8 <USBD_CoreFindEP>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
 800a6c0:	2bff      	cmp	r3, #255	@ 0xff
 800a6c2:	d025      	beq.n	800a710 <USBD_LL_DataInStage+0x15a>
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d122      	bne.n	800a710 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d11c      	bne.n	800a710 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a6d6:	7dfa      	ldrb	r2, [r7, #23]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	32ae      	adds	r2, #174	@ 0xae
 800a6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d014      	beq.n	800a710 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6e6:	7dfa      	ldrb	r2, [r7, #23]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6ee:	7dfa      	ldrb	r2, [r7, #23]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	32ae      	adds	r2, #174	@ 0xae
 800a6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	7afa      	ldrb	r2, [r7, #11]
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	4798      	blx	r3
 800a702:	4603      	mov	r3, r0
 800a704:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a706:	7dbb      	ldrb	r3, [r7, #22]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a70c:	7dbb      	ldrb	r3, [r7, #22]
 800a70e:	e000      	b.n	800a712 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d014      	beq.n	800a780 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00e      	beq.n	800a780 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6852      	ldr	r2, [r2, #4]
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	4611      	mov	r1, r2
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	4798      	blx	r3
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a77c:	2303      	movs	r3, #3
 800a77e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a780:	2340      	movs	r3, #64	@ 0x40
 800a782:	2200      	movs	r2, #0
 800a784:	2100      	movs	r1, #0
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f004 fdb5 	bl	800f2f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2240      	movs	r2, #64	@ 0x40
 800a798:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a79c:	2340      	movs	r3, #64	@ 0x40
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2180      	movs	r1, #128	@ 0x80
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f004 fda7 	bl	800f2f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2240      	movs	r2, #64	@ 0x40
 800a7b2:	621a      	str	r2, [r3, #32]

  return ret;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	78fa      	ldrb	r2, [r7, #3]
 800a7ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d106      	bne.n	800a82c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a824:	b2da      	uxtb	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d110      	bne.n	800a870 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d005      	beq.n	800a870 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	32ae      	adds	r2, #174	@ 0xae
 800a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a898:	2303      	movs	r3, #3
 800a89a:	e01c      	b.n	800a8d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d115      	bne.n	800a8d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	32ae      	adds	r2, #174	@ 0xae
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00b      	beq.n	800a8d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	32ae      	adds	r2, #174	@ 0xae
 800a8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	78fa      	ldrb	r2, [r7, #3]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	32ae      	adds	r2, #174	@ 0xae
 800a8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e01c      	b.n	800a93a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d115      	bne.n	800a938 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	32ae      	adds	r2, #174	@ 0xae
 800a916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32ae      	adds	r2, #174	@ 0xae
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a930:	78fa      	ldrb	r2, [r7, #3]
 800a932:	4611      	mov	r1, r2
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00e      	beq.n	800a994 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6852      	ldr	r2, [r2, #4]
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	4611      	mov	r1, r2
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b086      	sub	sp, #24
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	885b      	ldrh	r3, [r3, #2]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	7812      	ldrb	r2, [r2, #0]
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d91f      	bls.n	800aa38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9fe:	e013      	b.n	800aa28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa00:	f107 030a 	add.w	r3, r7, #10
 800aa04:	4619      	mov	r1, r3
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f000 f81b 	bl	800aa42 <USBD_GetNextDesc>
 800aa0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	2b05      	cmp	r3, #5
 800aa14:	d108      	bne.n	800aa28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	789b      	ldrb	r3, [r3, #2]
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d008      	beq.n	800aa36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	885b      	ldrh	r3, [r3, #2]
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	897b      	ldrh	r3, [r7, #10]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d8e5      	bhi.n	800aa00 <USBD_GetEpDesc+0x2e>
 800aa34:	e000      	b.n	800aa38 <USBD_GetEpDesc+0x66>
          break;
 800aa36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa38:	693b      	ldr	r3, [r7, #16]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	7812      	ldrb	r2, [r2, #0]
 800aa58:	4413      	add	r3, r2
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4413      	add	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b087      	sub	sp, #28
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa98:	8a3b      	ldrh	r3, [r7, #16]
 800aa9a:	021b      	lsls	r3, r3, #8
 800aa9c:	b21a      	sxth	r2, r3
 800aa9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	b21b      	sxth	r3, r3
 800aaa6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aaa8:	89fb      	ldrh	r3, [r7, #14]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
	...

0800aab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aace:	2b40      	cmp	r3, #64	@ 0x40
 800aad0:	d005      	beq.n	800aade <USBD_StdDevReq+0x26>
 800aad2:	2b40      	cmp	r3, #64	@ 0x40
 800aad4:	d857      	bhi.n	800ab86 <USBD_StdDevReq+0xce>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00f      	beq.n	800aafa <USBD_StdDevReq+0x42>
 800aada:	2b20      	cmp	r3, #32
 800aadc:	d153      	bne.n	800ab86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	32ae      	adds	r2, #174	@ 0xae
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf8:	e04a      	b.n	800ab90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	785b      	ldrb	r3, [r3, #1]
 800aafe:	2b09      	cmp	r3, #9
 800ab00:	d83b      	bhi.n	800ab7a <USBD_StdDevReq+0xc2>
 800ab02:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <USBD_StdDevReq+0x50>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800ab71 	.word	0x0800ab71
 800ab10:	0800ab7b 	.word	0x0800ab7b
 800ab14:	0800ab67 	.word	0x0800ab67
 800ab18:	0800ab7b 	.word	0x0800ab7b
 800ab1c:	0800ab3b 	.word	0x0800ab3b
 800ab20:	0800ab31 	.word	0x0800ab31
 800ab24:	0800ab7b 	.word	0x0800ab7b
 800ab28:	0800ab53 	.word	0x0800ab53
 800ab2c:	0800ab45 	.word	0x0800ab45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa3c 	bl	800afb0 <USBD_GetDescriptor>
          break;
 800ab38:	e024      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fbcb 	bl	800b2d8 <USBD_SetAddress>
          break;
 800ab42:	e01f      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fc0a 	bl	800b360 <USBD_SetConfig>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	73fb      	strb	r3, [r7, #15]
          break;
 800ab50:	e018      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fcad 	bl	800b4b4 <USBD_GetConfig>
          break;
 800ab5a:	e013      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fcde 	bl	800b520 <USBD_GetStatus>
          break;
 800ab64:	e00e      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fd0d 	bl	800b588 <USBD_SetFeature>
          break;
 800ab6e:	e009      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fd31 	bl	800b5da <USBD_ClrFeature>
          break;
 800ab78:	e004      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fd88 	bl	800b692 <USBD_CtlError>
          break;
 800ab82:	bf00      	nop
      }
      break;
 800ab84:	e004      	b.n	800ab90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fd82 	bl	800b692 <USBD_CtlError>
      break;
 800ab8e:	bf00      	nop
  }

  return ret;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abb2:	2b40      	cmp	r3, #64	@ 0x40
 800abb4:	d005      	beq.n	800abc2 <USBD_StdItfReq+0x26>
 800abb6:	2b40      	cmp	r3, #64	@ 0x40
 800abb8:	d852      	bhi.n	800ac60 <USBD_StdItfReq+0xc4>
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <USBD_StdItfReq+0x26>
 800abbe:	2b20      	cmp	r3, #32
 800abc0:	d14e      	bne.n	800ac60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	3b01      	subs	r3, #1
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d840      	bhi.n	800ac52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	889b      	ldrh	r3, [r3, #4]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d836      	bhi.n	800ac48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	889b      	ldrh	r3, [r3, #4]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff fedb 	bl	800a99e <USBD_CoreFindIF>
 800abe8:	4603      	mov	r3, r0
 800abea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2bff      	cmp	r3, #255	@ 0xff
 800abf0:	d01d      	beq.n	800ac2e <USBD_StdItfReq+0x92>
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d11a      	bne.n	800ac2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800abf8:	7bba      	ldrb	r2, [r7, #14]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	32ae      	adds	r2, #174	@ 0xae
 800abfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00f      	beq.n	800ac28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac08:	7bba      	ldrb	r2, [r7, #14]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac10:	7bba      	ldrb	r2, [r7, #14]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32ae      	adds	r2, #174	@ 0xae
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	4798      	blx	r3
 800ac22:	4603      	mov	r3, r0
 800ac24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac26:	e004      	b.n	800ac32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac2c:	e001      	b.n	800ac32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	88db      	ldrh	r3, [r3, #6]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d110      	bne.n	800ac5c <USBD_StdItfReq+0xc0>
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10d      	bne.n	800ac5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fdf1 	bl	800b828 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac46:	e009      	b.n	800ac5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fd21 	bl	800b692 <USBD_CtlError>
          break;
 800ac50:	e004      	b.n	800ac5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fd1c 	bl	800b692 <USBD_CtlError>
          break;
 800ac5a:	e000      	b.n	800ac5e <USBD_StdItfReq+0xc2>
          break;
 800ac5c:	bf00      	nop
      }
      break;
 800ac5e:	e004      	b.n	800ac6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fd15 	bl	800b692 <USBD_CtlError>
      break;
 800ac68:	bf00      	nop
  }

  return ret;
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	889b      	ldrh	r3, [r3, #4]
 800ac86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac90:	2b40      	cmp	r3, #64	@ 0x40
 800ac92:	d007      	beq.n	800aca4 <USBD_StdEPReq+0x30>
 800ac94:	2b40      	cmp	r3, #64	@ 0x40
 800ac96:	f200 817f 	bhi.w	800af98 <USBD_StdEPReq+0x324>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d02a      	beq.n	800acf4 <USBD_StdEPReq+0x80>
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	f040 817a 	bne.w	800af98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fe85 	bl	800a9b8 <USBD_CoreFindEP>
 800acae:	4603      	mov	r3, r0
 800acb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acb2:	7b7b      	ldrb	r3, [r7, #13]
 800acb4:	2bff      	cmp	r3, #255	@ 0xff
 800acb6:	f000 8174 	beq.w	800afa2 <USBD_StdEPReq+0x32e>
 800acba:	7b7b      	ldrb	r3, [r7, #13]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8170 	bne.w	800afa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800acc2:	7b7a      	ldrb	r2, [r7, #13]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800acca:	7b7a      	ldrb	r2, [r7, #13]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	32ae      	adds	r2, #174	@ 0xae
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8163 	beq.w	800afa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acdc:	7b7a      	ldrb	r2, [r7, #13]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32ae      	adds	r2, #174	@ 0xae
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800acf2:	e156      	b.n	800afa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	785b      	ldrb	r3, [r3, #1]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d008      	beq.n	800ad0e <USBD_StdEPReq+0x9a>
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	f300 8145 	bgt.w	800af8c <USBD_StdEPReq+0x318>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 809b 	beq.w	800ae3e <USBD_StdEPReq+0x1ca>
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d03c      	beq.n	800ad86 <USBD_StdEPReq+0x112>
 800ad0c:	e13e      	b.n	800af8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d002      	beq.n	800ad20 <USBD_StdEPReq+0xac>
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d016      	beq.n	800ad4c <USBD_StdEPReq+0xd8>
 800ad1e:	e02c      	b.n	800ad7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00d      	beq.n	800ad42 <USBD_StdEPReq+0xce>
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b80      	cmp	r3, #128	@ 0x80
 800ad2a:	d00a      	beq.n	800ad42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f004 fb25 	bl	800f380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad36:	2180      	movs	r1, #128	@ 0x80
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f004 fb21 	bl	800f380 <USBD_LL_StallEP>
 800ad3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad40:	e020      	b.n	800ad84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fca4 	bl	800b692 <USBD_CtlError>
              break;
 800ad4a:	e01b      	b.n	800ad84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	885b      	ldrh	r3, [r3, #2]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10e      	bne.n	800ad72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00b      	beq.n	800ad72 <USBD_StdEPReq+0xfe>
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	2b80      	cmp	r3, #128	@ 0x80
 800ad5e:	d008      	beq.n	800ad72 <USBD_StdEPReq+0xfe>
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	88db      	ldrh	r3, [r3, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d104      	bne.n	800ad72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f004 fb07 	bl	800f380 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fd58 	bl	800b828 <USBD_CtlSendStatus>

              break;
 800ad78:	e004      	b.n	800ad84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fc88 	bl	800b692 <USBD_CtlError>
              break;
 800ad82:	bf00      	nop
          }
          break;
 800ad84:	e107      	b.n	800af96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d002      	beq.n	800ad98 <USBD_StdEPReq+0x124>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d016      	beq.n	800adc4 <USBD_StdEPReq+0x150>
 800ad96:	e04b      	b.n	800ae30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00d      	beq.n	800adba <USBD_StdEPReq+0x146>
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	2b80      	cmp	r3, #128	@ 0x80
 800ada2:	d00a      	beq.n	800adba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f004 fae9 	bl	800f380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adae:	2180      	movs	r1, #128	@ 0x80
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f004 fae5 	bl	800f380 <USBD_LL_StallEP>
 800adb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800adb8:	e040      	b.n	800ae3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fc68 	bl	800b692 <USBD_CtlError>
              break;
 800adc2:	e03b      	b.n	800ae3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d136      	bne.n	800ae3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800add6:	7bbb      	ldrb	r3, [r7, #14]
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f004 faef 	bl	800f3be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fd21 	bl	800b828 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff fde4 	bl	800a9b8 <USBD_CoreFindEP>
 800adf0:	4603      	mov	r3, r0
 800adf2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adf4:	7b7b      	ldrb	r3, [r7, #13]
 800adf6:	2bff      	cmp	r3, #255	@ 0xff
 800adf8:	d01f      	beq.n	800ae3a <USBD_StdEPReq+0x1c6>
 800adfa:	7b7b      	ldrb	r3, [r7, #13]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d11c      	bne.n	800ae3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae00:	7b7a      	ldrb	r2, [r7, #13]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae08:	7b7a      	ldrb	r2, [r7, #13]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	32ae      	adds	r2, #174	@ 0xae
 800ae0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d010      	beq.n	800ae3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae18:	7b7a      	ldrb	r2, [r7, #13]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32ae      	adds	r2, #174	@ 0xae
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae2e:	e004      	b.n	800ae3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fc2d 	bl	800b692 <USBD_CtlError>
              break;
 800ae38:	e000      	b.n	800ae3c <USBD_StdEPReq+0x1c8>
              break;
 800ae3a:	bf00      	nop
          }
          break;
 800ae3c:	e0ab      	b.n	800af96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d002      	beq.n	800ae50 <USBD_StdEPReq+0x1dc>
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d032      	beq.n	800aeb4 <USBD_StdEPReq+0x240>
 800ae4e:	e097      	b.n	800af80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d007      	beq.n	800ae66 <USBD_StdEPReq+0x1f2>
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b80      	cmp	r3, #128	@ 0x80
 800ae5a:	d004      	beq.n	800ae66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fc17 	bl	800b692 <USBD_CtlError>
                break;
 800ae64:	e091      	b.n	800af8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	da0b      	bge.n	800ae86 <USBD_StdEPReq+0x212>
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	3310      	adds	r3, #16
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	4413      	add	r3, r2
 800ae82:	3304      	adds	r3, #4
 800ae84:	e00b      	b.n	800ae9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fc61 	bl	800b774 <USBD_CtlSendData>
              break;
 800aeb2:	e06a      	b.n	800af8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aeb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da11      	bge.n	800aee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	f003 020f 	and.w	r2, r3, #15
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	3324      	adds	r3, #36	@ 0x24
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d117      	bne.n	800af06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fbda 	bl	800b692 <USBD_CtlError>
                  break;
 800aede:	e054      	b.n	800af8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	f003 020f 	and.w	r2, r3, #15
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d104      	bne.n	800af06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fbc7 	bl	800b692 <USBD_CtlError>
                  break;
 800af04:	e041      	b.n	800af8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da0b      	bge.n	800af26 <USBD_StdEPReq+0x2b2>
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	3310      	adds	r3, #16
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	4413      	add	r3, r2
 800af22:	3304      	adds	r3, #4
 800af24:	e00b      	b.n	800af3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	4413      	add	r3, r2
 800af3c:	3304      	adds	r3, #4
 800af3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <USBD_StdEPReq+0x2d8>
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	2b80      	cmp	r3, #128	@ 0x80
 800af4a:	d103      	bne.n	800af54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e00e      	b.n	800af72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f004 fa4f 	bl	800f3fc <USBD_LL_IsStallEP>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	e002      	b.n	800af72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2202      	movs	r2, #2
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fbfb 	bl	800b774 <USBD_CtlSendData>
              break;
 800af7e:	e004      	b.n	800af8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fb85 	bl	800b692 <USBD_CtlError>
              break;
 800af88:	bf00      	nop
          }
          break;
 800af8a:	e004      	b.n	800af96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fb7f 	bl	800b692 <USBD_CtlError>
          break;
 800af94:	bf00      	nop
      }
      break;
 800af96:	e005      	b.n	800afa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb79 	bl	800b692 <USBD_CtlError>
      break;
 800afa0:	e000      	b.n	800afa4 <USBD_StdEPReq+0x330>
      break;
 800afa2:	bf00      	nop
  }

  return ret;
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	0a1b      	lsrs	r3, r3, #8
 800afcc:	b29b      	uxth	r3, r3
 800afce:	3b01      	subs	r3, #1
 800afd0:	2b0e      	cmp	r3, #14
 800afd2:	f200 8152 	bhi.w	800b27a <USBD_GetDescriptor+0x2ca>
 800afd6:	a201      	add	r2, pc, #4	@ (adr r2, 800afdc <USBD_GetDescriptor+0x2c>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800b04d 	.word	0x0800b04d
 800afe0:	0800b065 	.word	0x0800b065
 800afe4:	0800b0a5 	.word	0x0800b0a5
 800afe8:	0800b27b 	.word	0x0800b27b
 800afec:	0800b27b 	.word	0x0800b27b
 800aff0:	0800b21b 	.word	0x0800b21b
 800aff4:	0800b247 	.word	0x0800b247
 800aff8:	0800b27b 	.word	0x0800b27b
 800affc:	0800b27b 	.word	0x0800b27b
 800b000:	0800b27b 	.word	0x0800b27b
 800b004:	0800b27b 	.word	0x0800b27b
 800b008:	0800b27b 	.word	0x0800b27b
 800b00c:	0800b27b 	.word	0x0800b27b
 800b010:	0800b27b 	.word	0x0800b27b
 800b014:	0800b019 	.word	0x0800b019
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	7c12      	ldrb	r2, [r2, #16]
 800b030:	f107 0108 	add.w	r1, r7, #8
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
 800b038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b03a:	e126      	b.n	800b28a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fb27 	bl	800b692 <USBD_CtlError>
        err++;
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	3301      	adds	r3, #1
 800b048:	72fb      	strb	r3, [r7, #11]
      break;
 800b04a:	e11e      	b.n	800b28a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	7c12      	ldrb	r2, [r2, #16]
 800b058:	f107 0108 	add.w	r1, r7, #8
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
 800b060:	60f8      	str	r0, [r7, #12]
      break;
 800b062:	e112      	b.n	800b28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	7c1b      	ldrb	r3, [r3, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10d      	bne.n	800b088 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	f107 0208 	add.w	r2, r7, #8
 800b078:	4610      	mov	r0, r2
 800b07a:	4798      	blx	r3
 800b07c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3301      	adds	r3, #1
 800b082:	2202      	movs	r2, #2
 800b084:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b086:	e100      	b.n	800b28a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b090:	f107 0208 	add.w	r2, r7, #8
 800b094:	4610      	mov	r0, r2
 800b096:	4798      	blx	r3
 800b098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3301      	adds	r3, #1
 800b09e:	2202      	movs	r2, #2
 800b0a0:	701a      	strb	r2, [r3, #0]
      break;
 800b0a2:	e0f2      	b.n	800b28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	885b      	ldrh	r3, [r3, #2]
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	f200 80ac 	bhi.w	800b208 <USBD_GetDescriptor+0x258>
 800b0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <USBD_GetDescriptor+0x108>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b0d1 	.word	0x0800b0d1
 800b0bc:	0800b105 	.word	0x0800b105
 800b0c0:	0800b139 	.word	0x0800b139
 800b0c4:	0800b16d 	.word	0x0800b16d
 800b0c8:	0800b1a1 	.word	0x0800b1a1
 800b0cc:	0800b1d5 	.word	0x0800b1d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	7c12      	ldrb	r2, [r2, #16]
 800b0e8:	f107 0108 	add.w	r1, r7, #8
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4798      	blx	r3
 800b0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0f2:	e091      	b.n	800b218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 facb 	bl	800b692 <USBD_CtlError>
            err++;
 800b0fc:	7afb      	ldrb	r3, [r7, #11]
 800b0fe:	3301      	adds	r3, #1
 800b100:	72fb      	strb	r3, [r7, #11]
          break;
 800b102:	e089      	b.n	800b218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00b      	beq.n	800b128 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	7c12      	ldrb	r2, [r2, #16]
 800b11c:	f107 0108 	add.w	r1, r7, #8
 800b120:	4610      	mov	r0, r2
 800b122:	4798      	blx	r3
 800b124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b126:	e077      	b.n	800b218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fab1 	bl	800b692 <USBD_CtlError>
            err++;
 800b130:	7afb      	ldrb	r3, [r7, #11]
 800b132:	3301      	adds	r3, #1
 800b134:	72fb      	strb	r3, [r7, #11]
          break;
 800b136:	e06f      	b.n	800b218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00b      	beq.n	800b15c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	7c12      	ldrb	r2, [r2, #16]
 800b150:	f107 0108 	add.w	r1, r7, #8
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
 800b158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b15a:	e05d      	b.n	800b218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa97 	bl	800b692 <USBD_CtlError>
            err++;
 800b164:	7afb      	ldrb	r3, [r7, #11]
 800b166:	3301      	adds	r3, #1
 800b168:	72fb      	strb	r3, [r7, #11]
          break;
 800b16a:	e055      	b.n	800b218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	7c12      	ldrb	r2, [r2, #16]
 800b184:	f107 0108 	add.w	r1, r7, #8
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b18e:	e043      	b.n	800b218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fa7d 	bl	800b692 <USBD_CtlError>
            err++;
 800b198:	7afb      	ldrb	r3, [r7, #11]
 800b19a:	3301      	adds	r3, #1
 800b19c:	72fb      	strb	r3, [r7, #11]
          break;
 800b19e:	e03b      	b.n	800b218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00b      	beq.n	800b1c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	7c12      	ldrb	r2, [r2, #16]
 800b1b8:	f107 0108 	add.w	r1, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1c2:	e029      	b.n	800b218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa63 	bl	800b692 <USBD_CtlError>
            err++;
 800b1cc:	7afb      	ldrb	r3, [r7, #11]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1d2:	e021      	b.n	800b218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00b      	beq.n	800b1f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	7c12      	ldrb	r2, [r2, #16]
 800b1ec:	f107 0108 	add.w	r1, r7, #8
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4798      	blx	r3
 800b1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1f6:	e00f      	b.n	800b218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa49 	bl	800b692 <USBD_CtlError>
            err++;
 800b200:	7afb      	ldrb	r3, [r7, #11]
 800b202:	3301      	adds	r3, #1
 800b204:	72fb      	strb	r3, [r7, #11]
          break;
 800b206:	e007      	b.n	800b218 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa41 	bl	800b692 <USBD_CtlError>
          err++;
 800b210:	7afb      	ldrb	r3, [r7, #11]
 800b212:	3301      	adds	r3, #1
 800b214:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b216:	bf00      	nop
      }
      break;
 800b218:	e037      	b.n	800b28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	7c1b      	ldrb	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d109      	bne.n	800b236 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b22a:	f107 0208 	add.w	r2, r7, #8
 800b22e:	4610      	mov	r0, r2
 800b230:	4798      	blx	r3
 800b232:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b234:	e029      	b.n	800b28a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fa2a 	bl	800b692 <USBD_CtlError>
        err++;
 800b23e:	7afb      	ldrb	r3, [r7, #11]
 800b240:	3301      	adds	r3, #1
 800b242:	72fb      	strb	r3, [r7, #11]
      break;
 800b244:	e021      	b.n	800b28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	7c1b      	ldrb	r3, [r3, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10d      	bne.n	800b26a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b256:	f107 0208 	add.w	r2, r7, #8
 800b25a:	4610      	mov	r0, r2
 800b25c:	4798      	blx	r3
 800b25e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3301      	adds	r3, #1
 800b264:	2207      	movs	r2, #7
 800b266:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b268:	e00f      	b.n	800b28a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fa10 	bl	800b692 <USBD_CtlError>
        err++;
 800b272:	7afb      	ldrb	r3, [r7, #11]
 800b274:	3301      	adds	r3, #1
 800b276:	72fb      	strb	r3, [r7, #11]
      break;
 800b278:	e007      	b.n	800b28a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fa08 	bl	800b692 <USBD_CtlError>
      err++;
 800b282:	7afb      	ldrb	r3, [r7, #11]
 800b284:	3301      	adds	r3, #1
 800b286:	72fb      	strb	r3, [r7, #11]
      break;
 800b288:	bf00      	nop
  }

  if (err != 0U)
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d11e      	bne.n	800b2ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	88db      	ldrh	r3, [r3, #6]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d016      	beq.n	800b2c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b298:	893b      	ldrh	r3, [r7, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00e      	beq.n	800b2bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	88da      	ldrh	r2, [r3, #6]
 800b2a2:	893b      	ldrh	r3, [r7, #8]
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	bf28      	it	cs
 800b2a8:	4613      	movcs	r3, r2
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2ae:	893b      	ldrh	r3, [r7, #8]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	68f9      	ldr	r1, [r7, #12]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fa5d 	bl	800b774 <USBD_CtlSendData>
 800b2ba:	e009      	b.n	800b2d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f9e7 	bl	800b692 <USBD_CtlError>
 800b2c4:	e004      	b.n	800b2d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 faae 	bl	800b828 <USBD_CtlSendStatus>
 800b2cc:	e000      	b.n	800b2d0 <USBD_GetDescriptor+0x320>
    return;
 800b2ce:	bf00      	nop
  }
}
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop

0800b2d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	889b      	ldrh	r3, [r3, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d131      	bne.n	800b34e <USBD_SetAddress+0x76>
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	88db      	ldrh	r3, [r3, #6]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d12d      	bne.n	800b34e <USBD_SetAddress+0x76>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	885b      	ldrh	r3, [r3, #2]
 800b2f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2f8:	d829      	bhi.n	800b34e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	885b      	ldrh	r3, [r3, #2]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d104      	bne.n	800b31c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f9bc 	bl	800b692 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31a:	e01d      	b.n	800b358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	7bfa      	ldrb	r2, [r7, #15]
 800b320:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f004 f893 	bl	800f454 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa7a 	bl	800b828 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2202      	movs	r2, #2
 800b33e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b342:	e009      	b.n	800b358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34c:	e004      	b.n	800b358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f99e 	bl	800b692 <USBD_CtlError>
  }
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	885b      	ldrh	r3, [r3, #2]
 800b372:	b2da      	uxtb	r2, r3
 800b374:	4b4e      	ldr	r3, [pc, #312]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b378:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d905      	bls.n	800b38c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f985 	bl	800b692 <USBD_CtlError>
    return USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	e08c      	b.n	800b4a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d002      	beq.n	800b39e <USBD_SetConfig+0x3e>
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d029      	beq.n	800b3f0 <USBD_SetConfig+0x90>
 800b39c:	e075      	b.n	800b48a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b39e:	4b44      	ldr	r3, [pc, #272]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d020      	beq.n	800b3e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3a6:	4b42      	ldr	r3, [pc, #264]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7fe ffbf 	bl	800a33a <USBD_SetClassConfig>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d008      	beq.n	800b3d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f962 	bl	800b692 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3d6:	e065      	b.n	800b4a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fa25 	bl	800b828 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2203      	movs	r2, #3
 800b3e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b3e6:	e05d      	b.n	800b4a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fa1d 	bl	800b828 <USBD_CtlSendStatus>
      break;
 800b3ee:	e059      	b.n	800b4a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3f0:	4b2f      	ldr	r3, [pc, #188]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d112      	bne.n	800b41e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b400:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	461a      	mov	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b40a:	4b29      	ldr	r3, [pc, #164]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7fe ffae 	bl	800a372 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa06 	bl	800b828 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b41c:	e042      	b.n	800b4a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b41e:	4b24      	ldr	r3, [pc, #144]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d02a      	beq.n	800b482 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	b2db      	uxtb	r3, r3
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7fe ff9c 	bl	800a372 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b43a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b444:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fe ff75 	bl	800a33a <USBD_SetClassConfig>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00f      	beq.n	800b47a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f918 	bl	800b692 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	b2db      	uxtb	r3, r3
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7fe ff81 	bl	800a372 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b478:	e014      	b.n	800b4a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f9d4 	bl	800b828 <USBD_CtlSendStatus>
      break;
 800b480:	e010      	b.n	800b4a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f9d0 	bl	800b828 <USBD_CtlSendStatus>
      break;
 800b488:	e00c      	b.n	800b4a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f900 	bl	800b692 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b492:	4b07      	ldr	r3, [pc, #28]	@ (800b4b0 <USBD_SetConfig+0x150>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7fe ff6a 	bl	800a372 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a2:	bf00      	nop
  }

  return ret;
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20001028 	.word	0x20001028

0800b4b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	88db      	ldrh	r3, [r3, #6]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d004      	beq.n	800b4d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f8e2 	bl	800b692 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4ce:	e023      	b.n	800b518 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	dc02      	bgt.n	800b4e2 <USBD_GetConfig+0x2e>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc03      	bgt.n	800b4e8 <USBD_GetConfig+0x34>
 800b4e0:	e015      	b.n	800b50e <USBD_GetConfig+0x5a>
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d00b      	beq.n	800b4fe <USBD_GetConfig+0x4a>
 800b4e6:	e012      	b.n	800b50e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f93c 	bl	800b774 <USBD_CtlSendData>
        break;
 800b4fc:	e00c      	b.n	800b518 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3304      	adds	r3, #4
 800b502:	2201      	movs	r2, #1
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f934 	bl	800b774 <USBD_CtlSendData>
        break;
 800b50c:	e004      	b.n	800b518 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f8be 	bl	800b692 <USBD_CtlError>
        break;
 800b516:	bf00      	nop
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b530:	b2db      	uxtb	r3, r3
 800b532:	3b01      	subs	r3, #1
 800b534:	2b02      	cmp	r3, #2
 800b536:	d81e      	bhi.n	800b576 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	88db      	ldrh	r3, [r3, #6]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d004      	beq.n	800b54a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f8a5 	bl	800b692 <USBD_CtlError>
        break;
 800b548:	e01a      	b.n	800b580 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d005      	beq.n	800b566 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f043 0202 	orr.w	r2, r3, #2
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	330c      	adds	r3, #12
 800b56a:	2202      	movs	r2, #2
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f900 	bl	800b774 <USBD_CtlSendData>
      break;
 800b574:	e004      	b.n	800b580 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f88a 	bl	800b692 <USBD_CtlError>
      break;
 800b57e:	bf00      	nop
  }
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	885b      	ldrh	r3, [r3, #2]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d107      	bne.n	800b5aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f940 	bl	800b828 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5a8:	e013      	b.n	800b5d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	885b      	ldrh	r3, [r3, #2]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d10b      	bne.n	800b5ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	889b      	ldrh	r3, [r3, #4]
 800b5b6:	0a1b      	lsrs	r3, r3, #8
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f930 	bl	800b828 <USBD_CtlSendStatus>
}
 800b5c8:	e003      	b.n	800b5d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f860 	bl	800b692 <USBD_CtlError>
}
 800b5d2:	bf00      	nop
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b082      	sub	sp, #8
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d80b      	bhi.n	800b60a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d10c      	bne.n	800b614 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f910 	bl	800b828 <USBD_CtlSendStatus>
      }
      break;
 800b608:	e004      	b.n	800b614 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f840 	bl	800b692 <USBD_CtlError>
      break;
 800b612:	e000      	b.n	800b616 <USBD_ClrFeature+0x3c>
      break;
 800b614:	bf00      	nop
  }
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	781a      	ldrb	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3301      	adds	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	781a      	ldrb	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3301      	adds	r3, #1
 800b646:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7ff fa16 	bl	800aa7a <SWAPBYTE>
 800b64e:	4603      	mov	r3, r0
 800b650:	461a      	mov	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3301      	adds	r3, #1
 800b65a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3301      	adds	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff fa09 	bl	800aa7a <SWAPBYTE>
 800b668:	4603      	mov	r3, r0
 800b66a:	461a      	mov	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3301      	adds	r3, #1
 800b67a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff f9fc 	bl	800aa7a <SWAPBYTE>
 800b682:	4603      	mov	r3, r0
 800b684:	461a      	mov	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	80da      	strh	r2, [r3, #6]
}
 800b68a:	bf00      	nop
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b69c:	2180      	movs	r1, #128	@ 0x80
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f003 fe6e 	bl	800f380 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f003 fe6a 	bl	800f380 <USBD_LL_StallEP>
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d036      	beq.n	800b738 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6ce:	6938      	ldr	r0, [r7, #16]
 800b6d0:	f000 f836 	bl	800b740 <USBD_GetLen>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7812      	ldrb	r2, [r2, #0]
 800b6ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	3301      	adds	r3, #1
 800b702:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b704:	e013      	b.n	800b72e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	4413      	add	r3, r2
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	3301      	adds	r3, #1
 800b716:	613b      	str	r3, [r7, #16]
    idx++;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	3301      	adds	r3, #1
 800b71c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	4413      	add	r3, r2
 800b724:	2200      	movs	r2, #0
 800b726:	701a      	strb	r2, [r3, #0]
    idx++;
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	3301      	adds	r3, #1
 800b72c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1e7      	bne.n	800b706 <USBD_GetString+0x52>
 800b736:	e000      	b.n	800b73a <USBD_GetString+0x86>
    return;
 800b738:	bf00      	nop
  }
}
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b750:	e005      	b.n	800b75e <USBD_GetLen+0x1e>
  {
    len++;
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	3301      	adds	r3, #1
 800b756:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	3301      	adds	r3, #1
 800b75c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1f5      	bne.n	800b752 <USBD_GetLen+0x12>
  }

  return len;
 800b766:	7bfb      	ldrb	r3, [r7, #15]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2202      	movs	r2, #2
 800b784:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	2100      	movs	r1, #0
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f003 fe79 	bl	800f492 <USBD_LL_Transmit>

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f003 fe68 	bl	800f492 <USBD_LL_Transmit>

  return USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f003 fe6c 	bl	800f4d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	2100      	movs	r1, #0
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f003 fe5b 	bl	800f4d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2204      	movs	r2, #4
 800b834:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b838:	2300      	movs	r3, #0
 800b83a:	2200      	movs	r2, #0
 800b83c:	2100      	movs	r1, #0
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f003 fe27 	bl	800f492 <USBD_LL_Transmit>

  return USBD_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2205      	movs	r2, #5
 800b85a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b85e:	2300      	movs	r3, #0
 800b860:	2200      	movs	r2, #0
 800b862:	2100      	movs	r1, #0
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f003 fe35 	bl	800f4d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b878:	bf00      	nop
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
	...

0800b884 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b88a:	f3ef 8305 	mrs	r3, IPSR
 800b88e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b890:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10f      	bne.n	800b8b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b896:	f3ef 8310 	mrs	r3, PRIMASK
 800b89a:	607b      	str	r3, [r7, #4]
  return(result);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b8a2:	f3ef 8311 	mrs	r3, BASEPRI
 800b8a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d007      	beq.n	800b8be <osKernelInitialize+0x3a>
 800b8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e8 <osKernelInitialize+0x64>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d103      	bne.n	800b8be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b8b6:	f06f 0305 	mvn.w	r3, #5
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	e00c      	b.n	800b8d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b8be:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e8 <osKernelInitialize+0x64>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d105      	bne.n	800b8d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b8c6:	4b08      	ldr	r3, [pc, #32]	@ (800b8e8 <osKernelInitialize+0x64>)
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	e002      	b.n	800b8d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	2000102c 	.word	0x2000102c

0800b8ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8f2:	f3ef 8305 	mrs	r3, IPSR
 800b8f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10f      	bne.n	800b91e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b902:	607b      	str	r3, [r7, #4]
  return(result);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b90a:	f3ef 8311 	mrs	r3, BASEPRI
 800b90e:	603b      	str	r3, [r7, #0]
  return(result);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <osKernelStart+0x3a>
 800b916:	4b0f      	ldr	r3, [pc, #60]	@ (800b954 <osKernelStart+0x68>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d103      	bne.n	800b926 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b91e:	f06f 0305 	mvn.w	r3, #5
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	e010      	b.n	800b948 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b926:	4b0b      	ldr	r3, [pc, #44]	@ (800b954 <osKernelStart+0x68>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d109      	bne.n	800b942 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b92e:	f7ff ffa1 	bl	800b874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b932:	4b08      	ldr	r3, [pc, #32]	@ (800b954 <osKernelStart+0x68>)
 800b934:	2202      	movs	r2, #2
 800b936:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b938:	f001 fad0 	bl	800cedc <vTaskStartScheduler>
      stat = osOK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e002      	b.n	800b948 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b942:	f04f 33ff 	mov.w	r3, #4294967295
 800b946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b948:	68fb      	ldr	r3, [r7, #12]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	2000102c 	.word	0x2000102c

0800b958 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b958:	b580      	push	{r7, lr}
 800b95a:	b090      	sub	sp, #64	@ 0x40
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b964:	2300      	movs	r3, #0
 800b966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b968:	f3ef 8305 	mrs	r3, IPSR
 800b96c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b96e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 808f 	bne.w	800ba94 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b976:	f3ef 8310 	mrs	r3, PRIMASK
 800b97a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d105      	bne.n	800b98e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b982:	f3ef 8311 	mrs	r3, BASEPRI
 800b986:	617b      	str	r3, [r7, #20]
  return(result);
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <osThreadNew+0x3e>
 800b98e:	4b44      	ldr	r3, [pc, #272]	@ (800baa0 <osThreadNew+0x148>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b02      	cmp	r3, #2
 800b994:	d07e      	beq.n	800ba94 <osThreadNew+0x13c>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d07b      	beq.n	800ba94 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b99c:	2380      	movs	r3, #128	@ 0x80
 800b99e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b9a0:	2318      	movs	r3, #24
 800b9a2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d045      	beq.n	800ba40 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <osThreadNew+0x6a>
        name = attr->name;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d008      	beq.n	800b9e8 <osThreadNew+0x90>
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	2b38      	cmp	r3, #56	@ 0x38
 800b9da:	d805      	bhi.n	800b9e8 <osThreadNew+0x90>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <osThreadNew+0x94>
        return (NULL);
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	e054      	b.n	800ba96 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	695b      	ldr	r3, [r3, #20]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	089b      	lsrs	r3, r3, #2
 800b9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00e      	beq.n	800ba22 <osThreadNew+0xca>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	2ba7      	cmp	r3, #167	@ 0xa7
 800ba0a:	d90a      	bls.n	800ba22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d006      	beq.n	800ba22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <osThreadNew+0xca>
        mem = 1;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	623b      	str	r3, [r7, #32]
 800ba20:	e010      	b.n	800ba44 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10c      	bne.n	800ba44 <osThreadNew+0xec>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d108      	bne.n	800ba44 <osThreadNew+0xec>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d104      	bne.n	800ba44 <osThreadNew+0xec>
          mem = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	623b      	str	r3, [r7, #32]
 800ba3e:	e001      	b.n	800ba44 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d110      	bne.n	800ba6c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba52:	9202      	str	r2, [sp, #8]
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f001 f83d 	bl	800cae0 <xTaskCreateStatic>
 800ba66:	4603      	mov	r3, r0
 800ba68:	613b      	str	r3, [r7, #16]
 800ba6a:	e013      	b.n	800ba94 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d110      	bne.n	800ba94 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	f107 0310 	add.w	r3, r7, #16
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f001 f891 	bl	800cbac <xTaskCreate>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d001      	beq.n	800ba94 <osThreadNew+0x13c>
          hTask = NULL;
 800ba90:	2300      	movs	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba94:	693b      	ldr	r3, [r7, #16]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3730      	adds	r7, #48	@ 0x30
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	2000102c 	.word	0x2000102c

0800baa4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baac:	f3ef 8305 	mrs	r3, IPSR
 800bab0:	613b      	str	r3, [r7, #16]
  return(result);
 800bab2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10f      	bne.n	800bad8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bab8:	f3ef 8310 	mrs	r3, PRIMASK
 800babc:	60fb      	str	r3, [r7, #12]
  return(result);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d105      	bne.n	800bad0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bac4:	f3ef 8311 	mrs	r3, BASEPRI
 800bac8:	60bb      	str	r3, [r7, #8]
  return(result);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d007      	beq.n	800bae0 <osDelay+0x3c>
 800bad0:	4b0a      	ldr	r3, [pc, #40]	@ (800bafc <osDelay+0x58>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d103      	bne.n	800bae0 <osDelay+0x3c>
    stat = osErrorISR;
 800bad8:	f06f 0305 	mvn.w	r3, #5
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	e007      	b.n	800baf0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 f9be 	bl	800ce6c <vTaskDelay>
    }
  }

  return (stat);
 800baf0:	697b      	ldr	r3, [r7, #20]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	2000102c 	.word	0x2000102c

0800bb00 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f002 fbc9 	bl	800e2a0 <pvTimerGetTimerID>
 800bb0e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <TimerCallback+0x22>
    callb->func (callb->arg);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	6852      	ldr	r2, [r2, #4]
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4798      	blx	r3
  }
}
 800bb22:	bf00      	nop
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08e      	sub	sp, #56	@ 0x38
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	607a      	str	r2, [r7, #4]
 800bb36:	603b      	str	r3, [r7, #0]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb40:	f3ef 8305 	mrs	r3, IPSR
 800bb44:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d16a      	bne.n	800bc22 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb4c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb50:	617b      	str	r3, [r7, #20]
  return(result);
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d105      	bne.n	800bb64 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb58:	f3ef 8311 	mrs	r3, BASEPRI
 800bb5c:	613b      	str	r3, [r7, #16]
  return(result);
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <osTimerNew+0x40>
 800bb64:	4b31      	ldr	r3, [pc, #196]	@ (800bc2c <osTimerNew+0x100>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d05a      	beq.n	800bc22 <osTimerNew+0xf6>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d057      	beq.n	800bc22 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800bb72:	2008      	movs	r0, #8
 800bb74:	f002 fdf8 	bl	800e768 <pvPortMalloc>
 800bb78:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d050      	beq.n	800bc22 <osTimerNew+0xf6>
      callb->func = func;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800bb8c:	7afb      	ldrb	r3, [r7, #11]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d102      	bne.n	800bb98 <osTimerNew+0x6c>
        reload = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb96:	e001      	b.n	800bb9c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 800bb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bba0:	623b      	str	r3, [r7, #32]
      name = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d01c      	beq.n	800bbe6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <osTimerNew+0x8e>
          name = attr->name;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d006      	beq.n	800bbd0 <osTimerNew+0xa4>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbc8:	d902      	bls.n	800bbd0 <osTimerNew+0xa4>
          mem = 1;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	623b      	str	r3, [r7, #32]
 800bbce:	e00c      	b.n	800bbea <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d108      	bne.n	800bbea <osTimerNew+0xbe>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d104      	bne.n	800bbea <osTimerNew+0xbe>
            mem = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	623b      	str	r3, [r7, #32]
 800bbe4:	e001      	b.n	800bbea <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d10c      	bne.n	800bc0a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	4b0e      	ldr	r3, [pc, #56]	@ (800bc30 <osTimerNew+0x104>)
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbfe:	2101      	movs	r1, #1
 800bc00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc02:	f001 ff82 	bl	800db0a <xTimerCreateStatic>
 800bc06:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bc08:	e00b      	b.n	800bc22 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800bc0a:	6a3b      	ldr	r3, [r7, #32]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d108      	bne.n	800bc22 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800bc10:	4b07      	ldr	r3, [pc, #28]	@ (800bc30 <osTimerNew+0x104>)
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc18:	2101      	movs	r1, #1
 800bc1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc1c:	f001 ff54 	bl	800dac8 <xTimerCreate>
 800bc20:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800bc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3730      	adds	r7, #48	@ 0x30
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	2000102c 	.word	0x2000102c
 800bc30:	0800bb01 	.word	0x0800bb01

0800bc34 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	@ 0x28
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc42:	f3ef 8305 	mrs	r3, IPSR
 800bc46:	617b      	str	r3, [r7, #20]
  return(result);
 800bc48:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10f      	bne.n	800bc6e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc4e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc52:	613b      	str	r3, [r7, #16]
  return(result);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc5a:	f3ef 8311 	mrs	r3, BASEPRI
 800bc5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d007      	beq.n	800bc76 <osTimerStart+0x42>
 800bc66:	4b12      	ldr	r3, [pc, #72]	@ (800bcb0 <osTimerStart+0x7c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d103      	bne.n	800bc76 <osTimerStart+0x42>
    stat = osErrorISR;
 800bc6e:	f06f 0305 	mvn.w	r3, #5
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	e017      	b.n	800bca6 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d103      	bne.n	800bc84 <osTimerStart+0x50>
    stat = osErrorParameter;
 800bc7c:	f06f 0303 	mvn.w	r3, #3
 800bc80:	61fb      	str	r3, [r7, #28]
 800bc82:	e010      	b.n	800bca6 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800bc84:	2300      	movs	r3, #0
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	2104      	movs	r1, #4
 800bc8e:	69b8      	ldr	r0, [r7, #24]
 800bc90:	f001 ffbe 	bl	800dc10 <xTimerGenericCommand>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d102      	bne.n	800bca0 <osTimerStart+0x6c>
      stat = osOK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	e002      	b.n	800bca6 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800bca0:	f06f 0302 	mvn.w	r3, #2
 800bca4:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800bca6:	69fb      	ldr	r3, [r7, #28]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3720      	adds	r7, #32
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	2000102c 	.word	0x2000102c

0800bcb4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08a      	sub	sp, #40	@ 0x28
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcc0:	f3ef 8305 	mrs	r3, IPSR
 800bcc4:	617b      	str	r3, [r7, #20]
  return(result);
 800bcc6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10f      	bne.n	800bcec <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bccc:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd0:	613b      	str	r3, [r7, #16]
  return(result);
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d105      	bne.n	800bce4 <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bcd8:	f3ef 8311 	mrs	r3, BASEPRI
 800bcdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <osTimerStop+0x40>
 800bce4:	4b17      	ldr	r3, [pc, #92]	@ (800bd44 <osTimerStop+0x90>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d103      	bne.n	800bcf4 <osTimerStop+0x40>
    stat = osErrorISR;
 800bcec:	f06f 0305 	mvn.w	r3, #5
 800bcf0:	61fb      	str	r3, [r7, #28]
 800bcf2:	e021      	b.n	800bd38 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d103      	bne.n	800bd02 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800bcfa:	f06f 0303 	mvn.w	r3, #3
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	e01a      	b.n	800bd38 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800bd02:	69b8      	ldr	r0, [r7, #24]
 800bd04:	f002 faa0 	bl	800e248 <xTimerIsTimerActive>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d103      	bne.n	800bd16 <osTimerStop+0x62>
      stat = osErrorResource;
 800bd0e:	f06f 0302 	mvn.w	r3, #2
 800bd12:	61fb      	str	r3, [r7, #28]
 800bd14:	e010      	b.n	800bd38 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800bd16:	2300      	movs	r3, #0
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2103      	movs	r1, #3
 800bd20:	69b8      	ldr	r0, [r7, #24]
 800bd22:	f001 ff75 	bl	800dc10 <xTimerGenericCommand>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d102      	bne.n	800bd32 <osTimerStop+0x7e>
        stat = osOK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61fb      	str	r3, [r7, #28]
 800bd30:	e002      	b.n	800bd38 <osTimerStop+0x84>
      } else {
        stat = osError;
 800bd32:	f04f 33ff 	mov.w	r3, #4294967295
 800bd36:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800bd38:	69fb      	ldr	r3, [r7, #28]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	2000102c 	.word	0x2000102c

0800bd48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08c      	sub	sp, #48	@ 0x30
 800bd4c:	af02      	add	r7, sp, #8
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd58:	f3ef 8305 	mrs	r3, IPSR
 800bd5c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d16f      	bne.n	800be44 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd64:	f3ef 8310 	mrs	r3, PRIMASK
 800bd68:	617b      	str	r3, [r7, #20]
  return(result);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d105      	bne.n	800bd7c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd70:	f3ef 8311 	mrs	r3, BASEPRI
 800bd74:	613b      	str	r3, [r7, #16]
  return(result);
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <osMessageQueueNew+0x3c>
 800bd7c:	4b34      	ldr	r3, [pc, #208]	@ (800be50 <osMessageQueueNew+0x108>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d05f      	beq.n	800be44 <osMessageQueueNew+0xfc>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d05c      	beq.n	800be44 <osMessageQueueNew+0xfc>
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d059      	beq.n	800be44 <osMessageQueueNew+0xfc>
    mem = -1;
 800bd90:	f04f 33ff 	mov.w	r3, #4294967295
 800bd94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d029      	beq.n	800bdf0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d012      	beq.n	800bdca <osMessageQueueNew+0x82>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	2b4f      	cmp	r3, #79	@ 0x4f
 800bdaa:	d90e      	bls.n	800bdca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00a      	beq.n	800bdca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	695a      	ldr	r2, [r3, #20]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	fb01 f303 	mul.w	r3, r1, r3
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d302      	bcc.n	800bdca <osMessageQueueNew+0x82>
        mem = 1;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	623b      	str	r3, [r7, #32]
 800bdc8:	e014      	b.n	800bdf4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d110      	bne.n	800bdf4 <osMessageQueueNew+0xac>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10c      	bne.n	800bdf4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d108      	bne.n	800bdf4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d104      	bne.n	800bdf4 <osMessageQueueNew+0xac>
          mem = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	623b      	str	r3, [r7, #32]
 800bdee:	e001      	b.n	800bdf4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d10b      	bne.n	800be12 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	691a      	ldr	r2, [r3, #16]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	2100      	movs	r1, #0
 800be04:	9100      	str	r1, [sp, #0]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 f977 	bl	800c0fc <xQueueGenericCreateStatic>
 800be0e:	6278      	str	r0, [r7, #36]	@ 0x24
 800be10:	e008      	b.n	800be24 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800be18:	2200      	movs	r2, #0
 800be1a:	68b9      	ldr	r1, [r7, #8]
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f9f4 	bl	800c20a <xQueueGenericCreate>
 800be22:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00c      	beq.n	800be44 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <osMessageQueueNew+0xf0>
        name = attr->name;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	61fb      	str	r3, [r7, #28]
 800be36:	e001      	b.n	800be3c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800be3c:	69f9      	ldr	r1, [r7, #28]
 800be3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be40:	f000 fdf0 	bl	800ca24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be46:	4618      	mov	r0, r3
 800be48:	3728      	adds	r7, #40	@ 0x28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	2000102c 	.word	0x2000102c

0800be54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4a07      	ldr	r2, [pc, #28]	@ (800be80 <vApplicationGetIdleTaskMemory+0x2c>)
 800be64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	4a06      	ldr	r2, [pc, #24]	@ (800be84 <vApplicationGetIdleTaskMemory+0x30>)
 800be6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2280      	movs	r2, #128	@ 0x80
 800be70:	601a      	str	r2, [r3, #0]
}
 800be72:	bf00      	nop
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20001030 	.word	0x20001030
 800be84:	200010d8 	.word	0x200010d8

0800be88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4a07      	ldr	r2, [pc, #28]	@ (800beb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800be98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	4a06      	ldr	r2, [pc, #24]	@ (800beb8 <vApplicationGetTimerTaskMemory+0x30>)
 800be9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bea6:	601a      	str	r2, [r3, #0]
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	200012d8 	.word	0x200012d8
 800beb8:	20001380 	.word	0x20001380

0800bebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f103 0208 	add.w	r2, r3, #8
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f103 0208 	add.w	r2, r3, #8
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f103 0208 	add.w	r2, r3, #8
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf0a:	bf00      	nop
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf16:	b480      	push	{r7}
 800bf18:	b085      	sub	sp, #20
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	689a      	ldr	r2, [r3, #8]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	601a      	str	r2, [r3, #0]
}
 800bf52:	bf00      	nop
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b085      	sub	sp, #20
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d103      	bne.n	800bf7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e00c      	b.n	800bf98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	3308      	adds	r3, #8
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	e002      	b.n	800bf8c <vListInsert+0x2e>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d2f6      	bcs.n	800bf86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
}
 800bfc4:	bf00      	nop
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6892      	ldr	r2, [r2, #8]
 800bfe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6852      	ldr	r2, [r2, #4]
 800bff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d103      	bne.n	800c004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	1e5a      	subs	r2, r3, #1
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10d      	bne.n	800c054 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03c:	b672      	cpsid	i
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	b662      	cpsie	i
 800c04c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c04e:	bf00      	nop
 800c050:	bf00      	nop
 800c052:	e7fd      	b.n	800c050 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c054:	f002 fa5a 	bl	800e50c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c060:	68f9      	ldr	r1, [r7, #12]
 800c062:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c064:	fb01 f303 	mul.w	r3, r1, r3
 800c068:	441a      	add	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c084:	3b01      	subs	r3, #1
 800c086:	68f9      	ldr	r1, [r7, #12]
 800c088:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c08a:	fb01 f303 	mul.w	r3, r1, r3
 800c08e:	441a      	add	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	22ff      	movs	r2, #255	@ 0xff
 800c098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	22ff      	movs	r2, #255	@ 0xff
 800c0a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d114      	bne.n	800c0d4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d01a      	beq.n	800c0e8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f001 f9ce 	bl	800d458 <xTaskRemoveFromEventList>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d012      	beq.n	800c0e8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f8 <xQueueGenericReset+0xd4>)
 800c0c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	e009      	b.n	800c0e8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3310      	adds	r3, #16
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff feef 	bl	800bebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3324      	adds	r3, #36	@ 0x24
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff feea 	bl	800bebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0e8:	f002 fa46 	bl	800e578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0ec:	2301      	movs	r3, #1
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	e000ed04 	.word	0xe000ed04

0800c0fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08e      	sub	sp, #56	@ 0x38
 800c100:	af02      	add	r7, sp, #8
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10d      	bne.n	800c12c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	b672      	cpsid	i
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	b662      	cpsie	i
 800c124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c126:	bf00      	nop
 800c128:	bf00      	nop
 800c12a:	e7fd      	b.n	800c128 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10d      	bne.n	800c14e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c136:	b672      	cpsid	i
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	b662      	cpsie	i
 800c146:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	e7fd      	b.n	800c14a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <xQueueGenericCreateStatic+0x5e>
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <xQueueGenericCreateStatic+0x62>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <xQueueGenericCreateStatic+0x64>
 800c15e:	2300      	movs	r3, #0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10d      	bne.n	800c180 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c168:	b672      	cpsid	i
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	b662      	cpsie	i
 800c178:	623b      	str	r3, [r7, #32]
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	e7fd      	b.n	800c17c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <xQueueGenericCreateStatic+0x90>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <xQueueGenericCreateStatic+0x94>
 800c18c:	2301      	movs	r3, #1
 800c18e:	e000      	b.n	800c192 <xQueueGenericCreateStatic+0x96>
 800c190:	2300      	movs	r3, #0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10d      	bne.n	800c1b2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800c196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19a:	b672      	cpsid	i
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	b662      	cpsie	i
 800c1aa:	61fb      	str	r3, [r7, #28]
}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	e7fd      	b.n	800c1ae <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1b2:	2350      	movs	r3, #80	@ 0x50
 800c1b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b50      	cmp	r3, #80	@ 0x50
 800c1ba:	d00d      	beq.n	800c1d8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c0:	b672      	cpsid	i
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	b662      	cpsie	i
 800c1d0:	61bb      	str	r3, [r7, #24]
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	e7fd      	b.n	800c1d4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00d      	beq.n	800c200 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 f848 	bl	800c290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c202:	4618      	mov	r0, r3
 800c204:	3730      	adds	r7, #48	@ 0x30
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b08a      	sub	sp, #40	@ 0x28
 800c20e:	af02      	add	r7, sp, #8
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	4613      	mov	r3, r2
 800c216:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10d      	bne.n	800c23a <xQueueGenericCreate+0x30>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c222:	b672      	cpsid	i
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	b662      	cpsie	i
 800c232:	613b      	str	r3, [r7, #16]
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop
 800c238:	e7fd      	b.n	800c236 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c240:	2300      	movs	r3, #0
 800c242:	61fb      	str	r3, [r7, #28]
 800c244:	e004      	b.n	800c250 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	fb02 f303 	mul.w	r3, r2, r3
 800c24e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	3350      	adds	r3, #80	@ 0x50
 800c254:	4618      	mov	r0, r3
 800c256:	f002 fa87 	bl	800e768 <pvPortMalloc>
 800c25a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d011      	beq.n	800c286 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	3350      	adds	r3, #80	@ 0x50
 800c26a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c274:	79fa      	ldrb	r2, [r7, #7]
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	4613      	mov	r3, r2
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 f805 	bl	800c290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c286:	69bb      	ldr	r3, [r7, #24]
	}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d103      	bne.n	800c2ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	e002      	b.n	800c2b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2be:	2101      	movs	r1, #1
 800c2c0:	69b8      	ldr	r0, [r7, #24]
 800c2c2:	f7ff feaf 	bl	800c024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	78fa      	ldrb	r2, [r7, #3]
 800c2ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2ce:	bf00      	nop
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08e      	sub	sp, #56	@ 0x38
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10d      	bne.n	800c310 <xQueueGenericSend+0x38>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f8:	b672      	cpsid	i
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	b662      	cpsie	i
 800c308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c30a:	bf00      	nop
 800c30c:	bf00      	nop
 800c30e:	e7fd      	b.n	800c30c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d103      	bne.n	800c31e <xQueueGenericSend+0x46>
 800c316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <xQueueGenericSend+0x4a>
 800c31e:	2301      	movs	r3, #1
 800c320:	e000      	b.n	800c324 <xQueueGenericSend+0x4c>
 800c322:	2300      	movs	r3, #0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10d      	bne.n	800c344 <xQueueGenericSend+0x6c>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32c:	b672      	cpsid	i
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	b662      	cpsie	i
 800c33c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c33e:	bf00      	nop
 800c340:	bf00      	nop
 800c342:	e7fd      	b.n	800c340 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b02      	cmp	r3, #2
 800c348:	d103      	bne.n	800c352 <xQueueGenericSend+0x7a>
 800c34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d101      	bne.n	800c356 <xQueueGenericSend+0x7e>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <xQueueGenericSend+0x80>
 800c356:	2300      	movs	r3, #0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10d      	bne.n	800c378 <xQueueGenericSend+0xa0>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c360:	b672      	cpsid	i
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	b662      	cpsie	i
 800c370:	623b      	str	r3, [r7, #32]
}
 800c372:	bf00      	nop
 800c374:	bf00      	nop
 800c376:	e7fd      	b.n	800c374 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c378:	f001 fa74 	bl	800d864 <xTaskGetSchedulerState>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <xQueueGenericSend+0xb0>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <xQueueGenericSend+0xb4>
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <xQueueGenericSend+0xb6>
 800c38c:	2300      	movs	r3, #0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10d      	bne.n	800c3ae <xQueueGenericSend+0xd6>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c396:	b672      	cpsid	i
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	b662      	cpsie	i
 800c3a6:	61fb      	str	r3, [r7, #28]
}
 800c3a8:	bf00      	nop
 800c3aa:	bf00      	nop
 800c3ac:	e7fd      	b.n	800c3aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ae:	f002 f8ad 	bl	800e50c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d302      	bcc.n	800c3c4 <xQueueGenericSend+0xec>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d129      	bne.n	800c418 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	68b9      	ldr	r1, [r7, #8]
 800c3c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3ca:	f000 fa1b 	bl	800c804 <prvCopyDataToQueue>
 800c3ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d010      	beq.n	800c3fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3da:	3324      	adds	r3, #36	@ 0x24
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f001 f83b 	bl	800d458 <xTaskRemoveFromEventList>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d013      	beq.n	800c410 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3e8:	4b3f      	ldr	r3, [pc, #252]	@ (800c4e8 <xQueueGenericSend+0x210>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	e00a      	b.n	800c410 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d007      	beq.n	800c410 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c400:	4b39      	ldr	r3, [pc, #228]	@ (800c4e8 <xQueueGenericSend+0x210>)
 800c402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c410:	f002 f8b2 	bl	800e578 <vPortExitCritical>
				return pdPASS;
 800c414:	2301      	movs	r3, #1
 800c416:	e063      	b.n	800c4e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d103      	bne.n	800c426 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c41e:	f002 f8ab 	bl	800e578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c422:	2300      	movs	r3, #0
 800c424:	e05c      	b.n	800c4e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d106      	bne.n	800c43a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c42c:	f107 0314 	add.w	r3, r7, #20
 800c430:	4618      	mov	r0, r3
 800c432:	f001 f877 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c436:	2301      	movs	r3, #1
 800c438:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c43a:	f002 f89d 	bl	800e578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c43e:	f000 fdc1 	bl	800cfc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c442:	f002 f863 	bl	800e50c <vPortEnterCritical>
 800c446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c44c:	b25b      	sxtb	r3, r3
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c452:	d103      	bne.n	800c45c <xQueueGenericSend+0x184>
 800c454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c462:	b25b      	sxtb	r3, r3
 800c464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c468:	d103      	bne.n	800c472 <xQueueGenericSend+0x19a>
 800c46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c472:	f002 f881 	bl	800e578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c476:	1d3a      	adds	r2, r7, #4
 800c478:	f107 0314 	add.w	r3, r7, #20
 800c47c:	4611      	mov	r1, r2
 800c47e:	4618      	mov	r0, r3
 800c480:	f001 f866 	bl	800d550 <xTaskCheckForTimeOut>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d124      	bne.n	800c4d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c48a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c48c:	f000 fab2 	bl	800c9f4 <prvIsQueueFull>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d018      	beq.n	800c4c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	3310      	adds	r3, #16
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	4611      	mov	r1, r2
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 ff84 	bl	800d3ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4a6:	f000 fa3d 	bl	800c924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4aa:	f000 fd99 	bl	800cfe0 <xTaskResumeAll>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f47f af7c 	bne.w	800c3ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e8 <xQueueGenericSend+0x210>)
 800c4b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	e772      	b.n	800c3ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4ca:	f000 fa2b 	bl	800c924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4ce:	f000 fd87 	bl	800cfe0 <xTaskResumeAll>
 800c4d2:	e76c      	b.n	800c3ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4d6:	f000 fa25 	bl	800c924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4da:	f000 fd81 	bl	800cfe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3738      	adds	r7, #56	@ 0x38
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	e000ed04 	.word	0xe000ed04

0800c4ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08e      	sub	sp, #56	@ 0x38
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10d      	bne.n	800c520 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c508:	b672      	cpsid	i
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	b662      	cpsie	i
 800c518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d103      	bne.n	800c52e <xQueueGenericSendFromISR+0x42>
 800c526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <xQueueGenericSendFromISR+0x46>
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <xQueueGenericSendFromISR+0x48>
 800c532:	2300      	movs	r3, #0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10d      	bne.n	800c554 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53c:	b672      	cpsid	i
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	b662      	cpsie	i
 800c54c:	623b      	str	r3, [r7, #32]
}
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
 800c552:	e7fd      	b.n	800c550 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b02      	cmp	r3, #2
 800c558:	d103      	bne.n	800c562 <xQueueGenericSendFromISR+0x76>
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d101      	bne.n	800c566 <xQueueGenericSendFromISR+0x7a>
 800c562:	2301      	movs	r3, #1
 800c564:	e000      	b.n	800c568 <xQueueGenericSendFromISR+0x7c>
 800c566:	2300      	movs	r3, #0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10d      	bne.n	800c588 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c570:	b672      	cpsid	i
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	b662      	cpsie	i
 800c580:	61fb      	str	r3, [r7, #28]
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	e7fd      	b.n	800c584 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c588:	f002 f8a8 	bl	800e6dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c58c:	f3ef 8211 	mrs	r2, BASEPRI
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	b672      	cpsid	i
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	b662      	cpsie	i
 800c5a4:	61ba      	str	r2, [r7, #24]
 800c5a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d302      	bcc.n	800c5be <xQueueGenericSendFromISR+0xd2>
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d12c      	bne.n	800c618 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	68b9      	ldr	r1, [r7, #8]
 800c5cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ce:	f000 f919 	bl	800c804 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d112      	bne.n	800c602 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d016      	beq.n	800c612 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e6:	3324      	adds	r3, #36	@ 0x24
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 ff35 	bl	800d458 <xTaskRemoveFromEventList>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00e      	beq.n	800c612 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00b      	beq.n	800c612 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	e007      	b.n	800c612 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c602:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c606:	3301      	adds	r3, #1
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	b25a      	sxtb	r2, r3
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c612:	2301      	movs	r3, #1
 800c614:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800c616:	e001      	b.n	800c61c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c618:	2300      	movs	r3, #0
 800c61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c626:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3738      	adds	r7, #56	@ 0x38
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
	...

0800c634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08c      	sub	sp, #48	@ 0x30
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c640:	2300      	movs	r3, #0
 800c642:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10d      	bne.n	800c66a <xQueueReceive+0x36>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	b672      	cpsid	i
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	b662      	cpsie	i
 800c662:	623b      	str	r3, [r7, #32]
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <xQueueReceive+0x44>
 800c670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <xQueueReceive+0x48>
 800c678:	2301      	movs	r3, #1
 800c67a:	e000      	b.n	800c67e <xQueueReceive+0x4a>
 800c67c:	2300      	movs	r3, #0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10d      	bne.n	800c69e <xQueueReceive+0x6a>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c686:	b672      	cpsid	i
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	b662      	cpsie	i
 800c696:	61fb      	str	r3, [r7, #28]
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	e7fd      	b.n	800c69a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c69e:	f001 f8e1 	bl	800d864 <xTaskGetSchedulerState>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <xQueueReceive+0x7a>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <xQueueReceive+0x7e>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e000      	b.n	800c6b4 <xQueueReceive+0x80>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10d      	bne.n	800c6d4 <xQueueReceive+0xa0>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6bc:	b672      	cpsid	i
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	b662      	cpsie	i
 800c6cc:	61bb      	str	r3, [r7, #24]
}
 800c6ce:	bf00      	nop
 800c6d0:	bf00      	nop
 800c6d2:	e7fd      	b.n	800c6d0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6d4:	f001 ff1a 	bl	800e50c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d01f      	beq.n	800c724 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6e4:	68b9      	ldr	r1, [r7, #8]
 800c6e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6e8:	f000 f8f6 	bl	800c8d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	1e5a      	subs	r2, r3, #1
 800c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00f      	beq.n	800c71c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fe:	3310      	adds	r3, #16
 800c700:	4618      	mov	r0, r3
 800c702:	f000 fea9 	bl	800d458 <xTaskRemoveFromEventList>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d007      	beq.n	800c71c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c70c:	4b3c      	ldr	r3, [pc, #240]	@ (800c800 <xQueueReceive+0x1cc>)
 800c70e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c71c:	f001 ff2c 	bl	800e578 <vPortExitCritical>
				return pdPASS;
 800c720:	2301      	movs	r3, #1
 800c722:	e069      	b.n	800c7f8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d103      	bne.n	800c732 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c72a:	f001 ff25 	bl	800e578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c72e:	2300      	movs	r3, #0
 800c730:	e062      	b.n	800c7f8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c734:	2b00      	cmp	r3, #0
 800c736:	d106      	bne.n	800c746 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c738:	f107 0310 	add.w	r3, r7, #16
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 fef1 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c742:	2301      	movs	r3, #1
 800c744:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c746:	f001 ff17 	bl	800e578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c74a:	f000 fc3b 	bl	800cfc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c74e:	f001 fedd 	bl	800e50c <vPortEnterCritical>
 800c752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c758:	b25b      	sxtb	r3, r3
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	d103      	bne.n	800c768 <xQueueReceive+0x134>
 800c760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c76e:	b25b      	sxtb	r3, r3
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c774:	d103      	bne.n	800c77e <xQueueReceive+0x14a>
 800c776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c77e:	f001 fefb 	bl	800e578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c782:	1d3a      	adds	r2, r7, #4
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fee0 	bl	800d550 <xTaskCheckForTimeOut>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d123      	bne.n	800c7de <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c798:	f000 f916 	bl	800c9c8 <prvIsQueueEmpty>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d017      	beq.n	800c7d2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a4:	3324      	adds	r3, #36	@ 0x24
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 fdfe 	bl	800d3ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7b2:	f000 f8b7 	bl	800c924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7b6:	f000 fc13 	bl	800cfe0 <xTaskResumeAll>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d189      	bne.n	800c6d4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c800 <xQueueReceive+0x1cc>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	e780      	b.n	800c6d4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7d4:	f000 f8a6 	bl	800c924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7d8:	f000 fc02 	bl	800cfe0 <xTaskResumeAll>
 800c7dc:	e77a      	b.n	800c6d4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7e0:	f000 f8a0 	bl	800c924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7e4:	f000 fbfc 	bl	800cfe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7ea:	f000 f8ed 	bl	800c9c8 <prvIsQueueEmpty>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f43f af6f 	beq.w	800c6d4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3730      	adds	r7, #48	@ 0x30
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10d      	bne.n	800c83e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d14d      	bne.n	800c8c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 f836 	bl	800d8a0 <xTaskPriorityDisinherit>
 800c834:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	609a      	str	r2, [r3, #8]
 800c83c:	e043      	b.n	800c8c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d119      	bne.n	800c878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6858      	ldr	r0, [r3, #4]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c84c:	461a      	mov	r2, r3
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	f003 f8e4 	bl	800fa1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d32b      	bcc.n	800c8c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	605a      	str	r2, [r3, #4]
 800c876:	e026      	b.n	800c8c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68d8      	ldr	r0, [r3, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c880:	461a      	mov	r2, r3
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	f003 f8ca 	bl	800fa1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	68da      	ldr	r2, [r3, #12]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c890:	425b      	negs	r3, r3
 800c892:	441a      	add	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d207      	bcs.n	800c8b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ac:	425b      	negs	r3, r3
 800c8ae:	441a      	add	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d105      	bne.n	800c8c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c8ce:	697b      	ldr	r3, [r7, #20]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d018      	beq.n	800c91c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f2:	441a      	add	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68da      	ldr	r2, [r3, #12]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	429a      	cmp	r2, r3
 800c902:	d303      	bcc.n	800c90c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68d9      	ldr	r1, [r3, #12]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c914:	461a      	mov	r2, r3
 800c916:	6838      	ldr	r0, [r7, #0]
 800c918:	f003 f880 	bl	800fa1c <memcpy>
	}
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c92c:	f001 fdee 	bl	800e50c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c936:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c938:	e011      	b.n	800c95e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	3324      	adds	r3, #36	@ 0x24
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fd86 	bl	800d458 <xTaskRemoveFromEventList>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c952:	f000 fe65 	bl	800d620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	3b01      	subs	r3, #1
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dce9      	bgt.n	800c93a <prvUnlockQueue+0x16>
 800c966:	e000      	b.n	800c96a <prvUnlockQueue+0x46>
					break;
 800c968:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	22ff      	movs	r2, #255	@ 0xff
 800c96e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c972:	f001 fe01 	bl	800e578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c976:	f001 fdc9 	bl	800e50c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c980:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c982:	e011      	b.n	800c9a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d012      	beq.n	800c9b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3310      	adds	r3, #16
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fd61 	bl	800d458 <xTaskRemoveFromEventList>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c99c:	f000 fe40 	bl	800d620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9a0:	7bbb      	ldrb	r3, [r7, #14]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	dce9      	bgt.n	800c984 <prvUnlockQueue+0x60>
 800c9b0:	e000      	b.n	800c9b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	22ff      	movs	r2, #255	@ 0xff
 800c9b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c9bc:	f001 fddc 	bl	800e578 <vPortExitCritical>
}
 800c9c0:	bf00      	nop
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9d0:	f001 fd9c 	bl	800e50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d102      	bne.n	800c9e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	e001      	b.n	800c9e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9e6:	f001 fdc7 	bl	800e578 <vPortExitCritical>

	return xReturn;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9fc:	f001 fd86 	bl	800e50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d102      	bne.n	800ca12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	e001      	b.n	800ca16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca16:	f001 fdaf 	bl	800e578 <vPortExitCritical>

	return xReturn;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	e014      	b.n	800ca5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca34:	4a0f      	ldr	r2, [pc, #60]	@ (800ca74 <vQueueAddToRegistry+0x50>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10b      	bne.n	800ca58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca40:	490c      	ldr	r1, [pc, #48]	@ (800ca74 <vQueueAddToRegistry+0x50>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ca74 <vQueueAddToRegistry+0x50>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	4413      	add	r3, r2
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca56:	e006      	b.n	800ca66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b07      	cmp	r3, #7
 800ca62:	d9e7      	bls.n	800ca34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca64:	bf00      	nop
 800ca66:	bf00      	nop
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	20001780 	.word	0x20001780

0800ca78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca88:	f001 fd40 	bl	800e50c <vPortEnterCritical>
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca92:	b25b      	sxtb	r3, r3
 800ca94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca98:	d103      	bne.n	800caa2 <vQueueWaitForMessageRestricted+0x2a>
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caa8:	b25b      	sxtb	r3, r3
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caae:	d103      	bne.n	800cab8 <vQueueWaitForMessageRestricted+0x40>
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cab8:	f001 fd5e 	bl	800e578 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d106      	bne.n	800cad2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	3324      	adds	r3, #36	@ 0x24
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	68b9      	ldr	r1, [r7, #8]
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fc95 	bl	800d3fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cad2:	6978      	ldr	r0, [r7, #20]
 800cad4:	f7ff ff26 	bl	800c924 <prvUnlockQueue>
	}
 800cad8:	bf00      	nop
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08e      	sub	sp, #56	@ 0x38
 800cae4:	af04      	add	r7, sp, #16
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800caee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10d      	bne.n	800cb10 <xTaskCreateStatic+0x30>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf8:	b672      	cpsid	i
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	b662      	cpsie	i
 800cb08:	623b      	str	r3, [r7, #32]
}
 800cb0a:	bf00      	nop
 800cb0c:	bf00      	nop
 800cb0e:	e7fd      	b.n	800cb0c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800cb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10d      	bne.n	800cb32 <xTaskCreateStatic+0x52>
	__asm volatile
 800cb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1a:	b672      	cpsid	i
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	b662      	cpsie	i
 800cb2a:	61fb      	str	r3, [r7, #28]
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	e7fd      	b.n	800cb2e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb32:	23a8      	movs	r3, #168	@ 0xa8
 800cb34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2ba8      	cmp	r3, #168	@ 0xa8
 800cb3a:	d00d      	beq.n	800cb58 <xTaskCreateStatic+0x78>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb40:	b672      	cpsid	i
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	b662      	cpsie	i
 800cb50:	61bb      	str	r3, [r7, #24]
}
 800cb52:	bf00      	nop
 800cb54:	bf00      	nop
 800cb56:	e7fd      	b.n	800cb54 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01e      	beq.n	800cb9e <xTaskCreateStatic+0xbe>
 800cb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01b      	beq.n	800cb9e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb78:	2300      	movs	r3, #0
 800cb7a:	9303      	str	r3, [sp, #12]
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	9302      	str	r3, [sp, #8]
 800cb80:	f107 0314 	add.w	r3, r7, #20
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f000 f851 	bl	800cc38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb98:	f000 f8f8 	bl	800cd8c <prvAddNewTaskToReadyList>
 800cb9c:	e001      	b.n	800cba2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cba2:	697b      	ldr	r3, [r7, #20]
	}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3728      	adds	r7, #40	@ 0x28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	@ 0x30
 800cbb0:	af04      	add	r7, sp, #16
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	603b      	str	r3, [r7, #0]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbbc:	88fb      	ldrh	r3, [r7, #6]
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f001 fdd1 	bl	800e768 <pvPortMalloc>
 800cbc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00e      	beq.n	800cbec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbce:	20a8      	movs	r0, #168	@ 0xa8
 800cbd0:	f001 fdca 	bl	800e768 <pvPortMalloc>
 800cbd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbe2:	e005      	b.n	800cbf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbe4:	6978      	ldr	r0, [r7, #20]
 800cbe6:	f001 fe8d 	bl	800e904 <vPortFree>
 800cbea:	e001      	b.n	800cbf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d017      	beq.n	800cc26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbfe:	88fa      	ldrh	r2, [r7, #6]
 800cc00:	2300      	movs	r3, #0
 800cc02:	9303      	str	r3, [sp, #12]
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	68b9      	ldr	r1, [r7, #8]
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f80f 	bl	800cc38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc1a:	69f8      	ldr	r0, [r7, #28]
 800cc1c:	f000 f8b6 	bl	800cd8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc20:	2301      	movs	r3, #1
 800cc22:	61bb      	str	r3, [r7, #24]
 800cc24:	e002      	b.n	800cc2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc2c:	69bb      	ldr	r3, [r7, #24]
	}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3720      	adds	r7, #32
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
	...

0800cc38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	461a      	mov	r2, r3
 800cc50:	21a5      	movs	r1, #165	@ 0xa5
 800cc52:	f002 fe49 	bl	800f8e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cc60:	440b      	add	r3, r1
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	f023 0307 	bic.w	r3, r3, #7
 800cc6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00d      	beq.n	800cc96 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7e:	b672      	cpsid	i
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	b662      	cpsie	i
 800cc8e:	617b      	str	r3, [r7, #20]
}
 800cc90:	bf00      	nop
 800cc92:	bf00      	nop
 800cc94:	e7fd      	b.n	800cc92 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01f      	beq.n	800ccdc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	61fb      	str	r3, [r7, #28]
 800cca0:	e012      	b.n	800ccc8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	4413      	add	r3, r2
 800cca8:	7819      	ldrb	r1, [r3, #0]
 800ccaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	4413      	add	r3, r2
 800ccb0:	3334      	adds	r3, #52	@ 0x34
 800ccb2:	460a      	mov	r2, r1
 800ccb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	4413      	add	r3, r2
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d006      	beq.n	800ccd0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	61fb      	str	r3, [r7, #28]
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	2b0f      	cmp	r3, #15
 800cccc:	d9e9      	bls.n	800cca2 <prvInitialiseNewTask+0x6a>
 800ccce:	e000      	b.n	800ccd2 <prvInitialiseNewTask+0x9a>
			{
				break;
 800ccd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ccda:	e003      	b.n	800cce4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce6:	2b37      	cmp	r3, #55	@ 0x37
 800cce8:	d901      	bls.n	800ccee <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccea:	2337      	movs	r3, #55	@ 0x37
 800ccec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccf8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd02:	3304      	adds	r3, #4
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff f8f9 	bl	800befc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	3318      	adds	r3, #24
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff f8f4 	bl	800befc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	3354      	adds	r3, #84	@ 0x54
 800cd3e:	224c      	movs	r2, #76	@ 0x4c
 800cd40:	2100      	movs	r1, #0
 800cd42:	4618      	mov	r0, r3
 800cd44:	f002 fdd0 	bl	800f8e8 <memset>
 800cd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4a:	4a0d      	ldr	r2, [pc, #52]	@ (800cd80 <prvInitialiseNewTask+0x148>)
 800cd4c:	659a      	str	r2, [r3, #88]	@ 0x58
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd50:	4a0c      	ldr	r2, [pc, #48]	@ (800cd84 <prvInitialiseNewTask+0x14c>)
 800cd52:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd56:	4a0c      	ldr	r2, [pc, #48]	@ (800cd88 <prvInitialiseNewTask+0x150>)
 800cd58:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	68f9      	ldr	r1, [r7, #12]
 800cd5e:	69b8      	ldr	r0, [r7, #24]
 800cd60:	f001 fac2 	bl	800e2e8 <pxPortInitialiseStack>
 800cd64:	4602      	mov	r2, r0
 800cd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd76:	bf00      	nop
 800cd78:	3720      	adds	r7, #32
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	200073f8 	.word	0x200073f8
 800cd84:	20007460 	.word	0x20007460
 800cd88:	200074c8 	.word	0x200074c8

0800cd8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd94:	f001 fbba 	bl	800e50c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd98:	4b2d      	ldr	r3, [pc, #180]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	4a2c      	ldr	r2, [pc, #176]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cda0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cda2:	4b2c      	ldr	r3, [pc, #176]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d109      	bne.n	800cdbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdb0:	4b27      	ldr	r3, [pc, #156]	@ (800ce50 <prvAddNewTaskToReadyList+0xc4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d110      	bne.n	800cdda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cdb8:	f000 fc56 	bl	800d668 <prvInitialiseTaskLists>
 800cdbc:	e00d      	b.n	800cdda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdbe:	4b26      	ldr	r3, [pc, #152]	@ (800ce58 <prvAddNewTaskToReadyList+0xcc>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d109      	bne.n	800cdda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdc6:	4b23      	ldr	r3, [pc, #140]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d802      	bhi.n	800cdda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdd4:	4a1f      	ldr	r2, [pc, #124]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdda:	4b20      	ldr	r3, [pc, #128]	@ (800ce5c <prvAddNewTaskToReadyList+0xd0>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3301      	adds	r3, #1
 800cde0:	4a1e      	ldr	r2, [pc, #120]	@ (800ce5c <prvAddNewTaskToReadyList+0xd0>)
 800cde2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cde4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce5c <prvAddNewTaskToReadyList+0xd0>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdf0:	4b1b      	ldr	r3, [pc, #108]	@ (800ce60 <prvAddNewTaskToReadyList+0xd4>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d903      	bls.n	800ce00 <prvAddNewTaskToReadyList+0x74>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfc:	4a18      	ldr	r2, [pc, #96]	@ (800ce60 <prvAddNewTaskToReadyList+0xd4>)
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce04:	4613      	mov	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4a15      	ldr	r2, [pc, #84]	@ (800ce64 <prvAddNewTaskToReadyList+0xd8>)
 800ce0e:	441a      	add	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3304      	adds	r3, #4
 800ce14:	4619      	mov	r1, r3
 800ce16:	4610      	mov	r0, r2
 800ce18:	f7ff f87d 	bl	800bf16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce1c:	f001 fbac 	bl	800e578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce20:	4b0d      	ldr	r3, [pc, #52]	@ (800ce58 <prvAddNewTaskToReadyList+0xcc>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00e      	beq.n	800ce46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce28:	4b0a      	ldr	r3, [pc, #40]	@ (800ce54 <prvAddNewTaskToReadyList+0xc8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d207      	bcs.n	800ce46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce36:	4b0c      	ldr	r3, [pc, #48]	@ (800ce68 <prvAddNewTaskToReadyList+0xdc>)
 800ce38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	20001c94 	.word	0x20001c94
 800ce54:	200017c0 	.word	0x200017c0
 800ce58:	20001ca0 	.word	0x20001ca0
 800ce5c:	20001cb0 	.word	0x20001cb0
 800ce60:	20001c9c 	.word	0x20001c9c
 800ce64:	200017c4 	.word	0x200017c4
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01a      	beq.n	800ceb4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce7e:	4b15      	ldr	r3, [pc, #84]	@ (800ced4 <vTaskDelay+0x68>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00d      	beq.n	800cea2 <vTaskDelay+0x36>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8a:	b672      	cpsid	i
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	b662      	cpsie	i
 800ce9a:	60bb      	str	r3, [r7, #8]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cea2:	f000 f88f 	bl	800cfc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cea6:	2100      	movs	r1, #0
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fd6d 	bl	800d988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ceae:	f000 f897 	bl	800cfe0 <xTaskResumeAll>
 800ceb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d107      	bne.n	800ceca <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800ceba:	4b07      	ldr	r3, [pc, #28]	@ (800ced8 <vTaskDelay+0x6c>)
 800cebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ceca:	bf00      	nop
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	20001cbc 	.word	0x20001cbc
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	@ 0x28
 800cee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cee2:	2300      	movs	r3, #0
 800cee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ceea:	463a      	mov	r2, r7
 800ceec:	1d39      	adds	r1, r7, #4
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe ffae 	bl	800be54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	9202      	str	r2, [sp, #8]
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	2300      	movs	r3, #0
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	2300      	movs	r3, #0
 800cf08:	460a      	mov	r2, r1
 800cf0a:	4926      	ldr	r1, [pc, #152]	@ (800cfa4 <vTaskStartScheduler+0xc8>)
 800cf0c:	4826      	ldr	r0, [pc, #152]	@ (800cfa8 <vTaskStartScheduler+0xcc>)
 800cf0e:	f7ff fde7 	bl	800cae0 <xTaskCreateStatic>
 800cf12:	4603      	mov	r3, r0
 800cf14:	4a25      	ldr	r2, [pc, #148]	@ (800cfac <vTaskStartScheduler+0xd0>)
 800cf16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf18:	4b24      	ldr	r3, [pc, #144]	@ (800cfac <vTaskStartScheduler+0xd0>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf20:	2301      	movs	r3, #1
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	e001      	b.n	800cf2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d102      	bne.n	800cf36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf30:	f000 fd7e 	bl	800da30 <xTimerCreateTimerTask>
 800cf34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d11d      	bne.n	800cf78 <vTaskStartScheduler+0x9c>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf40:	b672      	cpsid	i
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	b662      	cpsie	i
 800cf50:	613b      	str	r3, [r7, #16]
}
 800cf52:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf54:	4b16      	ldr	r3, [pc, #88]	@ (800cfb0 <vTaskStartScheduler+0xd4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	3354      	adds	r3, #84	@ 0x54
 800cf5a:	4a16      	ldr	r2, [pc, #88]	@ (800cfb4 <vTaskStartScheduler+0xd8>)
 800cf5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf5e:	4b16      	ldr	r3, [pc, #88]	@ (800cfb8 <vTaskStartScheduler+0xdc>)
 800cf60:	f04f 32ff 	mov.w	r2, #4294967295
 800cf64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf66:	4b15      	ldr	r3, [pc, #84]	@ (800cfbc <vTaskStartScheduler+0xe0>)
 800cf68:	2201      	movs	r2, #1
 800cf6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf6c:	4b14      	ldr	r3, [pc, #80]	@ (800cfc0 <vTaskStartScheduler+0xe4>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf72:	f001 fa4d 	bl	800e410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf76:	e011      	b.n	800cf9c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d10d      	bne.n	800cf9c <vTaskStartScheduler+0xc0>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf84:	b672      	cpsid	i
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	b662      	cpsie	i
 800cf94:	60fb      	str	r3, [r7, #12]
}
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
 800cf9a:	e7fd      	b.n	800cf98 <vTaskStartScheduler+0xbc>
}
 800cf9c:	bf00      	nop
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	08010238 	.word	0x08010238
 800cfa8:	0800d639 	.word	0x0800d639
 800cfac:	20001cb8 	.word	0x20001cb8
 800cfb0:	200017c0 	.word	0x200017c0
 800cfb4:	20000110 	.word	0x20000110
 800cfb8:	20001cb4 	.word	0x20001cb4
 800cfbc:	20001ca0 	.word	0x20001ca0
 800cfc0:	20001c98 	.word	0x20001c98

0800cfc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cfc8:	4b04      	ldr	r3, [pc, #16]	@ (800cfdc <vTaskSuspendAll+0x18>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	4a03      	ldr	r2, [pc, #12]	@ (800cfdc <vTaskSuspendAll+0x18>)
 800cfd0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cfd2:	bf00      	nop
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	20001cbc 	.word	0x20001cbc

0800cfe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfee:	4b43      	ldr	r3, [pc, #268]	@ (800d0fc <xTaskResumeAll+0x11c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10d      	bne.n	800d012 <xTaskResumeAll+0x32>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffa:	b672      	cpsid	i
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	b662      	cpsie	i
 800d00a:	603b      	str	r3, [r7, #0]
}
 800d00c:	bf00      	nop
 800d00e:	bf00      	nop
 800d010:	e7fd      	b.n	800d00e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d012:	f001 fa7b 	bl	800e50c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d016:	4b39      	ldr	r3, [pc, #228]	@ (800d0fc <xTaskResumeAll+0x11c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	4a37      	ldr	r2, [pc, #220]	@ (800d0fc <xTaskResumeAll+0x11c>)
 800d01e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d020:	4b36      	ldr	r3, [pc, #216]	@ (800d0fc <xTaskResumeAll+0x11c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d162      	bne.n	800d0ee <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d028:	4b35      	ldr	r3, [pc, #212]	@ (800d100 <xTaskResumeAll+0x120>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d05e      	beq.n	800d0ee <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d030:	e02f      	b.n	800d092 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d032:	4b34      	ldr	r3, [pc, #208]	@ (800d104 <xTaskResumeAll+0x124>)
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3318      	adds	r3, #24
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe ffc6 	bl	800bfd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3304      	adds	r3, #4
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe ffc1 	bl	800bfd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d052:	4b2d      	ldr	r3, [pc, #180]	@ (800d108 <xTaskResumeAll+0x128>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d903      	bls.n	800d062 <xTaskResumeAll+0x82>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05e:	4a2a      	ldr	r2, [pc, #168]	@ (800d108 <xTaskResumeAll+0x128>)
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4a27      	ldr	r2, [pc, #156]	@ (800d10c <xTaskResumeAll+0x12c>)
 800d070:	441a      	add	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3304      	adds	r3, #4
 800d076:	4619      	mov	r1, r3
 800d078:	4610      	mov	r0, r2
 800d07a:	f7fe ff4c 	bl	800bf16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d082:	4b23      	ldr	r3, [pc, #140]	@ (800d110 <xTaskResumeAll+0x130>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d088:	429a      	cmp	r2, r3
 800d08a:	d302      	bcc.n	800d092 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800d08c:	4b21      	ldr	r3, [pc, #132]	@ (800d114 <xTaskResumeAll+0x134>)
 800d08e:	2201      	movs	r2, #1
 800d090:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d092:	4b1c      	ldr	r3, [pc, #112]	@ (800d104 <xTaskResumeAll+0x124>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1cb      	bne.n	800d032 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0a0:	f000 fbc0 	bl	800d824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d0a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d118 <xTaskResumeAll+0x138>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d010      	beq.n	800d0d2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0b0:	f000 f858 	bl	800d164 <xTaskIncrementTick>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800d0ba:	4b16      	ldr	r3, [pc, #88]	@ (800d114 <xTaskResumeAll+0x134>)
 800d0bc:	2201      	movs	r2, #1
 800d0be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1f1      	bne.n	800d0b0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800d0cc:	4b12      	ldr	r3, [pc, #72]	@ (800d118 <xTaskResumeAll+0x138>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0d2:	4b10      	ldr	r3, [pc, #64]	@ (800d114 <xTaskResumeAll+0x134>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0de:	4b0f      	ldr	r3, [pc, #60]	@ (800d11c <xTaskResumeAll+0x13c>)
 800d0e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0ee:	f001 fa43 	bl	800e578 <vPortExitCritical>

	return xAlreadyYielded;
 800d0f2:	68bb      	ldr	r3, [r7, #8]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	20001cbc 	.word	0x20001cbc
 800d100:	20001c94 	.word	0x20001c94
 800d104:	20001c54 	.word	0x20001c54
 800d108:	20001c9c 	.word	0x20001c9c
 800d10c:	200017c4 	.word	0x200017c4
 800d110:	200017c0 	.word	0x200017c0
 800d114:	20001ca8 	.word	0x20001ca8
 800d118:	20001ca4 	.word	0x20001ca4
 800d11c:	e000ed04 	.word	0xe000ed04

0800d120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d126:	4b05      	ldr	r3, [pc, #20]	@ (800d13c <xTaskGetTickCount+0x1c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d12c:	687b      	ldr	r3, [r7, #4]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	20001c98 	.word	0x20001c98

0800d140 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d146:	f001 fac9 	bl	800e6dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d14a:	2300      	movs	r3, #0
 800d14c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d14e:	4b04      	ldr	r3, [pc, #16]	@ (800d160 <xTaskGetTickCountFromISR+0x20>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d154:	683b      	ldr	r3, [r7, #0]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20001c98 	.word	0x20001c98

0800d164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d16a:	2300      	movs	r3, #0
 800d16c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d16e:	4b50      	ldr	r3, [pc, #320]	@ (800d2b0 <xTaskIncrementTick+0x14c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f040 808c 	bne.w	800d290 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d178:	4b4e      	ldr	r3, [pc, #312]	@ (800d2b4 <xTaskIncrementTick+0x150>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	3301      	adds	r3, #1
 800d17e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d180:	4a4c      	ldr	r2, [pc, #304]	@ (800d2b4 <xTaskIncrementTick+0x150>)
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d123      	bne.n	800d1d4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800d18c:	4b4a      	ldr	r3, [pc, #296]	@ (800d2b8 <xTaskIncrementTick+0x154>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00d      	beq.n	800d1b2 <xTaskIncrementTick+0x4e>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	b672      	cpsid	i
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	b662      	cpsie	i
 800d1aa:	603b      	str	r3, [r7, #0]
}
 800d1ac:	bf00      	nop
 800d1ae:	bf00      	nop
 800d1b0:	e7fd      	b.n	800d1ae <xTaskIncrementTick+0x4a>
 800d1b2:	4b41      	ldr	r3, [pc, #260]	@ (800d2b8 <xTaskIncrementTick+0x154>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	4b40      	ldr	r3, [pc, #256]	@ (800d2bc <xTaskIncrementTick+0x158>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a3e      	ldr	r2, [pc, #248]	@ (800d2b8 <xTaskIncrementTick+0x154>)
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	4a3e      	ldr	r2, [pc, #248]	@ (800d2bc <xTaskIncrementTick+0x158>)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2c0 <xTaskIncrementTick+0x15c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	4a3c      	ldr	r2, [pc, #240]	@ (800d2c0 <xTaskIncrementTick+0x15c>)
 800d1ce:	6013      	str	r3, [r2, #0]
 800d1d0:	f000 fb28 	bl	800d824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1d4:	4b3b      	ldr	r3, [pc, #236]	@ (800d2c4 <xTaskIncrementTick+0x160>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d349      	bcc.n	800d272 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1de:	4b36      	ldr	r3, [pc, #216]	@ (800d2b8 <xTaskIncrementTick+0x154>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d104      	bne.n	800d1f2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e8:	4b36      	ldr	r3, [pc, #216]	@ (800d2c4 <xTaskIncrementTick+0x160>)
 800d1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ee:	601a      	str	r2, [r3, #0]
					break;
 800d1f0:	e03f      	b.n	800d272 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f2:	4b31      	ldr	r3, [pc, #196]	@ (800d2b8 <xTaskIncrementTick+0x154>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	429a      	cmp	r2, r3
 800d208:	d203      	bcs.n	800d212 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d20a:	4a2e      	ldr	r2, [pc, #184]	@ (800d2c4 <xTaskIncrementTick+0x160>)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d210:	e02f      	b.n	800d272 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	3304      	adds	r3, #4
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe feda 	bl	800bfd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d220:	2b00      	cmp	r3, #0
 800d222:	d004      	beq.n	800d22e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3318      	adds	r3, #24
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fe fed1 	bl	800bfd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d232:	4b25      	ldr	r3, [pc, #148]	@ (800d2c8 <xTaskIncrementTick+0x164>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	d903      	bls.n	800d242 <xTaskIncrementTick+0xde>
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23e:	4a22      	ldr	r2, [pc, #136]	@ (800d2c8 <xTaskIncrementTick+0x164>)
 800d240:	6013      	str	r3, [r2, #0]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4a1f      	ldr	r2, [pc, #124]	@ (800d2cc <xTaskIncrementTick+0x168>)
 800d250:	441a      	add	r2, r3
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	3304      	adds	r3, #4
 800d256:	4619      	mov	r1, r3
 800d258:	4610      	mov	r0, r2
 800d25a:	f7fe fe5c 	bl	800bf16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d262:	4b1b      	ldr	r3, [pc, #108]	@ (800d2d0 <xTaskIncrementTick+0x16c>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d268:	429a      	cmp	r2, r3
 800d26a:	d3b8      	bcc.n	800d1de <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d26c:	2301      	movs	r3, #1
 800d26e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d270:	e7b5      	b.n	800d1de <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d272:	4b17      	ldr	r3, [pc, #92]	@ (800d2d0 <xTaskIncrementTick+0x16c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d278:	4914      	ldr	r1, [pc, #80]	@ (800d2cc <xTaskIncrementTick+0x168>)
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b01      	cmp	r3, #1
 800d288:	d907      	bls.n	800d29a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800d28a:	2301      	movs	r3, #1
 800d28c:	617b      	str	r3, [r7, #20]
 800d28e:	e004      	b.n	800d29a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d290:	4b10      	ldr	r3, [pc, #64]	@ (800d2d4 <xTaskIncrementTick+0x170>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3301      	adds	r3, #1
 800d296:	4a0f      	ldr	r2, [pc, #60]	@ (800d2d4 <xTaskIncrementTick+0x170>)
 800d298:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d29a:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d8 <xTaskIncrementTick+0x174>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d2a6:	697b      	ldr	r3, [r7, #20]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20001cbc 	.word	0x20001cbc
 800d2b4:	20001c98 	.word	0x20001c98
 800d2b8:	20001c4c 	.word	0x20001c4c
 800d2bc:	20001c50 	.word	0x20001c50
 800d2c0:	20001cac 	.word	0x20001cac
 800d2c4:	20001cb4 	.word	0x20001cb4
 800d2c8:	20001c9c 	.word	0x20001c9c
 800d2cc:	200017c4 	.word	0x200017c4
 800d2d0:	200017c0 	.word	0x200017c0
 800d2d4:	20001ca4 	.word	0x20001ca4
 800d2d8:	20001ca8 	.word	0x20001ca8

0800d2dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d394 <vTaskSwitchContext+0xb8>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d003      	beq.n	800d2f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800d398 <vTaskSwitchContext+0xbc>)
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2f0:	e049      	b.n	800d386 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800d2f2:	4b29      	ldr	r3, [pc, #164]	@ (800d398 <vTaskSwitchContext+0xbc>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2f8:	4b28      	ldr	r3, [pc, #160]	@ (800d39c <vTaskSwitchContext+0xc0>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	60fb      	str	r3, [r7, #12]
 800d2fe:	e013      	b.n	800d328 <vTaskSwitchContext+0x4c>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10d      	bne.n	800d322 <vTaskSwitchContext+0x46>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30a:	b672      	cpsid	i
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	b662      	cpsie	i
 800d31a:	607b      	str	r3, [r7, #4]
}
 800d31c:	bf00      	nop
 800d31e:	bf00      	nop
 800d320:	e7fd      	b.n	800d31e <vTaskSwitchContext+0x42>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3b01      	subs	r3, #1
 800d326:	60fb      	str	r3, [r7, #12]
 800d328:	491d      	ldr	r1, [pc, #116]	@ (800d3a0 <vTaskSwitchContext+0xc4>)
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4613      	mov	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	440b      	add	r3, r1
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d0e1      	beq.n	800d300 <vTaskSwitchContext+0x24>
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4a16      	ldr	r2, [pc, #88]	@ (800d3a0 <vTaskSwitchContext+0xc4>)
 800d348:	4413      	add	r3, r2
 800d34a:	60bb      	str	r3, [r7, #8]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	605a      	str	r2, [r3, #4]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	3308      	adds	r3, #8
 800d35e:	429a      	cmp	r2, r3
 800d360:	d104      	bne.n	800d36c <vTaskSwitchContext+0x90>
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	605a      	str	r2, [r3, #4]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a4 <vTaskSwitchContext+0xc8>)
 800d374:	6013      	str	r3, [r2, #0]
 800d376:	4a09      	ldr	r2, [pc, #36]	@ (800d39c <vTaskSwitchContext+0xc0>)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d37c:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <vTaskSwitchContext+0xc8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	3354      	adds	r3, #84	@ 0x54
 800d382:	4a09      	ldr	r2, [pc, #36]	@ (800d3a8 <vTaskSwitchContext+0xcc>)
 800d384:	6013      	str	r3, [r2, #0]
}
 800d386:	bf00      	nop
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	20001cbc 	.word	0x20001cbc
 800d398:	20001ca8 	.word	0x20001ca8
 800d39c:	20001c9c 	.word	0x20001c9c
 800d3a0:	200017c4 	.word	0x200017c4
 800d3a4:	200017c0 	.word	0x200017c0
 800d3a8:	20000110 	.word	0x20000110

0800d3ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10d      	bne.n	800d3d8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	b672      	cpsid	i
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	b662      	cpsie	i
 800d3d0:	60fb      	str	r3, [r7, #12]
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	e7fd      	b.n	800d3d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3d8:	4b07      	ldr	r3, [pc, #28]	@ (800d3f8 <vTaskPlaceOnEventList+0x4c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3318      	adds	r3, #24
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7fe fdbc 	bl	800bf5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	6838      	ldr	r0, [r7, #0]
 800d3ea:	f000 facd 	bl	800d988 <prvAddCurrentTaskToDelayedList>
}
 800d3ee:	bf00      	nop
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200017c0 	.word	0x200017c0

0800d3fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10d      	bne.n	800d42a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800d40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d412:	b672      	cpsid	i
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	b662      	cpsie	i
 800d422:	617b      	str	r3, [r7, #20]
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop
 800d428:	e7fd      	b.n	800d426 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d42a:	4b0a      	ldr	r3, [pc, #40]	@ (800d454 <vTaskPlaceOnEventListRestricted+0x58>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3318      	adds	r3, #24
 800d430:	4619      	mov	r1, r3
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7fe fd6f 	bl	800bf16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800d43e:	f04f 33ff 	mov.w	r3, #4294967295
 800d442:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	68b8      	ldr	r0, [r7, #8]
 800d448:	f000 fa9e 	bl	800d988 <prvAddCurrentTaskToDelayedList>
	}
 800d44c:	bf00      	nop
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	200017c0 	.word	0x200017c0

0800d458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10d      	bne.n	800d48a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d472:	b672      	cpsid	i
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	b662      	cpsie	i
 800d482:	60fb      	str	r3, [r7, #12]
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop
 800d488:	e7fd      	b.n	800d486 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	3318      	adds	r3, #24
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe fd9e 	bl	800bfd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d494:	4b1d      	ldr	r3, [pc, #116]	@ (800d50c <xTaskRemoveFromEventList+0xb4>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d11d      	bne.n	800d4d8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fd95 	bl	800bfd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4aa:	4b19      	ldr	r3, [pc, #100]	@ (800d510 <xTaskRemoveFromEventList+0xb8>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d903      	bls.n	800d4ba <xTaskRemoveFromEventList+0x62>
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4b6:	4a16      	ldr	r2, [pc, #88]	@ (800d510 <xTaskRemoveFromEventList+0xb8>)
 800d4b8:	6013      	str	r3, [r2, #0]
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4be:	4613      	mov	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4a13      	ldr	r2, [pc, #76]	@ (800d514 <xTaskRemoveFromEventList+0xbc>)
 800d4c8:	441a      	add	r2, r3
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7fe fd20 	bl	800bf16 <vListInsertEnd>
 800d4d6:	e005      	b.n	800d4e4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3318      	adds	r3, #24
 800d4dc:	4619      	mov	r1, r3
 800d4de:	480e      	ldr	r0, [pc, #56]	@ (800d518 <xTaskRemoveFromEventList+0xc0>)
 800d4e0:	f7fe fd19 	bl	800bf16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800d51c <xTaskRemoveFromEventList+0xc4>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d905      	bls.n	800d4fe <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d520 <xTaskRemoveFromEventList+0xc8>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	e001      	b.n	800d502 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d502:	697b      	ldr	r3, [r7, #20]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20001cbc 	.word	0x20001cbc
 800d510:	20001c9c 	.word	0x20001c9c
 800d514:	200017c4 	.word	0x200017c4
 800d518:	20001c54 	.word	0x20001c54
 800d51c:	200017c0 	.word	0x200017c0
 800d520:	20001ca8 	.word	0x20001ca8

0800d524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d52c:	4b06      	ldr	r3, [pc, #24]	@ (800d548 <vTaskInternalSetTimeOutState+0x24>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d534:	4b05      	ldr	r3, [pc, #20]	@ (800d54c <vTaskInternalSetTimeOutState+0x28>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	605a      	str	r2, [r3, #4]
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	20001cac 	.word	0x20001cac
 800d54c:	20001c98 	.word	0x20001c98

0800d550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10d      	bne.n	800d57c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d564:	b672      	cpsid	i
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	b662      	cpsie	i
 800d574:	613b      	str	r3, [r7, #16]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10d      	bne.n	800d59e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	b672      	cpsid	i
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	b662      	cpsie	i
 800d596:	60fb      	str	r3, [r7, #12]
}
 800d598:	bf00      	nop
 800d59a:	bf00      	nop
 800d59c:	e7fd      	b.n	800d59a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d59e:	f000 ffb5 	bl	800e50c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d618 <xTaskCheckForTimeOut+0xc8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ba:	d102      	bne.n	800d5c2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	61fb      	str	r3, [r7, #28]
 800d5c0:	e023      	b.n	800d60a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	4b15      	ldr	r3, [pc, #84]	@ (800d61c <xTaskCheckForTimeOut+0xcc>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d007      	beq.n	800d5de <xTaskCheckForTimeOut+0x8e>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	69ba      	ldr	r2, [r7, #24]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d302      	bcc.n	800d5de <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	61fb      	str	r3, [r7, #28]
 800d5dc:	e015      	b.n	800d60a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d20b      	bcs.n	800d600 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	1ad2      	subs	r2, r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff ff95 	bl	800d524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61fb      	str	r3, [r7, #28]
 800d5fe:	e004      	b.n	800d60a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d606:	2301      	movs	r3, #1
 800d608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d60a:	f000 ffb5 	bl	800e578 <vPortExitCritical>

	return xReturn;
 800d60e:	69fb      	ldr	r3, [r7, #28]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3720      	adds	r7, #32
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20001c98 	.word	0x20001c98
 800d61c:	20001cac 	.word	0x20001cac

0800d620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d620:	b480      	push	{r7}
 800d622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d624:	4b03      	ldr	r3, [pc, #12]	@ (800d634 <vTaskMissedYield+0x14>)
 800d626:	2201      	movs	r2, #1
 800d628:	601a      	str	r2, [r3, #0]
}
 800d62a:	bf00      	nop
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	20001ca8 	.word	0x20001ca8

0800d638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d640:	f000 f852 	bl	800d6e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d644:	4b06      	ldr	r3, [pc, #24]	@ (800d660 <prvIdleTask+0x28>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d9f9      	bls.n	800d640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d64c:	4b05      	ldr	r3, [pc, #20]	@ (800d664 <prvIdleTask+0x2c>)
 800d64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d65c:	e7f0      	b.n	800d640 <prvIdleTask+0x8>
 800d65e:	bf00      	nop
 800d660:	200017c4 	.word	0x200017c4
 800d664:	e000ed04 	.word	0xe000ed04

0800d668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d66e:	2300      	movs	r3, #0
 800d670:	607b      	str	r3, [r7, #4]
 800d672:	e00c      	b.n	800d68e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4a12      	ldr	r2, [pc, #72]	@ (800d6c8 <prvInitialiseTaskLists+0x60>)
 800d680:	4413      	add	r3, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f7fe fc1a 	bl	800bebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3301      	adds	r3, #1
 800d68c:	607b      	str	r3, [r7, #4]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b37      	cmp	r3, #55	@ 0x37
 800d692:	d9ef      	bls.n	800d674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d694:	480d      	ldr	r0, [pc, #52]	@ (800d6cc <prvInitialiseTaskLists+0x64>)
 800d696:	f7fe fc11 	bl	800bebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d69a:	480d      	ldr	r0, [pc, #52]	@ (800d6d0 <prvInitialiseTaskLists+0x68>)
 800d69c:	f7fe fc0e 	bl	800bebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6a0:	480c      	ldr	r0, [pc, #48]	@ (800d6d4 <prvInitialiseTaskLists+0x6c>)
 800d6a2:	f7fe fc0b 	bl	800bebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6a6:	480c      	ldr	r0, [pc, #48]	@ (800d6d8 <prvInitialiseTaskLists+0x70>)
 800d6a8:	f7fe fc08 	bl	800bebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6ac:	480b      	ldr	r0, [pc, #44]	@ (800d6dc <prvInitialiseTaskLists+0x74>)
 800d6ae:	f7fe fc05 	bl	800bebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e0 <prvInitialiseTaskLists+0x78>)
 800d6b4:	4a05      	ldr	r2, [pc, #20]	@ (800d6cc <prvInitialiseTaskLists+0x64>)
 800d6b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e4 <prvInitialiseTaskLists+0x7c>)
 800d6ba:	4a05      	ldr	r2, [pc, #20]	@ (800d6d0 <prvInitialiseTaskLists+0x68>)
 800d6bc:	601a      	str	r2, [r3, #0]
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	200017c4 	.word	0x200017c4
 800d6cc:	20001c24 	.word	0x20001c24
 800d6d0:	20001c38 	.word	0x20001c38
 800d6d4:	20001c54 	.word	0x20001c54
 800d6d8:	20001c68 	.word	0x20001c68
 800d6dc:	20001c80 	.word	0x20001c80
 800d6e0:	20001c4c 	.word	0x20001c4c
 800d6e4:	20001c50 	.word	0x20001c50

0800d6e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ee:	e019      	b.n	800d724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6f0:	f000 ff0c 	bl	800e50c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f4:	4b10      	ldr	r3, [pc, #64]	@ (800d738 <prvCheckTasksWaitingTermination+0x50>)
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3304      	adds	r3, #4
 800d700:	4618      	mov	r0, r3
 800d702:	f7fe fc65 	bl	800bfd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d706:	4b0d      	ldr	r3, [pc, #52]	@ (800d73c <prvCheckTasksWaitingTermination+0x54>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	4a0b      	ldr	r2, [pc, #44]	@ (800d73c <prvCheckTasksWaitingTermination+0x54>)
 800d70e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d710:	4b0b      	ldr	r3, [pc, #44]	@ (800d740 <prvCheckTasksWaitingTermination+0x58>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3b01      	subs	r3, #1
 800d716:	4a0a      	ldr	r2, [pc, #40]	@ (800d740 <prvCheckTasksWaitingTermination+0x58>)
 800d718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d71a:	f000 ff2d 	bl	800e578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f848 	bl	800d7b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d724:	4b06      	ldr	r3, [pc, #24]	@ (800d740 <prvCheckTasksWaitingTermination+0x58>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e1      	bne.n	800d6f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d72c:	bf00      	nop
 800d72e:	bf00      	nop
 800d730:	3708      	adds	r7, #8
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20001c68 	.word	0x20001c68
 800d73c:	20001c94 	.word	0x20001c94
 800d740:	20001c7c 	.word	0x20001c7c

0800d744 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d74c:	2300      	movs	r3, #0
 800d74e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d750:	e005      	b.n	800d75e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3301      	adds	r3, #1
 800d756:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	3301      	adds	r3, #1
 800d75c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2ba5      	cmp	r3, #165	@ 0xa5
 800d764:	d0f5      	beq.n	800d752 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	089b      	lsrs	r3, r3, #2
 800d76a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	b29b      	uxth	r3, r3
	}
 800d770:	4618      	mov	r0, r3
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <uxTaskGetStackHighWaterMark+0x14>
 800d78a:	4b09      	ldr	r3, [pc, #36]	@ (800d7b0 <uxTaskGetStackHighWaterMark+0x34>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	e000      	b.n	800d792 <uxTaskGetStackHighWaterMark+0x16>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d798:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f7ff ffd2 	bl	800d744 <prvTaskCheckFreeStackSpace>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
	}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	200017c0 	.word	0x200017c0

0800d7b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3354      	adds	r3, #84	@ 0x54
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f002 f899 	bl	800f8f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d108      	bne.n	800d7e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f001 f895 	bl	800e904 <vPortFree>
				vPortFree( pxTCB );
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 f892 	bl	800e904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7e0:	e01b      	b.n	800d81a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d103      	bne.n	800d7f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f001 f889 	bl	800e904 <vPortFree>
	}
 800d7f2:	e012      	b.n	800d81a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d00d      	beq.n	800d81a <prvDeleteTCB+0x66>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d802:	b672      	cpsid	i
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	b662      	cpsie	i
 800d812:	60fb      	str	r3, [r7, #12]
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop
 800d818:	e7fd      	b.n	800d816 <prvDeleteTCB+0x62>
	}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d82a:	4b0c      	ldr	r3, [pc, #48]	@ (800d85c <prvResetNextTaskUnblockTime+0x38>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d104      	bne.n	800d83e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d834:	4b0a      	ldr	r3, [pc, #40]	@ (800d860 <prvResetNextTaskUnblockTime+0x3c>)
 800d836:	f04f 32ff 	mov.w	r2, #4294967295
 800d83a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d83c:	e008      	b.n	800d850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d83e:	4b07      	ldr	r3, [pc, #28]	@ (800d85c <prvResetNextTaskUnblockTime+0x38>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	4a04      	ldr	r2, [pc, #16]	@ (800d860 <prvResetNextTaskUnblockTime+0x3c>)
 800d84e:	6013      	str	r3, [r2, #0]
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	20001c4c 	.word	0x20001c4c
 800d860:	20001cb4 	.word	0x20001cb4

0800d864 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d86a:	4b0b      	ldr	r3, [pc, #44]	@ (800d898 <xTaskGetSchedulerState+0x34>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d872:	2301      	movs	r3, #1
 800d874:	607b      	str	r3, [r7, #4]
 800d876:	e008      	b.n	800d88a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d878:	4b08      	ldr	r3, [pc, #32]	@ (800d89c <xTaskGetSchedulerState+0x38>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d102      	bne.n	800d886 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d880:	2302      	movs	r3, #2
 800d882:	607b      	str	r3, [r7, #4]
 800d884:	e001      	b.n	800d88a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d886:	2300      	movs	r3, #0
 800d888:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d88a:	687b      	ldr	r3, [r7, #4]
	}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	20001ca0 	.word	0x20001ca0
 800d89c:	20001cbc 	.word	0x20001cbc

0800d8a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d05c      	beq.n	800d970 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8b6:	4b31      	ldr	r3, [pc, #196]	@ (800d97c <xTaskPriorityDisinherit+0xdc>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d00d      	beq.n	800d8dc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c4:	b672      	cpsid	i
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	b662      	cpsie	i
 800d8d4:	60fb      	str	r3, [r7, #12]
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	e7fd      	b.n	800d8d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10d      	bne.n	800d900 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e8:	b672      	cpsid	i
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	b662      	cpsie	i
 800d8f8:	60bb      	str	r3, [r7, #8]
}
 800d8fa:	bf00      	nop
 800d8fc:	bf00      	nop
 800d8fe:	e7fd      	b.n	800d8fc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d904:	1e5a      	subs	r2, r3, #1
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d912:	429a      	cmp	r2, r3
 800d914:	d02c      	beq.n	800d970 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d128      	bne.n	800d970 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	3304      	adds	r3, #4
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fb54 	bl	800bfd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d934:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d940:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <xTaskPriorityDisinherit+0xe0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	429a      	cmp	r2, r3
 800d946:	d903      	bls.n	800d950 <xTaskPriorityDisinherit+0xb0>
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94c:	4a0c      	ldr	r2, [pc, #48]	@ (800d980 <xTaskPriorityDisinherit+0xe0>)
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d954:	4613      	mov	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4a09      	ldr	r2, [pc, #36]	@ (800d984 <xTaskPriorityDisinherit+0xe4>)
 800d95e:	441a      	add	r2, r3
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	3304      	adds	r3, #4
 800d964:	4619      	mov	r1, r3
 800d966:	4610      	mov	r0, r2
 800d968:	f7fe fad5 	bl	800bf16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d96c:	2301      	movs	r3, #1
 800d96e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d970:	697b      	ldr	r3, [r7, #20]
	}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	200017c0 	.word	0x200017c0
 800d980:	20001c9c 	.word	0x20001c9c
 800d984:	200017c4 	.word	0x200017c4

0800d988 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d992:	4b21      	ldr	r3, [pc, #132]	@ (800da18 <prvAddCurrentTaskToDelayedList+0x90>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d998:	4b20      	ldr	r3, [pc, #128]	@ (800da1c <prvAddCurrentTaskToDelayedList+0x94>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe fb16 	bl	800bfd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9aa:	d10a      	bne.n	800d9c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d007      	beq.n	800d9c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9b2:	4b1a      	ldr	r3, [pc, #104]	@ (800da1c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4819      	ldr	r0, [pc, #100]	@ (800da20 <prvAddCurrentTaskToDelayedList+0x98>)
 800d9bc:	f7fe faab 	bl	800bf16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9c0:	e026      	b.n	800da10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9ca:	4b14      	ldr	r3, [pc, #80]	@ (800da1c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d209      	bcs.n	800d9ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9da:	4b12      	ldr	r3, [pc, #72]	@ (800da24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	4b0f      	ldr	r3, [pc, #60]	@ (800da1c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	f7fe fab9 	bl	800bf5e <vListInsert>
}
 800d9ec:	e010      	b.n	800da10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ee:	4b0e      	ldr	r3, [pc, #56]	@ (800da28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800da1c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	f7fe faaf 	bl	800bf5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da00:	4b0a      	ldr	r3, [pc, #40]	@ (800da2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	429a      	cmp	r2, r3
 800da08:	d202      	bcs.n	800da10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800da0a:	4a08      	ldr	r2, [pc, #32]	@ (800da2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	6013      	str	r3, [r2, #0]
}
 800da10:	bf00      	nop
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20001c98 	.word	0x20001c98
 800da1c:	200017c0 	.word	0x200017c0
 800da20:	20001c80 	.word	0x20001c80
 800da24:	20001c50 	.word	0x20001c50
 800da28:	20001c4c 	.word	0x20001c4c
 800da2c:	20001cb4 	.word	0x20001cb4

0800da30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08a      	sub	sp, #40	@ 0x28
 800da34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da36:	2300      	movs	r3, #0
 800da38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da3a:	f000 fbc5 	bl	800e1c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da3e:	4b1e      	ldr	r3, [pc, #120]	@ (800dab8 <xTimerCreateTimerTask+0x88>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d021      	beq.n	800da8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da46:	2300      	movs	r3, #0
 800da48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da4e:	1d3a      	adds	r2, r7, #4
 800da50:	f107 0108 	add.w	r1, r7, #8
 800da54:	f107 030c 	add.w	r3, r7, #12
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fe fa15 	bl	800be88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	9202      	str	r2, [sp, #8]
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	2302      	movs	r3, #2
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	2300      	movs	r3, #0
 800da6e:	460a      	mov	r2, r1
 800da70:	4912      	ldr	r1, [pc, #72]	@ (800dabc <xTimerCreateTimerTask+0x8c>)
 800da72:	4813      	ldr	r0, [pc, #76]	@ (800dac0 <xTimerCreateTimerTask+0x90>)
 800da74:	f7ff f834 	bl	800cae0 <xTaskCreateStatic>
 800da78:	4603      	mov	r3, r0
 800da7a:	4a12      	ldr	r2, [pc, #72]	@ (800dac4 <xTimerCreateTimerTask+0x94>)
 800da7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da7e:	4b11      	ldr	r3, [pc, #68]	@ (800dac4 <xTimerCreateTimerTask+0x94>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da86:	2301      	movs	r3, #1
 800da88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10d      	bne.n	800daac <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da94:	b672      	cpsid	i
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	b662      	cpsie	i
 800daa4:	613b      	str	r3, [r7, #16]
}
 800daa6:	bf00      	nop
 800daa8:	bf00      	nop
 800daaa:	e7fd      	b.n	800daa8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800daac:	697b      	ldr	r3, [r7, #20]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3718      	adds	r7, #24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20001cf0 	.word	0x20001cf0
 800dabc:	08010240 	.word	0x08010240
 800dac0:	0800dd51 	.word	0x0800dd51
 800dac4:	20001cf4 	.word	0x20001cf4

0800dac8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af02      	add	r7, sp, #8
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
 800dad4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dad6:	202c      	movs	r0, #44	@ 0x2c
 800dad8:	f000 fe46 	bl	800e768 <pvPortMalloc>
 800dadc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00d      	beq.n	800db00 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	9301      	str	r3, [sp, #4]
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	68b9      	ldr	r1, [r7, #8]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f000 f849 	bl	800db92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800db00:	697b      	ldr	r3, [r7, #20]
	}
 800db02:	4618      	mov	r0, r3
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b08a      	sub	sp, #40	@ 0x28
 800db0e:	af02      	add	r7, sp, #8
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	607a      	str	r2, [r7, #4]
 800db16:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800db18:	232c      	movs	r3, #44	@ 0x2c
 800db1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	2b2c      	cmp	r3, #44	@ 0x2c
 800db20:	d00d      	beq.n	800db3e <xTimerCreateStatic+0x34>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db26:	b672      	cpsid	i
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	b662      	cpsie	i
 800db36:	61bb      	str	r3, [r7, #24]
}
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800db40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10d      	bne.n	800db62 <xTimerCreateStatic+0x58>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4a:	b672      	cpsid	i
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	b662      	cpsie	i
 800db5a:	617b      	str	r3, [r7, #20]
}
 800db5c:	bf00      	nop
 800db5e:	bf00      	nop
 800db60:	e7fd      	b.n	800db5e <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800db62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db64:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00d      	beq.n	800db88 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	2202      	movs	r2, #2
 800db70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 f805 	bl	800db92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800db88:	69fb      	ldr	r3, [r7, #28]
	}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3720      	adds	r7, #32
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b086      	sub	sp, #24
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	607a      	str	r2, [r7, #4]
 800db9e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10d      	bne.n	800dbc2 <prvInitialiseNewTimer+0x30>
	__asm volatile
 800dba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbaa:	b672      	cpsid	i
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	b662      	cpsie	i
 800dbba:	617b      	str	r3, [r7, #20]
}
 800dbbc:	bf00      	nop
 800dbbe:	bf00      	nop
 800dbc0:	e7fd      	b.n	800dbbe <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d01e      	beq.n	800dc06 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dbc8:	f000 fafe 	bl	800e1c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd4:	68ba      	ldr	r2, [r7, #8]
 800dbd6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	6a3a      	ldr	r2, [r7, #32]
 800dbe2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fe f987 	bl	800befc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d008      	beq.n	800dc06 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbfa:	f043 0304 	orr.w	r3, r3, #4
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dc06:	bf00      	nop
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
	...

0800dc10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10d      	bne.n	800dc44 <xTimerGenericCommand+0x34>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2c:	b672      	cpsid	i
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	b662      	cpsie	i
 800dc3c:	623b      	str	r3, [r7, #32]
}
 800dc3e:	bf00      	nop
 800dc40:	bf00      	nop
 800dc42:	e7fd      	b.n	800dc40 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc44:	4b19      	ldr	r3, [pc, #100]	@ (800dcac <xTimerGenericCommand+0x9c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d02a      	beq.n	800dca2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b05      	cmp	r3, #5
 800dc5c:	dc18      	bgt.n	800dc90 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc5e:	f7ff fe01 	bl	800d864 <xTaskGetSchedulerState>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d109      	bne.n	800dc7c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc68:	4b10      	ldr	r3, [pc, #64]	@ (800dcac <xTimerGenericCommand+0x9c>)
 800dc6a:	6818      	ldr	r0, [r3, #0]
 800dc6c:	f107 0110 	add.w	r1, r7, #16
 800dc70:	2300      	movs	r3, #0
 800dc72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc74:	f7fe fb30 	bl	800c2d8 <xQueueGenericSend>
 800dc78:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc7a:	e012      	b.n	800dca2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800dcac <xTimerGenericCommand+0x9c>)
 800dc7e:	6818      	ldr	r0, [r3, #0]
 800dc80:	f107 0110 	add.w	r1, r7, #16
 800dc84:	2300      	movs	r3, #0
 800dc86:	2200      	movs	r2, #0
 800dc88:	f7fe fb26 	bl	800c2d8 <xQueueGenericSend>
 800dc8c:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc8e:	e008      	b.n	800dca2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc90:	4b06      	ldr	r3, [pc, #24]	@ (800dcac <xTimerGenericCommand+0x9c>)
 800dc92:	6818      	ldr	r0, [r3, #0]
 800dc94:	f107 0110 	add.w	r1, r7, #16
 800dc98:	2300      	movs	r3, #0
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	f7fe fc26 	bl	800c4ec <xQueueGenericSendFromISR>
 800dca0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3728      	adds	r7, #40	@ 0x28
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20001cf0 	.word	0x20001cf0

0800dcb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b088      	sub	sp, #32
 800dcb4:	af02      	add	r7, sp, #8
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcba:	4b24      	ldr	r3, [pc, #144]	@ (800dd4c <prvProcessExpiredTimer+0x9c>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe f981 	bl	800bfd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcd4:	f003 0304 	and.w	r3, r3, #4
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d025      	beq.n	800dd28 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	699a      	ldr	r2, [r3, #24]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	18d1      	adds	r1, r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	6978      	ldr	r0, [r7, #20]
 800dcea:	f000 f8d7 	bl	800de9c <prvInsertTimerInActiveList>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d022      	beq.n	800dd3a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	6978      	ldr	r0, [r7, #20]
 800dd00:	f7ff ff86 	bl	800dc10 <xTimerGenericCommand>
 800dd04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d116      	bne.n	800dd3a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd10:	b672      	cpsid	i
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	b662      	cpsie	i
 800dd20:	60fb      	str	r3, [r7, #12]
}
 800dd22:	bf00      	nop
 800dd24:	bf00      	nop
 800dd26:	e7fd      	b.n	800dd24 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd2e:	f023 0301 	bic.w	r3, r3, #1
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	6978      	ldr	r0, [r7, #20]
 800dd40:	4798      	blx	r3
}
 800dd42:	bf00      	nop
 800dd44:	3718      	adds	r7, #24
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	20001ce8 	.word	0x20001ce8

0800dd50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd58:	f107 0308 	add.w	r3, r7, #8
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 f859 	bl	800de14 <prvGetNextExpireTime>
 800dd62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	4619      	mov	r1, r3
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f000 f805 	bl	800dd78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd6e:	f000 f8d7 	bl	800df20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd72:	bf00      	nop
 800dd74:	e7f0      	b.n	800dd58 <prvTimerTask+0x8>
	...

0800dd78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd82:	f7ff f91f 	bl	800cfc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd86:	f107 0308 	add.w	r3, r7, #8
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 f866 	bl	800de5c <prvSampleTimeNow>
 800dd90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d130      	bne.n	800ddfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <prvProcessTimerOrBlockTask+0x3c>
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d806      	bhi.n	800ddb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dda6:	f7ff f91b 	bl	800cfe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ddaa:	68f9      	ldr	r1, [r7, #12]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff ff7f 	bl	800dcb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ddb2:	e024      	b.n	800ddfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d008      	beq.n	800ddcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ddba:	4b13      	ldr	r3, [pc, #76]	@ (800de08 <prvProcessTimerOrBlockTask+0x90>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <prvProcessTimerOrBlockTask+0x50>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e000      	b.n	800ddca <prvProcessTimerOrBlockTask+0x52>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddcc:	4b0f      	ldr	r3, [pc, #60]	@ (800de0c <prvProcessTimerOrBlockTask+0x94>)
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	4619      	mov	r1, r3
 800ddda:	f7fe fe4d 	bl	800ca78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddde:	f7ff f8ff 	bl	800cfe0 <xTaskResumeAll>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dde8:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <prvProcessTimerOrBlockTask+0x98>)
 800ddea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	f3bf 8f6f 	isb	sy
}
 800ddf8:	e001      	b.n	800ddfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddfa:	f7ff f8f1 	bl	800cfe0 <xTaskResumeAll>
}
 800ddfe:	bf00      	nop
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20001cec 	.word	0x20001cec
 800de0c:	20001cf0 	.word	0x20001cf0
 800de10:	e000ed04 	.word	0xe000ed04

0800de14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de1c:	4b0e      	ldr	r3, [pc, #56]	@ (800de58 <prvGetNextExpireTime+0x44>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d101      	bne.n	800de2a <prvGetNextExpireTime+0x16>
 800de26:	2201      	movs	r2, #1
 800de28:	e000      	b.n	800de2c <prvGetNextExpireTime+0x18>
 800de2a:	2200      	movs	r2, #0
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d105      	bne.n	800de44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de38:	4b07      	ldr	r3, [pc, #28]	@ (800de58 <prvGetNextExpireTime+0x44>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	e001      	b.n	800de48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de48:	68fb      	ldr	r3, [r7, #12]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	20001ce8 	.word	0x20001ce8

0800de5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de64:	f7ff f95c 	bl	800d120 <xTaskGetTickCount>
 800de68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de6a:	4b0b      	ldr	r3, [pc, #44]	@ (800de98 <prvSampleTimeNow+0x3c>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	429a      	cmp	r2, r3
 800de72:	d205      	bcs.n	800de80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de74:	f000 f940 	bl	800e0f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	e002      	b.n	800de86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de86:	4a04      	ldr	r2, [pc, #16]	@ (800de98 <prvSampleTimeNow+0x3c>)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de8c:	68fb      	ldr	r3, [r7, #12]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	20001cf8 	.word	0x20001cf8

0800de9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800deaa:	2300      	movs	r3, #0
 800deac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d812      	bhi.n	800dee8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	1ad2      	subs	r2, r2, r3
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	429a      	cmp	r2, r3
 800dece:	d302      	bcc.n	800ded6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ded0:	2301      	movs	r3, #1
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	e01b      	b.n	800df0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ded6:	4b10      	ldr	r3, [pc, #64]	@ (800df18 <prvInsertTimerInActiveList+0x7c>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3304      	adds	r3, #4
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f7fe f83c 	bl	800bf5e <vListInsert>
 800dee6:	e012      	b.n	800df0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	429a      	cmp	r2, r3
 800deee:	d206      	bcs.n	800defe <prvInsertTimerInActiveList+0x62>
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	429a      	cmp	r2, r3
 800def6:	d302      	bcc.n	800defe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800def8:	2301      	movs	r3, #1
 800defa:	617b      	str	r3, [r7, #20]
 800defc:	e007      	b.n	800df0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800defe:	4b07      	ldr	r3, [pc, #28]	@ (800df1c <prvInsertTimerInActiveList+0x80>)
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3304      	adds	r3, #4
 800df06:	4619      	mov	r1, r3
 800df08:	4610      	mov	r0, r2
 800df0a:	f7fe f828 	bl	800bf5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df0e:	697b      	ldr	r3, [r7, #20]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3718      	adds	r7, #24
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	20001cec 	.word	0x20001cec
 800df1c:	20001ce8 	.word	0x20001ce8

0800df20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08e      	sub	sp, #56	@ 0x38
 800df24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df26:	e0d4      	b.n	800e0d2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	da1b      	bge.n	800df66 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df2e:	1d3b      	adds	r3, r7, #4
 800df30:	3304      	adds	r3, #4
 800df32:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10d      	bne.n	800df56 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3e:	b672      	cpsid	i
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	b662      	cpsie	i
 800df4e:	61fb      	str	r3, [r7, #28]
}
 800df50:	bf00      	nop
 800df52:	bf00      	nop
 800df54:	e7fd      	b.n	800df52 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df5c:	6850      	ldr	r0, [r2, #4]
 800df5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df60:	6892      	ldr	r2, [r2, #8]
 800df62:	4611      	mov	r1, r2
 800df64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f2c0 80b2 	blt.w	800e0d2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d004      	beq.n	800df84 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df7c:	3304      	adds	r3, #4
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe f826 	bl	800bfd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df84:	463b      	mov	r3, r7
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff ff68 	bl	800de5c <prvSampleTimeNow>
 800df8c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b09      	cmp	r3, #9
 800df92:	f200 809b 	bhi.w	800e0cc <prvProcessReceivedCommands+0x1ac>
 800df96:	a201      	add	r2, pc, #4	@ (adr r2, 800df9c <prvProcessReceivedCommands+0x7c>)
 800df98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9c:	0800dfc5 	.word	0x0800dfc5
 800dfa0:	0800dfc5 	.word	0x0800dfc5
 800dfa4:	0800dfc5 	.word	0x0800dfc5
 800dfa8:	0800e03f 	.word	0x0800e03f
 800dfac:	0800e053 	.word	0x0800e053
 800dfb0:	0800e0a3 	.word	0x0800e0a3
 800dfb4:	0800dfc5 	.word	0x0800dfc5
 800dfb8:	0800dfc5 	.word	0x0800dfc5
 800dfbc:	0800e03f 	.word	0x0800e03f
 800dfc0:	0800e053 	.word	0x0800e053
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfca:	f043 0301 	orr.w	r3, r3, #1
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfda:	699b      	ldr	r3, [r3, #24]
 800dfdc:	18d1      	adds	r1, r2, r3
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfe4:	f7ff ff5a 	bl	800de9c <prvInsertTimerInActiveList>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d070      	beq.n	800e0d0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dff4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dffc:	f003 0304 	and.w	r3, r3, #4
 800e000:	2b00      	cmp	r3, #0
 800e002:	d065      	beq.n	800e0d0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	441a      	add	r2, r3
 800e00c:	2300      	movs	r3, #0
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	2300      	movs	r3, #0
 800e012:	2100      	movs	r1, #0
 800e014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e016:	f7ff fdfb 	bl	800dc10 <xTimerGenericCommand>
 800e01a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d156      	bne.n	800e0d0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e026:	b672      	cpsid	i
 800e028:	f383 8811 	msr	BASEPRI, r3
 800e02c:	f3bf 8f6f 	isb	sy
 800e030:	f3bf 8f4f 	dsb	sy
 800e034:	b662      	cpsie	i
 800e036:	61bb      	str	r3, [r7, #24]
}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	e7fd      	b.n	800e03a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e044:	f023 0301 	bic.w	r3, r3, #1
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e050:	e03f      	b.n	800e0d2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e058:	f043 0301 	orr.w	r3, r3, #1
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e060:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e068:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e06c:	699b      	ldr	r3, [r3, #24]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10d      	bne.n	800e08e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e076:	b672      	cpsid	i
 800e078:	f383 8811 	msr	BASEPRI, r3
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	b662      	cpsie	i
 800e086:	617b      	str	r3, [r7, #20]
}
 800e088:	bf00      	nop
 800e08a:	bf00      	nop
 800e08c:	e7fd      	b.n	800e08a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e090:	699a      	ldr	r2, [r3, #24]
 800e092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e094:	18d1      	adds	r1, r2, r3
 800e096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e09a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e09c:	f7ff fefe 	bl	800de9c <prvInsertTimerInActiveList>
					break;
 800e0a0:	e017      	b.n	800e0d2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0a8:	f003 0302 	and.w	r3, r3, #2
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d103      	bne.n	800e0b8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800e0b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0b2:	f000 fc27 	bl	800e904 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e0b6:	e00c      	b.n	800e0d2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0be:	f023 0301 	bic.w	r3, r3, #1
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0ca:	e002      	b.n	800e0d2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800e0cc:	bf00      	nop
 800e0ce:	e000      	b.n	800e0d2 <prvProcessReceivedCommands+0x1b2>
					break;
 800e0d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0d2:	4b08      	ldr	r3, [pc, #32]	@ (800e0f4 <prvProcessReceivedCommands+0x1d4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	1d39      	adds	r1, r7, #4
 800e0d8:	2200      	movs	r2, #0
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe faaa 	bl	800c634 <xQueueReceive>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f47f af20 	bne.w	800df28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e0e8:	bf00      	nop
 800e0ea:	bf00      	nop
 800e0ec:	3730      	adds	r7, #48	@ 0x30
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20001cf0 	.word	0x20001cf0

0800e0f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b088      	sub	sp, #32
 800e0fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0fe:	e04b      	b.n	800e198 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e100:	4b2f      	ldr	r3, [pc, #188]	@ (800e1c0 <prvSwitchTimerLists+0xc8>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e10a:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c0 <prvSwitchTimerLists+0xc8>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3304      	adds	r3, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fd ff59 	bl	800bfd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e12c:	f003 0304 	and.w	r3, r3, #4
 800e130:	2b00      	cmp	r3, #0
 800e132:	d031      	beq.n	800e198 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	4413      	add	r3, r2
 800e13c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	429a      	cmp	r2, r3
 800e144:	d90e      	bls.n	800e164 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e152:	4b1b      	ldr	r3, [pc, #108]	@ (800e1c0 <prvSwitchTimerLists+0xc8>)
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	3304      	adds	r3, #4
 800e15a:	4619      	mov	r1, r3
 800e15c:	4610      	mov	r0, r2
 800e15e:	f7fd fefe 	bl	800bf5e <vListInsert>
 800e162:	e019      	b.n	800e198 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e164:	2300      	movs	r3, #0
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	2300      	movs	r3, #0
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	2100      	movs	r1, #0
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f7ff fd4e 	bl	800dc10 <xTimerGenericCommand>
 800e174:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10d      	bne.n	800e198 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800e17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e180:	b672      	cpsid	i
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	b662      	cpsie	i
 800e190:	603b      	str	r3, [r7, #0]
}
 800e192:	bf00      	nop
 800e194:	bf00      	nop
 800e196:	e7fd      	b.n	800e194 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e198:	4b09      	ldr	r3, [pc, #36]	@ (800e1c0 <prvSwitchTimerLists+0xc8>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1ae      	bne.n	800e100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1a2:	4b07      	ldr	r3, [pc, #28]	@ (800e1c0 <prvSwitchTimerLists+0xc8>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1a8:	4b06      	ldr	r3, [pc, #24]	@ (800e1c4 <prvSwitchTimerLists+0xcc>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a04      	ldr	r2, [pc, #16]	@ (800e1c0 <prvSwitchTimerLists+0xc8>)
 800e1ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1b0:	4a04      	ldr	r2, [pc, #16]	@ (800e1c4 <prvSwitchTimerLists+0xcc>)
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	6013      	str	r3, [r2, #0]
}
 800e1b6:	bf00      	nop
 800e1b8:	3718      	adds	r7, #24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	20001ce8 	.word	0x20001ce8
 800e1c4:	20001cec 	.word	0x20001cec

0800e1c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1ce:	f000 f99d 	bl	800e50c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1d2:	4b15      	ldr	r3, [pc, #84]	@ (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d120      	bne.n	800e21c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1da:	4814      	ldr	r0, [pc, #80]	@ (800e22c <prvCheckForValidListAndQueue+0x64>)
 800e1dc:	f7fd fe6e 	bl	800bebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1e0:	4813      	ldr	r0, [pc, #76]	@ (800e230 <prvCheckForValidListAndQueue+0x68>)
 800e1e2:	f7fd fe6b 	bl	800bebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1e6:	4b13      	ldr	r3, [pc, #76]	@ (800e234 <prvCheckForValidListAndQueue+0x6c>)
 800e1e8:	4a10      	ldr	r2, [pc, #64]	@ (800e22c <prvCheckForValidListAndQueue+0x64>)
 800e1ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1ec:	4b12      	ldr	r3, [pc, #72]	@ (800e238 <prvCheckForValidListAndQueue+0x70>)
 800e1ee:	4a10      	ldr	r2, [pc, #64]	@ (800e230 <prvCheckForValidListAndQueue+0x68>)
 800e1f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4b11      	ldr	r3, [pc, #68]	@ (800e23c <prvCheckForValidListAndQueue+0x74>)
 800e1f8:	4a11      	ldr	r2, [pc, #68]	@ (800e240 <prvCheckForValidListAndQueue+0x78>)
 800e1fa:	2110      	movs	r1, #16
 800e1fc:	200a      	movs	r0, #10
 800e1fe:	f7fd ff7d 	bl	800c0fc <xQueueGenericCreateStatic>
 800e202:	4603      	mov	r3, r0
 800e204:	4a08      	ldr	r2, [pc, #32]	@ (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e208:	4b07      	ldr	r3, [pc, #28]	@ (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d005      	beq.n	800e21c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e210:	4b05      	ldr	r3, [pc, #20]	@ (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	490b      	ldr	r1, [pc, #44]	@ (800e244 <prvCheckForValidListAndQueue+0x7c>)
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe fc04 	bl	800ca24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e21c:	f000 f9ac 	bl	800e578 <vPortExitCritical>
}
 800e220:	bf00      	nop
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20001cf0 	.word	0x20001cf0
 800e22c:	20001cc0 	.word	0x20001cc0
 800e230:	20001cd4 	.word	0x20001cd4
 800e234:	20001ce8 	.word	0x20001ce8
 800e238:	20001cec 	.word	0x20001cec
 800e23c:	20001d9c 	.word	0x20001d9c
 800e240:	20001cfc 	.word	0x20001cfc
 800e244:	08010248 	.word	0x08010248

0800e248 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10d      	bne.n	800e276 <xTimerIsTimerActive+0x2e>
	__asm volatile
 800e25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25e:	b672      	cpsid	i
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	b662      	cpsie	i
 800e26e:	60fb      	str	r3, [r7, #12]
}
 800e270:	bf00      	nop
 800e272:	bf00      	nop
 800e274:	e7fd      	b.n	800e272 <xTimerIsTimerActive+0x2a>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800e276:	f000 f949 	bl	800e50c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <xTimerIsTimerActive+0x46>
		{
			xReturn = pdFALSE;
 800e288:	2300      	movs	r3, #0
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	e001      	b.n	800e292 <xTimerIsTimerActive+0x4a>
		}
		else
		{
			xReturn = pdTRUE;
 800e28e:	2301      	movs	r3, #1
 800e290:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800e292:	f000 f971 	bl	800e578 <vPortExitCritical>

	return xReturn;
 800e296:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10d      	bne.n	800e2ce <pvTimerGetTimerID+0x2e>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b6:	b672      	cpsid	i
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	b662      	cpsie	i
 800e2c6:	60fb      	str	r3, [r7, #12]
}
 800e2c8:	bf00      	nop
 800e2ca:	bf00      	nop
 800e2cc:	e7fd      	b.n	800e2ca <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800e2ce:	f000 f91d 	bl	800e50c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e2d8:	f000 f94e 	bl	800e578 <vPortExitCritical>

	return pvReturn;
 800e2dc:	693b      	ldr	r3, [r7, #16]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
	...

0800e2e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3b04      	subs	r3, #4
 800e2f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3b04      	subs	r3, #4
 800e306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f023 0201 	bic.w	r2, r3, #1
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3b04      	subs	r3, #4
 800e316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e318:	4a0c      	ldr	r2, [pc, #48]	@ (800e34c <pxPortInitialiseStack+0x64>)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3b14      	subs	r3, #20
 800e322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f06f 0202 	mvn.w	r2, #2
 800e336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3b20      	subs	r3, #32
 800e33c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e33e:	68fb      	ldr	r3, [r7, #12]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	0800e351 	.word	0x0800e351

0800e350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e35a:	4b15      	ldr	r3, [pc, #84]	@ (800e3b0 <prvTaskExitError+0x60>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e362:	d00d      	beq.n	800e380 <prvTaskExitError+0x30>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e368:	b672      	cpsid	i
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	b662      	cpsie	i
 800e378:	60fb      	str	r3, [r7, #12]
}
 800e37a:	bf00      	nop
 800e37c:	bf00      	nop
 800e37e:	e7fd      	b.n	800e37c <prvTaskExitError+0x2c>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e384:	b672      	cpsid	i
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	b662      	cpsie	i
 800e394:	60bb      	str	r3, [r7, #8]
}
 800e396:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e398:	bf00      	nop
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d0fc      	beq.n	800e39a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	20000098 	.word	0x20000098
	...

0800e3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3c0:	4b07      	ldr	r3, [pc, #28]	@ (800e3e0 <pxCurrentTCBConst2>)
 800e3c2:	6819      	ldr	r1, [r3, #0]
 800e3c4:	6808      	ldr	r0, [r1, #0]
 800e3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ca:	f380 8809 	msr	PSP, r0
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f04f 0000 	mov.w	r0, #0
 800e3d6:	f380 8811 	msr	BASEPRI, r0
 800e3da:	4770      	bx	lr
 800e3dc:	f3af 8000 	nop.w

0800e3e0 <pxCurrentTCBConst2>:
 800e3e0:	200017c0 	.word	0x200017c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop

0800e3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3e8:	4808      	ldr	r0, [pc, #32]	@ (800e40c <prvPortStartFirstTask+0x24>)
 800e3ea:	6800      	ldr	r0, [r0, #0]
 800e3ec:	6800      	ldr	r0, [r0, #0]
 800e3ee:	f380 8808 	msr	MSP, r0
 800e3f2:	f04f 0000 	mov.w	r0, #0
 800e3f6:	f380 8814 	msr	CONTROL, r0
 800e3fa:	b662      	cpsie	i
 800e3fc:	b661      	cpsie	f
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	df00      	svc	0
 800e408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e40a:	bf00      	nop
 800e40c:	e000ed08 	.word	0xe000ed08

0800e410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e416:	4b37      	ldr	r3, [pc, #220]	@ (800e4f4 <xPortStartScheduler+0xe4>)
 800e418:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	22ff      	movs	r2, #255	@ 0xff
 800e426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e430:	78fb      	ldrb	r3, [r7, #3]
 800e432:	b2db      	uxtb	r3, r3
 800e434:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	4b2f      	ldr	r3, [pc, #188]	@ (800e4f8 <xPortStartScheduler+0xe8>)
 800e43c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e43e:	4b2f      	ldr	r3, [pc, #188]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e440:	2207      	movs	r2, #7
 800e442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e444:	e009      	b.n	800e45a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e446:	4b2d      	ldr	r3, [pc, #180]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	3b01      	subs	r3, #1
 800e44c:	4a2b      	ldr	r2, [pc, #172]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e44e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	b2db      	uxtb	r3, r3
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	b2db      	uxtb	r3, r3
 800e458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e45a:	78fb      	ldrb	r3, [r7, #3]
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e462:	2b80      	cmp	r3, #128	@ 0x80
 800e464:	d0ef      	beq.n	800e446 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e466:	4b25      	ldr	r3, [pc, #148]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f1c3 0307 	rsb	r3, r3, #7
 800e46e:	2b04      	cmp	r3, #4
 800e470:	d00d      	beq.n	800e48e <xPortStartScheduler+0x7e>
	__asm volatile
 800e472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e476:	b672      	cpsid	i
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	b662      	cpsie	i
 800e486:	60bb      	str	r3, [r7, #8]
}
 800e488:	bf00      	nop
 800e48a:	bf00      	nop
 800e48c:	e7fd      	b.n	800e48a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e48e:	4b1b      	ldr	r3, [pc, #108]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	021b      	lsls	r3, r3, #8
 800e494:	4a19      	ldr	r2, [pc, #100]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e498:	4b18      	ldr	r3, [pc, #96]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e4a0:	4a16      	ldr	r2, [pc, #88]	@ (800e4fc <xPortStartScheduler+0xec>)
 800e4a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4ac:	4b14      	ldr	r3, [pc, #80]	@ (800e500 <xPortStartScheduler+0xf0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a13      	ldr	r2, [pc, #76]	@ (800e500 <xPortStartScheduler+0xf0>)
 800e4b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e4b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e4b8:	4b11      	ldr	r3, [pc, #68]	@ (800e500 <xPortStartScheduler+0xf0>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a10      	ldr	r2, [pc, #64]	@ (800e500 <xPortStartScheduler+0xf0>)
 800e4be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e4c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e4c4:	f000 f8dc 	bl	800e680 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800e504 <xPortStartScheduler+0xf4>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e4ce:	f000 f8fb 	bl	800e6c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <xPortStartScheduler+0xf8>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e508 <xPortStartScheduler+0xf8>)
 800e4d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e4dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e4de:	f7ff ff83 	bl	800e3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e4e2:	f7fe fefb 	bl	800d2dc <vTaskSwitchContext>
	prvTaskExitError();
 800e4e6:	f7ff ff33 	bl	800e350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	e000e400 	.word	0xe000e400
 800e4f8:	20001dec 	.word	0x20001dec
 800e4fc:	20001df0 	.word	0x20001df0
 800e500:	e000ed20 	.word	0xe000ed20
 800e504:	20000098 	.word	0x20000098
 800e508:	e000ef34 	.word	0xe000ef34

0800e50c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e516:	b672      	cpsid	i
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	b662      	cpsie	i
 800e526:	607b      	str	r3, [r7, #4]
}
 800e528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e52a:	4b11      	ldr	r3, [pc, #68]	@ (800e570 <vPortEnterCritical+0x64>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3301      	adds	r3, #1
 800e530:	4a0f      	ldr	r2, [pc, #60]	@ (800e570 <vPortEnterCritical+0x64>)
 800e532:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e534:	4b0e      	ldr	r3, [pc, #56]	@ (800e570 <vPortEnterCritical+0x64>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d112      	bne.n	800e562 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e53c:	4b0d      	ldr	r3, [pc, #52]	@ (800e574 <vPortEnterCritical+0x68>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00d      	beq.n	800e562 <vPortEnterCritical+0x56>
	__asm volatile
 800e546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e54a:	b672      	cpsid	i
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	b662      	cpsie	i
 800e55a:	603b      	str	r3, [r7, #0]
}
 800e55c:	bf00      	nop
 800e55e:	bf00      	nop
 800e560:	e7fd      	b.n	800e55e <vPortEnterCritical+0x52>
	}
}
 800e562:	bf00      	nop
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	20000098 	.word	0x20000098
 800e574:	e000ed04 	.word	0xe000ed04

0800e578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e57e:	4b13      	ldr	r3, [pc, #76]	@ (800e5cc <vPortExitCritical+0x54>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10d      	bne.n	800e5a2 <vPortExitCritical+0x2a>
	__asm volatile
 800e586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58a:	b672      	cpsid	i
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	b662      	cpsie	i
 800e59a:	607b      	str	r3, [r7, #4]
}
 800e59c:	bf00      	nop
 800e59e:	bf00      	nop
 800e5a0:	e7fd      	b.n	800e59e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5cc <vPortExitCritical+0x54>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	4a08      	ldr	r2, [pc, #32]	@ (800e5cc <vPortExitCritical+0x54>)
 800e5aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5ac:	4b07      	ldr	r3, [pc, #28]	@ (800e5cc <vPortExitCritical+0x54>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d105      	bne.n	800e5c0 <vPortExitCritical+0x48>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	f383 8811 	msr	BASEPRI, r3
}
 800e5be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	20000098 	.word	0x20000098

0800e5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e5d0:	f3ef 8009 	mrs	r0, PSP
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	4b15      	ldr	r3, [pc, #84]	@ (800e630 <pxCurrentTCBConst>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	f01e 0f10 	tst.w	lr, #16
 800e5e0:	bf08      	it	eq
 800e5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ea:	6010      	str	r0, [r2, #0]
 800e5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e5f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e5f4:	b672      	cpsid	i
 800e5f6:	f380 8811 	msr	BASEPRI, r0
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	b662      	cpsie	i
 800e604:	f7fe fe6a 	bl	800d2dc <vTaskSwitchContext>
 800e608:	f04f 0000 	mov.w	r0, #0
 800e60c:	f380 8811 	msr	BASEPRI, r0
 800e610:	bc09      	pop	{r0, r3}
 800e612:	6819      	ldr	r1, [r3, #0]
 800e614:	6808      	ldr	r0, [r1, #0]
 800e616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61a:	f01e 0f10 	tst.w	lr, #16
 800e61e:	bf08      	it	eq
 800e620:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e624:	f380 8809 	msr	PSP, r0
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop

0800e630 <pxCurrentTCBConst>:
 800e630:	200017c0 	.word	0x200017c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e634:	bf00      	nop
 800e636:	bf00      	nop

0800e638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e642:	b672      	cpsid	i
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	b662      	cpsie	i
 800e652:	607b      	str	r3, [r7, #4]
}
 800e654:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e656:	f7fe fd85 	bl	800d164 <xTaskIncrementTick>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e660:	4b06      	ldr	r3, [pc, #24]	@ (800e67c <SysTick_Handler+0x44>)
 800e662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e666:	601a      	str	r2, [r3, #0]
 800e668:	2300      	movs	r3, #0
 800e66a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	f383 8811 	msr	BASEPRI, r3
}
 800e672:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	e000ed04 	.word	0xe000ed04

0800e680 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e680:	b480      	push	{r7}
 800e682:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e684:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b4 <vPortSetupTimerInterrupt+0x34>)
 800e686:	2200      	movs	r2, #0
 800e688:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e68a:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b8 <vPortSetupTimerInterrupt+0x38>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e690:	4b0a      	ldr	r3, [pc, #40]	@ (800e6bc <vPortSetupTimerInterrupt+0x3c>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a0a      	ldr	r2, [pc, #40]	@ (800e6c0 <vPortSetupTimerInterrupt+0x40>)
 800e696:	fba2 2303 	umull	r2, r3, r2, r3
 800e69a:	099b      	lsrs	r3, r3, #6
 800e69c:	4a09      	ldr	r2, [pc, #36]	@ (800e6c4 <vPortSetupTimerInterrupt+0x44>)
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6a2:	4b04      	ldr	r3, [pc, #16]	@ (800e6b4 <vPortSetupTimerInterrupt+0x34>)
 800e6a4:	2207      	movs	r2, #7
 800e6a6:	601a      	str	r2, [r3, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	e000e010 	.word	0xe000e010
 800e6b8:	e000e018 	.word	0xe000e018
 800e6bc:	20000000 	.word	0x20000000
 800e6c0:	10624dd3 	.word	0x10624dd3
 800e6c4:	e000e014 	.word	0xe000e014

0800e6c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e6c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e6d8 <vPortEnableVFP+0x10>
 800e6cc:	6801      	ldr	r1, [r0, #0]
 800e6ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e6d2:	6001      	str	r1, [r0, #0]
 800e6d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e6d6:	bf00      	nop
 800e6d8:	e000ed88 	.word	0xe000ed88

0800e6dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e6e2:	f3ef 8305 	mrs	r3, IPSR
 800e6e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b0f      	cmp	r3, #15
 800e6ec:	d917      	bls.n	800e71e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e6ee:	4a1a      	ldr	r2, [pc, #104]	@ (800e758 <vPortValidateInterruptPriority+0x7c>)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e6f8:	4b18      	ldr	r3, [pc, #96]	@ (800e75c <vPortValidateInterruptPriority+0x80>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	7afa      	ldrb	r2, [r7, #11]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d20d      	bcs.n	800e71e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800e702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e706:	b672      	cpsid	i
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	b662      	cpsie	i
 800e716:	607b      	str	r3, [r7, #4]
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	e7fd      	b.n	800e71a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e71e:	4b10      	ldr	r3, [pc, #64]	@ (800e760 <vPortValidateInterruptPriority+0x84>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e726:	4b0f      	ldr	r3, [pc, #60]	@ (800e764 <vPortValidateInterruptPriority+0x88>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d90d      	bls.n	800e74a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e732:	b672      	cpsid	i
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	b662      	cpsie	i
 800e742:	603b      	str	r3, [r7, #0]
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	e7fd      	b.n	800e746 <vPortValidateInterruptPriority+0x6a>
	}
 800e74a:	bf00      	nop
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	e000e3f0 	.word	0xe000e3f0
 800e75c:	20001dec 	.word	0x20001dec
 800e760:	e000ed0c 	.word	0xe000ed0c
 800e764:	20001df0 	.word	0x20001df0

0800e768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08a      	sub	sp, #40	@ 0x28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e770:	2300      	movs	r3, #0
 800e772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e774:	f7fe fc26 	bl	800cfc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e778:	4b5d      	ldr	r3, [pc, #372]	@ (800e8f0 <pvPortMalloc+0x188>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e780:	f000 f920 	bl	800e9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e784:	4b5b      	ldr	r3, [pc, #364]	@ (800e8f4 <pvPortMalloc+0x18c>)
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4013      	ands	r3, r2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f040 8094 	bne.w	800e8ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d020      	beq.n	800e7da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e798:	2208      	movs	r2, #8
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4413      	add	r3, r2
 800e79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f003 0307 	and.w	r3, r3, #7
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d017      	beq.n	800e7da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f023 0307 	bic.w	r3, r3, #7
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f003 0307 	and.w	r3, r3, #7
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00d      	beq.n	800e7da <pvPortMalloc+0x72>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c2:	b672      	cpsid	i
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	b662      	cpsie	i
 800e7d2:	617b      	str	r3, [r7, #20]
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop
 800e7d8:	e7fd      	b.n	800e7d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d06c      	beq.n	800e8ba <pvPortMalloc+0x152>
 800e7e0:	4b45      	ldr	r3, [pc, #276]	@ (800e8f8 <pvPortMalloc+0x190>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d867      	bhi.n	800e8ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e7ea:	4b44      	ldr	r3, [pc, #272]	@ (800e8fc <pvPortMalloc+0x194>)
 800e7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e7ee:	4b43      	ldr	r3, [pc, #268]	@ (800e8fc <pvPortMalloc+0x194>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7f4:	e004      	b.n	800e800 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	429a      	cmp	r2, r3
 800e808:	d903      	bls.n	800e812 <pvPortMalloc+0xaa>
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1f1      	bne.n	800e7f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e812:	4b37      	ldr	r3, [pc, #220]	@ (800e8f0 <pvPortMalloc+0x188>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e818:	429a      	cmp	r2, r3
 800e81a:	d04e      	beq.n	800e8ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2208      	movs	r2, #8
 800e822:	4413      	add	r3, r2
 800e824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e830:	685a      	ldr	r2, [r3, #4]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	1ad2      	subs	r2, r2, r3
 800e836:	2308      	movs	r3, #8
 800e838:	005b      	lsls	r3, r3, #1
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d922      	bls.n	800e884 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	f003 0307 	and.w	r3, r3, #7
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00d      	beq.n	800e86c <pvPortMalloc+0x104>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e854:	b672      	cpsid	i
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	b662      	cpsie	i
 800e864:	613b      	str	r3, [r7, #16]
}
 800e866:	bf00      	nop
 800e868:	bf00      	nop
 800e86a:	e7fd      	b.n	800e868 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	1ad2      	subs	r2, r2, r3
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e87e:	69b8      	ldr	r0, [r7, #24]
 800e880:	f000 f902 	bl	800ea88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e884:	4b1c      	ldr	r3, [pc, #112]	@ (800e8f8 <pvPortMalloc+0x190>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	4a1a      	ldr	r2, [pc, #104]	@ (800e8f8 <pvPortMalloc+0x190>)
 800e890:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e892:	4b19      	ldr	r3, [pc, #100]	@ (800e8f8 <pvPortMalloc+0x190>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	4b1a      	ldr	r3, [pc, #104]	@ (800e900 <pvPortMalloc+0x198>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d203      	bcs.n	800e8a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e89e:	4b16      	ldr	r3, [pc, #88]	@ (800e8f8 <pvPortMalloc+0x190>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a17      	ldr	r2, [pc, #92]	@ (800e900 <pvPortMalloc+0x198>)
 800e8a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	4b12      	ldr	r3, [pc, #72]	@ (800e8f4 <pvPortMalloc+0x18c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	431a      	orrs	r2, r3
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8ba:	f7fe fb91 	bl	800cfe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	f003 0307 	and.w	r3, r3, #7
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00d      	beq.n	800e8e4 <pvPortMalloc+0x17c>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8cc:	b672      	cpsid	i
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	b662      	cpsie	i
 800e8dc:	60fb      	str	r3, [r7, #12]
}
 800e8de:	bf00      	nop
 800e8e0:	bf00      	nop
 800e8e2:	e7fd      	b.n	800e8e0 <pvPortMalloc+0x178>
	return pvReturn;
 800e8e4:	69fb      	ldr	r3, [r7, #28]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3728      	adds	r7, #40	@ 0x28
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	200059fc 	.word	0x200059fc
 800e8f4:	20005a08 	.word	0x20005a08
 800e8f8:	20005a00 	.word	0x20005a00
 800e8fc:	200059f4 	.word	0x200059f4
 800e900:	20005a04 	.word	0x20005a04

0800e904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b086      	sub	sp, #24
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d04e      	beq.n	800e9b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e916:	2308      	movs	r3, #8
 800e918:	425b      	negs	r3, r3
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	4413      	add	r3, r2
 800e91e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	4b24      	ldr	r3, [pc, #144]	@ (800e9bc <vPortFree+0xb8>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4013      	ands	r3, r2
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10d      	bne.n	800e94e <vPortFree+0x4a>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e936:	b672      	cpsid	i
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	b662      	cpsie	i
 800e946:	60fb      	str	r3, [r7, #12]
}
 800e948:	bf00      	nop
 800e94a:	bf00      	nop
 800e94c:	e7fd      	b.n	800e94a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00d      	beq.n	800e972 <vPortFree+0x6e>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e95a:	b672      	cpsid	i
 800e95c:	f383 8811 	msr	BASEPRI, r3
 800e960:	f3bf 8f6f 	isb	sy
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	b662      	cpsie	i
 800e96a:	60bb      	str	r3, [r7, #8]
}
 800e96c:	bf00      	nop
 800e96e:	bf00      	nop
 800e970:	e7fd      	b.n	800e96e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	4b11      	ldr	r3, [pc, #68]	@ (800e9bc <vPortFree+0xb8>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4013      	ands	r3, r2
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d019      	beq.n	800e9b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d115      	bne.n	800e9b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	685a      	ldr	r2, [r3, #4]
 800e98c:	4b0b      	ldr	r3, [pc, #44]	@ (800e9bc <vPortFree+0xb8>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	43db      	mvns	r3, r3
 800e992:	401a      	ands	r2, r3
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e998:	f7fe fb14 	bl	800cfc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	4b07      	ldr	r3, [pc, #28]	@ (800e9c0 <vPortFree+0xbc>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4a06      	ldr	r2, [pc, #24]	@ (800e9c0 <vPortFree+0xbc>)
 800e9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9aa:	6938      	ldr	r0, [r7, #16]
 800e9ac:	f000 f86c 	bl	800ea88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e9b0:	f7fe fb16 	bl	800cfe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9b4:	bf00      	nop
 800e9b6:	3718      	adds	r7, #24
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20005a08 	.word	0x20005a08
 800e9c0:	20005a00 	.word	0x20005a00

0800e9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e9ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e9d0:	4b27      	ldr	r3, [pc, #156]	@ (800ea70 <prvHeapInit+0xac>)
 800e9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f003 0307 	and.w	r3, r3, #7
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00c      	beq.n	800e9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3307      	adds	r3, #7
 800e9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f023 0307 	bic.w	r3, r3, #7
 800e9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	4a1f      	ldr	r2, [pc, #124]	@ (800ea70 <prvHeapInit+0xac>)
 800e9f4:	4413      	add	r3, r2
 800e9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e9fc:	4a1d      	ldr	r2, [pc, #116]	@ (800ea74 <prvHeapInit+0xb0>)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea02:	4b1c      	ldr	r3, [pc, #112]	@ (800ea74 <prvHeapInit+0xb0>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea10:	2208      	movs	r2, #8
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	1a9b      	subs	r3, r3, r2
 800ea16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f023 0307 	bic.w	r3, r3, #7
 800ea1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4a15      	ldr	r2, [pc, #84]	@ (800ea78 <prvHeapInit+0xb4>)
 800ea24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea26:	4b14      	ldr	r3, [pc, #80]	@ (800ea78 <prvHeapInit+0xb4>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea2e:	4b12      	ldr	r3, [pc, #72]	@ (800ea78 <prvHeapInit+0xb4>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	1ad2      	subs	r2, r2, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea44:	4b0c      	ldr	r3, [pc, #48]	@ (800ea78 <prvHeapInit+0xb4>)
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	4a0a      	ldr	r2, [pc, #40]	@ (800ea7c <prvHeapInit+0xb8>)
 800ea52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	4a09      	ldr	r2, [pc, #36]	@ (800ea80 <prvHeapInit+0xbc>)
 800ea5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea5c:	4b09      	ldr	r3, [pc, #36]	@ (800ea84 <prvHeapInit+0xc0>)
 800ea5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ea62:	601a      	str	r2, [r3, #0]
}
 800ea64:	bf00      	nop
 800ea66:	3714      	adds	r7, #20
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	20001df4 	.word	0x20001df4
 800ea74:	200059f4 	.word	0x200059f4
 800ea78:	200059fc 	.word	0x200059fc
 800ea7c:	20005a04 	.word	0x20005a04
 800ea80:	20005a00 	.word	0x20005a00
 800ea84:	20005a08 	.word	0x20005a08

0800ea88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea90:	4b28      	ldr	r3, [pc, #160]	@ (800eb34 <prvInsertBlockIntoFreeList+0xac>)
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e002      	b.n	800ea9c <prvInsertBlockIntoFreeList+0x14>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	60fb      	str	r3, [r7, #12]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d8f7      	bhi.n	800ea96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	4413      	add	r3, r2
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d108      	bne.n	800eaca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	441a      	add	r2, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	441a      	add	r2, r3
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d118      	bne.n	800eb10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	4b15      	ldr	r3, [pc, #84]	@ (800eb38 <prvInsertBlockIntoFreeList+0xb0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d00d      	beq.n	800eb06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	441a      	add	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	e008      	b.n	800eb18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb06:	4b0c      	ldr	r3, [pc, #48]	@ (800eb38 <prvInsertBlockIntoFreeList+0xb0>)
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	e003      	b.n	800eb18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d002      	beq.n	800eb26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb26:	bf00      	nop
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	200059f4 	.word	0x200059f4
 800eb38:	200059fc 	.word	0x200059fc

0800eb3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eb40:	2200      	movs	r2, #0
 800eb42:	4912      	ldr	r1, [pc, #72]	@ (800eb8c <MX_USB_DEVICE_Init+0x50>)
 800eb44:	4812      	ldr	r0, [pc, #72]	@ (800eb90 <MX_USB_DEVICE_Init+0x54>)
 800eb46:	f7fb fb7b 	bl	800a240 <USBD_Init>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d001      	beq.n	800eb54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eb50:	f7f3 fcca 	bl	80024e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eb54:	490f      	ldr	r1, [pc, #60]	@ (800eb94 <MX_USB_DEVICE_Init+0x58>)
 800eb56:	480e      	ldr	r0, [pc, #56]	@ (800eb90 <MX_USB_DEVICE_Init+0x54>)
 800eb58:	f7fb fba2 	bl	800a2a0 <USBD_RegisterClass>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d001      	beq.n	800eb66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eb62:	f7f3 fcc1 	bl	80024e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eb66:	490c      	ldr	r1, [pc, #48]	@ (800eb98 <MX_USB_DEVICE_Init+0x5c>)
 800eb68:	4809      	ldr	r0, [pc, #36]	@ (800eb90 <MX_USB_DEVICE_Init+0x54>)
 800eb6a:	f7fb fad9 	bl	800a120 <USBD_CDC_RegisterInterface>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eb74:	f7f3 fcb8 	bl	80024e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eb78:	4805      	ldr	r0, [pc, #20]	@ (800eb90 <MX_USB_DEVICE_Init+0x54>)
 800eb7a:	f7fb fbc7 	bl	800a30c <USBD_Start>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eb84:	f7f3 fcb0 	bl	80024e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eb88:	bf00      	nop
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	200000b0 	.word	0x200000b0
 800eb90:	20005a0c 	.word	0x20005a0c
 800eb94:	20000018 	.word	0x20000018
 800eb98:	2000009c 	.word	0x2000009c

0800eb9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eba0:	2200      	movs	r2, #0
 800eba2:	4905      	ldr	r1, [pc, #20]	@ (800ebb8 <CDC_Init_FS+0x1c>)
 800eba4:	4805      	ldr	r0, [pc, #20]	@ (800ebbc <CDC_Init_FS+0x20>)
 800eba6:	f7fb fad5 	bl	800a154 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ebaa:	4905      	ldr	r1, [pc, #20]	@ (800ebc0 <CDC_Init_FS+0x24>)
 800ebac:	4803      	ldr	r0, [pc, #12]	@ (800ebbc <CDC_Init_FS+0x20>)
 800ebae:	f7fb faf3 	bl	800a198 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ebb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	200064e8 	.word	0x200064e8
 800ebbc:	20005a0c 	.word	0x20005a0c
 800ebc0:	20005ce8 	.word	0x20005ce8

0800ebc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ebc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	6039      	str	r1, [r7, #0]
 800ebde:	71fb      	strb	r3, [r7, #7]
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ebe4:	79fb      	ldrb	r3, [r7, #7]
 800ebe6:	2b23      	cmp	r3, #35	@ 0x23
 800ebe8:	d84a      	bhi.n	800ec80 <CDC_Control_FS+0xac>
 800ebea:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf0 <CDC_Control_FS+0x1c>)
 800ebec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf0:	0800ec81 	.word	0x0800ec81
 800ebf4:	0800ec81 	.word	0x0800ec81
 800ebf8:	0800ec81 	.word	0x0800ec81
 800ebfc:	0800ec81 	.word	0x0800ec81
 800ec00:	0800ec81 	.word	0x0800ec81
 800ec04:	0800ec81 	.word	0x0800ec81
 800ec08:	0800ec81 	.word	0x0800ec81
 800ec0c:	0800ec81 	.word	0x0800ec81
 800ec10:	0800ec81 	.word	0x0800ec81
 800ec14:	0800ec81 	.word	0x0800ec81
 800ec18:	0800ec81 	.word	0x0800ec81
 800ec1c:	0800ec81 	.word	0x0800ec81
 800ec20:	0800ec81 	.word	0x0800ec81
 800ec24:	0800ec81 	.word	0x0800ec81
 800ec28:	0800ec81 	.word	0x0800ec81
 800ec2c:	0800ec81 	.word	0x0800ec81
 800ec30:	0800ec81 	.word	0x0800ec81
 800ec34:	0800ec81 	.word	0x0800ec81
 800ec38:	0800ec81 	.word	0x0800ec81
 800ec3c:	0800ec81 	.word	0x0800ec81
 800ec40:	0800ec81 	.word	0x0800ec81
 800ec44:	0800ec81 	.word	0x0800ec81
 800ec48:	0800ec81 	.word	0x0800ec81
 800ec4c:	0800ec81 	.word	0x0800ec81
 800ec50:	0800ec81 	.word	0x0800ec81
 800ec54:	0800ec81 	.word	0x0800ec81
 800ec58:	0800ec81 	.word	0x0800ec81
 800ec5c:	0800ec81 	.word	0x0800ec81
 800ec60:	0800ec81 	.word	0x0800ec81
 800ec64:	0800ec81 	.word	0x0800ec81
 800ec68:	0800ec81 	.word	0x0800ec81
 800ec6c:	0800ec81 	.word	0x0800ec81
 800ec70:	0800ec81 	.word	0x0800ec81
 800ec74:	0800ec81 	.word	0x0800ec81
 800ec78:	0800ec81 	.word	0x0800ec81
 800ec7c:	0800ec81 	.word	0x0800ec81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ec80:	bf00      	nop
  }

  return (USBD_OK);
 800ec82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08a      	sub	sp, #40	@ 0x28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ec9a:	6879      	ldr	r1, [r7, #4]
 800ec9c:	480b      	ldr	r0, [pc, #44]	@ (800eccc <CDC_Receive_FS+0x3c>)
 800ec9e:	f7fb fa7b 	bl	800a198 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eca2:	480a      	ldr	r0, [pc, #40]	@ (800eccc <CDC_Receive_FS+0x3c>)
 800eca4:	f7fb fa96 	bl	800a1d4 <USBD_CDC_ReceivePacket>
  //uint8_t *data = "Hello World from USB CDC\n";
  uint8_t * command[8];
  //strcpy(command, Buf);
  //command[*Len] = "\0";
  SEGGER_SYSVIEW_PrintfHost("%d\n", *Len );
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4619      	mov	r1, r3
 800ecae:	4808      	ldr	r0, [pc, #32]	@ (800ecd0 <CDC_Receive_FS+0x40>)
 800ecb0:	f7f2 fe8c 	bl	80019cc <SEGGER_SYSVIEW_PrintfHost>

  //SEGGER_SYSVIEW_PrintfHost(command);

  xQueueSendFromISR(commandQueueHandle, Buf, 100);
 800ecb4:	4b07      	ldr	r3, [pc, #28]	@ (800ecd4 <CDC_Receive_FS+0x44>)
 800ecb6:	6818      	ldr	r0, [r3, #0]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	2264      	movs	r2, #100	@ 0x64
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	f7fd fc15 	bl	800c4ec <xQueueGenericSendFromISR>



  return (USBD_OK);
 800ecc2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3728      	adds	r7, #40	@ 0x28
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	20005a0c 	.word	0x20005a0c
 800ecd0:	08010250 	.word	0x08010250
 800ecd4:	20000fb4 	.word	0x20000fb4

0800ecd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b087      	sub	sp, #28
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	4613      	mov	r3, r2
 800ece4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ecea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	371c      	adds	r7, #28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
	...

0800ecfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	6039      	str	r1, [r7, #0]
 800ed06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	2212      	movs	r2, #18
 800ed0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ed0e:	4b03      	ldr	r3, [pc, #12]	@ (800ed1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	200000d0 	.word	0x200000d0

0800ed20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4603      	mov	r3, r0
 800ed28:	6039      	str	r1, [r7, #0]
 800ed2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	2204      	movs	r2, #4
 800ed30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ed32:	4b03      	ldr	r3, [pc, #12]	@ (800ed40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	200000f0 	.word	0x200000f0

0800ed44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	6039      	str	r1, [r7, #0]
 800ed4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed50:	79fb      	ldrb	r3, [r7, #7]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d105      	bne.n	800ed62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	4907      	ldr	r1, [pc, #28]	@ (800ed78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ed5a:	4808      	ldr	r0, [pc, #32]	@ (800ed7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ed5c:	f7fc fcaa 	bl	800b6b4 <USBD_GetString>
 800ed60:	e004      	b.n	800ed6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	4904      	ldr	r1, [pc, #16]	@ (800ed78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ed66:	4805      	ldr	r0, [pc, #20]	@ (800ed7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ed68:	f7fc fca4 	bl	800b6b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed6c:	4b02      	ldr	r3, [pc, #8]	@ (800ed78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20006ce8 	.word	0x20006ce8
 800ed7c:	08010254 	.word	0x08010254

0800ed80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	4603      	mov	r3, r0
 800ed88:	6039      	str	r1, [r7, #0]
 800ed8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	4904      	ldr	r1, [pc, #16]	@ (800eda0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ed90:	4804      	ldr	r0, [pc, #16]	@ (800eda4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ed92:	f7fc fc8f 	bl	800b6b4 <USBD_GetString>
  return USBD_StrDesc;
 800ed96:	4b02      	ldr	r3, [pc, #8]	@ (800eda0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20006ce8 	.word	0x20006ce8
 800eda4:	0801026c 	.word	0x0801026c

0800eda8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	4603      	mov	r3, r0
 800edb0:	6039      	str	r1, [r7, #0]
 800edb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	221a      	movs	r2, #26
 800edb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800edba:	f000 f855 	bl	800ee68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800edbe:	4b02      	ldr	r3, [pc, #8]	@ (800edc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	200000f4 	.word	0x200000f4

0800edcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	4603      	mov	r3, r0
 800edd4:	6039      	str	r1, [r7, #0]
 800edd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800edd8:	79fb      	ldrb	r3, [r7, #7]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d105      	bne.n	800edea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	4907      	ldr	r1, [pc, #28]	@ (800ee00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ede2:	4808      	ldr	r0, [pc, #32]	@ (800ee04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ede4:	f7fc fc66 	bl	800b6b4 <USBD_GetString>
 800ede8:	e004      	b.n	800edf4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800edea:	683a      	ldr	r2, [r7, #0]
 800edec:	4904      	ldr	r1, [pc, #16]	@ (800ee00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800edee:	4805      	ldr	r0, [pc, #20]	@ (800ee04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800edf0:	f7fc fc60 	bl	800b6b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800edf4:	4b02      	ldr	r3, [pc, #8]	@ (800ee00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20006ce8 	.word	0x20006ce8
 800ee04:	08010280 	.word	0x08010280

0800ee08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	6039      	str	r1, [r7, #0]
 800ee12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d105      	bne.n	800ee26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ee1a:	683a      	ldr	r2, [r7, #0]
 800ee1c:	4907      	ldr	r1, [pc, #28]	@ (800ee3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ee1e:	4808      	ldr	r0, [pc, #32]	@ (800ee40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ee20:	f7fc fc48 	bl	800b6b4 <USBD_GetString>
 800ee24:	e004      	b.n	800ee30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	4904      	ldr	r1, [pc, #16]	@ (800ee3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ee2a:	4805      	ldr	r0, [pc, #20]	@ (800ee40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ee2c:	f7fc fc42 	bl	800b6b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee30:	4b02      	ldr	r3, [pc, #8]	@ (800ee3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20006ce8 	.word	0x20006ce8
 800ee40:	0801028c 	.word	0x0801028c

0800ee44 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	6039      	str	r1, [r7, #0]
 800ee4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	220c      	movs	r2, #12
 800ee54:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ee56:	4b03      	ldr	r3, [pc, #12]	@ (800ee64 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	200000e4 	.word	0x200000e4

0800ee68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ee6e:	4b0f      	ldr	r3, [pc, #60]	@ (800eeac <Get_SerialNum+0x44>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ee74:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb0 <Get_SerialNum+0x48>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ee7a:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb4 <Get_SerialNum+0x4c>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4413      	add	r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d009      	beq.n	800eea2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ee8e:	2208      	movs	r2, #8
 800ee90:	4909      	ldr	r1, [pc, #36]	@ (800eeb8 <Get_SerialNum+0x50>)
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f000 f814 	bl	800eec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ee98:	2204      	movs	r2, #4
 800ee9a:	4908      	ldr	r1, [pc, #32]	@ (800eebc <Get_SerialNum+0x54>)
 800ee9c:	68b8      	ldr	r0, [r7, #8]
 800ee9e:	f000 f80f 	bl	800eec0 <IntToUnicode>
  }
}
 800eea2:	bf00      	nop
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	1ff0f420 	.word	0x1ff0f420
 800eeb0:	1ff0f424 	.word	0x1ff0f424
 800eeb4:	1ff0f428 	.word	0x1ff0f428
 800eeb8:	200000f6 	.word	0x200000f6
 800eebc:	20000106 	.word	0x20000106

0800eec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b087      	sub	sp, #28
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	4613      	mov	r3, r2
 800eecc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eed2:	2300      	movs	r3, #0
 800eed4:	75fb      	strb	r3, [r7, #23]
 800eed6:	e027      	b.n	800ef28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	0f1b      	lsrs	r3, r3, #28
 800eedc:	2b09      	cmp	r3, #9
 800eede:	d80b      	bhi.n	800eef8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	0f1b      	lsrs	r3, r3, #28
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
 800eee8:	005b      	lsls	r3, r3, #1
 800eeea:	4619      	mov	r1, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	440b      	add	r3, r1
 800eef0:	3230      	adds	r2, #48	@ 0x30
 800eef2:	b2d2      	uxtb	r2, r2
 800eef4:	701a      	strb	r2, [r3, #0]
 800eef6:	e00a      	b.n	800ef0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	0f1b      	lsrs	r3, r3, #28
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	7dfb      	ldrb	r3, [r7, #23]
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	4619      	mov	r1, r3
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	440b      	add	r3, r1
 800ef08:	3237      	adds	r2, #55	@ 0x37
 800ef0a:	b2d2      	uxtb	r2, r2
 800ef0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	011b      	lsls	r3, r3, #4
 800ef12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ef14:	7dfb      	ldrb	r3, [r7, #23]
 800ef16:	005b      	lsls	r3, r3, #1
 800ef18:	3301      	adds	r3, #1
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	2200      	movs	r2, #0
 800ef20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ef22:	7dfb      	ldrb	r3, [r7, #23]
 800ef24:	3301      	adds	r3, #1
 800ef26:	75fb      	strb	r3, [r7, #23]
 800ef28:	7dfa      	ldrb	r2, [r7, #23]
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d3d3      	bcc.n	800eed8 <IntToUnicode+0x18>
  }
}
 800ef30:	bf00      	nop
 800ef32:	bf00      	nop
 800ef34:	371c      	adds	r7, #28
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
	...

0800ef40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b0ae      	sub	sp, #184	@ 0xb8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]
 800ef50:	605a      	str	r2, [r3, #4]
 800ef52:	609a      	str	r2, [r3, #8]
 800ef54:	60da      	str	r2, [r3, #12]
 800ef56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ef58:	f107 0314 	add.w	r3, r7, #20
 800ef5c:	2290      	movs	r2, #144	@ 0x90
 800ef5e:	2100      	movs	r1, #0
 800ef60:	4618      	mov	r0, r3
 800ef62:	f000 fcc1 	bl	800f8e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef6e:	d161      	bne.n	800f034 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ef70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ef74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ef76:	2300      	movs	r3, #0
 800ef78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ef7c:	f107 0314 	add.w	r3, r7, #20
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f6 fe35 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d001      	beq.n	800ef90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ef8c:	f7f3 faac 	bl	80024e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef90:	4b2a      	ldr	r3, [pc, #168]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800ef92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef94:	4a29      	ldr	r2, [pc, #164]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800ef96:	f043 0301 	orr.w	r3, r3, #1
 800ef9a:	6313      	str	r3, [r2, #48]	@ 0x30
 800ef9c:	4b27      	ldr	r3, [pc, #156]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800ef9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efa0:	f003 0301 	and.w	r3, r3, #1
 800efa4:	613b      	str	r3, [r7, #16]
 800efa6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800efa8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800efac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800efb0:	2302      	movs	r3, #2
 800efb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efb6:	2300      	movs	r3, #0
 800efb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800efbc:	2303      	movs	r3, #3
 800efbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800efc2:	230a      	movs	r3, #10
 800efc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800efc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800efcc:	4619      	mov	r1, r3
 800efce:	481c      	ldr	r0, [pc, #112]	@ (800f040 <HAL_PCD_MspInit+0x100>)
 800efd0:	f7f4 fc2a 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800efd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800efd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800efdc:	2300      	movs	r3, #0
 800efde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800efe8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800efec:	4619      	mov	r1, r3
 800efee:	4814      	ldr	r0, [pc, #80]	@ (800f040 <HAL_PCD_MspInit+0x100>)
 800eff0:	f7f4 fc1a 	bl	8003828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eff4:	4b11      	ldr	r3, [pc, #68]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800eff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eff8:	4a10      	ldr	r2, [pc, #64]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800effa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800effe:	6353      	str	r3, [r2, #52]	@ 0x34
 800f000:	4b0e      	ldr	r3, [pc, #56]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800f002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f008:	60fb      	str	r3, [r7, #12]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4b0b      	ldr	r3, [pc, #44]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800f00e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f010:	4a0a      	ldr	r2, [pc, #40]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800f012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f016:	6453      	str	r3, [r2, #68]	@ 0x44
 800f018:	4b08      	ldr	r3, [pc, #32]	@ (800f03c <HAL_PCD_MspInit+0xfc>)
 800f01a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f01c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f020:	60bb      	str	r3, [r7, #8]
 800f022:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f024:	2200      	movs	r2, #0
 800f026:	2105      	movs	r1, #5
 800f028:	2043      	movs	r0, #67	@ 0x43
 800f02a:	f7f3 feaf 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f02e:	2043      	movs	r0, #67	@ 0x43
 800f030:	f7f3 fec8 	bl	8002dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f034:	bf00      	nop
 800f036:	37b8      	adds	r7, #184	@ 0xb8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	40023800 	.word	0x40023800
 800f040:	40020000 	.word	0x40020000

0800f044 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800f058:	4619      	mov	r1, r3
 800f05a:	4610      	mov	r0, r2
 800f05c:	f7fb f9a3 	bl	800a3a6 <USBD_LL_SetupStage>
}
 800f060:	bf00      	nop
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800f07a:	78fa      	ldrb	r2, [r7, #3]
 800f07c:	6879      	ldr	r1, [r7, #4]
 800f07e:	4613      	mov	r3, r2
 800f080:	00db      	lsls	r3, r3, #3
 800f082:	4413      	add	r3, r2
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	440b      	add	r3, r1
 800f088:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	78fb      	ldrb	r3, [r7, #3]
 800f090:	4619      	mov	r1, r3
 800f092:	f7fb f9dd 	bl	800a450 <USBD_LL_DataOutStage>
}
 800f096:	bf00      	nop
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800f0b0:	78fa      	ldrb	r2, [r7, #3]
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	00db      	lsls	r3, r3, #3
 800f0b8:	4413      	add	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	440b      	add	r3, r1
 800f0be:	334c      	adds	r3, #76	@ 0x4c
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	78fb      	ldrb	r3, [r7, #3]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	f7fb fa76 	bl	800a5b6 <USBD_LL_DataInStage>
}
 800f0ca:	bf00      	nop
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b082      	sub	sp, #8
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fb fbaa 	bl	800a83a <USBD_LL_SOF>
}
 800f0e6:	bf00      	nop
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d102      	bne.n	800f108 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f102:	2300      	movs	r3, #0
 800f104:	73fb      	strb	r3, [r7, #15]
 800f106:	e008      	b.n	800f11a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d102      	bne.n	800f116 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f110:	2301      	movs	r3, #1
 800f112:	73fb      	strb	r3, [r7, #15]
 800f114:	e001      	b.n	800f11a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f116:	f7f3 f9e7 	bl	80024e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f120:	7bfa      	ldrb	r2, [r7, #15]
 800f122:	4611      	mov	r1, r2
 800f124:	4618      	mov	r0, r3
 800f126:	f7fb fb4a 	bl	800a7be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f130:	4618      	mov	r0, r3
 800f132:	f7fb faf2 	bl	800a71a <USBD_LL_Reset>
}
 800f136:	bf00      	nop
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fb fb45 	bl	800a7de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	6812      	ldr	r2, [r2, #0]
 800f162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f166:	f043 0301 	orr.w	r3, r3, #1
 800f16a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a1b      	ldr	r3, [r3, #32]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d005      	beq.n	800f180 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f174:	4b04      	ldr	r3, [pc, #16]	@ (800f188 <HAL_PCD_SuspendCallback+0x48>)
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	4a03      	ldr	r2, [pc, #12]	@ (800f188 <HAL_PCD_SuspendCallback+0x48>)
 800f17a:	f043 0306 	orr.w	r3, r3, #6
 800f17e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f180:	bf00      	nop
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	e000ed00 	.word	0xe000ed00

0800f18c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fb fb35 	bl	800a80a <USBD_LL_Resume>
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f1ba:	78fa      	ldrb	r2, [r7, #3]
 800f1bc:	4611      	mov	r1, r2
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fb fb8d 	bl	800a8de <USBD_LL_IsoOUTIncomplete>
}
 800f1c4:	bf00      	nop
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f1de:	78fa      	ldrb	r2, [r7, #3]
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fb fb49 	bl	800a87a <USBD_LL_IsoINIncomplete>
}
 800f1e8:	bf00      	nop
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fb fb9f 	bl	800a942 <USBD_LL_DevConnected>
}
 800f204:	bf00      	nop
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fb fb9c 	bl	800a958 <USBD_LL_DevDisconnected>
}
 800f220:	bf00      	nop
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d13c      	bne.n	800f2b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f238:	4a20      	ldr	r2, [pc, #128]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a1e      	ldr	r2, [pc, #120]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f244:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f248:	4b1c      	ldr	r3, [pc, #112]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f24a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f24e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f250:	4b1a      	ldr	r3, [pc, #104]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f252:	2206      	movs	r2, #6
 800f254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f256:	4b19      	ldr	r3, [pc, #100]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f258:	2202      	movs	r2, #2
 800f25a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f25c:	4b17      	ldr	r3, [pc, #92]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f25e:	2200      	movs	r2, #0
 800f260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f262:	4b16      	ldr	r3, [pc, #88]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f264:	2202      	movs	r2, #2
 800f266:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f268:	4b14      	ldr	r3, [pc, #80]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f26a:	2201      	movs	r2, #1
 800f26c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f26e:	4b13      	ldr	r3, [pc, #76]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f270:	2200      	movs	r2, #0
 800f272:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f274:	4b11      	ldr	r3, [pc, #68]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f276:	2200      	movs	r2, #0
 800f278:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f27a:	4b10      	ldr	r3, [pc, #64]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f280:	4b0e      	ldr	r3, [pc, #56]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f282:	2200      	movs	r2, #0
 800f284:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f286:	480d      	ldr	r0, [pc, #52]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f288:	f7f4 fc93 	bl	8003bb2 <HAL_PCD_Init>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d001      	beq.n	800f296 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f292:	f7f3 f929 	bl	80024e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f296:	2180      	movs	r1, #128	@ 0x80
 800f298:	4808      	ldr	r0, [pc, #32]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f29a:	f7f5 ff0e 	bl	80050ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f29e:	2240      	movs	r2, #64	@ 0x40
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	4806      	ldr	r0, [pc, #24]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f2a4:	f7f5 fec2 	bl	800502c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f2a8:	2280      	movs	r2, #128	@ 0x80
 800f2aa:	2101      	movs	r1, #1
 800f2ac:	4803      	ldr	r0, [pc, #12]	@ (800f2bc <USBD_LL_Init+0x94>)
 800f2ae:	f7f5 febd 	bl	800502c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f2b2:	2300      	movs	r3, #0
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	20006ee8 	.word	0x20006ee8

0800f2c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f4 fd8f 	bl	8003dfa <HAL_PCD_Start>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f000 f97e 	bl	800f5e4 <USBD_Get_USB_Status>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
 800f2fe:	4608      	mov	r0, r1
 800f300:	4611      	mov	r1, r2
 800f302:	461a      	mov	r2, r3
 800f304:	4603      	mov	r3, r0
 800f306:	70fb      	strb	r3, [r7, #3]
 800f308:	460b      	mov	r3, r1
 800f30a:	70bb      	strb	r3, [r7, #2]
 800f30c:	4613      	mov	r3, r2
 800f30e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f310:	2300      	movs	r3, #0
 800f312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f314:	2300      	movs	r3, #0
 800f316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f31e:	78bb      	ldrb	r3, [r7, #2]
 800f320:	883a      	ldrh	r2, [r7, #0]
 800f322:	78f9      	ldrb	r1, [r7, #3]
 800f324:	f7f5 fa7c 	bl	8004820 <HAL_PCD_EP_Open>
 800f328:	4603      	mov	r3, r0
 800f32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
 800f32e:	4618      	mov	r0, r3
 800f330:	f000 f958 	bl	800f5e4 <USBD_Get_USB_Status>
 800f334:	4603      	mov	r3, r0
 800f336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f338:	7bbb      	ldrb	r3, [r7, #14]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b084      	sub	sp, #16
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	460b      	mov	r3, r1
 800f34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f34e:	2300      	movs	r3, #0
 800f350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f35c:	78fa      	ldrb	r2, [r7, #3]
 800f35e:	4611      	mov	r1, r2
 800f360:	4618      	mov	r0, r3
 800f362:	f7f5 fac5 	bl	80048f0 <HAL_PCD_EP_Close>
 800f366:	4603      	mov	r3, r0
 800f368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f000 f939 	bl	800f5e4 <USBD_Get_USB_Status>
 800f372:	4603      	mov	r3, r0
 800f374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f376:	7bbb      	ldrb	r3, [r7, #14]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3710      	adds	r7, #16
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	460b      	mov	r3, r1
 800f38a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f38c:	2300      	movs	r3, #0
 800f38e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f390:	2300      	movs	r3, #0
 800f392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f39a:	78fa      	ldrb	r2, [r7, #3]
 800f39c:	4611      	mov	r1, r2
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7f5 fb9d 	bl	8004ade <HAL_PCD_EP_SetStall>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3a8:	7bfb      	ldrb	r3, [r7, #15]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f000 f91a 	bl	800f5e4 <USBD_Get_USB_Status>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b084      	sub	sp, #16
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3d8:	78fa      	ldrb	r2, [r7, #3]
 800f3da:	4611      	mov	r1, r2
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7f5 fbe2 	bl	8004ba6 <HAL_PCD_EP_ClrStall>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 f8fb 	bl	800f5e4 <USBD_Get_USB_Status>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f40e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f414:	2b00      	cmp	r3, #0
 800f416:	da0b      	bge.n	800f430 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f41e:	68f9      	ldr	r1, [r7, #12]
 800f420:	4613      	mov	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	4413      	add	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	440b      	add	r3, r1
 800f42a:	333e      	adds	r3, #62	@ 0x3e
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	e00b      	b.n	800f448 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f430:	78fb      	ldrb	r3, [r7, #3]
 800f432:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f436:	68f9      	ldr	r1, [r7, #12]
 800f438:	4613      	mov	r3, r2
 800f43a:	00db      	lsls	r3, r3, #3
 800f43c:	4413      	add	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	440b      	add	r3, r1
 800f442:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800f446:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3714      	adds	r7, #20
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f46e:	78fa      	ldrb	r2, [r7, #3]
 800f470:	4611      	mov	r1, r2
 800f472:	4618      	mov	r0, r3
 800f474:	f7f5 f9af 	bl	80047d6 <HAL_PCD_SetAddress>
 800f478:	4603      	mov	r3, r0
 800f47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 f8b0 	bl	800f5e4 <USBD_Get_USB_Status>
 800f484:	4603      	mov	r3, r0
 800f486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f488:	7bbb      	ldrb	r3, [r7, #14]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b086      	sub	sp, #24
 800f496:	af00      	add	r7, sp, #0
 800f498:	60f8      	str	r0, [r7, #12]
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	603b      	str	r3, [r7, #0]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f4b0:	7af9      	ldrb	r1, [r7, #11]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	f7f5 fac8 	bl	8004a4a <HAL_PCD_EP_Transmit>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4be:	7dfb      	ldrb	r3, [r7, #23]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f88f 	bl	800f5e4 <USBD_Get_USB_Status>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f4ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3718      	adds	r7, #24
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	607a      	str	r2, [r7, #4]
 800f4de:	603b      	str	r3, [r7, #0]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f4f2:	7af9      	ldrb	r1, [r7, #11]
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	f7f5 fa44 	bl	8004984 <HAL_PCD_EP_Receive>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f500:	7dfb      	ldrb	r3, [r7, #23]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 f86e 	bl	800f5e4 <USBD_Get_USB_Status>
 800f508:	4603      	mov	r3, r0
 800f50a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f50c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3718      	adds	r7, #24
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	460b      	mov	r3, r1
 800f520:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f528:	78fa      	ldrb	r2, [r7, #3]
 800f52a:	4611      	mov	r1, r2
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f5 fa74 	bl	8004a1a <HAL_PCD_EP_GetRxCount>
 800f532:	4603      	mov	r3, r0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	460b      	mov	r3, r1
 800f546:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f548:	78fb      	ldrb	r3, [r7, #3]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d002      	beq.n	800f554 <HAL_PCDEx_LPM_Callback+0x18>
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d01f      	beq.n	800f592 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f552:	e03b      	b.n	800f5cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d007      	beq.n	800f56c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f55c:	f000 f83c 	bl	800f5d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f560:	4b1c      	ldr	r3, [pc, #112]	@ (800f5d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	4a1b      	ldr	r2, [pc, #108]	@ (800f5d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f566:	f023 0306 	bic.w	r3, r3, #6
 800f56a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	6812      	ldr	r2, [r2, #0]
 800f57a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f57e:	f023 0301 	bic.w	r3, r3, #1
 800f582:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fb f93d 	bl	800a80a <USBD_LL_Resume>
    break;
 800f590:	e01c      	b.n	800f5cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f5a4:	f043 0301 	orr.w	r3, r3, #1
 800f5a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fb f914 	bl	800a7de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6a1b      	ldr	r3, [r3, #32]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d005      	beq.n	800f5ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5be:	4b05      	ldr	r3, [pc, #20]	@ (800f5d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	4a04      	ldr	r2, [pc, #16]	@ (800f5d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f5c4:	f043 0306 	orr.w	r3, r3, #6
 800f5c8:	6113      	str	r3, [r2, #16]
    break;
 800f5ca:	bf00      	nop
}
 800f5cc:	bf00      	nop
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	e000ed00 	.word	0xe000ed00

0800f5d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f5dc:	f7f2 fbaa 	bl	8001d34 <SystemClock_Config>
}
 800f5e0:	bf00      	nop
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
 800f5f4:	2b03      	cmp	r3, #3
 800f5f6:	d817      	bhi.n	800f628 <USBD_Get_USB_Status+0x44>
 800f5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f600 <USBD_Get_USB_Status+0x1c>)
 800f5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fe:	bf00      	nop
 800f600:	0800f611 	.word	0x0800f611
 800f604:	0800f617 	.word	0x0800f617
 800f608:	0800f61d 	.word	0x0800f61d
 800f60c:	0800f623 	.word	0x0800f623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f610:	2300      	movs	r3, #0
 800f612:	73fb      	strb	r3, [r7, #15]
    break;
 800f614:	e00b      	b.n	800f62e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f616:	2303      	movs	r3, #3
 800f618:	73fb      	strb	r3, [r7, #15]
    break;
 800f61a:	e008      	b.n	800f62e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f61c:	2301      	movs	r3, #1
 800f61e:	73fb      	strb	r3, [r7, #15]
    break;
 800f620:	e005      	b.n	800f62e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f622:	2303      	movs	r3, #3
 800f624:	73fb      	strb	r3, [r7, #15]
    break;
 800f626:	e002      	b.n	800f62e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f628:	2303      	movs	r3, #3
 800f62a:	73fb      	strb	r3, [r7, #15]
    break;
 800f62c:	bf00      	nop
  }
  return usb_status;
 800f62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr

0800f63c <malloc>:
 800f63c:	4b02      	ldr	r3, [pc, #8]	@ (800f648 <malloc+0xc>)
 800f63e:	4601      	mov	r1, r0
 800f640:	6818      	ldr	r0, [r3, #0]
 800f642:	f000 b82d 	b.w	800f6a0 <_malloc_r>
 800f646:	bf00      	nop
 800f648:	20000110 	.word	0x20000110

0800f64c <free>:
 800f64c:	4b02      	ldr	r3, [pc, #8]	@ (800f658 <free+0xc>)
 800f64e:	4601      	mov	r1, r0
 800f650:	6818      	ldr	r0, [r3, #0]
 800f652:	f000 b9f1 	b.w	800fa38 <_free_r>
 800f656:	bf00      	nop
 800f658:	20000110 	.word	0x20000110

0800f65c <sbrk_aligned>:
 800f65c:	b570      	push	{r4, r5, r6, lr}
 800f65e:	4e0f      	ldr	r6, [pc, #60]	@ (800f69c <sbrk_aligned+0x40>)
 800f660:	460c      	mov	r4, r1
 800f662:	6831      	ldr	r1, [r6, #0]
 800f664:	4605      	mov	r5, r0
 800f666:	b911      	cbnz	r1, 800f66e <sbrk_aligned+0x12>
 800f668:	f000 f99c 	bl	800f9a4 <_sbrk_r>
 800f66c:	6030      	str	r0, [r6, #0]
 800f66e:	4621      	mov	r1, r4
 800f670:	4628      	mov	r0, r5
 800f672:	f000 f997 	bl	800f9a4 <_sbrk_r>
 800f676:	1c43      	adds	r3, r0, #1
 800f678:	d103      	bne.n	800f682 <sbrk_aligned+0x26>
 800f67a:	f04f 34ff 	mov.w	r4, #4294967295
 800f67e:	4620      	mov	r0, r4
 800f680:	bd70      	pop	{r4, r5, r6, pc}
 800f682:	1cc4      	adds	r4, r0, #3
 800f684:	f024 0403 	bic.w	r4, r4, #3
 800f688:	42a0      	cmp	r0, r4
 800f68a:	d0f8      	beq.n	800f67e <sbrk_aligned+0x22>
 800f68c:	1a21      	subs	r1, r4, r0
 800f68e:	4628      	mov	r0, r5
 800f690:	f000 f988 	bl	800f9a4 <_sbrk_r>
 800f694:	3001      	adds	r0, #1
 800f696:	d1f2      	bne.n	800f67e <sbrk_aligned+0x22>
 800f698:	e7ef      	b.n	800f67a <sbrk_aligned+0x1e>
 800f69a:	bf00      	nop
 800f69c:	200073f0 	.word	0x200073f0

0800f6a0 <_malloc_r>:
 800f6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a4:	1ccd      	adds	r5, r1, #3
 800f6a6:	f025 0503 	bic.w	r5, r5, #3
 800f6aa:	3508      	adds	r5, #8
 800f6ac:	2d0c      	cmp	r5, #12
 800f6ae:	bf38      	it	cc
 800f6b0:	250c      	movcc	r5, #12
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	db01      	blt.n	800f6bc <_malloc_r+0x1c>
 800f6b8:	42a9      	cmp	r1, r5
 800f6ba:	d904      	bls.n	800f6c6 <_malloc_r+0x26>
 800f6bc:	230c      	movs	r3, #12
 800f6be:	6033      	str	r3, [r6, #0]
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f79c <_malloc_r+0xfc>
 800f6ca:	f000 f869 	bl	800f7a0 <__malloc_lock>
 800f6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f6d2:	461c      	mov	r4, r3
 800f6d4:	bb44      	cbnz	r4, 800f728 <_malloc_r+0x88>
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f7ff ffbf 	bl	800f65c <sbrk_aligned>
 800f6de:	1c43      	adds	r3, r0, #1
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	d158      	bne.n	800f796 <_malloc_r+0xf6>
 800f6e4:	f8d8 4000 	ldr.w	r4, [r8]
 800f6e8:	4627      	mov	r7, r4
 800f6ea:	2f00      	cmp	r7, #0
 800f6ec:	d143      	bne.n	800f776 <_malloc_r+0xd6>
 800f6ee:	2c00      	cmp	r4, #0
 800f6f0:	d04b      	beq.n	800f78a <_malloc_r+0xea>
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	eb04 0903 	add.w	r9, r4, r3
 800f6fc:	f000 f952 	bl	800f9a4 <_sbrk_r>
 800f700:	4581      	cmp	r9, r0
 800f702:	d142      	bne.n	800f78a <_malloc_r+0xea>
 800f704:	6821      	ldr	r1, [r4, #0]
 800f706:	1a6d      	subs	r5, r5, r1
 800f708:	4629      	mov	r1, r5
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7ff ffa6 	bl	800f65c <sbrk_aligned>
 800f710:	3001      	adds	r0, #1
 800f712:	d03a      	beq.n	800f78a <_malloc_r+0xea>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	442b      	add	r3, r5
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	f8d8 3000 	ldr.w	r3, [r8]
 800f71e:	685a      	ldr	r2, [r3, #4]
 800f720:	bb62      	cbnz	r2, 800f77c <_malloc_r+0xdc>
 800f722:	f8c8 7000 	str.w	r7, [r8]
 800f726:	e00f      	b.n	800f748 <_malloc_r+0xa8>
 800f728:	6822      	ldr	r2, [r4, #0]
 800f72a:	1b52      	subs	r2, r2, r5
 800f72c:	d420      	bmi.n	800f770 <_malloc_r+0xd0>
 800f72e:	2a0b      	cmp	r2, #11
 800f730:	d917      	bls.n	800f762 <_malloc_r+0xc2>
 800f732:	1961      	adds	r1, r4, r5
 800f734:	42a3      	cmp	r3, r4
 800f736:	6025      	str	r5, [r4, #0]
 800f738:	bf18      	it	ne
 800f73a:	6059      	strne	r1, [r3, #4]
 800f73c:	6863      	ldr	r3, [r4, #4]
 800f73e:	bf08      	it	eq
 800f740:	f8c8 1000 	streq.w	r1, [r8]
 800f744:	5162      	str	r2, [r4, r5]
 800f746:	604b      	str	r3, [r1, #4]
 800f748:	4630      	mov	r0, r6
 800f74a:	f000 f82f 	bl	800f7ac <__malloc_unlock>
 800f74e:	f104 000b 	add.w	r0, r4, #11
 800f752:	1d23      	adds	r3, r4, #4
 800f754:	f020 0007 	bic.w	r0, r0, #7
 800f758:	1ac2      	subs	r2, r0, r3
 800f75a:	bf1c      	itt	ne
 800f75c:	1a1b      	subne	r3, r3, r0
 800f75e:	50a3      	strne	r3, [r4, r2]
 800f760:	e7af      	b.n	800f6c2 <_malloc_r+0x22>
 800f762:	6862      	ldr	r2, [r4, #4]
 800f764:	42a3      	cmp	r3, r4
 800f766:	bf0c      	ite	eq
 800f768:	f8c8 2000 	streq.w	r2, [r8]
 800f76c:	605a      	strne	r2, [r3, #4]
 800f76e:	e7eb      	b.n	800f748 <_malloc_r+0xa8>
 800f770:	4623      	mov	r3, r4
 800f772:	6864      	ldr	r4, [r4, #4]
 800f774:	e7ae      	b.n	800f6d4 <_malloc_r+0x34>
 800f776:	463c      	mov	r4, r7
 800f778:	687f      	ldr	r7, [r7, #4]
 800f77a:	e7b6      	b.n	800f6ea <_malloc_r+0x4a>
 800f77c:	461a      	mov	r2, r3
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	42a3      	cmp	r3, r4
 800f782:	d1fb      	bne.n	800f77c <_malloc_r+0xdc>
 800f784:	2300      	movs	r3, #0
 800f786:	6053      	str	r3, [r2, #4]
 800f788:	e7de      	b.n	800f748 <_malloc_r+0xa8>
 800f78a:	230c      	movs	r3, #12
 800f78c:	6033      	str	r3, [r6, #0]
 800f78e:	4630      	mov	r0, r6
 800f790:	f000 f80c 	bl	800f7ac <__malloc_unlock>
 800f794:	e794      	b.n	800f6c0 <_malloc_r+0x20>
 800f796:	6005      	str	r5, [r0, #0]
 800f798:	e7d6      	b.n	800f748 <_malloc_r+0xa8>
 800f79a:	bf00      	nop
 800f79c:	200073f4 	.word	0x200073f4

0800f7a0 <__malloc_lock>:
 800f7a0:	4801      	ldr	r0, [pc, #4]	@ (800f7a8 <__malloc_lock+0x8>)
 800f7a2:	f000 b939 	b.w	800fa18 <__retarget_lock_acquire_recursive>
 800f7a6:	bf00      	nop
 800f7a8:	20007534 	.word	0x20007534

0800f7ac <__malloc_unlock>:
 800f7ac:	4801      	ldr	r0, [pc, #4]	@ (800f7b4 <__malloc_unlock+0x8>)
 800f7ae:	f000 b934 	b.w	800fa1a <__retarget_lock_release_recursive>
 800f7b2:	bf00      	nop
 800f7b4:	20007534 	.word	0x20007534

0800f7b8 <_strtoul_l.constprop.0>:
 800f7b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7bc:	4e34      	ldr	r6, [pc, #208]	@ (800f890 <_strtoul_l.constprop.0+0xd8>)
 800f7be:	4686      	mov	lr, r0
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7c8:	5d37      	ldrb	r7, [r6, r4]
 800f7ca:	f017 0708 	ands.w	r7, r7, #8
 800f7ce:	d1f8      	bne.n	800f7c2 <_strtoul_l.constprop.0+0xa>
 800f7d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f7d2:	d12f      	bne.n	800f834 <_strtoul_l.constprop.0+0x7c>
 800f7d4:	782c      	ldrb	r4, [r5, #0]
 800f7d6:	2701      	movs	r7, #1
 800f7d8:	1c85      	adds	r5, r0, #2
 800f7da:	f033 0010 	bics.w	r0, r3, #16
 800f7de:	d109      	bne.n	800f7f4 <_strtoul_l.constprop.0+0x3c>
 800f7e0:	2c30      	cmp	r4, #48	@ 0x30
 800f7e2:	d12c      	bne.n	800f83e <_strtoul_l.constprop.0+0x86>
 800f7e4:	7828      	ldrb	r0, [r5, #0]
 800f7e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f7ea:	2858      	cmp	r0, #88	@ 0x58
 800f7ec:	d127      	bne.n	800f83e <_strtoul_l.constprop.0+0x86>
 800f7ee:	786c      	ldrb	r4, [r5, #1]
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	3502      	adds	r5, #2
 800f7f4:	f04f 38ff 	mov.w	r8, #4294967295
 800f7f8:	2600      	movs	r6, #0
 800f7fa:	fbb8 f8f3 	udiv	r8, r8, r3
 800f7fe:	fb03 f908 	mul.w	r9, r3, r8
 800f802:	ea6f 0909 	mvn.w	r9, r9
 800f806:	4630      	mov	r0, r6
 800f808:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f80c:	f1bc 0f09 	cmp.w	ip, #9
 800f810:	d81c      	bhi.n	800f84c <_strtoul_l.constprop.0+0x94>
 800f812:	4664      	mov	r4, ip
 800f814:	42a3      	cmp	r3, r4
 800f816:	dd2a      	ble.n	800f86e <_strtoul_l.constprop.0+0xb6>
 800f818:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f81c:	d007      	beq.n	800f82e <_strtoul_l.constprop.0+0x76>
 800f81e:	4580      	cmp	r8, r0
 800f820:	d322      	bcc.n	800f868 <_strtoul_l.constprop.0+0xb0>
 800f822:	d101      	bne.n	800f828 <_strtoul_l.constprop.0+0x70>
 800f824:	45a1      	cmp	r9, r4
 800f826:	db1f      	blt.n	800f868 <_strtoul_l.constprop.0+0xb0>
 800f828:	fb00 4003 	mla	r0, r0, r3, r4
 800f82c:	2601      	movs	r6, #1
 800f82e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f832:	e7e9      	b.n	800f808 <_strtoul_l.constprop.0+0x50>
 800f834:	2c2b      	cmp	r4, #43	@ 0x2b
 800f836:	bf04      	itt	eq
 800f838:	782c      	ldrbeq	r4, [r5, #0]
 800f83a:	1c85      	addeq	r5, r0, #2
 800f83c:	e7cd      	b.n	800f7da <_strtoul_l.constprop.0+0x22>
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1d8      	bne.n	800f7f4 <_strtoul_l.constprop.0+0x3c>
 800f842:	2c30      	cmp	r4, #48	@ 0x30
 800f844:	bf0c      	ite	eq
 800f846:	2308      	moveq	r3, #8
 800f848:	230a      	movne	r3, #10
 800f84a:	e7d3      	b.n	800f7f4 <_strtoul_l.constprop.0+0x3c>
 800f84c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f850:	f1bc 0f19 	cmp.w	ip, #25
 800f854:	d801      	bhi.n	800f85a <_strtoul_l.constprop.0+0xa2>
 800f856:	3c37      	subs	r4, #55	@ 0x37
 800f858:	e7dc      	b.n	800f814 <_strtoul_l.constprop.0+0x5c>
 800f85a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f85e:	f1bc 0f19 	cmp.w	ip, #25
 800f862:	d804      	bhi.n	800f86e <_strtoul_l.constprop.0+0xb6>
 800f864:	3c57      	subs	r4, #87	@ 0x57
 800f866:	e7d5      	b.n	800f814 <_strtoul_l.constprop.0+0x5c>
 800f868:	f04f 36ff 	mov.w	r6, #4294967295
 800f86c:	e7df      	b.n	800f82e <_strtoul_l.constprop.0+0x76>
 800f86e:	1c73      	adds	r3, r6, #1
 800f870:	d106      	bne.n	800f880 <_strtoul_l.constprop.0+0xc8>
 800f872:	2322      	movs	r3, #34	@ 0x22
 800f874:	f8ce 3000 	str.w	r3, [lr]
 800f878:	4630      	mov	r0, r6
 800f87a:	b932      	cbnz	r2, 800f88a <_strtoul_l.constprop.0+0xd2>
 800f87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f880:	b107      	cbz	r7, 800f884 <_strtoul_l.constprop.0+0xcc>
 800f882:	4240      	negs	r0, r0
 800f884:	2a00      	cmp	r2, #0
 800f886:	d0f9      	beq.n	800f87c <_strtoul_l.constprop.0+0xc4>
 800f888:	b106      	cbz	r6, 800f88c <_strtoul_l.constprop.0+0xd4>
 800f88a:	1e69      	subs	r1, r5, #1
 800f88c:	6011      	str	r1, [r2, #0]
 800f88e:	e7f5      	b.n	800f87c <_strtoul_l.constprop.0+0xc4>
 800f890:	0801034d 	.word	0x0801034d

0800f894 <strtoul>:
 800f894:	4613      	mov	r3, r2
 800f896:	460a      	mov	r2, r1
 800f898:	4601      	mov	r1, r0
 800f89a:	4802      	ldr	r0, [pc, #8]	@ (800f8a4 <strtoul+0x10>)
 800f89c:	6800      	ldr	r0, [r0, #0]
 800f89e:	f7ff bf8b 	b.w	800f7b8 <_strtoul_l.constprop.0>
 800f8a2:	bf00      	nop
 800f8a4:	20000110 	.word	0x20000110

0800f8a8 <siprintf>:
 800f8a8:	b40e      	push	{r1, r2, r3}
 800f8aa:	b500      	push	{lr}
 800f8ac:	b09c      	sub	sp, #112	@ 0x70
 800f8ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800f8b0:	9002      	str	r0, [sp, #8]
 800f8b2:	9006      	str	r0, [sp, #24]
 800f8b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f8b8:	4809      	ldr	r0, [pc, #36]	@ (800f8e0 <siprintf+0x38>)
 800f8ba:	9107      	str	r1, [sp, #28]
 800f8bc:	9104      	str	r1, [sp, #16]
 800f8be:	4909      	ldr	r1, [pc, #36]	@ (800f8e4 <siprintf+0x3c>)
 800f8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8c4:	9105      	str	r1, [sp, #20]
 800f8c6:	6800      	ldr	r0, [r0, #0]
 800f8c8:	9301      	str	r3, [sp, #4]
 800f8ca:	a902      	add	r1, sp, #8
 800f8cc:	f000 f95a 	bl	800fb84 <_svfiprintf_r>
 800f8d0:	9b02      	ldr	r3, [sp, #8]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	701a      	strb	r2, [r3, #0]
 800f8d6:	b01c      	add	sp, #112	@ 0x70
 800f8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8dc:	b003      	add	sp, #12
 800f8de:	4770      	bx	lr
 800f8e0:	20000110 	.word	0x20000110
 800f8e4:	ffff0208 	.word	0xffff0208

0800f8e8 <memset>:
 800f8e8:	4402      	add	r2, r0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d100      	bne.n	800f8f2 <memset+0xa>
 800f8f0:	4770      	bx	lr
 800f8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f6:	e7f9      	b.n	800f8ec <memset+0x4>

0800f8f8 <_reclaim_reent>:
 800f8f8:	4b29      	ldr	r3, [pc, #164]	@ (800f9a0 <_reclaim_reent+0xa8>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4283      	cmp	r3, r0
 800f8fe:	b570      	push	{r4, r5, r6, lr}
 800f900:	4604      	mov	r4, r0
 800f902:	d04b      	beq.n	800f99c <_reclaim_reent+0xa4>
 800f904:	69c3      	ldr	r3, [r0, #28]
 800f906:	b1ab      	cbz	r3, 800f934 <_reclaim_reent+0x3c>
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	b16b      	cbz	r3, 800f928 <_reclaim_reent+0x30>
 800f90c:	2500      	movs	r5, #0
 800f90e:	69e3      	ldr	r3, [r4, #28]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	5959      	ldr	r1, [r3, r5]
 800f914:	2900      	cmp	r1, #0
 800f916:	d13b      	bne.n	800f990 <_reclaim_reent+0x98>
 800f918:	3504      	adds	r5, #4
 800f91a:	2d80      	cmp	r5, #128	@ 0x80
 800f91c:	d1f7      	bne.n	800f90e <_reclaim_reent+0x16>
 800f91e:	69e3      	ldr	r3, [r4, #28]
 800f920:	4620      	mov	r0, r4
 800f922:	68d9      	ldr	r1, [r3, #12]
 800f924:	f000 f888 	bl	800fa38 <_free_r>
 800f928:	69e3      	ldr	r3, [r4, #28]
 800f92a:	6819      	ldr	r1, [r3, #0]
 800f92c:	b111      	cbz	r1, 800f934 <_reclaim_reent+0x3c>
 800f92e:	4620      	mov	r0, r4
 800f930:	f000 f882 	bl	800fa38 <_free_r>
 800f934:	6961      	ldr	r1, [r4, #20]
 800f936:	b111      	cbz	r1, 800f93e <_reclaim_reent+0x46>
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 f87d 	bl	800fa38 <_free_r>
 800f93e:	69e1      	ldr	r1, [r4, #28]
 800f940:	b111      	cbz	r1, 800f948 <_reclaim_reent+0x50>
 800f942:	4620      	mov	r0, r4
 800f944:	f000 f878 	bl	800fa38 <_free_r>
 800f948:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f94a:	b111      	cbz	r1, 800f952 <_reclaim_reent+0x5a>
 800f94c:	4620      	mov	r0, r4
 800f94e:	f000 f873 	bl	800fa38 <_free_r>
 800f952:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f954:	b111      	cbz	r1, 800f95c <_reclaim_reent+0x64>
 800f956:	4620      	mov	r0, r4
 800f958:	f000 f86e 	bl	800fa38 <_free_r>
 800f95c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f95e:	b111      	cbz	r1, 800f966 <_reclaim_reent+0x6e>
 800f960:	4620      	mov	r0, r4
 800f962:	f000 f869 	bl	800fa38 <_free_r>
 800f966:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f968:	b111      	cbz	r1, 800f970 <_reclaim_reent+0x78>
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 f864 	bl	800fa38 <_free_r>
 800f970:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f972:	b111      	cbz	r1, 800f97a <_reclaim_reent+0x82>
 800f974:	4620      	mov	r0, r4
 800f976:	f000 f85f 	bl	800fa38 <_free_r>
 800f97a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f97c:	b111      	cbz	r1, 800f984 <_reclaim_reent+0x8c>
 800f97e:	4620      	mov	r0, r4
 800f980:	f000 f85a 	bl	800fa38 <_free_r>
 800f984:	6a23      	ldr	r3, [r4, #32]
 800f986:	b14b      	cbz	r3, 800f99c <_reclaim_reent+0xa4>
 800f988:	4620      	mov	r0, r4
 800f98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f98e:	4718      	bx	r3
 800f990:	680e      	ldr	r6, [r1, #0]
 800f992:	4620      	mov	r0, r4
 800f994:	f000 f850 	bl	800fa38 <_free_r>
 800f998:	4631      	mov	r1, r6
 800f99a:	e7bb      	b.n	800f914 <_reclaim_reent+0x1c>
 800f99c:	bd70      	pop	{r4, r5, r6, pc}
 800f99e:	bf00      	nop
 800f9a0:	20000110 	.word	0x20000110

0800f9a4 <_sbrk_r>:
 800f9a4:	b538      	push	{r3, r4, r5, lr}
 800f9a6:	4d06      	ldr	r5, [pc, #24]	@ (800f9c0 <_sbrk_r+0x1c>)
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	4608      	mov	r0, r1
 800f9ae:	602b      	str	r3, [r5, #0]
 800f9b0:	f7f3 f872 	bl	8002a98 <_sbrk>
 800f9b4:	1c43      	adds	r3, r0, #1
 800f9b6:	d102      	bne.n	800f9be <_sbrk_r+0x1a>
 800f9b8:	682b      	ldr	r3, [r5, #0]
 800f9ba:	b103      	cbz	r3, 800f9be <_sbrk_r+0x1a>
 800f9bc:	6023      	str	r3, [r4, #0]
 800f9be:	bd38      	pop	{r3, r4, r5, pc}
 800f9c0:	20007530 	.word	0x20007530

0800f9c4 <__errno>:
 800f9c4:	4b01      	ldr	r3, [pc, #4]	@ (800f9cc <__errno+0x8>)
 800f9c6:	6818      	ldr	r0, [r3, #0]
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	20000110 	.word	0x20000110

0800f9d0 <__libc_init_array>:
 800f9d0:	b570      	push	{r4, r5, r6, lr}
 800f9d2:	4d0d      	ldr	r5, [pc, #52]	@ (800fa08 <__libc_init_array+0x38>)
 800f9d4:	4c0d      	ldr	r4, [pc, #52]	@ (800fa0c <__libc_init_array+0x3c>)
 800f9d6:	1b64      	subs	r4, r4, r5
 800f9d8:	10a4      	asrs	r4, r4, #2
 800f9da:	2600      	movs	r6, #0
 800f9dc:	42a6      	cmp	r6, r4
 800f9de:	d109      	bne.n	800f9f4 <__libc_init_array+0x24>
 800f9e0:	4d0b      	ldr	r5, [pc, #44]	@ (800fa10 <__libc_init_array+0x40>)
 800f9e2:	4c0c      	ldr	r4, [pc, #48]	@ (800fa14 <__libc_init_array+0x44>)
 800f9e4:	f000 fba8 	bl	8010138 <_init>
 800f9e8:	1b64      	subs	r4, r4, r5
 800f9ea:	10a4      	asrs	r4, r4, #2
 800f9ec:	2600      	movs	r6, #0
 800f9ee:	42a6      	cmp	r6, r4
 800f9f0:	d105      	bne.n	800f9fe <__libc_init_array+0x2e>
 800f9f2:	bd70      	pop	{r4, r5, r6, pc}
 800f9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9f8:	4798      	blx	r3
 800f9fa:	3601      	adds	r6, #1
 800f9fc:	e7ee      	b.n	800f9dc <__libc_init_array+0xc>
 800f9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa02:	4798      	blx	r3
 800fa04:	3601      	adds	r6, #1
 800fa06:	e7f2      	b.n	800f9ee <__libc_init_array+0x1e>
 800fa08:	08010488 	.word	0x08010488
 800fa0c:	08010488 	.word	0x08010488
 800fa10:	08010488 	.word	0x08010488
 800fa14:	0801048c 	.word	0x0801048c

0800fa18 <__retarget_lock_acquire_recursive>:
 800fa18:	4770      	bx	lr

0800fa1a <__retarget_lock_release_recursive>:
 800fa1a:	4770      	bx	lr

0800fa1c <memcpy>:
 800fa1c:	440a      	add	r2, r1
 800fa1e:	4291      	cmp	r1, r2
 800fa20:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa24:	d100      	bne.n	800fa28 <memcpy+0xc>
 800fa26:	4770      	bx	lr
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa32:	4291      	cmp	r1, r2
 800fa34:	d1f9      	bne.n	800fa2a <memcpy+0xe>
 800fa36:	bd10      	pop	{r4, pc}

0800fa38 <_free_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	d041      	beq.n	800fac4 <_free_r+0x8c>
 800fa40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa44:	1f0c      	subs	r4, r1, #4
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	bfb8      	it	lt
 800fa4a:	18e4      	addlt	r4, r4, r3
 800fa4c:	f7ff fea8 	bl	800f7a0 <__malloc_lock>
 800fa50:	4a1d      	ldr	r2, [pc, #116]	@ (800fac8 <_free_r+0x90>)
 800fa52:	6813      	ldr	r3, [r2, #0]
 800fa54:	b933      	cbnz	r3, 800fa64 <_free_r+0x2c>
 800fa56:	6063      	str	r3, [r4, #4]
 800fa58:	6014      	str	r4, [r2, #0]
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa60:	f7ff bea4 	b.w	800f7ac <__malloc_unlock>
 800fa64:	42a3      	cmp	r3, r4
 800fa66:	d908      	bls.n	800fa7a <_free_r+0x42>
 800fa68:	6820      	ldr	r0, [r4, #0]
 800fa6a:	1821      	adds	r1, r4, r0
 800fa6c:	428b      	cmp	r3, r1
 800fa6e:	bf01      	itttt	eq
 800fa70:	6819      	ldreq	r1, [r3, #0]
 800fa72:	685b      	ldreq	r3, [r3, #4]
 800fa74:	1809      	addeq	r1, r1, r0
 800fa76:	6021      	streq	r1, [r4, #0]
 800fa78:	e7ed      	b.n	800fa56 <_free_r+0x1e>
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	b10b      	cbz	r3, 800fa84 <_free_r+0x4c>
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	d9fa      	bls.n	800fa7a <_free_r+0x42>
 800fa84:	6811      	ldr	r1, [r2, #0]
 800fa86:	1850      	adds	r0, r2, r1
 800fa88:	42a0      	cmp	r0, r4
 800fa8a:	d10b      	bne.n	800faa4 <_free_r+0x6c>
 800fa8c:	6820      	ldr	r0, [r4, #0]
 800fa8e:	4401      	add	r1, r0
 800fa90:	1850      	adds	r0, r2, r1
 800fa92:	4283      	cmp	r3, r0
 800fa94:	6011      	str	r1, [r2, #0]
 800fa96:	d1e0      	bne.n	800fa5a <_free_r+0x22>
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	6053      	str	r3, [r2, #4]
 800fa9e:	4408      	add	r0, r1
 800faa0:	6010      	str	r0, [r2, #0]
 800faa2:	e7da      	b.n	800fa5a <_free_r+0x22>
 800faa4:	d902      	bls.n	800faac <_free_r+0x74>
 800faa6:	230c      	movs	r3, #12
 800faa8:	602b      	str	r3, [r5, #0]
 800faaa:	e7d6      	b.n	800fa5a <_free_r+0x22>
 800faac:	6820      	ldr	r0, [r4, #0]
 800faae:	1821      	adds	r1, r4, r0
 800fab0:	428b      	cmp	r3, r1
 800fab2:	bf04      	itt	eq
 800fab4:	6819      	ldreq	r1, [r3, #0]
 800fab6:	685b      	ldreq	r3, [r3, #4]
 800fab8:	6063      	str	r3, [r4, #4]
 800faba:	bf04      	itt	eq
 800fabc:	1809      	addeq	r1, r1, r0
 800fabe:	6021      	streq	r1, [r4, #0]
 800fac0:	6054      	str	r4, [r2, #4]
 800fac2:	e7ca      	b.n	800fa5a <_free_r+0x22>
 800fac4:	bd38      	pop	{r3, r4, r5, pc}
 800fac6:	bf00      	nop
 800fac8:	200073f4 	.word	0x200073f4

0800facc <__ssputs_r>:
 800facc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fad0:	688e      	ldr	r6, [r1, #8]
 800fad2:	461f      	mov	r7, r3
 800fad4:	42be      	cmp	r6, r7
 800fad6:	680b      	ldr	r3, [r1, #0]
 800fad8:	4682      	mov	sl, r0
 800fada:	460c      	mov	r4, r1
 800fadc:	4690      	mov	r8, r2
 800fade:	d82d      	bhi.n	800fb3c <__ssputs_r+0x70>
 800fae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fae4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fae8:	d026      	beq.n	800fb38 <__ssputs_r+0x6c>
 800faea:	6965      	ldr	r5, [r4, #20]
 800faec:	6909      	ldr	r1, [r1, #16]
 800faee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800faf2:	eba3 0901 	sub.w	r9, r3, r1
 800faf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fafa:	1c7b      	adds	r3, r7, #1
 800fafc:	444b      	add	r3, r9
 800fafe:	106d      	asrs	r5, r5, #1
 800fb00:	429d      	cmp	r5, r3
 800fb02:	bf38      	it	cc
 800fb04:	461d      	movcc	r5, r3
 800fb06:	0553      	lsls	r3, r2, #21
 800fb08:	d527      	bpl.n	800fb5a <__ssputs_r+0x8e>
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	f7ff fdc8 	bl	800f6a0 <_malloc_r>
 800fb10:	4606      	mov	r6, r0
 800fb12:	b360      	cbz	r0, 800fb6e <__ssputs_r+0xa2>
 800fb14:	6921      	ldr	r1, [r4, #16]
 800fb16:	464a      	mov	r2, r9
 800fb18:	f7ff ff80 	bl	800fa1c <memcpy>
 800fb1c:	89a3      	ldrh	r3, [r4, #12]
 800fb1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fb22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb26:	81a3      	strh	r3, [r4, #12]
 800fb28:	6126      	str	r6, [r4, #16]
 800fb2a:	6165      	str	r5, [r4, #20]
 800fb2c:	444e      	add	r6, r9
 800fb2e:	eba5 0509 	sub.w	r5, r5, r9
 800fb32:	6026      	str	r6, [r4, #0]
 800fb34:	60a5      	str	r5, [r4, #8]
 800fb36:	463e      	mov	r6, r7
 800fb38:	42be      	cmp	r6, r7
 800fb3a:	d900      	bls.n	800fb3e <__ssputs_r+0x72>
 800fb3c:	463e      	mov	r6, r7
 800fb3e:	6820      	ldr	r0, [r4, #0]
 800fb40:	4632      	mov	r2, r6
 800fb42:	4641      	mov	r1, r8
 800fb44:	f000 faa8 	bl	8010098 <memmove>
 800fb48:	68a3      	ldr	r3, [r4, #8]
 800fb4a:	1b9b      	subs	r3, r3, r6
 800fb4c:	60a3      	str	r3, [r4, #8]
 800fb4e:	6823      	ldr	r3, [r4, #0]
 800fb50:	4433      	add	r3, r6
 800fb52:	6023      	str	r3, [r4, #0]
 800fb54:	2000      	movs	r0, #0
 800fb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb5a:	462a      	mov	r2, r5
 800fb5c:	f000 fab6 	bl	80100cc <_realloc_r>
 800fb60:	4606      	mov	r6, r0
 800fb62:	2800      	cmp	r0, #0
 800fb64:	d1e0      	bne.n	800fb28 <__ssputs_r+0x5c>
 800fb66:	6921      	ldr	r1, [r4, #16]
 800fb68:	4650      	mov	r0, sl
 800fb6a:	f7ff ff65 	bl	800fa38 <_free_r>
 800fb6e:	230c      	movs	r3, #12
 800fb70:	f8ca 3000 	str.w	r3, [sl]
 800fb74:	89a3      	ldrh	r3, [r4, #12]
 800fb76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb7a:	81a3      	strh	r3, [r4, #12]
 800fb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb80:	e7e9      	b.n	800fb56 <__ssputs_r+0x8a>
	...

0800fb84 <_svfiprintf_r>:
 800fb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb88:	4698      	mov	r8, r3
 800fb8a:	898b      	ldrh	r3, [r1, #12]
 800fb8c:	061b      	lsls	r3, r3, #24
 800fb8e:	b09d      	sub	sp, #116	@ 0x74
 800fb90:	4607      	mov	r7, r0
 800fb92:	460d      	mov	r5, r1
 800fb94:	4614      	mov	r4, r2
 800fb96:	d510      	bpl.n	800fbba <_svfiprintf_r+0x36>
 800fb98:	690b      	ldr	r3, [r1, #16]
 800fb9a:	b973      	cbnz	r3, 800fbba <_svfiprintf_r+0x36>
 800fb9c:	2140      	movs	r1, #64	@ 0x40
 800fb9e:	f7ff fd7f 	bl	800f6a0 <_malloc_r>
 800fba2:	6028      	str	r0, [r5, #0]
 800fba4:	6128      	str	r0, [r5, #16]
 800fba6:	b930      	cbnz	r0, 800fbb6 <_svfiprintf_r+0x32>
 800fba8:	230c      	movs	r3, #12
 800fbaa:	603b      	str	r3, [r7, #0]
 800fbac:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb0:	b01d      	add	sp, #116	@ 0x74
 800fbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb6:	2340      	movs	r3, #64	@ 0x40
 800fbb8:	616b      	str	r3, [r5, #20]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbbe:	2320      	movs	r3, #32
 800fbc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fbc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbc8:	2330      	movs	r3, #48	@ 0x30
 800fbca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fd68 <_svfiprintf_r+0x1e4>
 800fbce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fbd2:	f04f 0901 	mov.w	r9, #1
 800fbd6:	4623      	mov	r3, r4
 800fbd8:	469a      	mov	sl, r3
 800fbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbde:	b10a      	cbz	r2, 800fbe4 <_svfiprintf_r+0x60>
 800fbe0:	2a25      	cmp	r2, #37	@ 0x25
 800fbe2:	d1f9      	bne.n	800fbd8 <_svfiprintf_r+0x54>
 800fbe4:	ebba 0b04 	subs.w	fp, sl, r4
 800fbe8:	d00b      	beq.n	800fc02 <_svfiprintf_r+0x7e>
 800fbea:	465b      	mov	r3, fp
 800fbec:	4622      	mov	r2, r4
 800fbee:	4629      	mov	r1, r5
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f7ff ff6b 	bl	800facc <__ssputs_r>
 800fbf6:	3001      	adds	r0, #1
 800fbf8:	f000 80a7 	beq.w	800fd4a <_svfiprintf_r+0x1c6>
 800fbfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbfe:	445a      	add	r2, fp
 800fc00:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc02:	f89a 3000 	ldrb.w	r3, [sl]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f000 809f 	beq.w	800fd4a <_svfiprintf_r+0x1c6>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc16:	f10a 0a01 	add.w	sl, sl, #1
 800fc1a:	9304      	str	r3, [sp, #16]
 800fc1c:	9307      	str	r3, [sp, #28]
 800fc1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc22:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc24:	4654      	mov	r4, sl
 800fc26:	2205      	movs	r2, #5
 800fc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc2c:	484e      	ldr	r0, [pc, #312]	@ (800fd68 <_svfiprintf_r+0x1e4>)
 800fc2e:	f7f0 fb57 	bl	80002e0 <memchr>
 800fc32:	9a04      	ldr	r2, [sp, #16]
 800fc34:	b9d8      	cbnz	r0, 800fc6e <_svfiprintf_r+0xea>
 800fc36:	06d0      	lsls	r0, r2, #27
 800fc38:	bf44      	itt	mi
 800fc3a:	2320      	movmi	r3, #32
 800fc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc40:	0711      	lsls	r1, r2, #28
 800fc42:	bf44      	itt	mi
 800fc44:	232b      	movmi	r3, #43	@ 0x2b
 800fc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc4a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc50:	d015      	beq.n	800fc7e <_svfiprintf_r+0xfa>
 800fc52:	9a07      	ldr	r2, [sp, #28]
 800fc54:	4654      	mov	r4, sl
 800fc56:	2000      	movs	r0, #0
 800fc58:	f04f 0c0a 	mov.w	ip, #10
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc62:	3b30      	subs	r3, #48	@ 0x30
 800fc64:	2b09      	cmp	r3, #9
 800fc66:	d94b      	bls.n	800fd00 <_svfiprintf_r+0x17c>
 800fc68:	b1b0      	cbz	r0, 800fc98 <_svfiprintf_r+0x114>
 800fc6a:	9207      	str	r2, [sp, #28]
 800fc6c:	e014      	b.n	800fc98 <_svfiprintf_r+0x114>
 800fc6e:	eba0 0308 	sub.w	r3, r0, r8
 800fc72:	fa09 f303 	lsl.w	r3, r9, r3
 800fc76:	4313      	orrs	r3, r2
 800fc78:	9304      	str	r3, [sp, #16]
 800fc7a:	46a2      	mov	sl, r4
 800fc7c:	e7d2      	b.n	800fc24 <_svfiprintf_r+0xa0>
 800fc7e:	9b03      	ldr	r3, [sp, #12]
 800fc80:	1d19      	adds	r1, r3, #4
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	9103      	str	r1, [sp, #12]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	bfbb      	ittet	lt
 800fc8a:	425b      	neglt	r3, r3
 800fc8c:	f042 0202 	orrlt.w	r2, r2, #2
 800fc90:	9307      	strge	r3, [sp, #28]
 800fc92:	9307      	strlt	r3, [sp, #28]
 800fc94:	bfb8      	it	lt
 800fc96:	9204      	strlt	r2, [sp, #16]
 800fc98:	7823      	ldrb	r3, [r4, #0]
 800fc9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc9c:	d10a      	bne.n	800fcb4 <_svfiprintf_r+0x130>
 800fc9e:	7863      	ldrb	r3, [r4, #1]
 800fca0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fca2:	d132      	bne.n	800fd0a <_svfiprintf_r+0x186>
 800fca4:	9b03      	ldr	r3, [sp, #12]
 800fca6:	1d1a      	adds	r2, r3, #4
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	9203      	str	r2, [sp, #12]
 800fcac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fcb0:	3402      	adds	r4, #2
 800fcb2:	9305      	str	r3, [sp, #20]
 800fcb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fd78 <_svfiprintf_r+0x1f4>
 800fcb8:	7821      	ldrb	r1, [r4, #0]
 800fcba:	2203      	movs	r2, #3
 800fcbc:	4650      	mov	r0, sl
 800fcbe:	f7f0 fb0f 	bl	80002e0 <memchr>
 800fcc2:	b138      	cbz	r0, 800fcd4 <_svfiprintf_r+0x150>
 800fcc4:	9b04      	ldr	r3, [sp, #16]
 800fcc6:	eba0 000a 	sub.w	r0, r0, sl
 800fcca:	2240      	movs	r2, #64	@ 0x40
 800fccc:	4082      	lsls	r2, r0
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	3401      	adds	r4, #1
 800fcd2:	9304      	str	r3, [sp, #16]
 800fcd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd8:	4824      	ldr	r0, [pc, #144]	@ (800fd6c <_svfiprintf_r+0x1e8>)
 800fcda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcde:	2206      	movs	r2, #6
 800fce0:	f7f0 fafe 	bl	80002e0 <memchr>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	d036      	beq.n	800fd56 <_svfiprintf_r+0x1d2>
 800fce8:	4b21      	ldr	r3, [pc, #132]	@ (800fd70 <_svfiprintf_r+0x1ec>)
 800fcea:	bb1b      	cbnz	r3, 800fd34 <_svfiprintf_r+0x1b0>
 800fcec:	9b03      	ldr	r3, [sp, #12]
 800fcee:	3307      	adds	r3, #7
 800fcf0:	f023 0307 	bic.w	r3, r3, #7
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	9303      	str	r3, [sp, #12]
 800fcf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcfa:	4433      	add	r3, r6
 800fcfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcfe:	e76a      	b.n	800fbd6 <_svfiprintf_r+0x52>
 800fd00:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd04:	460c      	mov	r4, r1
 800fd06:	2001      	movs	r0, #1
 800fd08:	e7a8      	b.n	800fc5c <_svfiprintf_r+0xd8>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	3401      	adds	r4, #1
 800fd0e:	9305      	str	r3, [sp, #20]
 800fd10:	4619      	mov	r1, r3
 800fd12:	f04f 0c0a 	mov.w	ip, #10
 800fd16:	4620      	mov	r0, r4
 800fd18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd1c:	3a30      	subs	r2, #48	@ 0x30
 800fd1e:	2a09      	cmp	r2, #9
 800fd20:	d903      	bls.n	800fd2a <_svfiprintf_r+0x1a6>
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0c6      	beq.n	800fcb4 <_svfiprintf_r+0x130>
 800fd26:	9105      	str	r1, [sp, #20]
 800fd28:	e7c4      	b.n	800fcb4 <_svfiprintf_r+0x130>
 800fd2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd2e:	4604      	mov	r4, r0
 800fd30:	2301      	movs	r3, #1
 800fd32:	e7f0      	b.n	800fd16 <_svfiprintf_r+0x192>
 800fd34:	ab03      	add	r3, sp, #12
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	462a      	mov	r2, r5
 800fd3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fd74 <_svfiprintf_r+0x1f0>)
 800fd3c:	a904      	add	r1, sp, #16
 800fd3e:	4638      	mov	r0, r7
 800fd40:	f3af 8000 	nop.w
 800fd44:	1c42      	adds	r2, r0, #1
 800fd46:	4606      	mov	r6, r0
 800fd48:	d1d6      	bne.n	800fcf8 <_svfiprintf_r+0x174>
 800fd4a:	89ab      	ldrh	r3, [r5, #12]
 800fd4c:	065b      	lsls	r3, r3, #25
 800fd4e:	f53f af2d 	bmi.w	800fbac <_svfiprintf_r+0x28>
 800fd52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd54:	e72c      	b.n	800fbb0 <_svfiprintf_r+0x2c>
 800fd56:	ab03      	add	r3, sp, #12
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	462a      	mov	r2, r5
 800fd5c:	4b05      	ldr	r3, [pc, #20]	@ (800fd74 <_svfiprintf_r+0x1f0>)
 800fd5e:	a904      	add	r1, sp, #16
 800fd60:	4638      	mov	r0, r7
 800fd62:	f000 f879 	bl	800fe58 <_printf_i>
 800fd66:	e7ed      	b.n	800fd44 <_svfiprintf_r+0x1c0>
 800fd68:	0801044d 	.word	0x0801044d
 800fd6c:	08010457 	.word	0x08010457
 800fd70:	00000000 	.word	0x00000000
 800fd74:	0800facd 	.word	0x0800facd
 800fd78:	08010453 	.word	0x08010453

0800fd7c <_printf_common>:
 800fd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd80:	4616      	mov	r6, r2
 800fd82:	4698      	mov	r8, r3
 800fd84:	688a      	ldr	r2, [r1, #8]
 800fd86:	690b      	ldr	r3, [r1, #16]
 800fd88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	bfb8      	it	lt
 800fd90:	4613      	movlt	r3, r2
 800fd92:	6033      	str	r3, [r6, #0]
 800fd94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd98:	4607      	mov	r7, r0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	b10a      	cbz	r2, 800fda2 <_printf_common+0x26>
 800fd9e:	3301      	adds	r3, #1
 800fda0:	6033      	str	r3, [r6, #0]
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	0699      	lsls	r1, r3, #26
 800fda6:	bf42      	ittt	mi
 800fda8:	6833      	ldrmi	r3, [r6, #0]
 800fdaa:	3302      	addmi	r3, #2
 800fdac:	6033      	strmi	r3, [r6, #0]
 800fdae:	6825      	ldr	r5, [r4, #0]
 800fdb0:	f015 0506 	ands.w	r5, r5, #6
 800fdb4:	d106      	bne.n	800fdc4 <_printf_common+0x48>
 800fdb6:	f104 0a19 	add.w	sl, r4, #25
 800fdba:	68e3      	ldr	r3, [r4, #12]
 800fdbc:	6832      	ldr	r2, [r6, #0]
 800fdbe:	1a9b      	subs	r3, r3, r2
 800fdc0:	42ab      	cmp	r3, r5
 800fdc2:	dc26      	bgt.n	800fe12 <_printf_common+0x96>
 800fdc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fdc8:	6822      	ldr	r2, [r4, #0]
 800fdca:	3b00      	subs	r3, #0
 800fdcc:	bf18      	it	ne
 800fdce:	2301      	movne	r3, #1
 800fdd0:	0692      	lsls	r2, r2, #26
 800fdd2:	d42b      	bmi.n	800fe2c <_printf_common+0xb0>
 800fdd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fdd8:	4641      	mov	r1, r8
 800fdda:	4638      	mov	r0, r7
 800fddc:	47c8      	blx	r9
 800fdde:	3001      	adds	r0, #1
 800fde0:	d01e      	beq.n	800fe20 <_printf_common+0xa4>
 800fde2:	6823      	ldr	r3, [r4, #0]
 800fde4:	6922      	ldr	r2, [r4, #16]
 800fde6:	f003 0306 	and.w	r3, r3, #6
 800fdea:	2b04      	cmp	r3, #4
 800fdec:	bf02      	ittt	eq
 800fdee:	68e5      	ldreq	r5, [r4, #12]
 800fdf0:	6833      	ldreq	r3, [r6, #0]
 800fdf2:	1aed      	subeq	r5, r5, r3
 800fdf4:	68a3      	ldr	r3, [r4, #8]
 800fdf6:	bf0c      	ite	eq
 800fdf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdfc:	2500      	movne	r5, #0
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	bfc4      	itt	gt
 800fe02:	1a9b      	subgt	r3, r3, r2
 800fe04:	18ed      	addgt	r5, r5, r3
 800fe06:	2600      	movs	r6, #0
 800fe08:	341a      	adds	r4, #26
 800fe0a:	42b5      	cmp	r5, r6
 800fe0c:	d11a      	bne.n	800fe44 <_printf_common+0xc8>
 800fe0e:	2000      	movs	r0, #0
 800fe10:	e008      	b.n	800fe24 <_printf_common+0xa8>
 800fe12:	2301      	movs	r3, #1
 800fe14:	4652      	mov	r2, sl
 800fe16:	4641      	mov	r1, r8
 800fe18:	4638      	mov	r0, r7
 800fe1a:	47c8      	blx	r9
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	d103      	bne.n	800fe28 <_printf_common+0xac>
 800fe20:	f04f 30ff 	mov.w	r0, #4294967295
 800fe24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe28:	3501      	adds	r5, #1
 800fe2a:	e7c6      	b.n	800fdba <_printf_common+0x3e>
 800fe2c:	18e1      	adds	r1, r4, r3
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	2030      	movs	r0, #48	@ 0x30
 800fe32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe36:	4422      	add	r2, r4
 800fe38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe40:	3302      	adds	r3, #2
 800fe42:	e7c7      	b.n	800fdd4 <_printf_common+0x58>
 800fe44:	2301      	movs	r3, #1
 800fe46:	4622      	mov	r2, r4
 800fe48:	4641      	mov	r1, r8
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	47c8      	blx	r9
 800fe4e:	3001      	adds	r0, #1
 800fe50:	d0e6      	beq.n	800fe20 <_printf_common+0xa4>
 800fe52:	3601      	adds	r6, #1
 800fe54:	e7d9      	b.n	800fe0a <_printf_common+0x8e>
	...

0800fe58 <_printf_i>:
 800fe58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe5c:	7e0f      	ldrb	r7, [r1, #24]
 800fe5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe60:	2f78      	cmp	r7, #120	@ 0x78
 800fe62:	4691      	mov	r9, r2
 800fe64:	4680      	mov	r8, r0
 800fe66:	460c      	mov	r4, r1
 800fe68:	469a      	mov	sl, r3
 800fe6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe6e:	d807      	bhi.n	800fe80 <_printf_i+0x28>
 800fe70:	2f62      	cmp	r7, #98	@ 0x62
 800fe72:	d80a      	bhi.n	800fe8a <_printf_i+0x32>
 800fe74:	2f00      	cmp	r7, #0
 800fe76:	f000 80d2 	beq.w	801001e <_printf_i+0x1c6>
 800fe7a:	2f58      	cmp	r7, #88	@ 0x58
 800fe7c:	f000 80b9 	beq.w	800fff2 <_printf_i+0x19a>
 800fe80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe88:	e03a      	b.n	800ff00 <_printf_i+0xa8>
 800fe8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe8e:	2b15      	cmp	r3, #21
 800fe90:	d8f6      	bhi.n	800fe80 <_printf_i+0x28>
 800fe92:	a101      	add	r1, pc, #4	@ (adr r1, 800fe98 <_printf_i+0x40>)
 800fe94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe98:	0800fef1 	.word	0x0800fef1
 800fe9c:	0800ff05 	.word	0x0800ff05
 800fea0:	0800fe81 	.word	0x0800fe81
 800fea4:	0800fe81 	.word	0x0800fe81
 800fea8:	0800fe81 	.word	0x0800fe81
 800feac:	0800fe81 	.word	0x0800fe81
 800feb0:	0800ff05 	.word	0x0800ff05
 800feb4:	0800fe81 	.word	0x0800fe81
 800feb8:	0800fe81 	.word	0x0800fe81
 800febc:	0800fe81 	.word	0x0800fe81
 800fec0:	0800fe81 	.word	0x0800fe81
 800fec4:	08010005 	.word	0x08010005
 800fec8:	0800ff2f 	.word	0x0800ff2f
 800fecc:	0800ffbf 	.word	0x0800ffbf
 800fed0:	0800fe81 	.word	0x0800fe81
 800fed4:	0800fe81 	.word	0x0800fe81
 800fed8:	08010027 	.word	0x08010027
 800fedc:	0800fe81 	.word	0x0800fe81
 800fee0:	0800ff2f 	.word	0x0800ff2f
 800fee4:	0800fe81 	.word	0x0800fe81
 800fee8:	0800fe81 	.word	0x0800fe81
 800feec:	0800ffc7 	.word	0x0800ffc7
 800fef0:	6833      	ldr	r3, [r6, #0]
 800fef2:	1d1a      	adds	r2, r3, #4
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	6032      	str	r2, [r6, #0]
 800fef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fefc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff00:	2301      	movs	r3, #1
 800ff02:	e09d      	b.n	8010040 <_printf_i+0x1e8>
 800ff04:	6833      	ldr	r3, [r6, #0]
 800ff06:	6820      	ldr	r0, [r4, #0]
 800ff08:	1d19      	adds	r1, r3, #4
 800ff0a:	6031      	str	r1, [r6, #0]
 800ff0c:	0606      	lsls	r6, r0, #24
 800ff0e:	d501      	bpl.n	800ff14 <_printf_i+0xbc>
 800ff10:	681d      	ldr	r5, [r3, #0]
 800ff12:	e003      	b.n	800ff1c <_printf_i+0xc4>
 800ff14:	0645      	lsls	r5, r0, #25
 800ff16:	d5fb      	bpl.n	800ff10 <_printf_i+0xb8>
 800ff18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ff1c:	2d00      	cmp	r5, #0
 800ff1e:	da03      	bge.n	800ff28 <_printf_i+0xd0>
 800ff20:	232d      	movs	r3, #45	@ 0x2d
 800ff22:	426d      	negs	r5, r5
 800ff24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff28:	4859      	ldr	r0, [pc, #356]	@ (8010090 <_printf_i+0x238>)
 800ff2a:	230a      	movs	r3, #10
 800ff2c:	e011      	b.n	800ff52 <_printf_i+0xfa>
 800ff2e:	6821      	ldr	r1, [r4, #0]
 800ff30:	6833      	ldr	r3, [r6, #0]
 800ff32:	0608      	lsls	r0, r1, #24
 800ff34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff38:	d402      	bmi.n	800ff40 <_printf_i+0xe8>
 800ff3a:	0649      	lsls	r1, r1, #25
 800ff3c:	bf48      	it	mi
 800ff3e:	b2ad      	uxthmi	r5, r5
 800ff40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff42:	4853      	ldr	r0, [pc, #332]	@ (8010090 <_printf_i+0x238>)
 800ff44:	6033      	str	r3, [r6, #0]
 800ff46:	bf14      	ite	ne
 800ff48:	230a      	movne	r3, #10
 800ff4a:	2308      	moveq	r3, #8
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff52:	6866      	ldr	r6, [r4, #4]
 800ff54:	60a6      	str	r6, [r4, #8]
 800ff56:	2e00      	cmp	r6, #0
 800ff58:	bfa2      	ittt	ge
 800ff5a:	6821      	ldrge	r1, [r4, #0]
 800ff5c:	f021 0104 	bicge.w	r1, r1, #4
 800ff60:	6021      	strge	r1, [r4, #0]
 800ff62:	b90d      	cbnz	r5, 800ff68 <_printf_i+0x110>
 800ff64:	2e00      	cmp	r6, #0
 800ff66:	d04b      	beq.n	8010000 <_printf_i+0x1a8>
 800ff68:	4616      	mov	r6, r2
 800ff6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ff72:	5dc7      	ldrb	r7, [r0, r7]
 800ff74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff78:	462f      	mov	r7, r5
 800ff7a:	42bb      	cmp	r3, r7
 800ff7c:	460d      	mov	r5, r1
 800ff7e:	d9f4      	bls.n	800ff6a <_printf_i+0x112>
 800ff80:	2b08      	cmp	r3, #8
 800ff82:	d10b      	bne.n	800ff9c <_printf_i+0x144>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	07df      	lsls	r7, r3, #31
 800ff88:	d508      	bpl.n	800ff9c <_printf_i+0x144>
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	6861      	ldr	r1, [r4, #4]
 800ff8e:	4299      	cmp	r1, r3
 800ff90:	bfde      	ittt	le
 800ff92:	2330      	movle	r3, #48	@ 0x30
 800ff94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff9c:	1b92      	subs	r2, r2, r6
 800ff9e:	6122      	str	r2, [r4, #16]
 800ffa0:	f8cd a000 	str.w	sl, [sp]
 800ffa4:	464b      	mov	r3, r9
 800ffa6:	aa03      	add	r2, sp, #12
 800ffa8:	4621      	mov	r1, r4
 800ffaa:	4640      	mov	r0, r8
 800ffac:	f7ff fee6 	bl	800fd7c <_printf_common>
 800ffb0:	3001      	adds	r0, #1
 800ffb2:	d14a      	bne.n	801004a <_printf_i+0x1f2>
 800ffb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb8:	b004      	add	sp, #16
 800ffba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffbe:	6823      	ldr	r3, [r4, #0]
 800ffc0:	f043 0320 	orr.w	r3, r3, #32
 800ffc4:	6023      	str	r3, [r4, #0]
 800ffc6:	4833      	ldr	r0, [pc, #204]	@ (8010094 <_printf_i+0x23c>)
 800ffc8:	2778      	movs	r7, #120	@ 0x78
 800ffca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	6831      	ldr	r1, [r6, #0]
 800ffd2:	061f      	lsls	r7, r3, #24
 800ffd4:	f851 5b04 	ldr.w	r5, [r1], #4
 800ffd8:	d402      	bmi.n	800ffe0 <_printf_i+0x188>
 800ffda:	065f      	lsls	r7, r3, #25
 800ffdc:	bf48      	it	mi
 800ffde:	b2ad      	uxthmi	r5, r5
 800ffe0:	6031      	str	r1, [r6, #0]
 800ffe2:	07d9      	lsls	r1, r3, #31
 800ffe4:	bf44      	itt	mi
 800ffe6:	f043 0320 	orrmi.w	r3, r3, #32
 800ffea:	6023      	strmi	r3, [r4, #0]
 800ffec:	b11d      	cbz	r5, 800fff6 <_printf_i+0x19e>
 800ffee:	2310      	movs	r3, #16
 800fff0:	e7ac      	b.n	800ff4c <_printf_i+0xf4>
 800fff2:	4827      	ldr	r0, [pc, #156]	@ (8010090 <_printf_i+0x238>)
 800fff4:	e7e9      	b.n	800ffca <_printf_i+0x172>
 800fff6:	6823      	ldr	r3, [r4, #0]
 800fff8:	f023 0320 	bic.w	r3, r3, #32
 800fffc:	6023      	str	r3, [r4, #0]
 800fffe:	e7f6      	b.n	800ffee <_printf_i+0x196>
 8010000:	4616      	mov	r6, r2
 8010002:	e7bd      	b.n	800ff80 <_printf_i+0x128>
 8010004:	6833      	ldr	r3, [r6, #0]
 8010006:	6825      	ldr	r5, [r4, #0]
 8010008:	6961      	ldr	r1, [r4, #20]
 801000a:	1d18      	adds	r0, r3, #4
 801000c:	6030      	str	r0, [r6, #0]
 801000e:	062e      	lsls	r6, r5, #24
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	d501      	bpl.n	8010018 <_printf_i+0x1c0>
 8010014:	6019      	str	r1, [r3, #0]
 8010016:	e002      	b.n	801001e <_printf_i+0x1c6>
 8010018:	0668      	lsls	r0, r5, #25
 801001a:	d5fb      	bpl.n	8010014 <_printf_i+0x1bc>
 801001c:	8019      	strh	r1, [r3, #0]
 801001e:	2300      	movs	r3, #0
 8010020:	6123      	str	r3, [r4, #16]
 8010022:	4616      	mov	r6, r2
 8010024:	e7bc      	b.n	800ffa0 <_printf_i+0x148>
 8010026:	6833      	ldr	r3, [r6, #0]
 8010028:	1d1a      	adds	r2, r3, #4
 801002a:	6032      	str	r2, [r6, #0]
 801002c:	681e      	ldr	r6, [r3, #0]
 801002e:	6862      	ldr	r2, [r4, #4]
 8010030:	2100      	movs	r1, #0
 8010032:	4630      	mov	r0, r6
 8010034:	f7f0 f954 	bl	80002e0 <memchr>
 8010038:	b108      	cbz	r0, 801003e <_printf_i+0x1e6>
 801003a:	1b80      	subs	r0, r0, r6
 801003c:	6060      	str	r0, [r4, #4]
 801003e:	6863      	ldr	r3, [r4, #4]
 8010040:	6123      	str	r3, [r4, #16]
 8010042:	2300      	movs	r3, #0
 8010044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010048:	e7aa      	b.n	800ffa0 <_printf_i+0x148>
 801004a:	6923      	ldr	r3, [r4, #16]
 801004c:	4632      	mov	r2, r6
 801004e:	4649      	mov	r1, r9
 8010050:	4640      	mov	r0, r8
 8010052:	47d0      	blx	sl
 8010054:	3001      	adds	r0, #1
 8010056:	d0ad      	beq.n	800ffb4 <_printf_i+0x15c>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	079b      	lsls	r3, r3, #30
 801005c:	d413      	bmi.n	8010086 <_printf_i+0x22e>
 801005e:	68e0      	ldr	r0, [r4, #12]
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	4298      	cmp	r0, r3
 8010064:	bfb8      	it	lt
 8010066:	4618      	movlt	r0, r3
 8010068:	e7a6      	b.n	800ffb8 <_printf_i+0x160>
 801006a:	2301      	movs	r3, #1
 801006c:	4632      	mov	r2, r6
 801006e:	4649      	mov	r1, r9
 8010070:	4640      	mov	r0, r8
 8010072:	47d0      	blx	sl
 8010074:	3001      	adds	r0, #1
 8010076:	d09d      	beq.n	800ffb4 <_printf_i+0x15c>
 8010078:	3501      	adds	r5, #1
 801007a:	68e3      	ldr	r3, [r4, #12]
 801007c:	9903      	ldr	r1, [sp, #12]
 801007e:	1a5b      	subs	r3, r3, r1
 8010080:	42ab      	cmp	r3, r5
 8010082:	dcf2      	bgt.n	801006a <_printf_i+0x212>
 8010084:	e7eb      	b.n	801005e <_printf_i+0x206>
 8010086:	2500      	movs	r5, #0
 8010088:	f104 0619 	add.w	r6, r4, #25
 801008c:	e7f5      	b.n	801007a <_printf_i+0x222>
 801008e:	bf00      	nop
 8010090:	0801045e 	.word	0x0801045e
 8010094:	0801046f 	.word	0x0801046f

08010098 <memmove>:
 8010098:	4288      	cmp	r0, r1
 801009a:	b510      	push	{r4, lr}
 801009c:	eb01 0402 	add.w	r4, r1, r2
 80100a0:	d902      	bls.n	80100a8 <memmove+0x10>
 80100a2:	4284      	cmp	r4, r0
 80100a4:	4623      	mov	r3, r4
 80100a6:	d807      	bhi.n	80100b8 <memmove+0x20>
 80100a8:	1e43      	subs	r3, r0, #1
 80100aa:	42a1      	cmp	r1, r4
 80100ac:	d008      	beq.n	80100c0 <memmove+0x28>
 80100ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100b6:	e7f8      	b.n	80100aa <memmove+0x12>
 80100b8:	4402      	add	r2, r0
 80100ba:	4601      	mov	r1, r0
 80100bc:	428a      	cmp	r2, r1
 80100be:	d100      	bne.n	80100c2 <memmove+0x2a>
 80100c0:	bd10      	pop	{r4, pc}
 80100c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100ca:	e7f7      	b.n	80100bc <memmove+0x24>

080100cc <_realloc_r>:
 80100cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d0:	4680      	mov	r8, r0
 80100d2:	4615      	mov	r5, r2
 80100d4:	460c      	mov	r4, r1
 80100d6:	b921      	cbnz	r1, 80100e2 <_realloc_r+0x16>
 80100d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100dc:	4611      	mov	r1, r2
 80100de:	f7ff badf 	b.w	800f6a0 <_malloc_r>
 80100e2:	b92a      	cbnz	r2, 80100f0 <_realloc_r+0x24>
 80100e4:	f7ff fca8 	bl	800fa38 <_free_r>
 80100e8:	2400      	movs	r4, #0
 80100ea:	4620      	mov	r0, r4
 80100ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f0:	f000 f81a 	bl	8010128 <_malloc_usable_size_r>
 80100f4:	4285      	cmp	r5, r0
 80100f6:	4606      	mov	r6, r0
 80100f8:	d802      	bhi.n	8010100 <_realloc_r+0x34>
 80100fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80100fe:	d8f4      	bhi.n	80100ea <_realloc_r+0x1e>
 8010100:	4629      	mov	r1, r5
 8010102:	4640      	mov	r0, r8
 8010104:	f7ff facc 	bl	800f6a0 <_malloc_r>
 8010108:	4607      	mov	r7, r0
 801010a:	2800      	cmp	r0, #0
 801010c:	d0ec      	beq.n	80100e8 <_realloc_r+0x1c>
 801010e:	42b5      	cmp	r5, r6
 8010110:	462a      	mov	r2, r5
 8010112:	4621      	mov	r1, r4
 8010114:	bf28      	it	cs
 8010116:	4632      	movcs	r2, r6
 8010118:	f7ff fc80 	bl	800fa1c <memcpy>
 801011c:	4621      	mov	r1, r4
 801011e:	4640      	mov	r0, r8
 8010120:	f7ff fc8a 	bl	800fa38 <_free_r>
 8010124:	463c      	mov	r4, r7
 8010126:	e7e0      	b.n	80100ea <_realloc_r+0x1e>

08010128 <_malloc_usable_size_r>:
 8010128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801012c:	1f18      	subs	r0, r3, #4
 801012e:	2b00      	cmp	r3, #0
 8010130:	bfbc      	itt	lt
 8010132:	580b      	ldrlt	r3, [r1, r0]
 8010134:	18c0      	addlt	r0, r0, r3
 8010136:	4770      	bx	lr

08010138 <_init>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	bf00      	nop
 801013c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801013e:	bc08      	pop	{r3}
 8010140:	469e      	mov	lr, r3
 8010142:	4770      	bx	lr

08010144 <_fini>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	bf00      	nop
 8010148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014a:	bc08      	pop	{r3}
 801014c:	469e      	mov	lr, r3
 801014e:	4770      	bx	lr
