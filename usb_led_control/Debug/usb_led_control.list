
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcf4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800def4  0800def4  0001def4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0bc  0800e0bc  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0bc  0800e0bc  0001e0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0c4  0800e0c4  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0c8  0800e0c8  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800e0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  0800e22c  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  0800e2cc  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007180  200002a0  0800e36c  000202a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007420  0800e36c  00027420  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002dd55  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ca7  00000000  00000000  0004e066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002300  00000000  00000000  00053d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b04  00000000  00000000  00056010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000a6b3  00000000  00000000  00057b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a0f2  00000000  00000000  000621c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001172b6  00000000  00000000  0008c2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000096bc  00000000  00000000  001a3570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  001acc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800dedc 	.word	0x0800dedc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800dedc 	.word	0x0800dedc

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002bc 	.word	0x200002bc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b970 	b.w	80005cc <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	460f      	mov	r7, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14a      	bne.n	80003aa <__udivmoddi4+0xa6>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d965      	bls.n	80003e6 <__udivmoddi4+0xe2>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b143      	cbz	r3, 8000332 <__udivmoddi4+0x2e>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	409f      	lsls	r7, r3
 800032a:	fa20 f202 	lsr.w	r2, r0, r2
 800032e:	4317      	orrs	r7, r2
 8000330:	409c      	lsls	r4, r3
 8000332:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000336:	fa1f f58c 	uxth.w	r5, ip
 800033a:	fbb7 f1fe 	udiv	r1, r7, lr
 800033e:	0c22      	lsrs	r2, r4, #16
 8000340:	fb0e 7711 	mls	r7, lr, r1, r7
 8000344:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000348:	fb01 f005 	mul.w	r0, r1, r5
 800034c:	4290      	cmp	r0, r2
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x62>
 8000350:	eb1c 0202 	adds.w	r2, ip, r2
 8000354:	f101 37ff 	add.w	r7, r1, #4294967295
 8000358:	f080 811c 	bcs.w	8000594 <__udivmoddi4+0x290>
 800035c:	4290      	cmp	r0, r2
 800035e:	f240 8119 	bls.w	8000594 <__udivmoddi4+0x290>
 8000362:	3902      	subs	r1, #2
 8000364:	4462      	add	r2, ip
 8000366:	1a12      	subs	r2, r2, r0
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb2 f0fe 	udiv	r0, r2, lr
 800036e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000376:	fb00 f505 	mul.w	r5, r0, r5
 800037a:	42a5      	cmp	r5, r4
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x90>
 800037e:	eb1c 0404 	adds.w	r4, ip, r4
 8000382:	f100 32ff 	add.w	r2, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x294>
 800038a:	42a5      	cmp	r5, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x294>
 8000390:	4464      	add	r4, ip
 8000392:	3802      	subs	r0, #2
 8000394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	2100      	movs	r1, #0
 800039c:	b11e      	cbz	r6, 80003a6 <__udivmoddi4+0xa2>
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	e9c6 4300 	strd	r4, r3, [r6]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	f000 80ed 	beq.w	800058e <__udivmoddi4+0x28a>
 80003b4:	2100      	movs	r1, #0
 80003b6:	e9c6 0500 	strd	r0, r5, [r6]
 80003ba:	4608      	mov	r0, r1
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	fab3 f183 	clz	r1, r3
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d149      	bne.n	800045c <__udivmoddi4+0x158>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d302      	bcc.n	80003d2 <__udivmoddi4+0xce>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	f200 80f8 	bhi.w	80005c2 <__udivmoddi4+0x2be>
 80003d2:	1a84      	subs	r4, r0, r2
 80003d4:	eb65 0203 	sbc.w	r2, r5, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	4617      	mov	r7, r2
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d0e2      	beq.n	80003a6 <__udivmoddi4+0xa2>
 80003e0:	e9c6 4700 	strd	r4, r7, [r6]
 80003e4:	e7df      	b.n	80003a6 <__udivmoddi4+0xa2>
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xe6>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f382 	clz	r3, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2101      	movs	r1, #1
 8000400:	fbb2 f5f7 	udiv	r5, r2, r7
 8000404:	fb07 2015 	mls	r0, r7, r5, r2
 8000408:	0c22      	lsrs	r2, r4, #16
 800040a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040e:	fb0e f005 	mul.w	r0, lr, r5
 8000412:	4290      	cmp	r0, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x124>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x122>
 8000420:	4290      	cmp	r0, r2
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2b8>
 8000426:	4645      	mov	r5, r8
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x14e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 32ff 	add.w	r2, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x14c>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 8000450:	4610      	mov	r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045a:	e79f      	b.n	800039c <__udivmoddi4+0x98>
 800045c:	f1c1 0720 	rsb	r7, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa05 f401 	lsl.w	r4, r5, r1
 800046e:	fa20 f307 	lsr.w	r3, r0, r7
 8000472:	40fd      	lsrs	r5, r7
 8000474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fbb5 f8f9 	udiv	r8, r5, r9
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	fb09 5518 	mls	r5, r9, r8, r5
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800048c:	fb08 f50e 	mul.w	r5, r8, lr
 8000490:	42a5      	cmp	r5, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	fa00 f001 	lsl.w	r0, r0, r1
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b0>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2b4>
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2b4>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4464      	add	r4, ip
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	b29d      	uxth	r5, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1da>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2ac>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2ac>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4464      	add	r4, ip
 80004de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e2:	fba3 9502 	umull	r9, r5, r3, r2
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46ae      	mov	lr, r5
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x29c>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x298>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x208>
 80004f6:	ebb0 0208 	subs.w	r2, r0, r8
 80004fa:	eb64 040e 	sbc.w	r4, r4, lr
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40ca      	lsrs	r2, r1
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c6 7400 	strd	r7, r4, [r6]
 800050c:	4618      	mov	r0, r3
 800050e:	2100      	movs	r1, #0
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	f1c3 0120 	rsb	r1, r3, #32
 8000518:	fa02 fc03 	lsl.w	ip, r2, r3
 800051c:	fa20 f201 	lsr.w	r2, r0, r1
 8000520:	fa25 f101 	lsr.w	r1, r5, r1
 8000524:	409d      	lsls	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb1 f0f7 	udiv	r0, r1, r7
 8000534:	fb07 1510 	mls	r5, r7, r0, r1
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053e:	fb00 f50e 	mul.w	r5, r0, lr
 8000542:	428d      	cmp	r5, r1
 8000544:	fa04 f403 	lsl.w	r4, r4, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x258>
 800054a:	eb1c 0101 	adds.w	r1, ip, r1
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000554:	428d      	cmp	r5, r1
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 8000558:	3802      	subs	r0, #2
 800055a:	4461      	add	r1, ip
 800055c:	1b49      	subs	r1, r1, r5
 800055e:	b292      	uxth	r2, r2
 8000560:	fbb1 f5f7 	udiv	r5, r1, r7
 8000564:	fb07 1115 	mls	r1, r7, r5, r1
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	fb05 f10e 	mul.w	r1, r5, lr
 8000570:	4291      	cmp	r1, r2
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x282>
 8000574:	eb1c 0202 	adds.w	r2, ip, r2
 8000578:	f105 38ff 	add.w	r8, r5, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2a8>
 800057e:	4291      	cmp	r1, r2
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2a8>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0xfc>
 800058e:	4631      	mov	r1, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xa2>
 8000594:	4639      	mov	r1, r7
 8000596:	e6e6      	b.n	8000366 <__udivmoddi4+0x62>
 8000598:	4610      	mov	r0, r2
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x90>
 800059c:	4548      	cmp	r0, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f0>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a8:	3b01      	subs	r3, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f0>
 80005ac:	4645      	mov	r5, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x282>
 80005b0:	462b      	mov	r3, r5
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1da>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x258>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b0>
 80005bc:	3d02      	subs	r5, #2
 80005be:	4462      	add	r2, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x124>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e70a      	b.n	80003dc <__udivmoddi4+0xd8>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x14e>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005da:	22a8      	movs	r2, #168	; 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f00d fb88 	bl	800dcf4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800063a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000664:	f3bf 8f5f 	dmb	sy
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002bc 	.word	0x200002bc
 8000674:	0800def4 	.word	0x0800def4
 8000678:	20000364 	.word	0x20000364
 800067c:	20000764 	.word	0x20000764
 8000680:	0800e00c 	.word	0x0800e00c

08000684 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800069e:	f7ff ff97 	bl	80005d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 80006b0:	4413      	add	r3, r2
 80006b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d92b      	bls.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf28      	it	cs
 80006e2:	4613      	movcs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f00d fb97 	bl	800de28 <memcpy>
    NumBytesRead += NumBytesRem;
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d101      	bne.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	bf28      	it	cs
 8000738:	4613      	movcs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4413      	add	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f00d fb69 	bl	800de28 <memcpy>
    NumBytesRead += NumBytesRem;
 8000756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000780:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200002bc 	.word	0x200002bc

08000790 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007ac:	f7ff ff10 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b0:	f3ef 8311 	mrs	r3, BASEPRI
 80007b4:	f04f 0120 	mov.w	r1, #32
 80007b8:	f381 8811 	msr	BASEPRI, r1
 80007bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbeb      	blt.n	80007c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80007ee:	e000      	b.n	80007f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da3f      	bge.n	800087c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000810:	6939      	ldr	r1, [r7, #16]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3320      	adds	r3, #32
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3328      	adds	r3, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3324      	adds	r3, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000876:	f3bf 8f5f 	dmb	sy
 800087a:	e002      	b.n	8000882 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000888:	69fb      	ldr	r3, [r7, #28]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002bc 	.word	0x200002bc

08000898 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008b4:	f7ff fe8c 	bl	80005d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d82c      	bhi.n	800091c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008c2:	f3ef 8311 	mrs	r3, BASEPRI
 80008c6:	f04f 0120 	mov.w	r1, #32
 80008ca:	f381 8811 	msr	BASEPRI, r1
 80008ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00e      	beq.n	8000906 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800090a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800090c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000924:	4618      	mov	r0, r3
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002bc 	.word	0x200002bc

08000930 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d90a      	bls.n	8000964 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000952:	e007      	b.n	8000964 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	1c53      	adds	r3, r2, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1c59      	adds	r1, r3, #1
 800095e:	60f9      	str	r1, [r7, #12]
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_EncodeStr+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ee      	bne.n	8000954 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 80009b0:	7e1b      	ldrb	r3, [r3, #24]
 80009b2:	4618      	mov	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fe63 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 80009be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d057      	beq.n	8000a76 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b80      	cmp	r3, #128	; 0x80
 80009ca:	d031      	beq.n	8000a30 <_HandleIncomingPacket+0x88>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	dc40      	bgt.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	dc15      	bgt.n	8000a00 <_HandleIncomingPacket+0x58>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd3c      	ble.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d839      	bhi.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_HandleIncomingPacket+0x3c>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a07 	.word	0x08000a07
 80009e8:	08000a0d 	.word	0x08000a0d
 80009ec:	08000a13 	.word	0x08000a13
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a1f 	.word	0x08000a1f
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d033      	beq.n	8000a6c <_HandleIncomingPacket+0xc4>
 8000a04:	e025      	b.n	8000a52 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a06:	f000 fbe3 	bl	80011d0 <SEGGER_SYSVIEW_Start>
      break;
 8000a0a:	e034      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a0c:	f000 fc9a 	bl	8001344 <SEGGER_SYSVIEW_Stop>
      break;
 8000a10:	e031      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a12:	f000 fe73 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a16:	e02e      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a18:	f000 fe38 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a1c:	e02b      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a1e:	f000 fcb7 	bl	8001390 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a22:	e028      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a24:	f000 ff44 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a28:	e025      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a2a:	f000 ff23 	bl	8001874 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a2e:	e022      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe22 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 8000a40:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe88 	bl	8001760 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a50:	e00e      	b.n	8000a70 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe0d 	bl	8000684 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a6a:	e003      	b.n	8000a74 <_HandleIncomingPacket+0xcc>
      break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a74:	bf00      	nop
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000b7c 	.word	0x20000b7c

08000a84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e00b      	b.n	8000ab8 <_TrySendOverflowPacket+0x34>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	2b7f      	cmp	r3, #127	; 0x7f
 8000abc:	d8f0      	bhi.n	8000aa0 <_TrySendOverflowPacket+0x1c>
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <_TrySendOverflowPacket+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	e00b      	b.n	8000b00 <_TrySendOverflowPacket+0x7c>
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	6279      	str	r1, [r7, #36]	; 0x24
 8000af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d8f0      	bhi.n	8000ae8 <_TrySendOverflowPacket+0x64>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fb8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e004      	b.n	8000b54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b54:	693b      	ldr	r3, [r7, #16]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000b7c 	.word	0x20000b7c
 8000b64:	e0001004 	.word	0xe0001004

08000b68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b74:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <_SendPacket+0x270>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d010      	beq.n	8000b9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b7c:	4b96      	ldr	r3, [pc, #600]	; (8000dd8 <_SendPacket+0x270>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 812d 	beq.w	8000de0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b86:	4b94      	ldr	r3, [pc, #592]	; (8000dd8 <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b8e:	f7ff ff79 	bl	8000a84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 8124 	bne.w	8000de4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b9c:	e001      	b.n	8000ba2 <_SendPacket+0x3a>
    goto Send;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <_SendPacket+0x3c>
Send:
 8000ba2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	d809      	bhi.n	8000bbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000baa:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <_SendPacket+0x270>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8115 	bne.w	8000de8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d807      	bhi.n	8000bd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e0c4      	b.n	8000d5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b7f      	cmp	r3, #127	; 0x7f
 8000be0:	d912      	bls.n	8000c08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	09da      	lsrs	r2, r3, #7
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e006      	b.n	8000c16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b7e      	cmp	r3, #126	; 0x7e
 8000c1a:	d807      	bhi.n	8000c2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e098      	b.n	8000d5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d212      	bcs.n	8000c5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	09da      	lsrs	r2, r3, #7
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	60fa      	str	r2, [r7, #12]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e081      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c60:	d21d      	bcs.n	8000c9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0b9a      	lsrs	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	09db      	lsrs	r3, r3, #7
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	60fa      	str	r2, [r7, #12]
 8000c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e05f      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ca4:	d228      	bcs.n	8000cf8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0d5a      	lsrs	r2, r3, #21
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0b9b      	lsrs	r3, r3, #14
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e032      	b.n	8000d5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0f1a      	lsrs	r2, r3, #28
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0b9b      	lsrs	r3, r3, #14
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_SendPacket+0x274>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <_SendPacket+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	e00b      	b.n	8000d90 <_SendPacket+0x228>
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
 8000d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d8f0      	bhi.n	8000d78 <_SendPacket+0x210>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <_SendPacket+0x270>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	4618      	mov	r0, r3
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	f7ff fa43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_SendPacket+0x270>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	60d3      	str	r3, [r2, #12]
 8000dc8:	e00f      	b.n	8000dea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_SendPacket+0x270>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <_SendPacket+0x270>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <_SendPacket+0x282>
 8000dd8:	20000b7c 	.word	0x20000b7c
 8000ddc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_SendPacket+0x2d4>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <_SendPacket+0x2d8>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	336c      	adds	r3, #108	; 0x6c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <_SendPacket+0x2d4>)
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	4618      	mov	r0, r3
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <_SendPacket+0x2d8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3370      	adds	r3, #112	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00b      	beq.n	8000e32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_SendPacket+0x2d4>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <_SendPacket+0x2d4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e28:	f7ff fdbe 	bl	80009a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <_SendPacket+0x2d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000b7c 	.word	0x20000b7c
 8000e40:	200002bc 	.word	0x200002bc

08000e44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01d      	beq.n	8000eaa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e72:	2b25      	cmp	r3, #37	; 0x25
 8000e74:	d1f1      	bne.n	8000e5a <_VPrintHost+0x16>
      c = *p;
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6011      	str	r1, [r2, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e94:	460a      	mov	r2, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3388      	adds	r3, #136	; 0x88
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d002      	beq.n	8000eae <_VPrintHost+0x6a>
    c = *p++;
 8000ea8:	e7d7      	b.n	8000e5a <_VPrintHost+0x16>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_VPrintHost+0x6c>
        break;
 8000eae:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb4:	f04f 0120 	mov.w	r1, #32
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_VPrintHost+0x178>)
 8000ec0:	f7ff fd66 	bl	8000990 <_PreparePacket>
 8000ec4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ecc:	f7ff fd30 	bl	8000930 <_EncodeStr>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eda:	e00b      	b.n	8000ef4 <_VPrintHost+0xb0>
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	6779      	str	r1, [r7, #116]	; 0x74
 8000ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d8f0      	bhi.n	8000edc <_VPrintHost+0x98>
 8000efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	677a      	str	r2, [r7, #116]	; 0x74
 8000f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f14:	e00b      	b.n	8000f2e <_VPrintHost+0xea>
 8000f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2a:	09db      	lsrs	r3, r3, #7
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	d8f0      	bhi.n	8000f16 <_VPrintHost+0xd2>
 8000f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f4c:	e022      	b.n	8000f94 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
 8000f5a:	e00b      	b.n	8000f74 <_VPrintHost+0x130>
 8000f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	6679      	str	r1, [r7, #100]	; 0x64
 8000f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d8f0      	bhi.n	8000f5c <_VPrintHost+0x118>
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1d5      	bne.n	8000f4e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fa2:	221a      	movs	r2, #26
 8000fa4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fa8:	f7ff fdde 	bl	8000b68 <_SendPacket>
    RECORD_END();
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3788      	adds	r7, #136	; 0x88
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000bac 	.word	0x20000bac

08000fc0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <SEGGER_SYSVIEW_Init+0x74>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000fd8:	f7ff fbda 	bl	8000790 <SEGGER_RTT_AllocUpBuffer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SEGGER_SYSVIEW_Init+0x80>)
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000ffc:	f7ff fc4c 	bl	8000898 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x84>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800100c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000774 	.word	0x20000774
 8001038:	0800df08 	.word	0x0800df08
 800103c:	20000b7c 	.word	0x20000b7c
 8001040:	20000b74 	.word	0x20000b74
 8001044:	e0001004 	.word	0xe0001004

08001048 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000b7c 	.word	0x20000b7c

08001068 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001070:	f3ef 8311 	mrs	r3, BASEPRI
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	f381 8811 	msr	BASEPRI, r1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001080:	f7ff fc86 	bl	8000990 <_PreparePacket>
 8001084:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fd6c 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f383 8811 	msr	BASEPRI, r3
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000bac 	.word	0x20000bac

080010a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ae:	f3ef 8311 	mrs	r3, BASEPRI
 80010b2:	f04f 0120 	mov.w	r1, #32
 80010b6:	f381 8811 	msr	BASEPRI, r1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010be:	f7ff fc67 	bl	8000990 <_PreparePacket>
 80010c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e00b      	b.n	80010ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	61f9      	str	r1, [r7, #28]
 80010dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d8f0      	bhi.n	80010d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	61fa      	str	r2, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fd2f 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f383 8811 	msr	BASEPRI, r3
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000bac 	.word	0x20000bac

0800111c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001128:	f3ef 8311 	mrs	r3, BASEPRI
 800112c:	f04f 0120 	mov.w	r1, #32
 8001130:	f381 8811 	msr	BASEPRI, r1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001138:	f7ff fc2a 	bl	8000990 <_PreparePacket>
 800113c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	e00b      	b.n	8001164 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	b2da      	uxtb	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d8f0      	bhi.n	800114c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	e00b      	b.n	800119c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6279      	str	r1, [r7, #36]	; 0x24
 800118e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	09db      	lsrs	r3, r3, #7
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d8f0      	bhi.n	8001184 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	627a      	str	r2, [r7, #36]	; 0x24
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fcd6 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f383 8811 	msr	BASEPRI, r3
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000bac 	.word	0x20000bac

080011d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011dc:	f3ef 8311 	mrs	r3, BASEPRI
 80011e0:	f04f 0120 	mov.w	r1, #32
 80011e4:	f381 8811 	msr	BASEPRI, r1
 80011e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	220a      	movs	r2, #10
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <SEGGER_SYSVIEW_Start+0x16c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f824 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff ff32 	bl	8001068 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001204:	f3ef 8311 	mrs	r3, BASEPRI
 8001208:	f04f 0120 	mov.w	r1, #32
 800120c:	f381 8811 	msr	BASEPRI, r1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <SEGGER_SYSVIEW_Start+0x170>)
 8001214:	f7ff fbbc 	bl	8000990 <_PreparePacket>
 8001218:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
 8001228:	e00b      	b.n	8001242 <SEGGER_SYSVIEW_Start+0x72>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d8f0      	bhi.n	800122a <SEGGER_SYSVIEW_Start+0x5a>
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e00b      	b.n	800127c <SEGGER_SYSVIEW_Start+0xac>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	6279      	str	r1, [r7, #36]	; 0x24
 800126e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d8f0      	bhi.n	8001264 <SEGGER_SYSVIEW_Start+0x94>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	627a      	str	r2, [r7, #36]	; 0x24
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00b      	b.n	80012b6 <SEGGER_SYSVIEW_Start+0xe6>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	61f9      	str	r1, [r7, #28]
 80012a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	09db      	lsrs	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d8f0      	bhi.n	800129e <SEGGER_SYSVIEW_Start+0xce>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x11e>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	6179      	str	r1, [r7, #20]
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x106>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	617a      	str	r2, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001304:	2218      	movs	r2, #24
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc2d 	bl	8000b68 <_SendPacket>
      RECORD_END();
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001322:	f000 f9eb 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001326:	f000 f9b1 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800132a:	f000 fac1 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000b7c 	.word	0x20000b7c
 800133c:	0800e020 	.word	0x0800e020
 8001340:	20000bac 	.word	0x20000bac

08001344 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800134a:	f3ef 8311 	mrs	r3, BASEPRI
 800134e:	f04f 0120 	mov.w	r1, #32
 8001352:	f381 8811 	msr	BASEPRI, r1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <SEGGER_SYSVIEW_Stop+0x44>)
 800135a:	f7ff fb19 	bl	8000990 <_PreparePacket>
 800135e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001368:	220b      	movs	r2, #11
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff fbfb 	bl	8000b68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f383 8811 	msr	BASEPRI, r3
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000bac 	.word	0x20000bac
 800138c:	20000b7c 	.word	0x20000b7c

08001390 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001396:	f3ef 8311 	mrs	r3, BASEPRI
 800139a:	f04f 0120 	mov.w	r1, #32
 800139e:	f381 8811 	msr	BASEPRI, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4845      	ldr	r0, [pc, #276]	; (80014bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013a6:	f7ff faf3 	bl	8000990 <_PreparePacket>
 80013aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	e00b      	b.n	80013d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d8f0      	bhi.n	80013bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6279      	str	r1, [r7, #36]	; 0x24
 8001400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	09db      	lsrs	r3, r3, #7
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b7f      	cmp	r3, #127	; 0x7f
 8001412:	d8f0      	bhi.n	80013f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	627a      	str	r2, [r7, #36]	; 0x24
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	61f9      	str	r1, [r7, #28]
 800143a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	09db      	lsrs	r3, r3, #7
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d8f0      	bhi.n	8001430 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	61fa      	str	r2, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001496:	2218      	movs	r2, #24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff fb64 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	4798      	blx	r3
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000bac 	.word	0x20000bac
 80014c0:	20000b7c 	.word	0x20000b7c

080014c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	f04f 0120 	mov.w	r1, #32
 80014d4:	f381 8811 	msr	BASEPRI, r1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014dc:	f7ff fa58 	bl	8000990 <_PreparePacket>
 80014e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
 80014f6:	e00b      	b.n	8001510 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6479      	str	r1, [r7, #68]	; 0x44
 8001502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d8f0      	bhi.n	80014f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	647a      	str	r2, [r7, #68]	; 0x44
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001530:	e00b      	b.n	800154a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	b2da      	uxtb	r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800153c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d8f0      	bhi.n	8001532 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff f9e1 	bl	8000930 <_EncodeStr>
 800156e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001570:	2209      	movs	r2, #9
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faf7 	bl	8000b68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
 800158e:	e00b      	b.n	80015a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	6379      	str	r1, [r7, #52]	; 0x34
 800159a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d8f0      	bhi.n	8001590 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	637a      	str	r2, [r7, #52]	; 0x34
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	e00b      	b.n	80015e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	09db      	lsrs	r3, r3, #7
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d8f0      	bhi.n	80015ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e00b      	b.n	800161c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	6279      	str	r1, [r7, #36]	; 0x24
 800160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d8f0      	bhi.n	8001604 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	627a      	str	r2, [r7, #36]	; 0x24
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	61f9      	str	r1, [r7, #28]
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800166a:	2215      	movs	r2, #21
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fa7a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f383 8811 	msr	BASEPRI, r3
}
 800167a:	bf00      	nop
 800167c:	3748      	adds	r7, #72	; 0x48
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000bac 	.word	0x20000bac
 8001688:	20000b7c 	.word	0x20000b7c

0800168c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4798      	blx	r3
  }
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000b7c 	.word	0x20000b7c

080016b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016bc:	f3ef 8311 	mrs	r3, BASEPRI
 80016c0:	f04f 0120 	mov.w	r1, #32
 80016c4:	f381 8811 	msr	BASEPRI, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016cc:	f7ff f960 	bl	8000990 <_PreparePacket>
 80016d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff f92a 	bl	8000930 <_EncodeStr>
 80016dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016de:	220e      	movs	r2, #14
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff fa40 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f383 8811 	msr	BASEPRI, r3
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000bac 	.word	0x20000bac

080016fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4798      	blx	r3
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001720:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	000a      	movs	r2, r1
 8001730:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001732:	4613      	mov	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4621      	mov	r1, r4
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff fcef 	bl	800111c <SEGGER_SYSVIEW_RecordU32x2>
 800173e:	e006      	b.n	800174e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fcac 	bl	80010a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000b7c 	.word	0x20000b7c
 800175c:	e0001004 	.word	0xe0001004

08001760 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d077      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	e008      	b.n	8001790 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	3301      	adds	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	429a      	cmp	r2, r3
 8001796:	d3f2      	bcc.n	800177e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001798:	e000      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800179a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d055      	beq.n	800184e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017a2:	f3ef 8311 	mrs	r3, BASEPRI
 80017a6:	f04f 0120 	mov.w	r1, #32
 80017aa:	f381 8811 	msr	BASEPRI, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	482f      	ldr	r0, [pc, #188]	; (8001870 <SEGGER_SYSVIEW_SendModule+0x110>)
 80017b2:	f7ff f8ed 	bl	8000990 <_PreparePacket>
 80017b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e00b      	b.n	80017de <SEGGER_SYSVIEW_SendModule+0x7e>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1c59      	adds	r1, r3, #1
 80017ce:	6279      	str	r1, [r7, #36]	; 0x24
 80017d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	09db      	lsrs	r3, r3, #7
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b7f      	cmp	r3, #127	; 0x7f
 80017e2:	d8f0      	bhi.n	80017c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	627a      	str	r2, [r7, #36]	; 0x24
 80017ea:	6a3a      	ldr	r2, [r7, #32]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e00b      	b.n	8001818 <SEGGER_SYSVIEW_SendModule+0xb8>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	61f9      	str	r1, [r7, #28]
 800180a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	09db      	lsrs	r3, r3, #7
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b7f      	cmp	r3, #127	; 0x7f
 800181c:	d8f0      	bhi.n	8001800 <SEGGER_SYSVIEW_SendModule+0xa0>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	61fa      	str	r2, [r7, #28]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4619      	mov	r1, r3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff f87a 	bl	8000930 <_EncodeStr>
 800183c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800183e:	2216      	movs	r2, #22
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f7ff f990 	bl	8000b68 <_SendPacket>
      RECORD_END();
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4798      	blx	r3
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000ba4 	.word	0x20000ba4
 8001870:	20000bac 	.word	0x20000bac

08001874 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00f      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000ba4 	.word	0x20000ba4

080018b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018b6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ba:	f04f 0120 	mov.w	r1, #32
 80018be:	f381 8811 	msr	BASEPRI, r1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018c6:	f7ff f863 	bl	8000990 <_PreparePacket>
 80018ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e00b      	b.n	80018f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	6179      	str	r1, [r7, #20]
 80018e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	09db      	lsrs	r3, r3, #7
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b7f      	cmp	r3, #127	; 0x7f
 80018f8:	d8f0      	bhi.n	80018dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	617a      	str	r2, [r7, #20]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800190a:	221b      	movs	r2, #27
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f7ff f92a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f383 8811 	msr	BASEPRI, r3
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000bac 	.word	0x20000bac
 8001928:	20000ba8 	.word	0x20000ba8

0800192c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800192c:	b40f      	push	{r0, r1, r2, r3}
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	6938      	ldr	r0, [r7, #16]
 8001942:	f7ff fa7f 	bl	8000e44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001950:	b004      	add	sp, #16
 8001952:	4770      	bx	lr

08001954 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <_cbSendSystemDesc+0x14>)
 800195a:	f7ff feab 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <_cbSendSystemDesc+0x18>)
 8001960:	f7ff fea8 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	0800df10 	.word	0x0800df10
 800196c:	0800df44 	.word	0x0800df44

08001970 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SEGGER_SYSVIEW_Conf+0x24>)
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <SEGGER_SYSVIEW_Conf+0x28>)
 8001980:	f7ff fb1e 	bl	8000fc0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001988:	f7ff fb5e 	bl	8001048 <SEGGER_SYSVIEW_SetRAMBase>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	08001955 	.word	0x08001955
 8001998:	0800e02c 	.word	0x0800e02c

0800199c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e048      	b.n	8001a3a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019a8:	4929      	ldr	r1, [pc, #164]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00a f9d1 	bl	800bd60 <uxTaskGetStackHighWaterMark>
 80019be:	4601      	mov	r1, r0
 80019c0:	4823      	ldr	r0, [pc, #140]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	3310      	adds	r3, #16
 80019d0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019d2:	491f      	ldr	r1, [pc, #124]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4c16      	ldr	r4, [pc, #88]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4423      	add	r3, r4
 8001a02:	3308      	adds	r3, #8
 8001a04:	681c      	ldr	r4, [r3, #0]
 8001a06:	4d12      	ldr	r5, [pc, #72]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	442b      	add	r3, r5
 8001a14:	330c      	adds	r3, #12
 8001a16:	681d      	ldr	r5, [r3, #0]
 8001a18:	4e0d      	ldr	r6, [pc, #52]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4433      	add	r3, r6
 8001a26:	3310      	adds	r3, #16
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	4622      	mov	r2, r4
 8001a30:	f000 f855 	bl	8001ade <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <_cbSendTaskList+0xb8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3b1      	bcc.n	80019a8 <_cbSendTaskList+0xc>
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000c90 	.word	0x20000c90
 8001a54:	20000d30 	.word	0x20000d30

08001a58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a60:	f009 fe66 	bl	800b730 <xTaskGetTickCountFromISR>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2200      	movs	r2, #0
 8001a68:	469a      	mov	sl, r3
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0a00 	mov.w	sl, #0
 8001a7c:	f04f 0b00 	mov.w	fp, #0
 8001a80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	465b      	mov	r3, fp
 8001a90:	1a14      	subs	r4, r2, r0
 8001a92:	eb63 0501 	sbc.w	r5, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	00ab      	lsls	r3, r5, #2
 8001aa0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001aa4:	00a2      	lsls	r2, r4, #2
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	eb14 0800 	adds.w	r8, r4, r0
 8001aae:	eb45 0901 	adc.w	r9, r5, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ace:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ade <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08a      	sub	sp, #40	; 0x28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2214      	movs	r2, #20
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00c f8fd 	bl	800dcf4 <memset>
  TaskInfo.TaskID     = TaskID;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fcd6 	bl	80014c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b26:	f000 fc9c 	bl	8002462 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b2a:	f7ff ff21 	bl	8001970 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2e:	f000 f84f 	bl	8001bd0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b32:	f000 f93d 	bl	8001db0 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b36:	f000 f8bd 	bl	8001cb4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b3a:	f000 f909 	bl	8001d50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b3e:	f008 fa3d 	bl	8009fbc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <main+0x84>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <main+0x88>)
 8001b4a:	f008 fb8b 	bl	800a264 <osTimerNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a16      	ldr	r2, [pc, #88]	; (8001bac <main+0x8c>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <main+0x8c>)
 8001b56:	681c      	ldr	r4, [r3, #0]
 8001b58:	f009 fdda 	bl	800b710 <xTaskGetTickCount>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	2101      	movs	r1, #1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f00a fb39 	bl	800c1e0 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <main+0x90>)
 8001b70:	2120      	movs	r1, #32
 8001b72:	2010      	movs	r0, #16
 8001b74:	f008 fbfa 	bl	800a36c <osMessageQueueNew>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <main+0x94>)
 8001b7c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <main+0x98>)
 8001b80:	2100      	movs	r1, #0
 8001b82:	480e      	ldr	r0, [pc, #56]	; (8001bbc <main+0x9c>)
 8001b84:	f008 fa84 	bl	800a090 <osThreadNew>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <main+0xa0>)
 8001b8c:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001b8e:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <main+0xa4>)
 8001b90:	2100      	movs	r1, #0
 8001b92:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <main+0xa8>)
 8001b94:	f008 fa7c 	bl	800a090 <osThreadNew>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <main+0xac>)
 8001b9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b9e:	f008 fa41 	bl	800a024 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <main+0x82>
 8001ba4:	0800e094 	.word	0x0800e094
 8001ba8:	08001f71 	.word	0x08001f71
 8001bac:	20000eb0 	.word	0x20000eb0
 8001bb0:	0800e07c 	.word	0x0800e07c
 8001bb4:	20000eac 	.word	0x20000eac
 8001bb8:	0800e034 	.word	0x0800e034
 8001bbc:	08001ef5 	.word	0x08001ef5
 8001bc0:	20000ea4 	.word	0x20000ea4
 8001bc4:	0800e058 	.word	0x0800e058
 8001bc8:	08001f09 	.word	0x08001f09
 8001bcc:	20000ea8 	.word	0x20000ea8

08001bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b094      	sub	sp, #80	; 0x50
 8001bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	2234      	movs	r2, #52	; 0x34
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00c f888 	bl	800dcf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bf4:	f002 fd0c 	bl	8004610 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <SystemClock_Config+0xdc>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a2b      	ldr	r2, [pc, #172]	; (8001cac <SystemClock_Config+0xdc>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <SystemClock_Config+0xdc>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <SystemClock_Config+0xe0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <SystemClock_Config+0xe0>)
 8001c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <SystemClock_Config+0xe0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c36:	2302      	movs	r3, #2
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c40:	2304      	movs	r3, #4
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c44:	2360      	movs	r3, #96	; 0x60
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 fd39 	bl	80046d0 <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c64:	f000 f9a2 	bl	8001fac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c68:	f002 fce2 	bl	8004630 <HAL_PWREx_EnableOverDrive>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c72:	f000 f99b 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c76:	230f      	movs	r3, #15
 8001c78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	2103      	movs	r1, #3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 ffca 	bl	8004c2c <HAL_RCC_ClockConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c9e:	f000 f985 	bl	8001fac <Error_Handler>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3750      	adds	r7, #80	; 0x50
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_ETH_Init+0x84>)
 8001cba:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <MX_ETH_Init+0x88>)
 8001cbc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001ccc:	22e1      	movs	r2, #225	; 0xe1
 8001cce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_ETH_Init+0x84>)
 8001ce4:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <MX_ETH_Init+0x8c>)
 8001ce6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_ETH_Init+0x84>)
 8001cea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_ETH_Init+0x84>)
 8001cf2:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <MX_ETH_Init+0x90>)
 8001cf4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_ETH_Init+0x84>)
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <MX_ETH_Init+0x94>)
 8001cfa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_ETH_Init+0x84>)
 8001cfe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <MX_ETH_Init+0x84>)
 8001d06:	f000 fcdf 	bl	80026c8 <HAL_ETH_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d10:	f000 f94c 	bl	8001fac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d14:	2238      	movs	r2, #56	; 0x38
 8001d16:	2100      	movs	r1, #0
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <MX_ETH_Init+0x98>)
 8001d1a:	f00b ffeb 	bl	800dcf4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_ETH_Init+0x98>)
 8001d20:	2221      	movs	r2, #33	; 0x21
 8001d22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_ETH_Init+0x98>)
 8001d26:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <MX_ETH_Init+0x98>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000d6c 	.word	0x20000d6c
 8001d3c:	40028000 	.word	0x40028000
 8001d40:	20000eb4 	.word	0x20000eb4
 8001d44:	20000200 	.word	0x20000200
 8001d48:	20000160 	.word	0x20000160
 8001d4c:	20000d34 	.word	0x20000d34

08001d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <MX_USART3_UART_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d94:	f004 f8aa 	bl	8005eec <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f000 f905 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000e1c 	.word	0x20000e1c
 8001dac:	40004800 	.word	0x40004800

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a46      	ldr	r2, [pc, #280]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e5c:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <MX_GPIO_Init+0x138>)
 8001e5e:	f001 f905 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	4821      	ldr	r0, [pc, #132]	; (8001eec <MX_GPIO_Init+0x13c>)
 8001e68:	f001 f900 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	481b      	ldr	r0, [pc, #108]	; (8001ef0 <MX_GPIO_Init+0x140>)
 8001e84:	f000 ff46 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e88:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <MX_GPIO_Init+0x138>)
 8001ea2:	f000 ff37 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ea6:	2340      	movs	r3, #64	; 0x40
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <MX_GPIO_Init+0x13c>)
 8001ebe:	f000 ff29 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_GPIO_Init+0x13c>)
 8001ed6:	f000 ff1d 	bl	8002d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eda:	bf00      	nop
 8001edc:	3730      	adds	r7, #48	; 0x30
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40020800 	.word	0x40020800

08001ef4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001efc:	f00b f8be 	bl	800d07c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f008 f96b 	bl	800a1dc <osDelay>
 8001f06:	e7fb      	b.n	8001f00 <StartDefaultTask+0xc>

08001f08 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f008 f963 	bl	800a1dc <osDelay>
    uint8_t command[32];
    if (xQueueReceive(commandQueueHandle, &command, 100) == pdPASS){
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <commandReaderEntry+0x58>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f107 010c 	add.w	r1, r7, #12
 8001f1e:	2264      	movs	r2, #100	; 0x64
 8001f20:	4618      	mov	r0, r3
 8001f22:	f008 fe89 	bl	800ac38 <xQueueReceive>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d1f1      	bne.n	8001f10 <commandReaderEntry+0x8>
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", *command);
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", command[1]);
    	//SEGGER_SYSVIEW_PrintfHost("%p \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%u \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%x \n", (void*)command);
    	SEGGER_SYSVIEW_PrintfHost("begin:");
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <commandReaderEntry+0x5c>)
 8001f2e:	f7ff fcfd 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	e00b      	b.n	8001f50 <commandReaderEntry+0x48>
    		SEGGER_SYSVIEW_PrintfHost("%d \n", command[i]);
 8001f38:	f107 020c 	add.w	r2, r7, #12
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4808      	ldr	r0, [pc, #32]	; (8001f68 <commandReaderEntry+0x60>)
 8001f46:	f7ff fcf1 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	ddf0      	ble.n	8001f38 <commandReaderEntry+0x30>
    	}
    	SEGGER_SYSVIEW_PrintfHost("end");
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <commandReaderEntry+0x64>)
 8001f58:	f7ff fce8 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
  {
 8001f5c:	e7d8      	b.n	8001f10 <commandReaderEntry+0x8>
 8001f5e:	bf00      	nop
 8001f60:	20000eac 	.word	0x20000eac
 8001f64:	0800df94 	.word	0x0800df94
 8001f68:	0800df9c 	.word	0x0800df9c
 8001f6c:	0800dfa4 	.word	0x0800dfa4

08001f70 <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  //SEGGER_SYSVIEW_PrintfHost("sender");
  osDelay(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f008 f92f 	bl	800a1dc <osDelay>
  //uint8_t *data = "Hello World from USB CDC\n";
  //xQueueSend(commandQueueHandle, data, 100);

  /* USER CODE END testCommandTimerEntry */
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f9a:	f000 fa6f 	bl	800247c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40001000 	.word	0x40001000

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>
	...

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_MspInit+0x4c>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	f06f 0001 	mvn.w	r0, #1
 8001ff6:	f000 fb3d 	bl	8002674 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_ETH_MspInit+0x158>)
 8002026:	4293      	cmp	r3, r2
 8002028:	f040 8096 	bne.w	8002158 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4a46      	ldr	r2, [pc, #280]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800204a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a40      	ldr	r2, [pc, #256]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4a34      	ldr	r2, [pc, #208]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6313      	str	r3, [r2, #48]	; 0x30
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4a2e      	ldr	r2, [pc, #184]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	6313      	str	r3, [r2, #48]	; 0x30
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 80020c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c6:	6313      	str	r3, [r2, #48]	; 0x30
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_ETH_MspInit+0x15c>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020d4:	2332      	movs	r3, #50	; 0x32
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e4:	230b      	movs	r3, #11
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	481e      	ldr	r0, [pc, #120]	; (8002168 <HAL_ETH_MspInit+0x160>)
 80020f0:	f000 fe10 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020f4:	2386      	movs	r3, #134	; 0x86
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002104:	230b      	movs	r3, #11
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4817      	ldr	r0, [pc, #92]	; (800216c <HAL_ETH_MspInit+0x164>)
 8002110:	f000 fe00 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002126:	230b      	movs	r3, #11
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	4619      	mov	r1, r3
 8002130:	480f      	ldr	r0, [pc, #60]	; (8002170 <HAL_ETH_MspInit+0x168>)
 8002132:	f000 fdef 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002136:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002148:	230b      	movs	r3, #11
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4808      	ldr	r0, [pc, #32]	; (8002174 <HAL_ETH_MspInit+0x16c>)
 8002154:	f000 fdde 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3738      	adds	r7, #56	; 0x38
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40028000 	.word	0x40028000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020800 	.word	0x40020800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40021800 	.word	0x40021800

08002178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0ae      	sub	sp, #184	; 0xb8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2290      	movs	r2, #144	; 0x90
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f00b fdab 	bl	800dcf4 <memset>
  if(huart->Instance==USART3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d13c      	bne.n	8002222 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 ff90 	bl	80050dc <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021c2:	f7ff fef3 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_UART_MspInit+0xb8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_UART_MspInit+0xb8>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_UART_MspInit+0xb8>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_UART_MspInit+0xb8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_UART_MspInit+0xb8>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_UART_MspInit+0xb8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002210:	2307      	movs	r3, #7
 8002212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002216:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_UART_MspInit+0xbc>)
 800221e:	f000 fd79 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	37b8      	adds	r7, #184	; 0xb8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40004800 	.word	0x40004800
 8002230:	40023800 	.word	0x40023800
 8002234:	40020c00 	.word	0x40020c00

08002238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	; 0x38
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_InitTick+0xe0>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_InitTick+0xe0>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_InitTick+0xe0>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002260:	f107 0210 	add.w	r2, r7, #16
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f002 ff04 	bl	8005078 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800227a:	f002 fed5 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 800227e:	6378      	str	r0, [r7, #52]	; 0x34
 8002280:	e004      	b.n	800228c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002282:	f002 fed1 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8002286:	4603      	mov	r3, r0
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <HAL_InitTick+0xe4>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	0c9b      	lsrs	r3, r3, #18
 8002296:	3b01      	subs	r3, #1
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_InitTick+0xe8>)
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_InitTick+0xec>)
 800229e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_InitTick+0xe8>)
 80022a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_InitTick+0xe8>)
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_InitTick+0xe8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_InitTick+0xe8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_InitTick+0xe8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022c0:	4817      	ldr	r0, [pc, #92]	; (8002320 <HAL_InitTick+0xe8>)
 80022c2:	f003 fb33 	bl	800592c <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d11b      	bne.n	800230c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022d4:	4812      	ldr	r0, [pc, #72]	; (8002320 <HAL_InitTick+0xe8>)
 80022d6:	f003 fb8b 	bl	80059f0 <HAL_TIM_Base_Start_IT>
 80022da:	4603      	mov	r3, r0
 80022dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022e8:	2036      	movs	r0, #54	; 0x36
 80022ea:	f000 f9df 	bl	80026ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d808      	bhi.n	8002306 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	2036      	movs	r0, #54	; 0x36
 80022fa:	f000 f9bb 	bl	8002674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_InitTick+0xf0>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e002      	b.n	800230c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800230c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002310:	4618      	mov	r0, r3
 8002312:	3738      	adds	r7, #56	; 0x38
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800
 800231c:	431bde83 	.word	0x431bde83
 8002320:	20000ebc 	.word	0x20000ebc
 8002324:	40001000 	.word	0x40001000
 8002328:	20000004 	.word	0x20000004

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <NMI_Handler+0x4>

08002332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <MemManage_Handler+0x4>

0800233e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <UsageFault_Handler+0x4>

0800234a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM6_DAC_IRQHandler+0x10>)
 800235e:	f003 fbbf 	bl	8005ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000ebc 	.word	0x20000ebc

0800236c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <OTG_FS_IRQHandler+0x10>)
 8002372:	f000 ffda 	bl	800332a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20006dd0 	.word	0x20006dd0

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f00b fd0e 	bl	800ddd0 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20080000 	.word	0x20080000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	20000f08 	.word	0x20000f08
 80023e8:	20007420 	.word	0x20007420

080023ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002416:	490e      	ldr	r1, [pc, #56]	; (8002450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002418:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800242c:	4c0b      	ldr	r4, [pc, #44]	; (800245c <LoopFillZerobss+0x26>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800243a:	f7ff ffd7 	bl	80023ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243e:	f00b fccd 	bl	800dddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002442:	f7ff fb6d 	bl	8001b20 <main>
  bx  lr    
 8002446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002448:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002454:	0800e0cc 	.word	0x0800e0cc
  ldr r2, =_sbss
 8002458:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 800245c:	20007420 	.word	0x20007420

08002460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC_IRQHandler>

08002462 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002466:	2003      	movs	r0, #3
 8002468:	f000 f8f9 	bl	800265e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246c:	200f      	movs	r0, #15
 800246e:	f7ff fee3 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002472:	f7ff fda1 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000f0c 	.word	0x20000f0c

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000f0c 	.word	0x20000f0c

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000008 	.word	0x20000008

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <__NVIC_SetPriorityGrouping+0x40>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	4313      	orrs	r3, r2
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <__NVIC_SetPriorityGrouping+0x40>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	05fa0000 	.word	0x05fa0000

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff4c 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002686:	f7ff ff61 	bl	800254c <__NVIC_GetPriorityGrouping>
 800268a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f7ff ffb1 	bl	80025f8 <NVIC_EncodePriority>
 8002696:	4602      	mov	r2, r0
 8002698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff80 	bl	80025a4 <__NVIC_SetPriority>
}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff54 	bl	8002568 <__NVIC_EnableIRQ>
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06a      	b.n	80027b0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2223      	movs	r2, #35	; 0x23
 80026e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fc8b 	bl	8002008 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_ETH_Init+0xf0>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_ETH_Init+0xf0>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_ETH_Init+0xf0>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <HAL_ETH_Init+0xf4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <HAL_ETH_Init+0xf4>)
 8002710:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002714:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_ETH_Init+0xf4>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4927      	ldr	r1, [pc, #156]	; (80027bc <HAL_ETH_Init+0xf4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_ETH_Init+0xf4>)
 8002726:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800273e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7ff feb0 	bl	80024a4 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002746:	e011      	b.n	800276c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002748:	f7ff feac 	bl	80024a4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002756:	d909      	bls.n	800276c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2204      	movs	r2, #4
 800275c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	22e0      	movs	r2, #224	; 0xe0
 8002764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e021      	b.n	80027b0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e4      	bne.n	8002748 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f958 	bl	8002a34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f9ff 	bl	8002b88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa55 	bl	8002c3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	461a      	mov	r2, r3
 8002796:	2100      	movs	r1, #0
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f9bd 	bl	8002b18 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2210      	movs	r2, #16
 80027aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40013800 	.word	0x40013800

080027c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4b51      	ldr	r3, [pc, #324]	; (800291c <ETH_SetMACConfig+0x15c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7c1b      	ldrb	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <ETH_SetMACConfig+0x28>
 80027e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027e6:	e000      	b.n	80027ea <ETH_SetMACConfig+0x2a>
 80027e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7c5b      	ldrb	r3, [r3, #17]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <ETH_SetMACConfig+0x38>
 80027f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027f6:	e000      	b.n	80027fa <ETH_SetMACConfig+0x3a>
 80027f8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002800:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7fdb      	ldrb	r3, [r3, #31]
 8002806:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002808:	431a      	orrs	r2, r3
                        macconf->Speed |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800280e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	7f92      	ldrb	r2, [r2, #30]
 8002814:	2a00      	cmp	r2, #0
 8002816:	d102      	bne.n	800281e <ETH_SetMACConfig+0x5e>
 8002818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800281c:	e000      	b.n	8002820 <ETH_SetMACConfig+0x60>
 800281e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002820:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7f1b      	ldrb	r3, [r3, #28]
 8002826:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002828:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800282e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	791b      	ldrb	r3, [r3, #4]
 8002834:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800283e:	2a00      	cmp	r2, #0
 8002840:	d102      	bne.n	8002848 <ETH_SetMACConfig+0x88>
 8002842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002846:	e000      	b.n	800284a <ETH_SetMACConfig+0x8a>
 8002848:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800284a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	7bdb      	ldrb	r3, [r3, #15]
 8002850:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002852:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002858:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002860:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002862:	4313      	orrs	r3, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff fe1e 	bl	80024bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002896:	4013      	ands	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	d101      	bne.n	80028ae <ETH_SetMACConfig+0xee>
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	e000      	b.n	80028b0 <ETH_SetMACConfig+0xf0>
 80028ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028be:	2a01      	cmp	r2, #1
 80028c0:	d101      	bne.n	80028c6 <ETH_SetMACConfig+0x106>
 80028c2:	2208      	movs	r2, #8
 80028c4:	e000      	b.n	80028c8 <ETH_SetMACConfig+0x108>
 80028c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028d0:	2a01      	cmp	r2, #1
 80028d2:	d101      	bne.n	80028d8 <ETH_SetMACConfig+0x118>
 80028d4:	2204      	movs	r2, #4
 80028d6:	e000      	b.n	80028da <ETH_SetMACConfig+0x11a>
 80028d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028e2:	2a01      	cmp	r2, #1
 80028e4:	d101      	bne.n	80028ea <ETH_SetMACConfig+0x12a>
 80028e6:	2202      	movs	r2, #2
 80028e8:	e000      	b.n	80028ec <ETH_SetMACConfig+0x12c>
 80028ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028ec:	4313      	orrs	r3, r2
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002904:	2001      	movs	r0, #1
 8002906:	f7ff fdd9 	bl	80024bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	ff20810f 	.word	0xff20810f

08002920 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <ETH_SetDMAConfig+0x110>)
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7b1b      	ldrb	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <ETH_SetDMAConfig+0x2c>
 8002946:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800294a:	e000      	b.n	800294e <ETH_SetDMAConfig+0x2e>
 800294c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	7b5b      	ldrb	r3, [r3, #13]
 8002952:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002954:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	7f52      	ldrb	r2, [r2, #29]
 800295a:	2a00      	cmp	r2, #0
 800295c:	d102      	bne.n	8002964 <ETH_SetDMAConfig+0x44>
 800295e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002962:	e000      	b.n	8002966 <ETH_SetDMAConfig+0x46>
 8002964:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002966:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	7b9b      	ldrb	r3, [r3, #14]
 800296c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800296e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002974:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	7f1b      	ldrb	r3, [r3, #28]
 800297a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800297c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	7f9b      	ldrb	r3, [r3, #30]
 8002982:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002984:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800298a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002992:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002994:	4313      	orrs	r3, r2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a4:	461a      	mov	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fd80 	bl	80024bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c4:	461a      	mov	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	791b      	ldrb	r3, [r3, #4]
 80029ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7ff fd51 	bl	80024bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	f8de3f23 	.word	0xf8de3f23

08002a34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0a6      	sub	sp, #152	; 0x98
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a70:	2300      	movs	r3, #0
 8002a72:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002aa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fe86 	bl	80027c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff08 	bl	8002920 <ETH_SetDMAConfig>
}
 8002b10:	bf00      	nop
 8002b12:	3798      	adds	r7, #152	; 0x98
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3305      	adds	r3, #5
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	3204      	adds	r2, #4
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <ETH_MACAddressConfig+0x68>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3303      	adds	r3, #3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	061a      	lsls	r2, r3, #24
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3301      	adds	r3, #1
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <ETH_MACAddressConfig+0x6c>)
 8002b6a:	4413      	add	r3, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40028040 	.word	0x40028040
 8002b84:	40028044 	.word	0x40028044

08002b88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e03e      	b.n	8002c14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68d9      	ldr	r1, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	3206      	adds	r2, #6
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d80c      	bhi.n	8002bf8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e004      	b.n	8002c02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3301      	adds	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d9bd      	bls.n	8002b96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2c:	611a      	str	r2, [r3, #16]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e046      	b.n	8002cd6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6919      	ldr	r1, [r3, #16]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	3212      	adds	r2, #18
 8002ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d80c      	bhi.n	8002cc6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6919      	ldr	r1, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	e004      	b.n	8002cd0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d9b5      	bls.n	8002c48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d06:	60da      	str	r2, [r3, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e175      	b.n	8003020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 8164 	bne.w	800301a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x56>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80be 	beq.w	800301a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a65      	ldr	r2, [pc, #404]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eb6:	4a61      	ldr	r2, [pc, #388]	; (800303c <HAL_GPIO_Init+0x328>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_GPIO_Init+0x32c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d037      	beq.n	8002f52 <HAL_GPIO_Init+0x23e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a57      	ldr	r2, [pc, #348]	; (8003044 <HAL_GPIO_Init+0x330>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d031      	beq.n	8002f4e <HAL_GPIO_Init+0x23a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a56      	ldr	r2, [pc, #344]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x236>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a55      	ldr	r2, [pc, #340]	; (800304c <HAL_GPIO_Init+0x338>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x232>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a54      	ldr	r2, [pc, #336]	; (8003050 <HAL_GPIO_Init+0x33c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_GPIO_Init+0x340>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x22a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_GPIO_Init+0x344>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x226>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a51      	ldr	r2, [pc, #324]	; (800305c <HAL_GPIO_Init+0x348>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x222>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_GPIO_Init+0x34c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x21e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4f      	ldr	r2, [pc, #316]	; (8003064 <HAL_GPIO_Init+0x350>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002f2a:	2309      	movs	r3, #9
 8002f2c:	e012      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f2e:	230a      	movs	r3, #10
 8002f30:	e010      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f32:	2308      	movs	r3, #8
 8002f34:	e00e      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e00c      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e00a      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f3e:	2305      	movs	r3, #5
 8002f40:	e008      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e006      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e004      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e002      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f52:	2300      	movs	r3, #0
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f002 0203 	and.w	r2, r2, #3
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f64:	4935      	ldr	r1, [pc, #212]	; (800303c <HAL_GPIO_Init+0x328>)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f96:	4a34      	ldr	r2, [pc, #208]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f9c:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_GPIO_Init+0x354>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3301      	adds	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b0f      	cmp	r3, #15
 8003024:	f67f ae86 	bls.w	8002d34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40013800 	.word	0x40013800
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40020800 	.word	0x40020800
 800304c:	40020c00 	.word	0x40020c00
 8003050:	40021000 	.word	0x40021000
 8003054:	40021400 	.word	0x40021400
 8003058:	40021800 	.word	0x40021800
 800305c:	40021c00 	.word	0x40021c00
 8003060:	40022000 	.word	0x40022000
 8003064:	40022400 	.word	0x40022400
 8003068:	40013c00 	.word	0x40013c00

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800309e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a0:	b08f      	sub	sp, #60	; 0x3c
 80030a2:	af0a      	add	r7, sp, #40	; 0x28
 80030a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e116      	b.n	80032de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f00a f9d8 	bl	800d480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2203      	movs	r2, #3
 80030d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fc6f 	bl	80069d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	687e      	ldr	r6, [r7, #4]
 80030fc:	466d      	mov	r5, sp
 80030fe:	f106 0410 	add.w	r4, r6, #16
 8003102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800310a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800310e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003112:	1d33      	adds	r3, r6, #4
 8003114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f003 fb50 	bl	80067bc <USB_CoreInit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0d7      	b.n	80032de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fc5d 	bl	80069f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	e04a      	b.n	80031d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	333d      	adds	r3, #61	; 0x3d
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	333c      	adds	r3, #60	; 0x3c
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	b298      	uxth	r0, r3
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3344      	adds	r3, #68	; 0x44
 800317c:	4602      	mov	r2, r0
 800317e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3340      	adds	r3, #64	; 0x40
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3348      	adds	r3, #72	; 0x48
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	; 0x4c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3354      	adds	r3, #84	; 0x54
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	3301      	adds	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3af      	bcc.n	8003140 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e044      	b.n	8003270 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	3301      	adds	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	d3b5      	bcc.n	80031e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	687e      	ldr	r6, [r7, #4]
 8003282:	466d      	mov	r5, sp
 8003284:	f106 0410 	add.w	r4, r6, #16
 8003288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003294:	e885 0003 	stmia.w	r5, {r0, r1}
 8003298:	1d33      	adds	r3, r6, #4
 800329a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f003 fbf5 	bl	8006a8c <USB_DevInit>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e014      	b.n	80032de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f001 f97b 	bl	80045c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fd43 	bl	8007d62 <USB_DevDisconnect>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_Start+0x16>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e012      	b.n	8003322 <HAL_PCD_Start+0x3c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 fb51 	bl	80069b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fd04 	bl	8007d20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800332a:	b590      	push	{r4, r7, lr}
 800332c:	b08d      	sub	sp, #52	; 0x34
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f004 fdc2 	bl	8007eca <USB_GetMode>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 84b7 	bne.w	8003cbc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fd26 	bl	8007da4 <USB_ReadInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 84ad 	beq.w	8003cba <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f004 fd13 	bl	8007da4 <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d107      	bne.n	8003398 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f002 0202 	and.w	r2, r2, #2
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f004 fd01 	bl	8007da4 <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d161      	bne.n	8003470 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0210 	bic.w	r2, r2, #16
 80033ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	0c5b      	lsrs	r3, r3, #17
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d124      	bne.n	8003432 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d035      	beq.n	8003460 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6a38      	ldr	r0, [r7, #32]
 8003408:	f004 fb38 	bl	8007a7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003418:	441a      	add	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6a1a      	ldr	r2, [r3, #32]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342a:	441a      	add	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]
 8003430:	e016      	b.n	8003460 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	0c5b      	lsrs	r3, r3, #17
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	2b06      	cmp	r3, #6
 800343c:	d110      	bne.n	8003460 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003444:	2208      	movs	r2, #8
 8003446:	4619      	mov	r1, r3
 8003448:	6a38      	ldr	r0, [r7, #32]
 800344a:	f004 fb17 	bl	8007a7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6a1a      	ldr	r2, [r3, #32]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345a:	441a      	add	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0210 	orr.w	r2, r2, #16
 800346e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f004 fc95 	bl	8007da4 <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003480:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003484:	f040 80a7 	bne.w	80035d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fc9a 	bl	8007dca <USB_ReadDevAllOutEpInterrupt>
 8003496:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003498:	e099      	b.n	80035ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808e 	beq.w	80035c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f004 fcbe 	bl	8007e32 <USB_ReadDevOutEPInterrupt>
 80034b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	2301      	movs	r3, #1
 80034d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fef0 	bl	80042bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2308      	movs	r3, #8
 80034f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 ffc6 	bl	800448c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	2310      	movs	r3, #16
 800351a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d030      	beq.n	8003588 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d109      	bne.n	8003546 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003544:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d108      	bne.n	8003576 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f00a f8b9 	bl	800d6e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	461a      	mov	r2, r3
 8003584:	2302      	movs	r3, #2
 8003586:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2320      	movs	r3, #32
 80035a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	3301      	adds	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f47f af62 	bne.w	800349a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 fbe2 	bl	8007da4 <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ea:	f040 80db 	bne.w	80037a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 fc03 	bl	8007dfe <USB_ReadDevAllInEpInterrupt>
 80035f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035fe:	e0cd      	b.n	800379c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80c2 	beq.w	8003790 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f004 fc29 	bl	8007e6e <USB_ReadDevInEPInterrupt>
 800361c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d057      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	2201      	movs	r2, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	43db      	mvns	r3, r3
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003648:	4013      	ands	r3, r2
 800364a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003658:	461a      	mov	r2, r3
 800365a:	2301      	movs	r3, #1
 800365c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d132      	bne.n	80036cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	334c      	adds	r3, #76	; 0x4c
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4403      	add	r3, r0
 8003686:	3348      	adds	r3, #72	; 0x48
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4419      	add	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4403      	add	r3, r0
 800369a:	334c      	adds	r3, #76	; 0x4c
 800369c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d113      	bne.n	80036cc <HAL_PCD_IRQHandler+0x3a2>
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	3354      	adds	r3, #84	; 0x54
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d108      	bne.n	80036cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036c4:	461a      	mov	r2, r3
 80036c6:	2101      	movs	r1, #1
 80036c8:	f004 fc32 	bl	8007f30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f009 ff83 	bl	800d5de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	461a      	mov	r2, r3
 80036f0:	2308      	movs	r3, #8
 80036f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	461a      	mov	r2, r3
 800370c:	2310      	movs	r3, #16
 800370e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	461a      	mov	r2, r3
 8003728:	2340      	movs	r3, #64	; 0x40
 800372a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d023      	beq.n	800377e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003738:	6a38      	ldr	r0, [r7, #32]
 800373a:	f003 fb05 	bl	8006d48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f009 ffd0 	bl	800d70c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2302      	movs	r3, #2
 800377c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fd08 	bl	80041a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	3301      	adds	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f47f af2e 	bne.w	8003600 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fafb 	bl	8007da4 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b8:	d122      	bne.n	8003800 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d108      	bne.n	80037ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037e0:	2100      	movs	r1, #0
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f00a f94a 	bl	800da7c <HAL_PCDEx_LPM_Callback>
 80037e8:	e002      	b.n	80037f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f009 ff6e 	bl	800d6cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f004 facd 	bl	8007da4 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003814:	d112      	bne.n	800383c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f009 ff2a 	bl	800d680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800383a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f004 faaf 	bl	8007da4 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003850:	d121      	bne.n	8003896 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003860:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d111      	bne.n	8003890 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	f003 020f 	and.w	r2, r3, #15
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003886:	2101      	movs	r1, #1
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f00a f8f7 	bl	800da7c <HAL_PCDEx_LPM_Callback>
 800388e:	e002      	b.n	8003896 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f009 fef5 	bl	800d680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f004 fa82 	bl	8007da4 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038aa:	f040 80b7 	bne.w	8003a1c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2110      	movs	r1, #16
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fa3d 	bl	8006d48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d2:	e046      	b.n	8003962 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	461a      	mov	r2, r3
 80038e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f8:	0151      	lsls	r1, r2, #5
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	440a      	add	r2, r1
 80038fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003906:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800391a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800393a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	440a      	add	r2, r1
 8003952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800395a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	3301      	adds	r3, #1
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d3b3      	bcc.n	80038d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800397a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800397e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003998:	f043 030b 	orr.w	r3, r3, #11
 800399c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ae:	f043 030b 	orr.w	r3, r3, #11
 80039b2:	6453      	str	r3, [r2, #68]	; 0x44
 80039b4:	e015      	b.n	80039e2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	4619      	mov	r1, r3
 80039c6:	f242 032b 	movw	r3, #8235	; 0x202b
 80039ca:	4313      	orrs	r3, r2
 80039cc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039dc:	f043 030b 	orr.w	r3, r3, #11
 80039e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f004 fa92 	bl	8007f30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 f9bf 	bl	8007da4 <USB_ReadInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d124      	bne.n	8003a7c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f004 fa56 	bl	8007ee8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 f9fe 	bl	8006e42 <USB_GetDevSpeed>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681c      	ldr	r4, [r3, #0]
 8003a52:	f001 fadd 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8003a56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4620      	mov	r0, r4
 8003a62:	f002 ff03 	bl	800686c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f009 fde1 	bl	800d62e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 f98f 	bl	8007da4 <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f009 fdbe 	bl	800d612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 0208 	and.w	r2, r2, #8
 8003aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 f97a 	bl	8007da4 <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d122      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	e014      	b.n	8003af6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fb27 	bl	800413e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	3301      	adds	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3e5      	bcc.n	8003acc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 f94d 	bl	8007da4 <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b14:	d13b      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b16:	2301      	movs	r3, #1
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	e02b      	b.n	8003b74 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	3340      	adds	r3, #64	; 0x40
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d115      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da12      	bge.n	8003b6e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	333f      	adds	r3, #63	; 0x3f
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fae8 	bl	800413e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3ce      	bcc.n	8003b1c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 f906 	bl	8007da4 <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba2:	d155      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	e045      	b.n	8003c36 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d12e      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	da2b      	bge.n	8003c30 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003be4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d121      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2c:	6053      	str	r3, [r2, #4]
            break;
 8003c2e:	e007      	b.n	8003c40 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	3301      	adds	r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3b4      	bcc.n	8003baa <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 f8a5 	bl	8007da4 <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d10a      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f009 fd62 	bl	800d730 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 f88f 	bl	8007da4 <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d115      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f009 fd52 	bl	800d74c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	e000      	b.n	8003cbc <HAL_PCD_IRQHandler+0x992>
      return;
 8003cba:	bf00      	nop
    }
  }
}
 8003cbc:	3734      	adds	r7, #52	; 0x34
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd90      	pop	{r4, r7, pc}

08003cc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_PCD_SetAddress+0x1a>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e013      	b.n	8003d04 <HAL_PCD_SetAddress+0x42>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 ffed 	bl	8007cd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	70fb      	strb	r3, [r7, #3]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	803b      	strh	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da0f      	bge.n	8003d52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	3338      	adds	r3, #56	; 0x38
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	3304      	adds	r3, #4
 8003d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	705a      	strb	r2, [r3, #1]
 8003d50:	e00f      	b.n	8003d72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	f003 020f 	and.w	r2, r3, #15
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	3304      	adds	r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d7e:	883a      	ldrh	r2, [r7, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	78ba      	ldrb	r2, [r7, #2]
 8003d88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d9c:	78bb      	ldrb	r3, [r7, #2]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d102      	bne.n	8003da8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_PCD_EP_Open+0xaa>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e00e      	b.n	8003dd4 <HAL_PCD_EP_Open+0xc8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 f861 	bl	8006e8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0f      	bge.n	8003e10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3338      	adds	r3, #56	; 0x38
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	705a      	strb	r2, [r3, #1]
 8003e0e:	e00f      	b.n	8003e30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_PCD_EP_Close+0x6e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e00e      	b.n	8003e68 <HAL_PCD_EP_Close+0x8c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 f89f 	bl	8006f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e80:	7afb      	ldrb	r3, [r7, #11]
 8003e82:	f003 020f 	and.w	r2, r3, #15
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	3304      	adds	r3, #4
 8003e98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb2:	7afb      	ldrb	r3, [r7, #11]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6979      	ldr	r1, [r7, #20]
 8003ee4:	f003 fb86 	bl	80075f4 <USB_EP0StartXfer>
 8003ee8:	e008      	b.n	8003efc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	f003 f92c 	bl	8007154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f28:	681b      	ldr	r3, [r3, #0]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	460b      	mov	r3, r1
 8003f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2201      	movs	r2, #1
 8003f74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f76:	7afb      	ldrb	r3, [r7, #11]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d102      	bne.n	8003f90 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	f003 fb24 	bl	80075f4 <USB_EP0StartXfer>
 8003fac:	e008      	b.n	8003fc0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	f003 f8ca 	bl	8007154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 020f 	and.w	r2, r3, #15
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d901      	bls.n	8003fe8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e050      	b.n	800408a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da0f      	bge.n	8004010 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	3338      	adds	r3, #56	; 0x38
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	705a      	strb	r2, [r3, #1]
 800400e:	e00d      	b.n	800402c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	3304      	adds	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_PCD_EP_SetStall+0x82>
 8004048:	2302      	movs	r3, #2
 800404a:	e01e      	b.n	800408a <HAL_PCD_EP_SetStall+0xc0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	4618      	mov	r0, r3
 800405c:	f003 fd66 	bl	8007b2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	b2d9      	uxtb	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800407a:	461a      	mov	r2, r3
 800407c:	f003 ff58 	bl	8007f30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 020f 	and.w	r2, r3, #15
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d901      	bls.n	80040b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e042      	b.n	8004136 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	da0f      	bge.n	80040d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	3338      	adds	r3, #56	; 0x38
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	705a      	strb	r2, [r3, #1]
 80040d6:	e00f      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	3304      	adds	r3, #4
 80040f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_PCD_EP_ClrStall+0x86>
 8004114:	2302      	movs	r3, #2
 8004116:	e00e      	b.n	8004136 <HAL_PCD_EP_ClrStall+0xa4>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	4618      	mov	r0, r3
 8004128:	f003 fd6e 	bl	8007c08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800414a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da0c      	bge.n	800416c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	3338      	adds	r3, #56	; 0x38
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e00c      	b.n	8004186 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	3304      	adds	r3, #4
 8004184:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	4618      	mov	r0, r3
 800418e:	f003 fb8d 	bl	80078ac <USB_EPStopXfer>
 8004192:	4603      	mov	r3, r0
 8004194:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004196:	7afb      	ldrb	r3, [r7, #11]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	3338      	adds	r3, #56	; 0x38
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d901      	bls.n	80041d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e06c      	b.n	80042b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d902      	bls.n	80041f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3303      	adds	r3, #3
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041fc:	e02b      	b.n	8004256 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	429a      	cmp	r2, r3
 8004212:	d902      	bls.n	800421a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3303      	adds	r3, #3
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6919      	ldr	r1, [r3, #16]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004232:	b2db      	uxtb	r3, r3
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	4603      	mov	r3, r0
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f003 fbe1 	bl	8007a00 <USB_WritePacket>

    ep->xfer_buff  += len;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	441a      	add	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d809      	bhi.n	8004280 <PCD_WriteEmptyTxFifo+0xe0>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004274:	429a      	cmp	r2, r3
 8004276:	d203      	bcs.n	8004280 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1be      	bne.n	80041fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	429a      	cmp	r2, r3
 800428a:	d811      	bhi.n	80042b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	2201      	movs	r2, #1
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	6939      	ldr	r1, [r7, #16]
 80042a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ac:	4013      	ands	r3, r2
 80042ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	333c      	adds	r3, #60	; 0x3c
 80042d4:	3304      	adds	r3, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d17b      	bne.n	80043ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	4a61      	ldr	r2, [pc, #388]	; (8004484 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	f240 80b9 	bls.w	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80b3 	beq.w	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	461a      	mov	r2, r3
 8004320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	e0a7      	b.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	461a      	mov	r2, r3
 8004340:	2320      	movs	r3, #32
 8004342:	6093      	str	r3, [r2, #8]
 8004344:	e098      	b.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 8093 	bne.w	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4a4b      	ldr	r2, [pc, #300]	; (8004484 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d90f      	bls.n	800437a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	461a      	mov	r2, r3
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	6093      	str	r3, [r2, #8]
 8004378:	e07e      	b.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	0159      	lsls	r1, r3, #5
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	440b      	add	r3, r1
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a6:	1ad2      	subs	r2, r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d114      	bne.n	80043dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c4:	461a      	mov	r2, r3
 80043c6:	2101      	movs	r1, #1
 80043c8:	f003 fdb2 	bl	8007f30 <USB_EP0_OutStart>
 80043cc:	e006      	b.n	80043dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	441a      	add	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f009 f8e0 	bl	800d5a8 <HAL_PCD_DataOutStageCallback>
 80043e8:	e046      	b.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4a26      	ldr	r2, [pc, #152]	; (8004488 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d124      	bne.n	800443c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440e:	6093      	str	r3, [r2, #8]
 8004410:	e032      	b.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	461a      	mov	r2, r3
 800442a:	2320      	movs	r3, #32
 800442c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f009 f8b7 	bl	800d5a8 <HAL_PCD_DataOutStageCallback>
 800443a:	e01d      	b.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d114      	bne.n	800446c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004464:	461a      	mov	r2, r3
 8004466:	2100      	movs	r1, #0
 8004468:	f003 fd62 	bl	8007f30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f009 f898 	bl	800d5a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	4f54300a 	.word	0x4f54300a
 8004488:	4f54310a 	.word	0x4f54310a

0800448c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	333c      	adds	r3, #60	; 0x3c
 80044a4:	3304      	adds	r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <PCD_EP_OutSetupPacket_int+0x88>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d90e      	bls.n	80044e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	461a      	mov	r2, r3
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f009 f84f 	bl	800d584 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d90c      	bls.n	8004508 <PCD_EP_OutSetupPacket_int+0x7c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d108      	bne.n	8004508 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004500:	461a      	mov	r2, r3
 8004502:	2101      	movs	r1, #1
 8004504:	f003 fd14 	bl	8007f30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	4f54300a 	.word	0x4f54300a

08004518 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
 8004524:	4613      	mov	r3, r2
 8004526:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004536:	883b      	ldrh	r3, [r7, #0]
 8004538:	0419      	lsls	r1, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	430a      	orrs	r2, r1
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
 8004544:	e028      	b.n	8004598 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	e00d      	b.n	8004576 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	3340      	adds	r3, #64	; 0x40
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	3301      	adds	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	3b01      	subs	r3, #1
 800457c:	429a      	cmp	r2, r3
 800457e:	d3ec      	bcc.n	800455a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004580:	883b      	ldrh	r3, [r7, #0]
 8004582:	0418      	lsls	r0, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	3b01      	subs	r3, #1
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4302      	orrs	r2, r0
 8004590:	3340      	adds	r3, #64	; 0x40
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_PCDEx_ActivateLPM+0x44>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	10000003 	.word	0x10000003

08004610 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461e:	6013      	str	r3, [r2, #0]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40007000 	.word	0x40007000

08004630 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800465e:	f7fd ff21 	bl	80024a4 <HAL_GetTick>
 8004662:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004664:	e009      	b.n	800467a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004666:	f7fd ff1d 	bl	80024a4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004674:	d901      	bls.n	800467a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e022      	b.n	80046c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004686:	d1ee      	bne.n	8004666 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800468e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004692:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004694:	f7fd ff06 	bl	80024a4 <HAL_GetTick>
 8004698:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800469a:	e009      	b.n	80046b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800469c:	f7fd ff02 	bl	80024a4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046aa:	d901      	bls.n	80046b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e007      	b.n	80046c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046bc:	d1ee      	bne.n	800469c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40007000 	.word	0x40007000

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e29b      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f4:	4b96      	ldr	r3, [pc, #600]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d00c      	beq.n	800471a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004700:	4b93      	ldr	r3, [pc, #588]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d112      	bne.n	8004732 <HAL_RCC_OscConfig+0x62>
 800470c:	4b90      	ldr	r3, [pc, #576]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004718:	d10b      	bne.n	8004732 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	4b8d      	ldr	r3, [pc, #564]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d06c      	beq.n	8004800 <HAL_RCC_OscConfig+0x130>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d168      	bne.n	8004800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e275      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x7a>
 800473c:	4b84      	ldr	r3, [pc, #528]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a83      	ldr	r2, [pc, #524]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0xd8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x9c>
 8004752:	4b7f      	ldr	r3, [pc, #508]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7e      	ldr	r2, [pc, #504]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b7c      	ldr	r3, [pc, #496]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a7b      	ldr	r2, [pc, #492]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xd8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0xc0>
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a75      	ldr	r2, [pc, #468]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b73      	ldr	r3, [pc, #460]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a72      	ldr	r2, [pc, #456]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xd8>
 8004790:	4b6f      	ldr	r3, [pc, #444]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6e      	ldr	r2, [pc, #440]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6b      	ldr	r2, [pc, #428]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd fe78 	bl	80024a4 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd fe74 	bl	80024a4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e229      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b61      	ldr	r3, [pc, #388]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe8>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd fe64 	bl	80024a4 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd fe60 	bl	80024a4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e215      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	4b57      	ldr	r3, [pc, #348]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x110>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d069      	beq.n	80048e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	4b50      	ldr	r3, [pc, #320]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x190>
 8004826:	4b4a      	ldr	r3, [pc, #296]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x17a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1e9      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b41      	ldr	r3, [pc, #260]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	493d      	ldr	r1, [pc, #244]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	e040      	b.n	80048e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d023      	beq.n	80048b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a38      	ldr	r2, [pc, #224]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd fe16 	bl	80024a4 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487c:	f7fd fe12 	bl	80024a4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1c7      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4929      	ldr	r1, [pc, #164]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
 80048ae:	e018      	b.n	80048e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fdf2 	bl	80024a4 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c4:	f7fd fdee 	bl	80024a4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1a3      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d038      	beq.n	8004960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d019      	beq.n	800492a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fd fdcf 	bl	80024a4 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490a:	f7fd fdcb 	bl	80024a4 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e180      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x23a>
 8004928:	e01a      	b.n	8004960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492e:	4a08      	ldr	r2, [pc, #32]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fd fdb5 	bl	80024a4 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493e:	f7fd fdb1 	bl	80024a4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d903      	bls.n	8004954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e166      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
 8004950:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	4b92      	ldr	r3, [pc, #584]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ee      	bne.n	800493e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a4 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496e:	4b8c      	ldr	r3, [pc, #560]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10d      	bne.n	8004996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	4b89      	ldr	r3, [pc, #548]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	4a88      	ldr	r2, [pc, #544]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	; 0x40
 8004986:	4b86      	ldr	r3, [pc, #536]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004996:	4b83      	ldr	r3, [pc, #524]	; (8004ba4 <HAL_RCC_OscConfig+0x4d4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049a2:	4b80      	ldr	r3, [pc, #512]	; (8004ba4 <HAL_RCC_OscConfig+0x4d4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7f      	ldr	r2, [pc, #508]	; (8004ba4 <HAL_RCC_OscConfig+0x4d4>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ae:	f7fd fd79 	bl	80024a4 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fd fd75 	bl	80024a4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	; 0x64
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e12a      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c8:	4b76      	ldr	r3, [pc, #472]	; (8004ba4 <HAL_RCC_OscConfig+0x4d4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x31a>
 80049dc:	4b70      	ldr	r3, [pc, #448]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a6f      	ldr	r2, [pc, #444]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
 80049e8:	e02d      	b.n	8004a46 <HAL_RCC_OscConfig+0x376>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x33c>
 80049f2:	4b6b      	ldr	r3, [pc, #428]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a6a      	ldr	r2, [pc, #424]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	4b68      	ldr	r3, [pc, #416]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a67      	ldr	r2, [pc, #412]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e01c      	b.n	8004a46 <HAL_RCC_OscConfig+0x376>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x35e>
 8004a14:	4b62      	ldr	r3, [pc, #392]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a61      	ldr	r2, [pc, #388]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b5f      	ldr	r3, [pc, #380]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a5e      	ldr	r2, [pc, #376]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x376>
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a5b      	ldr	r2, [pc, #364]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	4b59      	ldr	r3, [pc, #356]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a58      	ldr	r2, [pc, #352]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fd29 	bl	80024a4 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd fd25 	bl	80024a4 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0d8      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCC_OscConfig+0x386>
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd fd13 	bl	80024a4 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd fd0f 	bl	80024a4 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0c2      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b3d      	ldr	r3, [pc, #244]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80ae 	beq.w	8004c1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac0:	4b37      	ldr	r3, [pc, #220]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d06d      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d14b      	bne.n	8004b6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b32      	ldr	r3, [pc, #200]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a31      	ldr	r2, [pc, #196]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fce0 	bl	80024a4 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fd fcdc 	bl	80024a4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e091      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	491b      	ldr	r1, [pc, #108]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fcae 	bl	80024a4 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fd fcaa 	bl	80024a4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e05f      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x47c>
 8004b6a:	e057      	b.n	8004c1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fc94 	bl	80024a4 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fd fc90 	bl	80024a4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e045      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4b0>
 8004b9e:	e03d      	b.n	8004c1c <HAL_RCC_OscConfig+0x54c>
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ba8:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <HAL_RCC_OscConfig+0x558>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d030      	beq.n	8004c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d129      	bne.n	8004c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d122      	bne.n	8004c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d119      	bne.n	8004c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d10f      	bne.n	8004c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0d0      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d910      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 020f 	bic.w	r2, r3, #15
 8004c5a:	4965      	ldr	r1, [pc, #404]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0b8      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c8c:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca4:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a52      	ldr	r2, [pc, #328]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b50      	ldr	r3, [pc, #320]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	494d      	ldr	r1, [pc, #308]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d040      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d115      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e07f      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e073      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e06b      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4936      	ldr	r1, [pc, #216]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7fd fbc0 	bl	80024a4 <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fd fbbc 	bl	80024a4 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e053      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d210      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 020f 	bic.w	r2, r3, #15
 8004d66:	4922      	ldr	r1, [pc, #136]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e032      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4916      	ldr	r1, [pc, #88]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	490e      	ldr	r1, [pc, #56]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dbe:	f000 f821 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	490a      	ldr	r1, [pc, #40]	; (8004df8 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd0:	5ccb      	ldrb	r3, [r1, r3]
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x1d0>)
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_ClockConfig+0x1d4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fa2a 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023c00 	.word	0x40023c00
 8004df4:	40023800 	.word	0x40023800
 8004df8:	0800e0a4 	.word	0x0800e0a4
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	20000004 	.word	0x20000004

08004e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b094      	sub	sp, #80	; 0x50
 8004e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e10:	2300      	movs	r3, #0
 8004e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e14:	2300      	movs	r3, #0
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e1c:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x40>
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	f200 80e1 	bhi.w	8004ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x34>
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e36:	e0db      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b73      	ldr	r3, [pc, #460]	; (8005008 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e3c:	e0db      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e3e:	4b73      	ldr	r3, [pc, #460]	; (800500c <HAL_RCC_GetSysClockFreq+0x208>)
 8004e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e42:	e0d8      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e44:	4b6f      	ldr	r3, [pc, #444]	; (8005004 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e4e:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d063      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5a:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	2200      	movs	r2, #0
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6e:	2300      	movs	r3, #0
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
 8004e72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e76:	4622      	mov	r2, r4
 8004e78:	462b      	mov	r3, r5
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	0159      	lsls	r1, r3, #5
 8004e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e88:	0150      	lsls	r0, r2, #5
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4621      	mov	r1, r4
 8004e90:	1a51      	subs	r1, r2, r1
 8004e92:	6139      	str	r1, [r7, #16]
 8004e94:	4629      	mov	r1, r5
 8004e96:	eb63 0301 	sbc.w	r3, r3, r1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	018b      	lsls	r3, r1, #6
 8004eac:	4651      	mov	r1, sl
 8004eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eb2:	4651      	mov	r1, sl
 8004eb4:	018a      	lsls	r2, r1, #6
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	eb63 0901 	sbc.w	r9, r3, r1
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed6:	4690      	mov	r8, r2
 8004ed8:	4699      	mov	r9, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	eb18 0303 	adds.w	r3, r8, r3
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	eb49 0303 	adc.w	r3, r9, r3
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	024b      	lsls	r3, r1, #9
 8004efa:	4621      	mov	r1, r4
 8004efc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f00:	4621      	mov	r1, r4
 8004f02:	024a      	lsls	r2, r1, #9
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f14:	f7fb f9de 	bl	80002d4 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f20:	e058      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f22:	4b38      	ldr	r3, [pc, #224]	; (8005004 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f32:	623b      	str	r3, [r7, #32]
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
 8004f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	f04f 0000 	mov.w	r0, #0
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	0159      	lsls	r1, r3, #5
 8004f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f4e:	0150      	lsls	r0, r2, #5
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4641      	mov	r1, r8
 8004f56:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f74:	ebb2 040a 	subs.w	r4, r2, sl
 8004f78:	eb63 050b 	sbc.w	r5, r3, fp
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	00eb      	lsls	r3, r5, #3
 8004f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f8a:	00e2      	lsls	r2, r4, #3
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	461d      	mov	r5, r3
 8004f90:	4643      	mov	r3, r8
 8004f92:	18e3      	adds	r3, r4, r3
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	464b      	mov	r3, r9
 8004f98:	eb45 0303 	adc.w	r3, r5, r3
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004faa:	4629      	mov	r1, r5
 8004fac:	028b      	lsls	r3, r1, #10
 8004fae:	4621      	mov	r1, r4
 8004fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	028a      	lsls	r2, r1, #10
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	61fa      	str	r2, [r7, #28]
 8004fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fc8:	f7fb f984 	bl	80002d4 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fee:	e002      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3750      	adds	r7, #80	; 0x50
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
 8005008:	00f42400 	.word	0x00f42400
 800500c:	007a1200 	.word	0x007a1200

08005010 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <HAL_RCC_GetHCLKFreq+0x14>)
 8005016:	681b      	ldr	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000000 	.word	0x20000000

08005028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800502c:	f7ff fff0 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0a9b      	lsrs	r3, r3, #10
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4903      	ldr	r1, [pc, #12]	; (800504c <HAL_RCC_GetPCLK1Freq+0x24>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800
 800504c:	0800e0b4 	.word	0x0800e0b4

08005050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005054:	f7ff ffdc 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0b5b      	lsrs	r3, r3, #13
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4903      	ldr	r1, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	0800e0b4 	.word	0x0800e0b4

08005078 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	220f      	movs	r2, #15
 8005086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0203 	and.w	r2, r3, #3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_RCC_GetClockConfig+0x60>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 020f 	and.w	r2, r3, #15
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40023c00 	.word	0x40023c00

080050dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d012      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005104:	4b69      	ldr	r3, [pc, #420]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	4a68      	ldr	r2, [pc, #416]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800510e:	6093      	str	r3, [r2, #8]
 8005110:	4b66      	ldr	r3, [pc, #408]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	4964      	ldr	r1, [pc, #400]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005126:	2301      	movs	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d017      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005136:	4b5d      	ldr	r3, [pc, #372]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	4959      	ldr	r1, [pc, #356]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005154:	d101      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d017      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005172:	4b4e      	ldr	r3, [pc, #312]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	494a      	ldr	r1, [pc, #296]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 808b 	beq.w	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051c0:	4b3a      	ldr	r3, [pc, #232]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	4a39      	ldr	r2, [pc, #228]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ca:	6413      	str	r3, [r2, #64]	; 0x40
 80051cc:	4b37      	ldr	r3, [pc, #220]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051d8:	4b35      	ldr	r3, [pc, #212]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fd f95e 	bl	80024a4 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ec:	f7fd f95a 	bl	80024a4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e38f      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800520a:	4b28      	ldr	r3, [pc, #160]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d035      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d02e      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005228:	4b20      	ldr	r3, [pc, #128]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005230:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800523e:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a1a      	ldr	r2, [pc, #104]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005248:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800524a:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005250:	4b16      	ldr	r3, [pc, #88]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d114      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd f922 	bl	80024a4 <HAL_GetTick>
 8005260:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005262:	e00a      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005264:	f7fd f91e 	bl	80024a4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e351      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ee      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005292:	d111      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052a0:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052a2:	400b      	ands	r3, r1
 80052a4:	4901      	ldr	r1, [pc, #4]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
 80052aa:	e00b      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40007000 	.word	0x40007000
 80052b4:	0ffffcff 	.word	0x0ffffcff
 80052b8:	4bac      	ldr	r3, [pc, #688]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4aab      	ldr	r2, [pc, #684]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052c2:	6093      	str	r3, [r2, #8]
 80052c4:	4ba9      	ldr	r3, [pc, #676]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d0:	49a6      	ldr	r1, [pc, #664]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d010      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052e2:	4ba2      	ldr	r3, [pc, #648]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e8:	4aa0      	ldr	r2, [pc, #640]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052f2:	4b9e      	ldr	r3, [pc, #632]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	499b      	ldr	r1, [pc, #620]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005310:	4b96      	ldr	r3, [pc, #600]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531e:	4993      	ldr	r1, [pc, #588]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005332:	4b8e      	ldr	r3, [pc, #568]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	498a      	ldr	r1, [pc, #552]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005354:	4b85      	ldr	r3, [pc, #532]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005362:	4982      	ldr	r1, [pc, #520]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005376:	4b7d      	ldr	r3, [pc, #500]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	4979      	ldr	r1, [pc, #484]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005398:	4b74      	ldr	r3, [pc, #464]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	4971      	ldr	r1, [pc, #452]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f023 020c 	bic.w	r2, r3, #12
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	4968      	ldr	r1, [pc, #416]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053dc:	4b63      	ldr	r3, [pc, #396]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	4960      	ldr	r1, [pc, #384]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053fe:	4b5b      	ldr	r3, [pc, #364]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	4957      	ldr	r1, [pc, #348]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005420:	4b52      	ldr	r3, [pc, #328]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	494f      	ldr	r1, [pc, #316]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005442:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005448:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	4946      	ldr	r1, [pc, #280]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005464:	4b41      	ldr	r3, [pc, #260]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	493e      	ldr	r1, [pc, #248]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	4935      	ldr	r1, [pc, #212]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054a8:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054b6:	492d      	ldr	r1, [pc, #180]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d011      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054ca:	4b28      	ldr	r3, [pc, #160]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d8:	4924      	ldr	r1, [pc, #144]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800550a:	4b18      	ldr	r3, [pc, #96]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005518:	4914      	ldr	r1, [pc, #80]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800552c:	4b0f      	ldr	r3, [pc, #60]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553c:	490b      	ldr	r1, [pc, #44]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00f      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005560:	4902      	ldr	r1, [pc, #8]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800556a:	bf00      	nop
 800556c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800557c:	4b8a      	ldr	r3, [pc, #552]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005582:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	4986      	ldr	r1, [pc, #536]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055a0:	4b81      	ldr	r3, [pc, #516]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b0:	497d      	ldr	r1, [pc, #500]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d006      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80d6 	beq.w	8005778 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055cc:	4b76      	ldr	r3, [pc, #472]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a75      	ldr	r2, [pc, #468]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d8:	f7fc ff64 	bl	80024a4 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055e0:	f7fc ff60 	bl	80024a4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e195      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f2:	4b6d      	ldr	r3, [pc, #436]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d021      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11d      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005612:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005620:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005626:	0e1b      	lsrs	r3, r3, #24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	019a      	lsls	r2, r3, #6
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	071b      	lsls	r3, r3, #28
 8005646:	4958      	ldr	r1, [pc, #352]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02e      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005678:	d129      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800567a:	4b4b      	ldr	r3, [pc, #300]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005680:	0c1b      	lsrs	r3, r3, #16
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005688:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568e:	0f1b      	lsrs	r3, r3, #28
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	019a      	lsls	r2, r3, #6
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	041b      	lsls	r3, r3, #16
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	493e      	ldr	r1, [pc, #248]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056b6:	4b3c      	ldr	r3, [pc, #240]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056bc:	f023 021f 	bic.w	r2, r3, #31
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	3b01      	subs	r3, #1
 80056c6:	4938      	ldr	r1, [pc, #224]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056da:	4b33      	ldr	r3, [pc, #204]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e0:	0e1b      	lsrs	r3, r3, #24
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056e8:	4b2f      	ldr	r3, [pc, #188]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ee:	0f1b      	lsrs	r3, r3, #28
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	019a      	lsls	r2, r3, #6
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	431a      	orrs	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	071b      	lsls	r3, r3, #28
 800570e:	4926      	ldr	r1, [pc, #152]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d011      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	019a      	lsls	r2, r3, #6
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	491a      	ldr	r1, [pc, #104]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005752:	f7fc fea7 	bl	80024a4 <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005758:	e008      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800575a:	f7fc fea3 	bl	80024a4 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b64      	cmp	r3, #100	; 0x64
 8005766:	d901      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e0d8      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b01      	cmp	r3, #1
 800577c:	f040 80ce 	bne.w	800591c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578c:	f7fc fe8a 	bl	80024a4 <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005792:	e00b      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005794:	f7fc fe86 	bl	80024a4 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	; 0x64
 80057a0:	d904      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0bb      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ac:	4b5e      	ldr	r3, [pc, #376]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b8:	d0ec      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d02e      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d12a      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057f0:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	0f1b      	lsrs	r3, r3, #28
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	019a      	lsls	r2, r3, #6
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	061b      	lsls	r3, r3, #24
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	071b      	lsls	r3, r3, #28
 8005816:	4944      	ldr	r1, [pc, #272]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800581e:	4b42      	ldr	r3, [pc, #264]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005824:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	3b01      	subs	r3, #1
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	493d      	ldr	r1, [pc, #244]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d022      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800584c:	d11d      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800584e:	4b36      	ldr	r3, [pc, #216]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	0e1b      	lsrs	r3, r3, #24
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	0f1b      	lsrs	r3, r3, #28
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	019a      	lsls	r2, r3, #6
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	071b      	lsls	r3, r3, #28
 8005882:	4929      	ldr	r1, [pc, #164]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d028      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005896:	4b24      	ldr	r3, [pc, #144]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	0e1b      	lsrs	r3, r3, #24
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058a4:	4b20      	ldr	r3, [pc, #128]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	019a      	lsls	r2, r3, #6
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	431a      	orrs	r2, r3
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	071b      	lsls	r3, r3, #28
 80058ca:	4917      	ldr	r1, [pc, #92]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4911      	ldr	r1, [pc, #68]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058e8:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f4:	f7fc fdd6 	bl	80024a4 <HAL_GetTick>
 80058f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058fc:	f7fc fdd2 	bl	80024a4 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e007      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591a:	d1ef      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e049      	b.n	80059d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f841 	bl	80059da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fa00 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e054      	b.n	8005ab2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a26      	ldr	r2, [pc, #152]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d01d      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a21      	ldr	r2, [pc, #132]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_TIM_Base_Start_IT+0xdc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d115      	bne.n	8005a9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_TIM_Base_Start_IT+0xec>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d015      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0xbe>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a88:	d011      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0201 	orr.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9a:	e008      	b.n	8005aae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e000      	b.n	8005ab0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40010400 	.word	0x40010400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40001800 	.word	0x40001800
 8005adc:	00010007 	.word	0x00010007

08005ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d122      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d11b      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0202 	mvn.w	r2, #2
 8005b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f905 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8f7 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f908 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d122      	bne.n	8005b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d11b      	bne.n	8005b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0204 	mvn.w	r2, #4
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8db 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8cd 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f8de 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d122      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d11b      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0208 	mvn.w	r2, #8
 8005bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f8b1 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8a3 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8b4 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d122      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d11b      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0210 	mvn.w	r2, #16
 8005c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f887 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 8005c24:	e005      	b.n	8005c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f879 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f88a 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10e      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0201 	mvn.w	r2, #1
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc f992 	bl	8001f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f91a 	bl	8005ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9e:	d10e      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b80      	cmp	r3, #128	; 0x80
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f90d 	bl	8005ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f838 	bl	8005d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d10e      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d107      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0220 	mvn.w	r2, #32
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8cd 	bl	8005eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a40      	ldr	r2, [pc, #256]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8e:	d00f      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <TIM_Base_SetConfig+0x118>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3c      	ldr	r2, [pc, #240]	; (8005e8c <TIM_Base_SetConfig+0x11c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <TIM_Base_SetConfig+0x120>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <TIM_Base_SetConfig+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2f      	ldr	r2, [pc, #188]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02b      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d027      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2c      	ldr	r2, [pc, #176]	; (8005e88 <TIM_Base_SetConfig+0x118>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d023      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <TIM_Base_SetConfig+0x11c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01f      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <TIM_Base_SetConfig+0x120>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01b      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a29      	ldr	r2, [pc, #164]	; (8005e94 <TIM_Base_SetConfig+0x124>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d017      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a28      	ldr	r2, [pc, #160]	; (8005e98 <TIM_Base_SetConfig+0x128>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <TIM_Base_SetConfig+0x12c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <TIM_Base_SetConfig+0x130>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a25      	ldr	r2, [pc, #148]	; (8005ea4 <TIM_Base_SetConfig+0x134>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <TIM_Base_SetConfig+0x138>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a23      	ldr	r2, [pc, #140]	; (8005eac <TIM_Base_SetConfig+0x13c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <TIM_Base_SetConfig+0x124>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d103      	bne.n	8005e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	615a      	str	r2, [r3, #20]
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40010400 	.word	0x40010400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400
 8005ea0:	40014800 	.word	0x40014800
 8005ea4:	40001800 	.word	0x40001800
 8005ea8:	40001c00 	.word	0x40001c00
 8005eac:	40002000 	.word	0x40002000

08005eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e040      	b.n	8005f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fc f932 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	; 0x24
 8005f18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f82c 	bl	8005f88 <UART_SetConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e022      	b.n	8005f80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa84 	bl	8006450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fb0b 	bl	8006594 <UART_CheckIdleState>
 8005f7e:	4603      	mov	r3, r0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4ba6      	ldr	r3, [pc, #664]	; (800624c <UART_SetConfig+0x2c4>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	6979      	ldr	r1, [r7, #20]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a94      	ldr	r2, [pc, #592]	; (8006250 <UART_SetConfig+0x2c8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d120      	bne.n	8006046 <UART_SetConfig+0xbe>
 8006004:	4b93      	ldr	r3, [pc, #588]	; (8006254 <UART_SetConfig+0x2cc>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d816      	bhi.n	8006040 <UART_SetConfig+0xb8>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x90>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006029 	.word	0x08006029
 800601c:	08006035 	.word	0x08006035
 8006020:	0800602f 	.word	0x0800602f
 8006024:	0800603b 	.word	0x0800603b
 8006028:	2301      	movs	r3, #1
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e150      	b.n	80062d0 <UART_SetConfig+0x348>
 800602e:	2302      	movs	r3, #2
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e14d      	b.n	80062d0 <UART_SetConfig+0x348>
 8006034:	2304      	movs	r3, #4
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e14a      	b.n	80062d0 <UART_SetConfig+0x348>
 800603a:	2308      	movs	r3, #8
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e147      	b.n	80062d0 <UART_SetConfig+0x348>
 8006040:	2310      	movs	r3, #16
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e144      	b.n	80062d0 <UART_SetConfig+0x348>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a83      	ldr	r2, [pc, #524]	; (8006258 <UART_SetConfig+0x2d0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d132      	bne.n	80060b6 <UART_SetConfig+0x12e>
 8006050:	4b80      	ldr	r3, [pc, #512]	; (8006254 <UART_SetConfig+0x2cc>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f003 030c 	and.w	r3, r3, #12
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d828      	bhi.n	80060b0 <UART_SetConfig+0x128>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0xdc>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006099 	.word	0x08006099
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060a5 	.word	0x080060a5
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060b1 	.word	0x080060b1
 8006084:	0800609f 	.word	0x0800609f
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060ab 	.word	0x080060ab
 8006098:	2300      	movs	r3, #0
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e118      	b.n	80062d0 <UART_SetConfig+0x348>
 800609e:	2302      	movs	r3, #2
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e115      	b.n	80062d0 <UART_SetConfig+0x348>
 80060a4:	2304      	movs	r3, #4
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e112      	b.n	80062d0 <UART_SetConfig+0x348>
 80060aa:	2308      	movs	r3, #8
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e10f      	b.n	80062d0 <UART_SetConfig+0x348>
 80060b0:	2310      	movs	r3, #16
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e10c      	b.n	80062d0 <UART_SetConfig+0x348>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a68      	ldr	r2, [pc, #416]	; (800625c <UART_SetConfig+0x2d4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d120      	bne.n	8006102 <UART_SetConfig+0x17a>
 80060c0:	4b64      	ldr	r3, [pc, #400]	; (8006254 <UART_SetConfig+0x2cc>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ca:	2b30      	cmp	r3, #48	; 0x30
 80060cc:	d013      	beq.n	80060f6 <UART_SetConfig+0x16e>
 80060ce:	2b30      	cmp	r3, #48	; 0x30
 80060d0:	d814      	bhi.n	80060fc <UART_SetConfig+0x174>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d009      	beq.n	80060ea <UART_SetConfig+0x162>
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d810      	bhi.n	80060fc <UART_SetConfig+0x174>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <UART_SetConfig+0x15c>
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d006      	beq.n	80060f0 <UART_SetConfig+0x168>
 80060e2:	e00b      	b.n	80060fc <UART_SetConfig+0x174>
 80060e4:	2300      	movs	r3, #0
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e0f2      	b.n	80062d0 <UART_SetConfig+0x348>
 80060ea:	2302      	movs	r3, #2
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e0ef      	b.n	80062d0 <UART_SetConfig+0x348>
 80060f0:	2304      	movs	r3, #4
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e0ec      	b.n	80062d0 <UART_SetConfig+0x348>
 80060f6:	2308      	movs	r3, #8
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e0e9      	b.n	80062d0 <UART_SetConfig+0x348>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e0e6      	b.n	80062d0 <UART_SetConfig+0x348>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a56      	ldr	r2, [pc, #344]	; (8006260 <UART_SetConfig+0x2d8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d120      	bne.n	800614e <UART_SetConfig+0x1c6>
 800610c:	4b51      	ldr	r3, [pc, #324]	; (8006254 <UART_SetConfig+0x2cc>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006116:	2bc0      	cmp	r3, #192	; 0xc0
 8006118:	d013      	beq.n	8006142 <UART_SetConfig+0x1ba>
 800611a:	2bc0      	cmp	r3, #192	; 0xc0
 800611c:	d814      	bhi.n	8006148 <UART_SetConfig+0x1c0>
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d009      	beq.n	8006136 <UART_SetConfig+0x1ae>
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d810      	bhi.n	8006148 <UART_SetConfig+0x1c0>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <UART_SetConfig+0x1a8>
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d006      	beq.n	800613c <UART_SetConfig+0x1b4>
 800612e:	e00b      	b.n	8006148 <UART_SetConfig+0x1c0>
 8006130:	2300      	movs	r3, #0
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e0cc      	b.n	80062d0 <UART_SetConfig+0x348>
 8006136:	2302      	movs	r3, #2
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e0c9      	b.n	80062d0 <UART_SetConfig+0x348>
 800613c:	2304      	movs	r3, #4
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e0c6      	b.n	80062d0 <UART_SetConfig+0x348>
 8006142:	2308      	movs	r3, #8
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e0c3      	b.n	80062d0 <UART_SetConfig+0x348>
 8006148:	2310      	movs	r3, #16
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e0c0      	b.n	80062d0 <UART_SetConfig+0x348>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a44      	ldr	r2, [pc, #272]	; (8006264 <UART_SetConfig+0x2dc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d125      	bne.n	80061a4 <UART_SetConfig+0x21c>
 8006158:	4b3e      	ldr	r3, [pc, #248]	; (8006254 <UART_SetConfig+0x2cc>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006166:	d017      	beq.n	8006198 <UART_SetConfig+0x210>
 8006168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800616c:	d817      	bhi.n	800619e <UART_SetConfig+0x216>
 800616e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006172:	d00b      	beq.n	800618c <UART_SetConfig+0x204>
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	d811      	bhi.n	800619e <UART_SetConfig+0x216>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <UART_SetConfig+0x1fe>
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d006      	beq.n	8006192 <UART_SetConfig+0x20a>
 8006184:	e00b      	b.n	800619e <UART_SetConfig+0x216>
 8006186:	2300      	movs	r3, #0
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e0a1      	b.n	80062d0 <UART_SetConfig+0x348>
 800618c:	2302      	movs	r3, #2
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e09e      	b.n	80062d0 <UART_SetConfig+0x348>
 8006192:	2304      	movs	r3, #4
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e09b      	b.n	80062d0 <UART_SetConfig+0x348>
 8006198:	2308      	movs	r3, #8
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e098      	b.n	80062d0 <UART_SetConfig+0x348>
 800619e:	2310      	movs	r3, #16
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e095      	b.n	80062d0 <UART_SetConfig+0x348>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2f      	ldr	r2, [pc, #188]	; (8006268 <UART_SetConfig+0x2e0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d125      	bne.n	80061fa <UART_SetConfig+0x272>
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <UART_SetConfig+0x2cc>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061bc:	d017      	beq.n	80061ee <UART_SetConfig+0x266>
 80061be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c2:	d817      	bhi.n	80061f4 <UART_SetConfig+0x26c>
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c8:	d00b      	beq.n	80061e2 <UART_SetConfig+0x25a>
 80061ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ce:	d811      	bhi.n	80061f4 <UART_SetConfig+0x26c>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <UART_SetConfig+0x254>
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d8:	d006      	beq.n	80061e8 <UART_SetConfig+0x260>
 80061da:	e00b      	b.n	80061f4 <UART_SetConfig+0x26c>
 80061dc:	2301      	movs	r3, #1
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e076      	b.n	80062d0 <UART_SetConfig+0x348>
 80061e2:	2302      	movs	r3, #2
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e073      	b.n	80062d0 <UART_SetConfig+0x348>
 80061e8:	2304      	movs	r3, #4
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e070      	b.n	80062d0 <UART_SetConfig+0x348>
 80061ee:	2308      	movs	r3, #8
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e06d      	b.n	80062d0 <UART_SetConfig+0x348>
 80061f4:	2310      	movs	r3, #16
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e06a      	b.n	80062d0 <UART_SetConfig+0x348>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1b      	ldr	r2, [pc, #108]	; (800626c <UART_SetConfig+0x2e4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d138      	bne.n	8006276 <UART_SetConfig+0x2ee>
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <UART_SetConfig+0x2cc>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800620e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006212:	d017      	beq.n	8006244 <UART_SetConfig+0x2bc>
 8006214:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006218:	d82a      	bhi.n	8006270 <UART_SetConfig+0x2e8>
 800621a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621e:	d00b      	beq.n	8006238 <UART_SetConfig+0x2b0>
 8006220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006224:	d824      	bhi.n	8006270 <UART_SetConfig+0x2e8>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <UART_SetConfig+0x2aa>
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622e:	d006      	beq.n	800623e <UART_SetConfig+0x2b6>
 8006230:	e01e      	b.n	8006270 <UART_SetConfig+0x2e8>
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e04b      	b.n	80062d0 <UART_SetConfig+0x348>
 8006238:	2302      	movs	r3, #2
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e048      	b.n	80062d0 <UART_SetConfig+0x348>
 800623e:	2304      	movs	r3, #4
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e045      	b.n	80062d0 <UART_SetConfig+0x348>
 8006244:	2308      	movs	r3, #8
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e042      	b.n	80062d0 <UART_SetConfig+0x348>
 800624a:	bf00      	nop
 800624c:	efff69f3 	.word	0xefff69f3
 8006250:	40011000 	.word	0x40011000
 8006254:	40023800 	.word	0x40023800
 8006258:	40004400 	.word	0x40004400
 800625c:	40004800 	.word	0x40004800
 8006260:	40004c00 	.word	0x40004c00
 8006264:	40005000 	.word	0x40005000
 8006268:	40011400 	.word	0x40011400
 800626c:	40007800 	.word	0x40007800
 8006270:	2310      	movs	r3, #16
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e02c      	b.n	80062d0 <UART_SetConfig+0x348>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a72      	ldr	r2, [pc, #456]	; (8006444 <UART_SetConfig+0x4bc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d125      	bne.n	80062cc <UART_SetConfig+0x344>
 8006280:	4b71      	ldr	r3, [pc, #452]	; (8006448 <UART_SetConfig+0x4c0>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800628a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800628e:	d017      	beq.n	80062c0 <UART_SetConfig+0x338>
 8006290:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006294:	d817      	bhi.n	80062c6 <UART_SetConfig+0x33e>
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629a:	d00b      	beq.n	80062b4 <UART_SetConfig+0x32c>
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a0:	d811      	bhi.n	80062c6 <UART_SetConfig+0x33e>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <UART_SetConfig+0x326>
 80062a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062aa:	d006      	beq.n	80062ba <UART_SetConfig+0x332>
 80062ac:	e00b      	b.n	80062c6 <UART_SetConfig+0x33e>
 80062ae:	2300      	movs	r3, #0
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e00d      	b.n	80062d0 <UART_SetConfig+0x348>
 80062b4:	2302      	movs	r3, #2
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e00a      	b.n	80062d0 <UART_SetConfig+0x348>
 80062ba:	2304      	movs	r3, #4
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e007      	b.n	80062d0 <UART_SetConfig+0x348>
 80062c0:	2308      	movs	r3, #8
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e004      	b.n	80062d0 <UART_SetConfig+0x348>
 80062c6:	2310      	movs	r3, #16
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e001      	b.n	80062d0 <UART_SetConfig+0x348>
 80062cc:	2310      	movs	r3, #16
 80062ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d8:	d15b      	bne.n	8006392 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062da:	7ffb      	ldrb	r3, [r7, #31]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d828      	bhi.n	8006332 <UART_SetConfig+0x3aa>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <UART_SetConfig+0x360>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006315 	.word	0x08006315
 80062f0:	0800631d 	.word	0x0800631d
 80062f4:	08006333 	.word	0x08006333
 80062f8:	08006323 	.word	0x08006323
 80062fc:	08006333 	.word	0x08006333
 8006300:	08006333 	.word	0x08006333
 8006304:	08006333 	.word	0x08006333
 8006308:	0800632b 	.word	0x0800632b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630c:	f7fe fe8c 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8006310:	61b8      	str	r0, [r7, #24]
        break;
 8006312:	e013      	b.n	800633c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006314:	f7fe fe9c 	bl	8005050 <HAL_RCC_GetPCLK2Freq>
 8006318:	61b8      	str	r0, [r7, #24]
        break;
 800631a:	e00f      	b.n	800633c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800631c:	4b4b      	ldr	r3, [pc, #300]	; (800644c <UART_SetConfig+0x4c4>)
 800631e:	61bb      	str	r3, [r7, #24]
        break;
 8006320:	e00c      	b.n	800633c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006322:	f7fe fd6f 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8006326:	61b8      	str	r0, [r7, #24]
        break;
 8006328:	e008      	b.n	800633c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632e:	61bb      	str	r3, [r7, #24]
        break;
 8006330:	e004      	b.n	800633c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	77bb      	strb	r3, [r7, #30]
        break;
 800633a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d074      	beq.n	800642c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	005a      	lsls	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b0f      	cmp	r3, #15
 800635c:	d916      	bls.n	800638c <UART_SetConfig+0x404>
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006364:	d212      	bcs.n	800638c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f023 030f 	bic.w	r3, r3, #15
 800636e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	b29b      	uxth	r3, r3
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	b29a      	uxth	r2, r3
 800637c:	89fb      	ldrh	r3, [r7, #14]
 800637e:	4313      	orrs	r3, r2
 8006380:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	89fa      	ldrh	r2, [r7, #14]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	e04f      	b.n	800642c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	77bb      	strb	r3, [r7, #30]
 8006390:	e04c      	b.n	800642c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d828      	bhi.n	80063ea <UART_SetConfig+0x462>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <UART_SetConfig+0x418>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063d5 	.word	0x080063d5
 80063ac:	080063eb 	.word	0x080063eb
 80063b0:	080063db 	.word	0x080063db
 80063b4:	080063eb 	.word	0x080063eb
 80063b8:	080063eb 	.word	0x080063eb
 80063bc:	080063eb 	.word	0x080063eb
 80063c0:	080063e3 	.word	0x080063e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c4:	f7fe fe30 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 80063c8:	61b8      	str	r0, [r7, #24]
        break;
 80063ca:	e013      	b.n	80063f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063cc:	f7fe fe40 	bl	8005050 <HAL_RCC_GetPCLK2Freq>
 80063d0:	61b8      	str	r0, [r7, #24]
        break;
 80063d2:	e00f      	b.n	80063f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d4:	4b1d      	ldr	r3, [pc, #116]	; (800644c <UART_SetConfig+0x4c4>)
 80063d6:	61bb      	str	r3, [r7, #24]
        break;
 80063d8:	e00c      	b.n	80063f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063da:	f7fe fd13 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 80063de:	61b8      	str	r0, [r7, #24]
        break;
 80063e0:	e008      	b.n	80063f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	61bb      	str	r3, [r7, #24]
        break;
 80063e8:	e004      	b.n	80063f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	77bb      	strb	r3, [r7, #30]
        break;
 80063f2:	bf00      	nop
    }

    if (pclk != 0U)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d018      	beq.n	800642c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	085a      	lsrs	r2, r3, #1
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	441a      	add	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	fbb2 f3f3 	udiv	r3, r2, r3
 800640c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b0f      	cmp	r3, #15
 8006412:	d909      	bls.n	8006428 <UART_SetConfig+0x4a0>
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641a:	d205      	bcs.n	8006428 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	b29a      	uxth	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e001      	b.n	800642c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006438:	7fbb      	ldrb	r3, [r7, #30]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40007c00 	.word	0x40007c00
 8006448:	40023800 	.word	0x40023800
 800644c:	00f42400 	.word	0x00f42400

08006450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01a      	beq.n	8006566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654e:	d10a      	bne.n	8006566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af02      	add	r7, sp, #8
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065a4:	f7fb ff7e 	bl	80024a4 <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d10e      	bne.n	80065d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f831 	bl	800662e <UART_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e027      	b.n	8006626 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d10e      	bne.n	8006602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f81b 	bl	800662e <UART_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e011      	b.n	8006626 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b09c      	sub	sp, #112	; 0x70
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663e:	e0a7      	b.n	8006790 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	f000 80a3 	beq.w	8006790 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664a:	f7fb ff2b 	bl	80024a4 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <UART_WaitOnFlagUntilTimeout+0x32>
 800665a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665c:	2b00      	cmp	r3, #0
 800665e:	d13f      	bne.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006674:	667b      	str	r3, [r7, #100]	; 0x64
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006680:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800668c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e6      	bne.n	8006660 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	663b      	str	r3, [r7, #96]	; 0x60
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80066b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e068      	b.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d050      	beq.n	8006790 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fc:	d148      	bne.n	8006790 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006706:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800671c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
 8006728:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800672c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e6      	bne.n	8006708 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	613b      	str	r3, [r7, #16]
   return(result);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	66bb      	str	r3, [r7, #104]	; 0x68
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800675a:	623a      	str	r2, [r7, #32]
 800675c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	69f9      	ldr	r1, [r7, #28]
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	61bb      	str	r3, [r7, #24]
   return(result);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e010      	b.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	f43f af48 	beq.w	8006640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3770      	adds	r7, #112	; 0x70
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067bc:	b084      	sub	sp, #16
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	f107 001c 	add.w	r0, r7, #28
 80067ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d120      	bne.n	8006816 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <USB_CoreInit+0xac>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d105      	bne.n	800680a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fbee 	bl	8007fec <USB_CoreReset>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
 8006814:	e010      	b.n	8006838 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fbe2 	bl	8007fec <USB_CoreReset>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10b      	bne.n	8006856 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f043 0206 	orr.w	r2, r3, #6
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006862:	b004      	add	sp, #16
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	ffbdffbf 	.word	0xffbdffbf

0800686c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d165      	bne.n	800694c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4a41      	ldr	r2, [pc, #260]	; (8006988 <USB_SetTurnaroundTime+0x11c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d906      	bls.n	8006896 <USB_SetTurnaroundTime+0x2a>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4a40      	ldr	r2, [pc, #256]	; (800698c <USB_SetTurnaroundTime+0x120>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d202      	bcs.n	8006896 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006890:	230f      	movs	r3, #15
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e062      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4a3c      	ldr	r2, [pc, #240]	; (800698c <USB_SetTurnaroundTime+0x120>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d306      	bcc.n	80068ac <USB_SetTurnaroundTime+0x40>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4a3b      	ldr	r2, [pc, #236]	; (8006990 <USB_SetTurnaroundTime+0x124>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d202      	bcs.n	80068ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068a6:	230e      	movs	r3, #14
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e057      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a38      	ldr	r2, [pc, #224]	; (8006990 <USB_SetTurnaroundTime+0x124>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d306      	bcc.n	80068c2 <USB_SetTurnaroundTime+0x56>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a37      	ldr	r2, [pc, #220]	; (8006994 <USB_SetTurnaroundTime+0x128>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d202      	bcs.n	80068c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068bc:	230d      	movs	r3, #13
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e04c      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a33      	ldr	r2, [pc, #204]	; (8006994 <USB_SetTurnaroundTime+0x128>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d306      	bcc.n	80068d8 <USB_SetTurnaroundTime+0x6c>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a32      	ldr	r2, [pc, #200]	; (8006998 <USB_SetTurnaroundTime+0x12c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d802      	bhi.n	80068d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068d2:	230c      	movs	r3, #12
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e041      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a2f      	ldr	r2, [pc, #188]	; (8006998 <USB_SetTurnaroundTime+0x12c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d906      	bls.n	80068ee <USB_SetTurnaroundTime+0x82>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a2e      	ldr	r2, [pc, #184]	; (800699c <USB_SetTurnaroundTime+0x130>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d802      	bhi.n	80068ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068e8:	230b      	movs	r3, #11
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e036      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a2a      	ldr	r2, [pc, #168]	; (800699c <USB_SetTurnaroundTime+0x130>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d906      	bls.n	8006904 <USB_SetTurnaroundTime+0x98>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a29      	ldr	r2, [pc, #164]	; (80069a0 <USB_SetTurnaroundTime+0x134>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d802      	bhi.n	8006904 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068fe:	230a      	movs	r3, #10
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	e02b      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <USB_SetTurnaroundTime+0x134>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d906      	bls.n	800691a <USB_SetTurnaroundTime+0xae>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <USB_SetTurnaroundTime+0x138>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d202      	bcs.n	800691a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006914:	2309      	movs	r3, #9
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e020      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <USB_SetTurnaroundTime+0x138>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d306      	bcc.n	8006930 <USB_SetTurnaroundTime+0xc4>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <USB_SetTurnaroundTime+0x13c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d802      	bhi.n	8006930 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800692a:	2308      	movs	r3, #8
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e015      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <USB_SetTurnaroundTime+0x13c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d906      	bls.n	8006946 <USB_SetTurnaroundTime+0xda>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <USB_SetTurnaroundTime+0x140>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d202      	bcs.n	8006946 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006940:	2307      	movs	r3, #7
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e00a      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006946:	2306      	movs	r3, #6
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e007      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006952:	2309      	movs	r3, #9
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	e001      	b.n	800695c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006958:	2309      	movs	r3, #9
 800695a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	029b      	lsls	r3, r3, #10
 8006970:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006974:	431a      	orrs	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	00d8acbf 	.word	0x00d8acbf
 800698c:	00e4e1c0 	.word	0x00e4e1c0
 8006990:	00f42400 	.word	0x00f42400
 8006994:	01067380 	.word	0x01067380
 8006998:	011a499f 	.word	0x011a499f
 800699c:	01312cff 	.word	0x01312cff
 80069a0:	014ca43f 	.word	0x014ca43f
 80069a4:	016e3600 	.word	0x016e3600
 80069a8:	01a6ab1f 	.word	0x01a6ab1f
 80069ac:	01e84800 	.word	0x01e84800

080069b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f043 0201 	orr.w	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d115      	bne.n	8006a42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a22:	2001      	movs	r0, #1
 8006a24:	f7fb fd4a 	bl	80024bc <HAL_Delay>
      ms++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fa4b 	bl	8007eca <USB_GetMode>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d01e      	beq.n	8006a78 <USB_SetCurrentMode+0x84>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b31      	cmp	r3, #49	; 0x31
 8006a3e:	d9f0      	bls.n	8006a22 <USB_SetCurrentMode+0x2e>
 8006a40:	e01a      	b.n	8006a78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d115      	bne.n	8006a74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a54:	2001      	movs	r0, #1
 8006a56:	f7fb fd31 	bl	80024bc <HAL_Delay>
      ms++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fa32 	bl	8007eca <USB_GetMode>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <USB_SetCurrentMode+0x84>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b31      	cmp	r3, #49	; 0x31
 8006a70:	d9f0      	bls.n	8006a54 <USB_SetCurrentMode+0x60>
 8006a72:	e001      	b.n	8006a78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e005      	b.n	8006a84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b32      	cmp	r3, #50	; 0x32
 8006a7c:	d101      	bne.n	8006a82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	e009      	b.n	8006ac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3340      	adds	r3, #64	; 0x40
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	3301      	adds	r3, #1
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b0e      	cmp	r3, #14
 8006ac4:	d9f2      	bls.n	8006aac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11c      	bne.n	8006b06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ada:	f043 0302 	orr.w	r3, r3, #2
 8006ade:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e005      	b.n	8006b12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b24:	4619      	mov	r1, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	680b      	ldr	r3, [r1, #0]
 8006b30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d10c      	bne.n	8006b52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f965 	bl	8006e10 <USB_SetDevSpeed>
 8006b46:	e008      	b.n	8006b5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f960 	bl	8006e10 <USB_SetDevSpeed>
 8006b50:	e003      	b.n	8006b5a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b52:	2103      	movs	r1, #3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f95b 	bl	8006e10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f8f3 	bl	8006d48 <USB_FlushTxFifo>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f91f 	bl	8006db0 <USB_FlushRxFifo>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b82:	461a      	mov	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	e043      	b.n	8006c2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bbc:	d118      	bne.n	8006bf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e013      	b.n	8006c02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	461a      	mov	r2, r3
 8006be8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e008      	b.n	8006c02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	461a      	mov	r2, r3
 8006c10:	2300      	movs	r3, #0
 8006c12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	461a      	mov	r2, r3
 8006c22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d3b7      	bcc.n	8006ba6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	e043      	b.n	8006cc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c52:	d118      	bne.n	8006c86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e013      	b.n	8006c98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	e008      	b.n	8006c98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c92:	461a      	mov	r2, r3
 8006c94:	2300      	movs	r3, #0
 8006c96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	613b      	str	r3, [r7, #16]
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d3b7      	bcc.n	8006c3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f043 0210 	orr.w	r2, r3, #16
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <USB_DevInit+0x2b4>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	f043 0208 	orr.w	r2, r3, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <USB_DevInit+0x2b8>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d3c:	b004      	add	sp, #16
 8006d3e:	4770      	bx	lr
 8006d40:	803c3800 	.word	0x803c3800
 8006d44:	40000004 	.word	0x40000004

08006d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a13      	ldr	r2, [pc, #76]	; (8006dac <USB_FlushTxFifo+0x64>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d901      	bls.n	8006d68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e01b      	b.n	8006da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	daf2      	bge.n	8006d56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	019b      	lsls	r3, r3, #6
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a08      	ldr	r2, [pc, #32]	; (8006dac <USB_FlushTxFifo+0x64>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e006      	b.n	8006da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d0f0      	beq.n	8006d80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	00030d40 	.word	0x00030d40

08006db0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <USB_FlushRxFifo+0x5c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e018      	b.n	8006e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	daf2      	bge.n	8006dbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2210      	movs	r2, #16
 8006dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4a08      	ldr	r2, [pc, #32]	; (8006e0c <USB_FlushRxFifo+0x5c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e006      	b.n	8006e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d0f0      	beq.n	8006de0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	00030d40 	.word	0x00030d40

08006e10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4313      	orrs	r3, r2
 8006e32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]
 8006e66:	e00a      	b.n	8006e7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d002      	beq.n	8006e74 <USB_GetDevSpeed+0x32>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b06      	cmp	r3, #6
 8006e72:	d102      	bne.n	8006e7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e74:	2302      	movs	r3, #2
 8006e76:	75fb      	strb	r3, [r7, #23]
 8006e78:	e001      	b.n	8006e7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e7a:	230f      	movs	r3, #15
 8006e7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d139      	bne.n	8006f1c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	69da      	ldr	r2, [r3, #28]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	2101      	movs	r1, #1
 8006eba:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	68f9      	ldr	r1, [r7, #12]
 8006ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d153      	bne.n	8006f88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	791b      	ldrb	r3, [r3, #4]
 8006efa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006efc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	059b      	lsls	r3, r3, #22
 8006f02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f04:	431a      	orrs	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	0159      	lsls	r1, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	440b      	add	r3, r1
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	4619      	mov	r1, r3
 8006f14:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <USB_ActivateEndpoint+0x10c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]
 8006f1a:	e035      	b.n	8006f88 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	68f9      	ldr	r1, [r7, #12]
 8006f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d119      	bne.n	8006f88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f70:	430b      	orrs	r3, r1
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	0159      	lsls	r1, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	440b      	add	r3, r1
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	4619      	mov	r1, r3
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <USB_ActivateEndpoint+0x10c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	10008000 	.word	0x10008000

08006f9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d161      	bne.n	800707c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fce:	d11f      	bne.n	8007010 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800700e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	2101      	movs	r1, #1
 8007022:	fa01 f303 	lsl.w	r3, r1, r3
 8007026:	b29b      	uxth	r3, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	68f9      	ldr	r1, [r7, #12]
 800702c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007030:	4013      	ands	r3, r2
 8007032:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	2101      	movs	r1, #1
 8007046:	fa01 f303 	lsl.w	r3, r1, r3
 800704a:	b29b      	uxth	r3, r3
 800704c:	43db      	mvns	r3, r3
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007054:	4013      	ands	r3, r2
 8007056:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	0159      	lsls	r1, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	440b      	add	r3, r1
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	4619      	mov	r1, r3
 8007074:	4b35      	ldr	r3, [pc, #212]	; (800714c <USB_DeactivateEndpoint+0x1b0>)
 8007076:	4013      	ands	r3, r2
 8007078:	600b      	str	r3, [r1, #0]
 800707a:	e060      	b.n	800713e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007092:	d11f      	bne.n	80070d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	43db      	mvns	r3, r3
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f4:	4013      	ands	r3, r2
 80070f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	69da      	ldr	r2, [r3, #28]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	43db      	mvns	r3, r3
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007118:	4013      	ands	r3, r2
 800711a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	0159      	lsls	r1, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	440b      	add	r3, r1
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	4619      	mov	r1, r3
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <USB_DeactivateEndpoint+0x1b4>)
 800713a:	4013      	ands	r3, r2
 800713c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	ec337800 	.word	0xec337800
 8007150:	eff37800 	.word	0xeff37800

08007154 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	f040 8163 	bne.w	800743c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d132      	bne.n	80071e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	0159      	lsls	r1, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	440b      	add	r3, r1
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	4619      	mov	r1, r3
 800719a:	4ba5      	ldr	r3, [pc, #660]	; (8007430 <USB_EPStartXfer+0x2dc>)
 800719c:	4013      	ands	r3, r2
 800719e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	0159      	lsls	r1, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	440b      	add	r3, r1
 80071d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071da:	4619      	mov	r1, r3
 80071dc:	4b95      	ldr	r3, [pc, #596]	; (8007434 <USB_EPStartXfer+0x2e0>)
 80071de:	4013      	ands	r3, r2
 80071e0:	610b      	str	r3, [r1, #16]
 80071e2:	e074      	b.n	80072ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	0159      	lsls	r1, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	440b      	add	r3, r1
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	4619      	mov	r1, r3
 8007200:	4b8c      	ldr	r3, [pc, #560]	; (8007434 <USB_EPStartXfer+0x2e0>)
 8007202:	4013      	ands	r3, r2
 8007204:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	0159      	lsls	r1, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	440b      	add	r3, r1
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	4619      	mov	r1, r3
 8007222:	4b83      	ldr	r3, [pc, #524]	; (8007430 <USB_EPStartXfer+0x2dc>)
 8007224:	4013      	ands	r3, r2
 8007226:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6999      	ldr	r1, [r3, #24]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	440b      	add	r3, r1
 8007240:	1e59      	subs	r1, r3, #1
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	fbb1 f3f3 	udiv	r3, r1, r3
 800724a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800724c:	4b7a      	ldr	r3, [pc, #488]	; (8007438 <USB_EPStartXfer+0x2e4>)
 800724e:	400b      	ands	r3, r1
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	0148      	lsls	r0, r1, #5
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	4401      	add	r1, r0
 8007258:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800725c:	4313      	orrs	r3, r2
 800725e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007276:	69b9      	ldr	r1, [r7, #24]
 8007278:	0148      	lsls	r0, r1, #5
 800727a:	69f9      	ldr	r1, [r7, #28]
 800727c:	4401      	add	r1, r0
 800727e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007282:	4313      	orrs	r3, r2
 8007284:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	791b      	ldrb	r3, [r3, #4]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d11f      	bne.n	80072ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d14b      	bne.n	800736c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	791b      	ldrb	r3, [r3, #4]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d128      	bne.n	800734a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d110      	bne.n	800732a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	e00f      	b.n	800734a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007348:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e137      	b.n	80075dc <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800738a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	791b      	ldrb	r3, [r3, #4]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d015      	beq.n	80073c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 811f 	beq.w	80075dc <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	2101      	movs	r1, #1
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ba:	4313      	orrs	r3, r2
 80073bc:	634b      	str	r3, [r1, #52]	; 0x34
 80073be:	e10d      	b.n	80075dc <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d110      	bne.n	80073f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e00f      	b.n	8007412 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007410:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6919      	ldr	r1, [r3, #16]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	b298      	uxth	r0, r3
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	4603      	mov	r3, r0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 faea 	bl	8007a00 <USB_WritePacket>
 800742c:	e0d6      	b.n	80075dc <USB_EPStartXfer+0x488>
 800742e:	bf00      	nop
 8007430:	e007ffff 	.word	0xe007ffff
 8007434:	fff80000 	.word	0xfff80000
 8007438:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	0159      	lsls	r1, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	440b      	add	r3, r1
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	4619      	mov	r1, r3
 8007458:	4b63      	ldr	r3, [pc, #396]	; (80075e8 <USB_EPStartXfer+0x494>)
 800745a:	4013      	ands	r3, r2
 800745c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	0159      	lsls	r1, r3, #5
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	440b      	add	r3, r1
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	4619      	mov	r1, r3
 800747a:	4b5c      	ldr	r3, [pc, #368]	; (80075ec <USB_EPStartXfer+0x498>)
 800747c:	4013      	ands	r3, r2
 800747e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d123      	bne.n	80074d0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800749e:	69b9      	ldr	r1, [r7, #24]
 80074a0:	0148      	lsls	r0, r1, #5
 80074a2:	69f9      	ldr	r1, [r7, #28]
 80074a4:	4401      	add	r1, r0
 80074a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074aa:	4313      	orrs	r3, r2
 80074ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074cc:	6113      	str	r3, [r2, #16]
 80074ce:	e037      	b.n	8007540 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	1e5a      	subs	r2, r3, #1
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	8afa      	ldrh	r2, [r7, #22]
 80074ec:	fb03 f202 	mul.w	r2, r3, r2
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	8afb      	ldrh	r3, [r7, #22]
 8007504:	04d9      	lsls	r1, r3, #19
 8007506:	4b3a      	ldr	r3, [pc, #232]	; (80075f0 <USB_EPStartXfer+0x49c>)
 8007508:	400b      	ands	r3, r1
 800750a:	69b9      	ldr	r1, [r7, #24]
 800750c:	0148      	lsls	r0, r1, #5
 800750e:	69f9      	ldr	r1, [r7, #28]
 8007510:	4401      	add	r1, r0
 8007512:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007516:	4313      	orrs	r3, r2
 8007518:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007530:	69b9      	ldr	r1, [r7, #24]
 8007532:	0148      	lsls	r0, r1, #5
 8007534:	69f9      	ldr	r1, [r7, #28]
 8007536:	4401      	add	r1, r0
 8007538:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800753c:	4313      	orrs	r3, r2
 800753e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d10d      	bne.n	8007562 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6919      	ldr	r1, [r3, #16]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	460a      	mov	r2, r1
 8007560:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	791b      	ldrb	r3, [r3, #4]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d128      	bne.n	80075bc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d110      	bne.n	800759c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	440a      	add	r2, r1
 8007590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e00f      	b.n	80075bc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	fff80000 	.word	0xfff80000
 80075ec:	e007ffff 	.word	0xe007ffff
 80075f0:	1ff80000 	.word	0x1ff80000

080075f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b01      	cmp	r3, #1
 8007612:	f040 80ce 	bne.w	80077b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d132      	bne.n	8007684 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	0159      	lsls	r1, r3, #5
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	440b      	add	r3, r1
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	4619      	mov	r1, r3
 800763a:	4b9a      	ldr	r3, [pc, #616]	; (80078a4 <USB_EP0StartXfer+0x2b0>)
 800763c:	4013      	ands	r3, r2
 800763e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800765e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	0159      	lsls	r1, r3, #5
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	440b      	add	r3, r1
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	4619      	mov	r1, r3
 800767c:	4b8a      	ldr	r3, [pc, #552]	; (80078a8 <USB_EP0StartXfer+0x2b4>)
 800767e:	4013      	ands	r3, r2
 8007680:	610b      	str	r3, [r1, #16]
 8007682:	e04e      	b.n	8007722 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	0159      	lsls	r1, r3, #5
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	440b      	add	r3, r1
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	4619      	mov	r1, r3
 80076a0:	4b81      	ldr	r3, [pc, #516]	; (80078a8 <USB_EP0StartXfer+0x2b4>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	0159      	lsls	r1, r3, #5
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	4619      	mov	r1, r3
 80076c2:	4b78      	ldr	r3, [pc, #480]	; (80078a4 <USB_EP0StartXfer+0x2b0>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d903      	bls.n	80076dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007712:	6939      	ldr	r1, [r7, #16]
 8007714:	0148      	lsls	r0, r1, #5
 8007716:	6979      	ldr	r1, [r7, #20]
 8007718:	4401      	add	r1, r0
 800771a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800771e:	4313      	orrs	r3, r2
 8007720:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d11e      	bne.n	8007766 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e097      	b.n	8007896 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	440a      	add	r2, r1
 800777c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007784:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8083 	beq.w	8007896 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ac:	4313      	orrs	r3, r2
 80077ae:	634b      	str	r3, [r1, #52]	; 0x34
 80077b0:	e071      	b.n	8007896 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	0159      	lsls	r1, r3, #5
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	440b      	add	r3, r1
 80077c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077cc:	4619      	mov	r1, r3
 80077ce:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <USB_EP0StartXfer+0x2b4>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	0159      	lsls	r1, r3, #5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	440b      	add	r3, r1
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	4619      	mov	r1, r3
 80077f0:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <USB_EP0StartXfer+0x2b0>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800782c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007844:	6939      	ldr	r1, [r7, #16]
 8007846:	0148      	lsls	r0, r1, #5
 8007848:	6979      	ldr	r1, [r7, #20]
 800784a:	4401      	add	r1, r0
 800784c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007850:	4313      	orrs	r3, r2
 8007852:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d10d      	bne.n	8007876 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6919      	ldr	r1, [r3, #16]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007872:	460a      	mov	r2, r1
 8007874:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	440a      	add	r2, r1
 800788c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007890:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007894:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	e007ffff 	.word	0xe007ffff
 80078a8:	fff80000 	.word	0xfff80000

080078ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d14a      	bne.n	8007960 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e2:	f040 8086 	bne.w	80079f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	7812      	ldrb	r2, [r2, #0]
 80078fa:	0151      	lsls	r1, r2, #5
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	440a      	add	r2, r1
 8007900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007908:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800792c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f242 7210 	movw	r2, #10000	; 0x2710
 800793a:	4293      	cmp	r3, r2
 800793c:	d902      	bls.n	8007944 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
          break;
 8007942:	e056      	b.n	80079f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800795c:	d0e7      	beq.n	800792e <USB_EPStopXfer+0x82>
 800795e:	e048      	b.n	80079f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007978:	d13b      	bne.n	80079f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	7812      	ldrb	r2, [r2, #0]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007998:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800799c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d902      	bls.n	80079d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	75fb      	strb	r3, [r7, #23]
          break;
 80079d6:	e00c      	b.n	80079f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f0:	d0e7      	beq.n	80079c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	460b      	mov	r3, r1
 8007a10:	71fb      	strb	r3, [r7, #7]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d123      	bne.n	8007a6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a26:	88bb      	ldrh	r3, [r7, #4]
 8007a28:	3303      	adds	r3, #3
 8007a2a:	089b      	lsrs	r3, r3, #2
 8007a2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e018      	b.n	8007a66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	031a      	lsls	r2, r3, #12
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a40:	461a      	mov	r2, r3
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	3301      	adds	r3, #1
 8007a52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	3301      	adds	r3, #1
 8007a58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d3e2      	bcc.n	8007a34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3724      	adds	r7, #36	; 0x24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b08b      	sub	sp, #44	; 0x2c
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	089b      	lsrs	r3, r3, #2
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	623b      	str	r3, [r7, #32]
 8007aa6:	e014      	b.n	8007ad2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	3301      	adds	r3, #1
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	3301      	adds	r3, #1
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	623b      	str	r3, [r7, #32]
 8007ad2:	6a3a      	ldr	r2, [r7, #32]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d3e6      	bcc.n	8007aa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ada:	8bfb      	ldrh	r3, [r7, #30]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01e      	beq.n	8007b1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aea:	461a      	mov	r2, r3
 8007aec:	f107 0310 	add.w	r3, r7, #16
 8007af0:	6812      	ldr	r2, [r2, #0]
 8007af2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	fa22 f303 	lsr.w	r3, r2, r3
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	701a      	strb	r2, [r3, #0]
      i++;
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b12:	8bfb      	ldrh	r3, [r7, #30]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b18:	8bfb      	ldrh	r3, [r7, #30]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1ea      	bne.n	8007af4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	372c      	adds	r7, #44	; 0x2c
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d12c      	bne.n	8007ba2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	db12      	blt.n	8007b80 <USB_EPSetStall+0x54>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e02b      	b.n	8007bfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	db12      	blt.n	8007bda <USB_EPSetStall+0xae>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00f      	beq.n	8007bda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d128      	bne.n	8007c76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	791b      	ldrb	r3, [r3, #4]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d003      	beq.n	8007c54 <USB_EPClearStall+0x4c>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	791b      	ldrb	r3, [r3, #4]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d138      	bne.n	8007cc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	e027      	b.n	8007cc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d003      	beq.n	8007ca6 <USB_EPClearStall+0x9e>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d10f      	bne.n	8007cc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cf6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d08:	68f9      	ldr	r1, [r7, #12]
 8007d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4e:	f023 0302 	bic.w	r3, r3, #2
 8007d52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d90:	f043 0302 	orr.w	r3, r3, #2
 8007d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4013      	ands	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	4013      	ands	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	0c1b      	lsrs	r3, r3, #16
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	b29b      	uxth	r3, r3
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e60:	68bb      	ldr	r3, [r7, #8]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	01db      	lsls	r3, r3, #7
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f02:	4619      	mov	r1, r3
 8007f04:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <USB_ActivateSetup+0x44>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	fffff800 	.word	0xfffff800

08007f30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	333c      	adds	r3, #60	; 0x3c
 8007f46:	3304      	adds	r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4a26      	ldr	r2, [pc, #152]	; (8007fe8 <USB_EP0_OutStart+0xb8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d90a      	bls.n	8007f6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f64:	d101      	bne.n	8007f6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	e037      	b.n	8007fda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	461a      	mov	r2, r3
 8007f72:	2300      	movs	r3, #0
 8007f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f98:	f043 0318 	orr.w	r3, r3, #24
 8007f9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007fb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10f      	bne.n	8007fd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	4f54300a 	.word	0x4f54300a

08007fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4a13      	ldr	r2, [pc, #76]	; (8008050 <USB_CoreReset+0x64>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e01b      	b.n	8008042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	daf2      	bge.n	8007ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f043 0201 	orr.w	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a09      	ldr	r2, [pc, #36]	; (8008050 <USB_CoreReset+0x64>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d901      	bls.n	8008034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e006      	b.n	8008042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b01      	cmp	r3, #1
 800803e:	d0f0      	beq.n	8008022 <USB_CoreReset+0x36>

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	00030d40 	.word	0x00030d40

08008054 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008060:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008064:	f005 fd8a 	bl	800db7c <malloc>
 8008068:	4603      	mov	r3, r0
 800806a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	32b0      	adds	r2, #176	; 0xb0
 800807c:	2100      	movs	r1, #0
 800807e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008082:	2302      	movs	r3, #2
 8008084:	e0d4      	b.n	8008230 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008086:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800808a:	2100      	movs	r1, #0
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f005 fe31 	bl	800dcf4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	32b0      	adds	r2, #176	; 0xb0
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	32b0      	adds	r2, #176	; 0xb0
 80080ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7c1b      	ldrb	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d138      	bne.n	8008130 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080be:	4b5e      	ldr	r3, [pc, #376]	; (8008238 <USBD_CDC_Init+0x1e4>)
 80080c0:	7819      	ldrb	r1, [r3, #0]
 80080c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080c6:	2202      	movs	r2, #2
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f005 fbb4 	bl	800d836 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080ce:	4b5a      	ldr	r3, [pc, #360]	; (8008238 <USBD_CDC_Init+0x1e4>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f003 020f 	and.w	r2, r3, #15
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	3324      	adds	r3, #36	; 0x24
 80080e4:	2201      	movs	r2, #1
 80080e6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080e8:	4b54      	ldr	r3, [pc, #336]	; (800823c <USBD_CDC_Init+0x1e8>)
 80080ea:	7819      	ldrb	r1, [r3, #0]
 80080ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f0:	2202      	movs	r2, #2
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f005 fb9f 	bl	800d836 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080f8:	4b50      	ldr	r3, [pc, #320]	; (800823c <USBD_CDC_Init+0x1e8>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008110:	2201      	movs	r2, #1
 8008112:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008114:	4b4a      	ldr	r3, [pc, #296]	; (8008240 <USBD_CDC_Init+0x1ec>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 020f 	and.w	r2, r3, #15
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	3326      	adds	r3, #38	; 0x26
 800812a:	2210      	movs	r2, #16
 800812c:	801a      	strh	r2, [r3, #0]
 800812e:	e035      	b.n	800819c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008130:	4b41      	ldr	r3, [pc, #260]	; (8008238 <USBD_CDC_Init+0x1e4>)
 8008132:	7819      	ldrb	r1, [r3, #0]
 8008134:	2340      	movs	r3, #64	; 0x40
 8008136:	2202      	movs	r2, #2
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f005 fb7c 	bl	800d836 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800813e:	4b3e      	ldr	r3, [pc, #248]	; (8008238 <USBD_CDC_Init+0x1e4>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 020f 	and.w	r2, r3, #15
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	3324      	adds	r3, #36	; 0x24
 8008154:	2201      	movs	r2, #1
 8008156:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008158:	4b38      	ldr	r3, [pc, #224]	; (800823c <USBD_CDC_Init+0x1e8>)
 800815a:	7819      	ldrb	r1, [r3, #0]
 800815c:	2340      	movs	r3, #64	; 0x40
 800815e:	2202      	movs	r2, #2
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f005 fb68 	bl	800d836 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008166:	4b35      	ldr	r3, [pc, #212]	; (800823c <USBD_CDC_Init+0x1e8>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800817e:	2201      	movs	r2, #1
 8008180:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008182:	4b2f      	ldr	r3, [pc, #188]	; (8008240 <USBD_CDC_Init+0x1ec>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 020f 	and.w	r2, r3, #15
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	3326      	adds	r3, #38	; 0x26
 8008198:	2210      	movs	r2, #16
 800819a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800819c:	4b28      	ldr	r3, [pc, #160]	; (8008240 <USBD_CDC_Init+0x1ec>)
 800819e:	7819      	ldrb	r1, [r3, #0]
 80081a0:	2308      	movs	r3, #8
 80081a2:	2203      	movs	r2, #3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f005 fb46 	bl	800d836 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80081aa:	4b25      	ldr	r3, [pc, #148]	; (8008240 <USBD_CDC_Init+0x1ec>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f003 020f 	and.w	r2, r3, #15
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	3324      	adds	r3, #36	; 0x24
 80081c0:	2201      	movs	r2, #1
 80081c2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	33b0      	adds	r3, #176	; 0xb0
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80081fa:	2302      	movs	r3, #2
 80081fc:	e018      	b.n	8008230 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7c1b      	ldrb	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008206:	4b0d      	ldr	r3, [pc, #52]	; (800823c <USBD_CDC_Init+0x1e8>)
 8008208:	7819      	ldrb	r1, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f005 fbfd 	bl	800da14 <USBD_LL_PrepareReceive>
 800821a:	e008      	b.n	800822e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800821c:	4b07      	ldr	r3, [pc, #28]	; (800823c <USBD_CDC_Init+0x1e8>)
 800821e:	7819      	ldrb	r1, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008226:	2340      	movs	r3, #64	; 0x40
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f005 fbf3 	bl	800da14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000093 	.word	0x20000093
 800823c:	20000094 	.word	0x20000094
 8008240:	20000095 	.word	0x20000095

08008244 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008250:	4b3a      	ldr	r3, [pc, #232]	; (800833c <USBD_CDC_DeInit+0xf8>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f005 fb13 	bl	800d882 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800825c:	4b37      	ldr	r3, [pc, #220]	; (800833c <USBD_CDC_DeInit+0xf8>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	f003 020f 	and.w	r2, r3, #15
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	440b      	add	r3, r1
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008276:	4b32      	ldr	r3, [pc, #200]	; (8008340 <USBD_CDC_DeInit+0xfc>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f005 fb00 	bl	800d882 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <USBD_CDC_DeInit+0xfc>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	f003 020f 	and.w	r2, r3, #15
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800829a:	2200      	movs	r2, #0
 800829c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800829e:	4b29      	ldr	r3, [pc, #164]	; (8008344 <USBD_CDC_DeInit+0x100>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f005 faec 	bl	800d882 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80082aa:	4b26      	ldr	r3, [pc, #152]	; (8008344 <USBD_CDC_DeInit+0x100>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 020f 	and.w	r2, r3, #15
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	3324      	adds	r3, #36	; 0x24
 80082c0:	2200      	movs	r2, #0
 80082c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082c4:	4b1f      	ldr	r3, [pc, #124]	; (8008344 <USBD_CDC_DeInit+0x100>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 020f 	and.w	r2, r3, #15
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	3326      	adds	r3, #38	; 0x26
 80082da:	2200      	movs	r2, #0
 80082dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	32b0      	adds	r2, #176	; 0xb0
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01f      	beq.n	8008330 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	33b0      	adds	r3, #176	; 0xb0
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	32b0      	adds	r2, #176	; 0xb0
 800830e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008312:	4618      	mov	r0, r3
 8008314:	f005 fc3a 	bl	800db8c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	32b0      	adds	r2, #176	; 0xb0
 8008322:	2100      	movs	r1, #0
 8008324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000093 	.word	0x20000093
 8008340:	20000094 	.word	0x20000094
 8008344:	20000095 	.word	0x20000095

08008348 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32b0      	adds	r2, #176	; 0xb0
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e0bf      	b.n	80084f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008380:	2b00      	cmp	r3, #0
 8008382:	d050      	beq.n	8008426 <USBD_CDC_Setup+0xde>
 8008384:	2b20      	cmp	r3, #32
 8008386:	f040 80af 	bne.w	80084e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	88db      	ldrh	r3, [r3, #6]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d03a      	beq.n	8008408 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b25b      	sxtb	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	da1b      	bge.n	80083d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	33b0      	adds	r3, #176	; 0xb0
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80083b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	88d2      	ldrh	r2, [r2, #6]
 80083b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	2b07      	cmp	r3, #7
 80083c0:	bf28      	it	cs
 80083c2:	2307      	movcs	r3, #7
 80083c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	89fa      	ldrh	r2, [r7, #14]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fd6d 	bl	8009eac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083d2:	e090      	b.n	80084f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	785a      	ldrb	r2, [r3, #1]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	88db      	ldrh	r3, [r3, #6]
 80083e2:	2b3f      	cmp	r3, #63	; 0x3f
 80083e4:	d803      	bhi.n	80083ee <USBD_CDC_Setup+0xa6>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	88db      	ldrh	r3, [r3, #6]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	e000      	b.n	80083f0 <USBD_CDC_Setup+0xa8>
 80083ee:	2240      	movs	r2, #64	; 0x40
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083f6:	6939      	ldr	r1, [r7, #16]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80083fe:	461a      	mov	r2, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 fd7f 	bl	8009f04 <USBD_CtlPrepareRx>
      break;
 8008406:	e076      	b.n	80084f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	33b0      	adds	r3, #176	; 0xb0
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	7850      	ldrb	r0, [r2, #1]
 800841e:	2200      	movs	r2, #0
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	4798      	blx	r3
      break;
 8008424:	e067      	b.n	80084f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	2b0b      	cmp	r3, #11
 800842c:	d851      	bhi.n	80084d2 <USBD_CDC_Setup+0x18a>
 800842e:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <USBD_CDC_Setup+0xec>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008465 	.word	0x08008465
 8008438:	080084e1 	.word	0x080084e1
 800843c:	080084d3 	.word	0x080084d3
 8008440:	080084d3 	.word	0x080084d3
 8008444:	080084d3 	.word	0x080084d3
 8008448:	080084d3 	.word	0x080084d3
 800844c:	080084d3 	.word	0x080084d3
 8008450:	080084d3 	.word	0x080084d3
 8008454:	080084d3 	.word	0x080084d3
 8008458:	080084d3 	.word	0x080084d3
 800845c:	0800848f 	.word	0x0800848f
 8008460:	080084b9 	.word	0x080084b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b03      	cmp	r3, #3
 800846e:	d107      	bne.n	8008480 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008470:	f107 030a 	add.w	r3, r7, #10
 8008474:	2202      	movs	r2, #2
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 fd17 	bl	8009eac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800847e:	e032      	b.n	80084e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 fca1 	bl	8009dca <USBD_CtlError>
            ret = USBD_FAIL;
 8008488:	2303      	movs	r3, #3
 800848a:	75fb      	strb	r3, [r7, #23]
          break;
 800848c:	e02b      	b.n	80084e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b03      	cmp	r3, #3
 8008498:	d107      	bne.n	80084aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800849a:	f107 030d 	add.w	r3, r7, #13
 800849e:	2201      	movs	r2, #1
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fd02 	bl	8009eac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084a8:	e01d      	b.n	80084e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 fc8c 	bl	8009dca <USBD_CtlError>
            ret = USBD_FAIL;
 80084b2:	2303      	movs	r3, #3
 80084b4:	75fb      	strb	r3, [r7, #23]
          break;
 80084b6:	e016      	b.n	80084e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d00f      	beq.n	80084e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fc7f 	bl	8009dca <USBD_CtlError>
            ret = USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084d0:	e008      	b.n	80084e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fc78 	bl	8009dca <USBD_CtlError>
          ret = USBD_FAIL;
 80084da:	2303      	movs	r3, #3
 80084dc:	75fb      	strb	r3, [r7, #23]
          break;
 80084de:	e002      	b.n	80084e6 <USBD_CDC_Setup+0x19e>
          break;
 80084e0:	bf00      	nop
 80084e2:	e008      	b.n	80084f6 <USBD_CDC_Setup+0x1ae>
          break;
 80084e4:	bf00      	nop
      }
      break;
 80084e6:	e006      	b.n	80084f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 fc6d 	bl	8009dca <USBD_CtlError>
      ret = USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	75fb      	strb	r3, [r7, #23]
      break;
 80084f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008512:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	32b0      	adds	r2, #176	; 0xb0
 800851e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008526:	2303      	movs	r3, #3
 8008528:	e065      	b.n	80085f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	32b0      	adds	r2, #176	; 0xb0
 8008534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008538:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	f003 020f 	and.w	r2, r3, #15
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3318      	adds	r3, #24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d02f      	beq.n	80085b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	f003 020f 	and.w	r2, r3, #15
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	3318      	adds	r3, #24
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	f003 010f 	and.w	r1, r3, #15
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	460b      	mov	r3, r1
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	440b      	add	r3, r1
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4403      	add	r3, r0
 800857c:	3348      	adds	r3, #72	; 0x48
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	fbb2 f1f3 	udiv	r1, r2, r3
 8008584:	fb01 f303 	mul.w	r3, r1, r3
 8008588:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800858a:	2b00      	cmp	r3, #0
 800858c:	d112      	bne.n	80085b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3318      	adds	r3, #24
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085a6:	78f9      	ldrb	r1, [r7, #3]
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f005 fa10 	bl	800d9d2 <USBD_LL_Transmit>
 80085b2:	e01f      	b.n	80085f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	33b0      	adds	r3, #176	; 0xb0
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d010      	beq.n	80085f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	33b0      	adds	r3, #176	; 0xb0
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	32b0      	adds	r2, #176	; 0xb0
 8008614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008618:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	32b0      	adds	r2, #176	; 0xb0
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800862c:	2303      	movs	r3, #3
 800862e:	e01a      	b.n	8008666 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f005 fa0e 	bl	800da56 <USBD_LL_GetRxDataSize>
 800863a:	4602      	mov	r2, r0
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	33b0      	adds	r3, #176	; 0xb0
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008660:	4611      	mov	r1, r2
 8008662:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	32b0      	adds	r2, #176	; 0xb0
 8008680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008684:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800868c:	2303      	movs	r3, #3
 800868e:	e025      	b.n	80086dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	33b0      	adds	r3, #176	; 0xb0
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01a      	beq.n	80086da <USBD_CDC_EP0_RxReady+0x6c>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086aa:	2bff      	cmp	r3, #255	; 0xff
 80086ac:	d015      	beq.n	80086da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	33b0      	adds	r3, #176	; 0xb0
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80086c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086ce:	b292      	uxth	r2, r2
 80086d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086ec:	2182      	movs	r1, #130	; 0x82
 80086ee:	4818      	ldr	r0, [pc, #96]	; (8008750 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086f0:	f000 fd09 	bl	8009106 <USBD_GetEpDesc>
 80086f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086f6:	2101      	movs	r1, #1
 80086f8:	4815      	ldr	r0, [pc, #84]	; (8008750 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086fa:	f000 fd04 	bl	8009106 <USBD_GetEpDesc>
 80086fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008700:	2181      	movs	r1, #129	; 0x81
 8008702:	4813      	ldr	r0, [pc, #76]	; (8008750 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008704:	f000 fcff 	bl	8009106 <USBD_GetEpDesc>
 8008708:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2210      	movs	r2, #16
 8008714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2200      	movs	r2, #0
 8008720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008724:	711a      	strb	r2, [r3, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008738:	711a      	strb	r2, [r3, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2243      	movs	r2, #67	; 0x43
 8008742:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000050 	.word	0x20000050

08008754 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800875c:	2182      	movs	r1, #130	; 0x82
 800875e:	4818      	ldr	r0, [pc, #96]	; (80087c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008760:	f000 fcd1 	bl	8009106 <USBD_GetEpDesc>
 8008764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008766:	2101      	movs	r1, #1
 8008768:	4815      	ldr	r0, [pc, #84]	; (80087c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800876a:	f000 fccc 	bl	8009106 <USBD_GetEpDesc>
 800876e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008770:	2181      	movs	r1, #129	; 0x81
 8008772:	4813      	ldr	r0, [pc, #76]	; (80087c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008774:	f000 fcc7 	bl	8009106 <USBD_GetEpDesc>
 8008778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2210      	movs	r2, #16
 8008784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2200      	movs	r2, #0
 8008790:	711a      	strb	r2, [r3, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f042 0202 	orr.w	r2, r2, #2
 8008798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	711a      	strb	r2, [r3, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f042 0202 	orr.w	r2, r2, #2
 80087ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2243      	movs	r2, #67	; 0x43
 80087b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000050 	.word	0x20000050

080087c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087cc:	2182      	movs	r1, #130	; 0x82
 80087ce:	4818      	ldr	r0, [pc, #96]	; (8008830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087d0:	f000 fc99 	bl	8009106 <USBD_GetEpDesc>
 80087d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087d6:	2101      	movs	r1, #1
 80087d8:	4815      	ldr	r0, [pc, #84]	; (8008830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087da:	f000 fc94 	bl	8009106 <USBD_GetEpDesc>
 80087de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087e0:	2181      	movs	r1, #129	; 0x81
 80087e2:	4813      	ldr	r0, [pc, #76]	; (8008830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087e4:	f000 fc8f 	bl	8009106 <USBD_GetEpDesc>
 80087e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2210      	movs	r2, #16
 80087f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2200      	movs	r2, #0
 8008800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008804:	711a      	strb	r2, [r3, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008818:	711a      	strb	r2, [r3, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2243      	movs	r2, #67	; 0x43
 8008822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000050 	.word	0x20000050

08008834 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	220a      	movs	r2, #10
 8008840:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008842:	4b03      	ldr	r3, [pc, #12]	; (8008850 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	2000000c 	.word	0x2000000c

08008854 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008864:	2303      	movs	r3, #3
 8008866:	e009      	b.n	800887c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	33b0      	adds	r3, #176	; 0xb0
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	32b0      	adds	r2, #176	; 0xb0
 800889e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e008      	b.n	80088c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	32b0      	adds	r2, #176	; 0xb0
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e004      	b.n	80088fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32b0      	adds	r2, #176	; 0xb0
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32b0      	adds	r2, #176	; 0xb0
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008932:	2303      	movs	r3, #3
 8008934:	e018      	b.n	8008968 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7c1b      	ldrb	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <USBD_CDC_ReceivePacket+0x68>)
 8008940:	7819      	ldrb	r1, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f005 f861 	bl	800da14 <USBD_LL_PrepareReceive>
 8008952:	e008      	b.n	8008966 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008954:	4b06      	ldr	r3, [pc, #24]	; (8008970 <USBD_CDC_ReceivePacket+0x68>)
 8008956:	7819      	ldrb	r1, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800895e:	2340      	movs	r3, #64	; 0x40
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f005 f857 	bl	800da14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000094 	.word	0x20000094

08008974 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008988:	2303      	movs	r3, #3
 800898a:	e01f      	b.n	80089cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	79fa      	ldrb	r2, [r7, #7]
 80089be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f004 fed1 	bl	800d768 <USBD_LL_Init>
 80089c6:	4603      	mov	r3, r0
 80089c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e025      	b.n	8008a38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	32ae      	adds	r2, #174	; 0xae
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00f      	beq.n	8008a28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	32ae      	adds	r2, #174	; 0xae
 8008a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	f107 020e 	add.w	r2, r7, #14
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	4602      	mov	r2, r0
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f004 fed9 	bl	800d800 <USBD_LL_Start>
 8008a4e:	4603      	mov	r3, r0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	4611      	mov	r1, r2
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 f932 	bl	8009d56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b00:	461a      	mov	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d01a      	beq.n	8008b4c <USBD_LL_SetupStage+0x72>
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d822      	bhi.n	8008b60 <USBD_LL_SetupStage+0x86>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <USBD_LL_SetupStage+0x4a>
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d00a      	beq.n	8008b38 <USBD_LL_SetupStage+0x5e>
 8008b22:	e01d      	b.n	8008b60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb5f 	bl	80091f0 <USBD_StdDevReq>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
      break;
 8008b36:	e020      	b.n	8008b7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fbc7 	bl	80092d4 <USBD_StdItfReq>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4a:	e016      	b.n	8008b7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fc29 	bl	80093ac <USBD_StdEPReq>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b5e:	e00c      	b.n	8008b7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f004 fea6 	bl	800d8c0 <USBD_LL_StallEP>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]
      break;
 8008b78:	bf00      	nop
  }

  return ret;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d16e      	bne.n	8008c7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ba2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	f040 8098 	bne.w	8008ce0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d913      	bls.n	8008be4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	1ad2      	subs	r2, r2, r3
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	bf28      	it	cs
 8008bd6:	4613      	movcs	r3, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f001 f9ae 	bl	8009f3e <USBD_CtlContinueRx>
 8008be2:	e07d      	b.n	8008ce0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bea:	f003 031f 	and.w	r3, r3, #31
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d014      	beq.n	8008c1c <USBD_LL_DataOutStage+0x98>
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d81d      	bhi.n	8008c32 <USBD_LL_DataOutStage+0xae>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <USBD_LL_DataOutStage+0x7c>
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d003      	beq.n	8008c06 <USBD_LL_DataOutStage+0x82>
 8008bfe:	e018      	b.n	8008c32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75bb      	strb	r3, [r7, #22]
            break;
 8008c04:	e018      	b.n	8008c38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 fa5e 	bl	80090d2 <USBD_CoreFindIF>
 8008c16:	4603      	mov	r3, r0
 8008c18:	75bb      	strb	r3, [r7, #22]
            break;
 8008c1a:	e00d      	b.n	8008c38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4619      	mov	r1, r3
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fa60 	bl	80090ec <USBD_CoreFindEP>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75bb      	strb	r3, [r7, #22]
            break;
 8008c30:	e002      	b.n	8008c38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75bb      	strb	r3, [r7, #22]
            break;
 8008c36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c38:	7dbb      	ldrb	r3, [r7, #22]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d119      	bne.n	8008c72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d113      	bne.n	8008c72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c4a:	7dba      	ldrb	r2, [r7, #22]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	32ae      	adds	r2, #174	; 0xae
 8008c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c5a:	7dba      	ldrb	r2, [r7, #22]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c62:	7dba      	ldrb	r2, [r7, #22]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	32ae      	adds	r2, #174	; 0xae
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f001 f974 	bl	8009f60 <USBD_CtlSendStatus>
 8008c78:	e032      	b.n	8008ce0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	4619      	mov	r1, r3
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 fa31 	bl	80090ec <USBD_CoreFindEP>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	2bff      	cmp	r3, #255	; 0xff
 8008c92:	d025      	beq.n	8008ce0 <USBD_LL_DataOutStage+0x15c>
 8008c94:	7dbb      	ldrb	r3, [r7, #22]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d122      	bne.n	8008ce0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d117      	bne.n	8008cd6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ca6:	7dba      	ldrb	r2, [r7, #22]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	32ae      	adds	r2, #174	; 0xae
 8008cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00f      	beq.n	8008cd6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008cb6:	7dba      	ldrb	r2, [r7, #22]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008cbe:	7dba      	ldrb	r2, [r7, #22]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	32ae      	adds	r2, #174	; 0xae
 8008cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	7afa      	ldrb	r2, [r7, #11]
 8008ccc:	4611      	mov	r1, r2
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	e000      	b.n	8008ce2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b086      	sub	sp, #24
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d16f      	bne.n	8008dde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3314      	adds	r3, #20
 8008d02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d15a      	bne.n	8008dc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d914      	bls.n	8008d44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f001 f8d6 	bl	8009ee2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d36:	2300      	movs	r3, #0
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f004 fe69 	bl	800da14 <USBD_LL_PrepareReceive>
 8008d42:	e03f      	b.n	8008dc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d11c      	bne.n	8008d8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d316      	bcc.n	8008d8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d20f      	bcs.n	8008d8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f001 f8b7 	bl	8009ee2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2100      	movs	r1, #0
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f004 fe46 	bl	800da14 <USBD_LL_PrepareReceive>
 8008d88:	e01c      	b.n	8008dc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d10f      	bne.n	8008db6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d009      	beq.n	8008db6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008db6:	2180      	movs	r1, #128	; 0x80
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f004 fd81 	bl	800d8c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f001 f8e1 	bl	8009f86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d03a      	beq.n	8008e44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f7ff fe42 	bl	8008a58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ddc:	e032      	b.n	8008e44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f97f 	bl	80090ec <USBD_CoreFindEP>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2bff      	cmp	r3, #255	; 0xff
 8008df6:	d025      	beq.n	8008e44 <USBD_LL_DataInStage+0x15a>
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d122      	bne.n	8008e44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d11c      	bne.n	8008e44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e0a:	7dfa      	ldrb	r2, [r7, #23]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	32ae      	adds	r2, #174	; 0xae
 8008e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d014      	beq.n	8008e44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e1a:	7dfa      	ldrb	r2, [r7, #23]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e22:	7dfa      	ldrb	r2, [r7, #23]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	32ae      	adds	r2, #174	; 0xae
 8008e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	7afa      	ldrb	r2, [r7, #11]
 8008e30:	4611      	mov	r1, r2
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	4798      	blx	r3
 8008e36:	4603      	mov	r3, r0
 8008e38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e3a:	7dbb      	ldrb	r3, [r7, #22]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e40:	7dbb      	ldrb	r3, [r7, #22]
 8008e42:	e000      	b.n	8008e46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d014      	beq.n	8008eb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00e      	beq.n	8008eb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6852      	ldr	r2, [r2, #4]
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008eb4:	2340      	movs	r3, #64	; 0x40
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2100      	movs	r1, #0
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f004 fcbb 	bl	800d836 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2240      	movs	r2, #64	; 0x40
 8008ecc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ed0:	2340      	movs	r3, #64	; 0x40
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2180      	movs	r1, #128	; 0x80
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f004 fcad 	bl	800d836 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2240      	movs	r2, #64	; 0x40
 8008ee6:	621a      	str	r2, [r3, #32]

  return ret;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d106      	bne.n	8008f60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d110      	bne.n	8008fa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32ae      	adds	r2, #174	; 0xae
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e01c      	b.n	800900a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d115      	bne.n	8009008 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	32ae      	adds	r2, #174	; 0xae
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	; 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4611      	mov	r1, r2
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	32ae      	adds	r2, #174	; 0xae
 8009028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009030:	2303      	movs	r3, #3
 8009032:	e01c      	b.n	800906e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b03      	cmp	r3, #3
 800903e:	d115      	bne.n	800906c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	32ae      	adds	r2, #174	; 0xae
 800904a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32ae      	adds	r2, #174	; 0xae
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	4611      	mov	r1, r2
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00e      	beq.n	80090c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6852      	ldr	r2, [r2, #4]
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	4611      	mov	r1, r2
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b086      	sub	sp, #24
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	885b      	ldrh	r3, [r3, #2]
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	429a      	cmp	r2, r3
 800912c:	d920      	bls.n	8009170 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009136:	e013      	b.n	8009160 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009138:	f107 030a 	add.w	r3, r7, #10
 800913c:	4619      	mov	r1, r3
 800913e:	6978      	ldr	r0, [r7, #20]
 8009140:	f000 f81b 	bl	800917a <USBD_GetNextDesc>
 8009144:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b05      	cmp	r3, #5
 800914c:	d108      	bne.n	8009160 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	78fa      	ldrb	r2, [r7, #3]
 8009158:	429a      	cmp	r2, r3
 800915a:	d008      	beq.n	800916e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800915c:	2300      	movs	r3, #0
 800915e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	885b      	ldrh	r3, [r3, #2]
 8009164:	b29a      	uxth	r2, r3
 8009166:	897b      	ldrh	r3, [r7, #10]
 8009168:	429a      	cmp	r2, r3
 800916a:	d8e5      	bhi.n	8009138 <USBD_GetEpDesc+0x32>
 800916c:	e000      	b.n	8009170 <USBD_GetEpDesc+0x6a>
          break;
 800916e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009170:	693b      	ldr	r3, [r7, #16]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	881a      	ldrh	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	4413      	add	r3, r2
 8009194:	b29a      	uxth	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4413      	add	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091a6:	68fb      	ldr	r3, [r7, #12]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	3301      	adds	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091d2:	8a3b      	ldrh	r3, [r7, #16]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	b21a      	sxth	r2, r3
 80091d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091dc:	4313      	orrs	r3, r2
 80091de:	b21b      	sxth	r3, r3
 80091e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091e2:	89fb      	ldrh	r3, [r7, #14]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009206:	2b40      	cmp	r3, #64	; 0x40
 8009208:	d005      	beq.n	8009216 <USBD_StdDevReq+0x26>
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d857      	bhi.n	80092be <USBD_StdDevReq+0xce>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00f      	beq.n	8009232 <USBD_StdDevReq+0x42>
 8009212:	2b20      	cmp	r3, #32
 8009214:	d153      	bne.n	80092be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	32ae      	adds	r2, #174	; 0xae
 8009220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]
      break;
 8009230:	e04a      	b.n	80092c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	2b09      	cmp	r3, #9
 8009238:	d83b      	bhi.n	80092b2 <USBD_StdDevReq+0xc2>
 800923a:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <USBD_StdDevReq+0x50>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	08009295 	.word	0x08009295
 8009244:	080092a9 	.word	0x080092a9
 8009248:	080092b3 	.word	0x080092b3
 800924c:	0800929f 	.word	0x0800929f
 8009250:	080092b3 	.word	0x080092b3
 8009254:	08009273 	.word	0x08009273
 8009258:	08009269 	.word	0x08009269
 800925c:	080092b3 	.word	0x080092b3
 8009260:	0800928b 	.word	0x0800928b
 8009264:	0800927d 	.word	0x0800927d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa3c 	bl	80096e8 <USBD_GetDescriptor>
          break;
 8009270:	e024      	b.n	80092bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fbcb 	bl	8009a10 <USBD_SetAddress>
          break;
 800927a:	e01f      	b.n	80092bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc0a 	bl	8009a98 <USBD_SetConfig>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]
          break;
 8009288:	e018      	b.n	80092bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fcad 	bl	8009bec <USBD_GetConfig>
          break;
 8009292:	e013      	b.n	80092bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fcde 	bl	8009c58 <USBD_GetStatus>
          break;
 800929c:	e00e      	b.n	80092bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fd0d 	bl	8009cc0 <USBD_SetFeature>
          break;
 80092a6:	e009      	b.n	80092bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fd31 	bl	8009d12 <USBD_ClrFeature>
          break;
 80092b0:	e004      	b.n	80092bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fd88 	bl	8009dca <USBD_CtlError>
          break;
 80092ba:	bf00      	nop
      }
      break;
 80092bc:	e004      	b.n	80092c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fd82 	bl	8009dca <USBD_CtlError>
      break;
 80092c6:	bf00      	nop
  }

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop

080092d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ea:	2b40      	cmp	r3, #64	; 0x40
 80092ec:	d005      	beq.n	80092fa <USBD_StdItfReq+0x26>
 80092ee:	2b40      	cmp	r3, #64	; 0x40
 80092f0:	d852      	bhi.n	8009398 <USBD_StdItfReq+0xc4>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <USBD_StdItfReq+0x26>
 80092f6:	2b20      	cmp	r3, #32
 80092f8:	d14e      	bne.n	8009398 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009300:	b2db      	uxtb	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	2b02      	cmp	r3, #2
 8009306:	d840      	bhi.n	800938a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	889b      	ldrh	r3, [r3, #4]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b01      	cmp	r3, #1
 8009310:	d836      	bhi.n	8009380 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	889b      	ldrh	r3, [r3, #4]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fed9 	bl	80090d2 <USBD_CoreFindIF>
 8009320:	4603      	mov	r3, r0
 8009322:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	2bff      	cmp	r3, #255	; 0xff
 8009328:	d01d      	beq.n	8009366 <USBD_StdItfReq+0x92>
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11a      	bne.n	8009366 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009330:	7bba      	ldrb	r2, [r7, #14]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32ae      	adds	r2, #174	; 0xae
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00f      	beq.n	8009360 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009340:	7bba      	ldrb	r2, [r7, #14]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009348:	7bba      	ldrb	r2, [r7, #14]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	32ae      	adds	r2, #174	; 0xae
 800934e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
 800935a:	4603      	mov	r3, r0
 800935c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800935e:	e004      	b.n	800936a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009364:	e001      	b.n	800936a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009366:	2303      	movs	r3, #3
 8009368:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	88db      	ldrh	r3, [r3, #6]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d110      	bne.n	8009394 <USBD_StdItfReq+0xc0>
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10d      	bne.n	8009394 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fdf1 	bl	8009f60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800937e:	e009      	b.n	8009394 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fd21 	bl	8009dca <USBD_CtlError>
          break;
 8009388:	e004      	b.n	8009394 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fd1c 	bl	8009dca <USBD_CtlError>
          break;
 8009392:	e000      	b.n	8009396 <USBD_StdItfReq+0xc2>
          break;
 8009394:	bf00      	nop
      }
      break;
 8009396:	e004      	b.n	80093a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fd15 	bl	8009dca <USBD_CtlError>
      break;
 80093a0:	bf00      	nop
  }

  return ret;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	889b      	ldrh	r3, [r3, #4]
 80093be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093c8:	2b40      	cmp	r3, #64	; 0x40
 80093ca:	d007      	beq.n	80093dc <USBD_StdEPReq+0x30>
 80093cc:	2b40      	cmp	r3, #64	; 0x40
 80093ce:	f200 817f 	bhi.w	80096d0 <USBD_StdEPReq+0x324>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d02a      	beq.n	800942c <USBD_StdEPReq+0x80>
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	f040 817a 	bne.w	80096d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff fe83 	bl	80090ec <USBD_CoreFindEP>
 80093e6:	4603      	mov	r3, r0
 80093e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ea:	7b7b      	ldrb	r3, [r7, #13]
 80093ec:	2bff      	cmp	r3, #255	; 0xff
 80093ee:	f000 8174 	beq.w	80096da <USBD_StdEPReq+0x32e>
 80093f2:	7b7b      	ldrb	r3, [r7, #13]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f040 8170 	bne.w	80096da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80093fa:	7b7a      	ldrb	r2, [r7, #13]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009402:	7b7a      	ldrb	r2, [r7, #13]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	32ae      	adds	r2, #174	; 0xae
 8009408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8163 	beq.w	80096da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009414:	7b7a      	ldrb	r2, [r7, #13]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32ae      	adds	r2, #174	; 0xae
 800941a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800942a:	e156      	b.n	80096da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	2b03      	cmp	r3, #3
 8009432:	d008      	beq.n	8009446 <USBD_StdEPReq+0x9a>
 8009434:	2b03      	cmp	r3, #3
 8009436:	f300 8145 	bgt.w	80096c4 <USBD_StdEPReq+0x318>
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 809b 	beq.w	8009576 <USBD_StdEPReq+0x1ca>
 8009440:	2b01      	cmp	r3, #1
 8009442:	d03c      	beq.n	80094be <USBD_StdEPReq+0x112>
 8009444:	e13e      	b.n	80096c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d002      	beq.n	8009458 <USBD_StdEPReq+0xac>
 8009452:	2b03      	cmp	r3, #3
 8009454:	d016      	beq.n	8009484 <USBD_StdEPReq+0xd8>
 8009456:	e02c      	b.n	80094b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00d      	beq.n	800947a <USBD_StdEPReq+0xce>
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b80      	cmp	r3, #128	; 0x80
 8009462:	d00a      	beq.n	800947a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f004 fa29 	bl	800d8c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f004 fa25 	bl	800d8c0 <USBD_LL_StallEP>
 8009476:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009478:	e020      	b.n	80094bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fca4 	bl	8009dca <USBD_CtlError>
              break;
 8009482:	e01b      	b.n	80094bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	885b      	ldrh	r3, [r3, #2]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10e      	bne.n	80094aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00b      	beq.n	80094aa <USBD_StdEPReq+0xfe>
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b80      	cmp	r3, #128	; 0x80
 8009496:	d008      	beq.n	80094aa <USBD_StdEPReq+0xfe>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	88db      	ldrh	r3, [r3, #6]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d104      	bne.n	80094aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f004 fa0b 	bl	800d8c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fd58 	bl	8009f60 <USBD_CtlSendStatus>

              break;
 80094b0:	e004      	b.n	80094bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fc88 	bl	8009dca <USBD_CtlError>
              break;
 80094ba:	bf00      	nop
          }
          break;
 80094bc:	e107      	b.n	80096ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d002      	beq.n	80094d0 <USBD_StdEPReq+0x124>
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d016      	beq.n	80094fc <USBD_StdEPReq+0x150>
 80094ce:	e04b      	b.n	8009568 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00d      	beq.n	80094f2 <USBD_StdEPReq+0x146>
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b80      	cmp	r3, #128	; 0x80
 80094da:	d00a      	beq.n	80094f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f004 f9ed 	bl	800d8c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094e6:	2180      	movs	r1, #128	; 0x80
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f004 f9e9 	bl	800d8c0 <USBD_LL_StallEP>
 80094ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094f0:	e040      	b.n	8009574 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fc68 	bl	8009dca <USBD_CtlError>
              break;
 80094fa:	e03b      	b.n	8009574 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	885b      	ldrh	r3, [r3, #2]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d136      	bne.n	8009572 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f004 f9f3 	bl	800d8fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fd21 	bl	8009f60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fde2 	bl	80090ec <USBD_CoreFindEP>
 8009528:	4603      	mov	r3, r0
 800952a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800952c:	7b7b      	ldrb	r3, [r7, #13]
 800952e:	2bff      	cmp	r3, #255	; 0xff
 8009530:	d01f      	beq.n	8009572 <USBD_StdEPReq+0x1c6>
 8009532:	7b7b      	ldrb	r3, [r7, #13]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d11c      	bne.n	8009572 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009538:	7b7a      	ldrb	r2, [r7, #13]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009540:	7b7a      	ldrb	r2, [r7, #13]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	32ae      	adds	r2, #174	; 0xae
 8009546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d010      	beq.n	8009572 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009550:	7b7a      	ldrb	r2, [r7, #13]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	32ae      	adds	r2, #174	; 0xae
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	4798      	blx	r3
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009566:	e004      	b.n	8009572 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc2d 	bl	8009dca <USBD_CtlError>
              break;
 8009570:	e000      	b.n	8009574 <USBD_StdEPReq+0x1c8>
              break;
 8009572:	bf00      	nop
          }
          break;
 8009574:	e0ab      	b.n	80096ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d002      	beq.n	8009588 <USBD_StdEPReq+0x1dc>
 8009582:	2b03      	cmp	r3, #3
 8009584:	d032      	beq.n	80095ec <USBD_StdEPReq+0x240>
 8009586:	e097      	b.n	80096b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d007      	beq.n	800959e <USBD_StdEPReq+0x1f2>
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b80      	cmp	r3, #128	; 0x80
 8009592:	d004      	beq.n	800959e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fc17 	bl	8009dca <USBD_CtlError>
                break;
 800959c:	e091      	b.n	80096c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800959e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	da0b      	bge.n	80095be <USBD_StdEPReq+0x212>
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	3310      	adds	r3, #16
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4413      	add	r3, r2
 80095ba:	3304      	adds	r3, #4
 80095bc:	e00b      	b.n	80095d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	4413      	add	r3, r2
 80095d4:	3304      	adds	r3, #4
 80095d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2202      	movs	r2, #2
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fc61 	bl	8009eac <USBD_CtlSendData>
              break;
 80095ea:	e06a      	b.n	80096c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da11      	bge.n	8009618 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	f003 020f 	and.w	r2, r3, #15
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	3324      	adds	r3, #36	; 0x24
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d117      	bne.n	800963e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fbda 	bl	8009dca <USBD_CtlError>
                  break;
 8009616:	e054      	b.n	80096c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	f003 020f 	and.w	r2, r3, #15
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fbc7 	bl	8009dca <USBD_CtlError>
                  break;
 800963c:	e041      	b.n	80096c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800963e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da0b      	bge.n	800965e <USBD_StdEPReq+0x2b2>
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	3310      	adds	r3, #16
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	4413      	add	r3, r2
 800965a:	3304      	adds	r3, #4
 800965c:	e00b      	b.n	8009676 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	4413      	add	r3, r2
 8009674:	3304      	adds	r3, #4
 8009676:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <USBD_StdEPReq+0x2d8>
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b80      	cmp	r3, #128	; 0x80
 8009682:	d103      	bne.n	800968c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e00e      	b.n	80096aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f004 f953 	bl	800d93c <USBD_LL_IsStallEP>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	e002      	b.n	80096aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2200      	movs	r2, #0
 80096a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2202      	movs	r2, #2
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fbfb 	bl	8009eac <USBD_CtlSendData>
              break;
 80096b6:	e004      	b.n	80096c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fb85 	bl	8009dca <USBD_CtlError>
              break;
 80096c0:	bf00      	nop
          }
          break;
 80096c2:	e004      	b.n	80096ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fb7f 	bl	8009dca <USBD_CtlError>
          break;
 80096cc:	bf00      	nop
      }
      break;
 80096ce:	e005      	b.n	80096dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fb79 	bl	8009dca <USBD_CtlError>
      break;
 80096d8:	e000      	b.n	80096dc <USBD_StdEPReq+0x330>
      break;
 80096da:	bf00      	nop
  }

  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	2b0e      	cmp	r3, #14
 800970a:	f200 8152 	bhi.w	80099b2 <USBD_GetDescriptor+0x2ca>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <USBD_GetDescriptor+0x2c>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009785 	.word	0x08009785
 8009718:	0800979d 	.word	0x0800979d
 800971c:	080097dd 	.word	0x080097dd
 8009720:	080099b3 	.word	0x080099b3
 8009724:	080099b3 	.word	0x080099b3
 8009728:	08009953 	.word	0x08009953
 800972c:	0800997f 	.word	0x0800997f
 8009730:	080099b3 	.word	0x080099b3
 8009734:	080099b3 	.word	0x080099b3
 8009738:	080099b3 	.word	0x080099b3
 800973c:	080099b3 	.word	0x080099b3
 8009740:	080099b3 	.word	0x080099b3
 8009744:	080099b3 	.word	0x080099b3
 8009748:	080099b3 	.word	0x080099b3
 800974c:	08009751 	.word	0x08009751
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009772:	e126      	b.n	80099c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fb27 	bl	8009dca <USBD_CtlError>
        err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
      break;
 8009782:	e11e      	b.n	80099c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	7c12      	ldrb	r2, [r2, #16]
 8009790:	f107 0108 	add.w	r1, r7, #8
 8009794:	4610      	mov	r0, r2
 8009796:	4798      	blx	r3
 8009798:	60f8      	str	r0, [r7, #12]
      break;
 800979a:	e112      	b.n	80099c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	7c1b      	ldrb	r3, [r3, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10d      	bne.n	80097c0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	f107 0208 	add.w	r2, r7, #8
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	2202      	movs	r2, #2
 80097bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097be:	e100      	b.n	80099c2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	f107 0208 	add.w	r2, r7, #8
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
 80097d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3301      	adds	r3, #1
 80097d6:	2202      	movs	r2, #2
 80097d8:	701a      	strb	r2, [r3, #0]
      break;
 80097da:	e0f2      	b.n	80099c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	885b      	ldrh	r3, [r3, #2]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	f200 80ac 	bhi.w	8009940 <USBD_GetDescriptor+0x258>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <USBD_GetDescriptor+0x108>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009809 	.word	0x08009809
 80097f4:	0800983d 	.word	0x0800983d
 80097f8:	08009871 	.word	0x08009871
 80097fc:	080098a5 	.word	0x080098a5
 8009800:	080098d9 	.word	0x080098d9
 8009804:	0800990d 	.word	0x0800990d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 0108 	add.w	r1, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982a:	e091      	b.n	8009950 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 facb 	bl	8009dca <USBD_CtlError>
            err++;
 8009834:	7afb      	ldrb	r3, [r7, #11]
 8009836:	3301      	adds	r3, #1
 8009838:	72fb      	strb	r3, [r7, #11]
          break;
 800983a:	e089      	b.n	8009950 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	7c12      	ldrb	r2, [r2, #16]
 8009854:	f107 0108 	add.w	r1, r7, #8
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985e:	e077      	b.n	8009950 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fab1 	bl	8009dca <USBD_CtlError>
            err++;
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	3301      	adds	r3, #1
 800986c:	72fb      	strb	r3, [r7, #11]
          break;
 800986e:	e06f      	b.n	8009950 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7c12      	ldrb	r2, [r2, #16]
 8009888:	f107 0108 	add.w	r1, r7, #8
 800988c:	4610      	mov	r0, r2
 800988e:	4798      	blx	r3
 8009890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009892:	e05d      	b.n	8009950 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa97 	bl	8009dca <USBD_CtlError>
            err++;
 800989c:	7afb      	ldrb	r3, [r7, #11]
 800989e:	3301      	adds	r3, #1
 80098a0:	72fb      	strb	r3, [r7, #11]
          break;
 80098a2:	e055      	b.n	8009950 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00b      	beq.n	80098c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	7c12      	ldrb	r2, [r2, #16]
 80098bc:	f107 0108 	add.w	r1, r7, #8
 80098c0:	4610      	mov	r0, r2
 80098c2:	4798      	blx	r3
 80098c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098c6:	e043      	b.n	8009950 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa7d 	bl	8009dca <USBD_CtlError>
            err++;
 80098d0:	7afb      	ldrb	r3, [r7, #11]
 80098d2:	3301      	adds	r3, #1
 80098d4:	72fb      	strb	r3, [r7, #11]
          break;
 80098d6:	e03b      	b.n	8009950 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	7c12      	ldrb	r2, [r2, #16]
 80098f0:	f107 0108 	add.w	r1, r7, #8
 80098f4:	4610      	mov	r0, r2
 80098f6:	4798      	blx	r3
 80098f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098fa:	e029      	b.n	8009950 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa63 	bl	8009dca <USBD_CtlError>
            err++;
 8009904:	7afb      	ldrb	r3, [r7, #11]
 8009906:	3301      	adds	r3, #1
 8009908:	72fb      	strb	r3, [r7, #11]
          break;
 800990a:	e021      	b.n	8009950 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	7c12      	ldrb	r2, [r2, #16]
 8009924:	f107 0108 	add.w	r1, r7, #8
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
 800992c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800992e:	e00f      	b.n	8009950 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fa49 	bl	8009dca <USBD_CtlError>
            err++;
 8009938:	7afb      	ldrb	r3, [r7, #11]
 800993a:	3301      	adds	r3, #1
 800993c:	72fb      	strb	r3, [r7, #11]
          break;
 800993e:	e007      	b.n	8009950 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa41 	bl	8009dca <USBD_CtlError>
          err++;
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	3301      	adds	r3, #1
 800994c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800994e:	bf00      	nop
      }
      break;
 8009950:	e037      	b.n	80099c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	7c1b      	ldrb	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d109      	bne.n	800996e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009962:	f107 0208 	add.w	r2, r7, #8
 8009966:	4610      	mov	r0, r2
 8009968:	4798      	blx	r3
 800996a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800996c:	e029      	b.n	80099c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fa2a 	bl	8009dca <USBD_CtlError>
        err++;
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	3301      	adds	r3, #1
 800997a:	72fb      	strb	r3, [r7, #11]
      break;
 800997c:	e021      	b.n	80099c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7c1b      	ldrb	r3, [r3, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10d      	bne.n	80099a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998e:	f107 0208 	add.w	r2, r7, #8
 8009992:	4610      	mov	r0, r2
 8009994:	4798      	blx	r3
 8009996:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	2207      	movs	r2, #7
 800999e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099a0:	e00f      	b.n	80099c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fa10 	bl	8009dca <USBD_CtlError>
        err++;
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	3301      	adds	r3, #1
 80099ae:	72fb      	strb	r3, [r7, #11]
      break;
 80099b0:	e007      	b.n	80099c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa08 	bl	8009dca <USBD_CtlError>
      err++;
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	3301      	adds	r3, #1
 80099be:	72fb      	strb	r3, [r7, #11]
      break;
 80099c0:	bf00      	nop
  }

  if (err != 0U)
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11e      	bne.n	8009a06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	88db      	ldrh	r3, [r3, #6]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d016      	beq.n	80099fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80099d0:	893b      	ldrh	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00e      	beq.n	80099f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88da      	ldrh	r2, [r3, #6]
 80099da:	893b      	ldrh	r3, [r7, #8]
 80099dc:	4293      	cmp	r3, r2
 80099de:	bf28      	it	cs
 80099e0:	4613      	movcs	r3, r2
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099e6:	893b      	ldrh	r3, [r7, #8]
 80099e8:	461a      	mov	r2, r3
 80099ea:	68f9      	ldr	r1, [r7, #12]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fa5d 	bl	8009eac <USBD_CtlSendData>
 80099f2:	e009      	b.n	8009a08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f9e7 	bl	8009dca <USBD_CtlError>
 80099fc:	e004      	b.n	8009a08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 faae 	bl	8009f60 <USBD_CtlSendStatus>
 8009a04:	e000      	b.n	8009a08 <USBD_GetDescriptor+0x320>
    return;
 8009a06:	bf00      	nop
  }
}
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop

08009a10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	889b      	ldrh	r3, [r3, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d131      	bne.n	8009a86 <USBD_SetAddress+0x76>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	88db      	ldrh	r3, [r3, #6]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d12d      	bne.n	8009a86 <USBD_SetAddress+0x76>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	885b      	ldrh	r3, [r3, #2]
 8009a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8009a30:	d829      	bhi.n	8009a86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	885b      	ldrh	r3, [r3, #2]
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d104      	bne.n	8009a54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f9bc 	bl	8009dca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a52:	e01d      	b.n	8009a90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	7bfa      	ldrb	r2, [r7, #15]
 8009a58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f003 ff97 	bl	800d994 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa7a 	bl	8009f60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7a:	e009      	b.n	8009a90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a84:	e004      	b.n	8009a90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f99e 	bl	8009dca <USBD_CtlError>
  }
}
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	4b4e      	ldr	r3, [pc, #312]	; (8009be8 <USBD_SetConfig+0x150>)
 8009aae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ab0:	4b4d      	ldr	r3, [pc, #308]	; (8009be8 <USBD_SetConfig+0x150>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d905      	bls.n	8009ac4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f985 	bl	8009dca <USBD_CtlError>
    return USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e08c      	b.n	8009bde <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d002      	beq.n	8009ad6 <USBD_SetConfig+0x3e>
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d029      	beq.n	8009b28 <USBD_SetConfig+0x90>
 8009ad4:	e075      	b.n	8009bc2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ad6:	4b44      	ldr	r3, [pc, #272]	; (8009be8 <USBD_SetConfig+0x150>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d020      	beq.n	8009b20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ade:	4b42      	ldr	r3, [pc, #264]	; (8009be8 <USBD_SetConfig+0x150>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ae8:	4b3f      	ldr	r3, [pc, #252]	; (8009be8 <USBD_SetConfig+0x150>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7fe ffbd 	bl	8008a6e <USBD_SetClassConfig>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d008      	beq.n	8009b10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f962 	bl	8009dca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b0e:	e065      	b.n	8009bdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa25 	bl	8009f60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2203      	movs	r2, #3
 8009b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b1e:	e05d      	b.n	8009bdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fa1d 	bl	8009f60 <USBD_CtlSendStatus>
      break;
 8009b26:	e059      	b.n	8009bdc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b28:	4b2f      	ldr	r3, [pc, #188]	; (8009be8 <USBD_SetConfig+0x150>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d112      	bne.n	8009b56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b38:	4b2b      	ldr	r3, [pc, #172]	; (8009be8 <USBD_SetConfig+0x150>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b42:	4b29      	ldr	r3, [pc, #164]	; (8009be8 <USBD_SetConfig+0x150>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7fe ffac 	bl	8008aa6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa06 	bl	8009f60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b54:	e042      	b.n	8009bdc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <USBD_SetConfig+0x150>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d02a      	beq.n	8009bba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7fe ff9a 	bl	8008aa6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b72:	4b1d      	ldr	r3, [pc, #116]	; (8009be8 <USBD_SetConfig+0x150>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b7c:	4b1a      	ldr	r3, [pc, #104]	; (8009be8 <USBD_SetConfig+0x150>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fe ff73 	bl	8008a6e <USBD_SetClassConfig>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00f      	beq.n	8009bb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f918 	bl	8009dca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fe ff7f 	bl	8008aa6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009bb0:	e014      	b.n	8009bdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f9d4 	bl	8009f60 <USBD_CtlSendStatus>
      break;
 8009bb8:	e010      	b.n	8009bdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f9d0 	bl	8009f60 <USBD_CtlSendStatus>
      break;
 8009bc0:	e00c      	b.n	8009bdc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f900 	bl	8009dca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bca:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <USBD_SetConfig+0x150>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fe ff68 	bl	8008aa6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8009bda:	bf00      	nop
  }

  return ret;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20000f10 	.word	0x20000f10

08009bec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	88db      	ldrh	r3, [r3, #6]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d004      	beq.n	8009c08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8e2 	bl	8009dca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c06:	e023      	b.n	8009c50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	dc02      	bgt.n	8009c1a <USBD_GetConfig+0x2e>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dc03      	bgt.n	8009c20 <USBD_GetConfig+0x34>
 8009c18:	e015      	b.n	8009c46 <USBD_GetConfig+0x5a>
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d00b      	beq.n	8009c36 <USBD_GetConfig+0x4a>
 8009c1e:	e012      	b.n	8009c46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f93c 	bl	8009eac <USBD_CtlSendData>
        break;
 8009c34:	e00c      	b.n	8009c50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f934 	bl	8009eac <USBD_CtlSendData>
        break;
 8009c44:	e004      	b.n	8009c50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f8be 	bl	8009dca <USBD_CtlError>
        break;
 8009c4e:	bf00      	nop
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d81e      	bhi.n	8009cae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	88db      	ldrh	r3, [r3, #6]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d004      	beq.n	8009c82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f8a5 	bl	8009dca <USBD_CtlError>
        break;
 8009c80:	e01a      	b.n	8009cb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f043 0202 	orr.w	r2, r3, #2
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	330c      	adds	r3, #12
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f900 	bl	8009eac <USBD_CtlSendData>
      break;
 8009cac:	e004      	b.n	8009cb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f88a 	bl	8009dca <USBD_CtlError>
      break;
 8009cb6:	bf00      	nop
  }
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	885b      	ldrh	r3, [r3, #2]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d107      	bne.n	8009ce2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f940 	bl	8009f60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ce0:	e013      	b.n	8009d0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	885b      	ldrh	r3, [r3, #2]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d10b      	bne.n	8009d02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	889b      	ldrh	r3, [r3, #4]
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f930 	bl	8009f60 <USBD_CtlSendStatus>
}
 8009d00:	e003      	b.n	8009d0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f860 	bl	8009dca <USBD_CtlError>
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	3b01      	subs	r3, #1
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d80b      	bhi.n	8009d42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	885b      	ldrh	r3, [r3, #2]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d10c      	bne.n	8009d4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f910 	bl	8009f60 <USBD_CtlSendStatus>
      }
      break;
 8009d40:	e004      	b.n	8009d4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f840 	bl	8009dca <USBD_CtlError>
      break;
 8009d4a:	e000      	b.n	8009d4e <USBD_ClrFeature+0x3c>
      break;
 8009d4c:	bf00      	nop
  }
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	781a      	ldrb	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	781a      	ldrb	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff fa17 	bl	80091b4 <SWAPBYTE>
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3301      	adds	r3, #1
 8009d92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3301      	adds	r3, #1
 8009d98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7ff fa0a 	bl	80091b4 <SWAPBYTE>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3301      	adds	r3, #1
 8009dac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3301      	adds	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f7ff f9fd 	bl	80091b4 <SWAPBYTE>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	80da      	strh	r2, [r3, #6]
}
 8009dc2:	bf00      	nop
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dd4:	2180      	movs	r1, #128	; 0x80
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f003 fd72 	bl	800d8c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ddc:	2100      	movs	r1, #0
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f003 fd6e 	bl	800d8c0 <USBD_LL_StallEP>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d036      	beq.n	8009e70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e06:	6938      	ldr	r0, [r7, #16]
 8009e08:	f000 f836 	bl	8009e78 <USBD_GetLen>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	4413      	add	r3, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	7812      	ldrb	r2, [r2, #0]
 8009e24:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	2203      	movs	r2, #3
 8009e34:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e3c:	e013      	b.n	8009e66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	4413      	add	r3, r2
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	613b      	str	r3, [r7, #16]
    idx++;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	3301      	adds	r3, #1
 8009e54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
 8009e62:	3301      	adds	r3, #1
 8009e64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e7      	bne.n	8009e3e <USBD_GetString+0x52>
 8009e6e:	e000      	b.n	8009e72 <USBD_GetString+0x86>
    return;
 8009e70:	bf00      	nop
  }
}
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e88:	e005      	b.n	8009e96 <USBD_GetLen+0x1e>
  {
    len++;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f5      	bne.n	8009e8a <USBD_GetLen+0x12>
  }

  return len;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f003 fd7d 	bl	800d9d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f003 fd6c 	bl	800d9d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2203      	movs	r2, #3
 8009f14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f003 fd70 	bl	800da14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	2100      	movs	r1, #0
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f003 fd5f 	bl	800da14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2204      	movs	r2, #4
 8009f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f003 fd2b 	bl	800d9d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2205      	movs	r2, #5
 8009f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f96:	2300      	movs	r3, #0
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f003 fd39 	bl	800da14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009fb0:	bf00      	nop
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
	...

08009fbc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc2:	f3ef 8305 	mrs	r3, IPSR
 8009fc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10f      	bne.n	8009fee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fce:	f3ef 8310 	mrs	r3, PRIMASK
 8009fd2:	607b      	str	r3, [r7, #4]
  return(result);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d105      	bne.n	8009fe6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fda:	f3ef 8311 	mrs	r3, BASEPRI
 8009fde:	603b      	str	r3, [r7, #0]
  return(result);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d007      	beq.n	8009ff6 <osKernelInitialize+0x3a>
 8009fe6:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <osKernelInitialize+0x64>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d103      	bne.n	8009ff6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009fee:	f06f 0305 	mvn.w	r3, #5
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e00c      	b.n	800a010 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <osKernelInitialize+0x64>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d105      	bne.n	800a00a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ffe:	4b08      	ldr	r3, [pc, #32]	; (800a020 <osKernelInitialize+0x64>)
 800a000:	2201      	movs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	e002      	b.n	800a010 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a010:	68fb      	ldr	r3, [r7, #12]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	20000f14 	.word	0x20000f14

0800a024 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02a:	f3ef 8305 	mrs	r3, IPSR
 800a02e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a030:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10f      	bne.n	800a056 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a036:	f3ef 8310 	mrs	r3, PRIMASK
 800a03a:	607b      	str	r3, [r7, #4]
  return(result);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d105      	bne.n	800a04e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a042:	f3ef 8311 	mrs	r3, BASEPRI
 800a046:	603b      	str	r3, [r7, #0]
  return(result);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d007      	beq.n	800a05e <osKernelStart+0x3a>
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <osKernelStart+0x68>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d103      	bne.n	800a05e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a056:	f06f 0305 	mvn.w	r3, #5
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e010      	b.n	800a080 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a05e:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <osKernelStart+0x68>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d109      	bne.n	800a07a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a066:	f7ff ffa1 	bl	8009fac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a06a:	4b08      	ldr	r3, [pc, #32]	; (800a08c <osKernelStart+0x68>)
 800a06c:	2202      	movs	r2, #2
 800a06e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a070:	f001 fa2c 	bl	800b4cc <vTaskStartScheduler>
      stat = osOK;
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e002      	b.n	800a080 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295
 800a07e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a080:	68fb      	ldr	r3, [r7, #12]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000f14 	.word	0x20000f14

0800a090 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b090      	sub	sp, #64	; 0x40
 800a094:	af04      	add	r7, sp, #16
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a09c:	2300      	movs	r3, #0
 800a09e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a0:	f3ef 8305 	mrs	r3, IPSR
 800a0a4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a0a6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f040 808f 	bne.w	800a1cc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b2:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0ba:	f3ef 8311 	mrs	r3, BASEPRI
 800a0be:	617b      	str	r3, [r7, #20]
  return(result);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <osThreadNew+0x3e>
 800a0c6:	4b44      	ldr	r3, [pc, #272]	; (800a1d8 <osThreadNew+0x148>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d07e      	beq.n	800a1cc <osThreadNew+0x13c>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d07b      	beq.n	800a1cc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a0d4:	2380      	movs	r3, #128	; 0x80
 800a0d6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a0d8:	2318      	movs	r3, #24
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d045      	beq.n	800a178 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <osThreadNew+0x6a>
        name = attr->name;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d008      	beq.n	800a120 <osThreadNew+0x90>
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	2b38      	cmp	r3, #56	; 0x38
 800a112:	d805      	bhi.n	800a120 <osThreadNew+0x90>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <osThreadNew+0x94>
        return (NULL);
 800a120:	2300      	movs	r3, #0
 800a122:	e054      	b.n	800a1ce <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	089b      	lsrs	r3, r3, #2
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00e      	beq.n	800a15a <osThreadNew+0xca>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	2ba7      	cmp	r3, #167	; 0xa7
 800a142:	d90a      	bls.n	800a15a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <osThreadNew+0xca>
        mem = 1;
 800a154:	2301      	movs	r3, #1
 800a156:	623b      	str	r3, [r7, #32]
 800a158:	e010      	b.n	800a17c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10c      	bne.n	800a17c <osThreadNew+0xec>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d108      	bne.n	800a17c <osThreadNew+0xec>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d104      	bne.n	800a17c <osThreadNew+0xec>
          mem = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	623b      	str	r3, [r7, #32]
 800a176:	e001      	b.n	800a17c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d110      	bne.n	800a1a4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a18a:	9202      	str	r2, [sp, #8]
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 ffa1 	bl	800b0e0 <xTaskCreateStatic>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	613b      	str	r3, [r7, #16]
 800a1a2:	e013      	b.n	800a1cc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d110      	bne.n	800a1cc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	f107 0310 	add.w	r3, r7, #16
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 fff2 	bl	800b1a6 <xTaskCreate>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d001      	beq.n	800a1cc <osThreadNew+0x13c>
          hTask = NULL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1cc:	693b      	ldr	r3, [r7, #16]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3730      	adds	r7, #48	; 0x30
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000f14 	.word	0x20000f14

0800a1dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e4:	f3ef 8305 	mrs	r3, IPSR
 800a1e8:	613b      	str	r3, [r7, #16]
  return(result);
 800a1ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10f      	bne.n	800a210 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d105      	bne.n	800a208 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1fc:	f3ef 8311 	mrs	r3, BASEPRI
 800a200:	60bb      	str	r3, [r7, #8]
  return(result);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d007      	beq.n	800a218 <osDelay+0x3c>
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <osDelay+0x58>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d103      	bne.n	800a218 <osDelay+0x3c>
    stat = osErrorISR;
 800a210:	f06f 0305 	mvn.w	r3, #5
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e007      	b.n	800a228 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a218:	2300      	movs	r3, #0
 800a21a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 f91c 	bl	800b460 <vTaskDelay>
    }
  }

  return (stat);
 800a228:	697b      	ldr	r3, [r7, #20]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20000f14 	.word	0x20000f14

0800a238 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f002 fadf 	bl	800c804 <pvTimerGetTimerID>
 800a246:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d005      	beq.n	800a25a <TimerCallback+0x22>
    callb->func (callb->arg);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	6852      	ldr	r2, [r2, #4]
 800a256:	4610      	mov	r0, r2
 800a258:	4798      	blx	r3
  }
}
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a264:	b580      	push	{r7, lr}
 800a266:	b08e      	sub	sp, #56	; 0x38
 800a268:	af02      	add	r7, sp, #8
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	603b      	str	r3, [r7, #0]
 800a270:	460b      	mov	r3, r1
 800a272:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a278:	f3ef 8305 	mrs	r3, IPSR
 800a27c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a27e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a280:	2b00      	cmp	r3, #0
 800a282:	d16a      	bne.n	800a35a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a284:	f3ef 8310 	mrs	r3, PRIMASK
 800a288:	617b      	str	r3, [r7, #20]
  return(result);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d105      	bne.n	800a29c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a290:	f3ef 8311 	mrs	r3, BASEPRI
 800a294:	613b      	str	r3, [r7, #16]
  return(result);
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <osTimerNew+0x40>
 800a29c:	4b31      	ldr	r3, [pc, #196]	; (800a364 <osTimerNew+0x100>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d05a      	beq.n	800a35a <osTimerNew+0xf6>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d057      	beq.n	800a35a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a2aa:	2008      	movs	r0, #8
 800a2ac:	f002 fd02 	bl	800ccb4 <pvPortMalloc>
 800a2b0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d050      	beq.n	800a35a <osTimerNew+0xf6>
      callb->func = func;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ce:	e001      	b.n	800a2d4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d8:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d01c      	beq.n	800a31e <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <osTimerNew+0x8e>
          name = attr->name;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d006      	beq.n	800a308 <osTimerNew+0xa4>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	2b2b      	cmp	r3, #43	; 0x2b
 800a300:	d902      	bls.n	800a308 <osTimerNew+0xa4>
          mem = 1;
 800a302:	2301      	movs	r3, #1
 800a304:	623b      	str	r3, [r7, #32]
 800a306:	e00c      	b.n	800a322 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d108      	bne.n	800a322 <osTimerNew+0xbe>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d104      	bne.n	800a322 <osTimerNew+0xbe>
            mem = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	623b      	str	r3, [r7, #32]
 800a31c:	e001      	b.n	800a322 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d10c      	bne.n	800a342 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <osTimerNew+0x104>)
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a336:	2101      	movs	r1, #1
 800a338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a33a:	f001 fed2 	bl	800c0e2 <xTimerCreateStatic>
 800a33e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a340:	e00b      	b.n	800a35a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d108      	bne.n	800a35a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a348:	4b07      	ldr	r3, [pc, #28]	; (800a368 <osTimerNew+0x104>)
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a350:	2101      	movs	r1, #1
 800a352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a354:	f001 fea4 	bl	800c0a0 <xTimerCreate>
 800a358:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3730      	adds	r7, #48	; 0x30
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20000f14 	.word	0x20000f14
 800a368:	0800a239 	.word	0x0800a239

0800a36c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08c      	sub	sp, #48	; 0x30
 800a370:	af02      	add	r7, sp, #8
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a37c:	f3ef 8305 	mrs	r3, IPSR
 800a380:	61bb      	str	r3, [r7, #24]
  return(result);
 800a382:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a384:	2b00      	cmp	r3, #0
 800a386:	d16f      	bne.n	800a468 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a388:	f3ef 8310 	mrs	r3, PRIMASK
 800a38c:	617b      	str	r3, [r7, #20]
  return(result);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d105      	bne.n	800a3a0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a394:	f3ef 8311 	mrs	r3, BASEPRI
 800a398:	613b      	str	r3, [r7, #16]
  return(result);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <osMessageQueueNew+0x3c>
 800a3a0:	4b34      	ldr	r3, [pc, #208]	; (800a474 <osMessageQueueNew+0x108>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d05f      	beq.n	800a468 <osMessageQueueNew+0xfc>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d05c      	beq.n	800a468 <osMessageQueueNew+0xfc>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d059      	beq.n	800a468 <osMessageQueueNew+0xfc>
    mem = -1;
 800a3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d029      	beq.n	800a414 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d012      	beq.n	800a3ee <osMessageQueueNew+0x82>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	2b4f      	cmp	r3, #79	; 0x4f
 800a3ce:	d90e      	bls.n	800a3ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	695a      	ldr	r2, [r3, #20]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	fb01 f303 	mul.w	r3, r1, r3
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d302      	bcc.n	800a3ee <osMessageQueueNew+0x82>
        mem = 1;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	623b      	str	r3, [r7, #32]
 800a3ec:	e014      	b.n	800a418 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d110      	bne.n	800a418 <osMessageQueueNew+0xac>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10c      	bne.n	800a418 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a402:	2b00      	cmp	r3, #0
 800a404:	d108      	bne.n	800a418 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <osMessageQueueNew+0xac>
          mem = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	623b      	str	r3, [r7, #32]
 800a412:	e001      	b.n	800a418 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a414:	2300      	movs	r3, #0
 800a416:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d10b      	bne.n	800a436 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691a      	ldr	r2, [r3, #16]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	2100      	movs	r1, #0
 800a428:	9100      	str	r1, [sp, #0]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 f975 	bl	800a71c <xQueueGenericCreateStatic>
 800a432:	6278      	str	r0, [r7, #36]	; 0x24
 800a434:	e008      	b.n	800a448 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d105      	bne.n	800a448 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a43c:	2200      	movs	r2, #0
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f9ed 	bl	800a820 <xQueueGenericCreate>
 800a446:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00c      	beq.n	800a468 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <osMessageQueueNew+0xf0>
        name = attr->name;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	61fb      	str	r3, [r7, #28]
 800a45a:	e001      	b.n	800a460 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a460:	69f9      	ldr	r1, [r7, #28]
 800a462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a464:	f000 fdde 	bl	800b024 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3728      	adds	r7, #40	; 0x28
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000f14 	.word	0x20000f14

0800a478 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4a07      	ldr	r2, [pc, #28]	; (800a4a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4a06      	ldr	r2, [pc, #24]	; (800a4a8 <vApplicationGetIdleTaskMemory+0x30>)
 800a48e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2280      	movs	r2, #128	; 0x80
 800a494:	601a      	str	r2, [r3, #0]
}
 800a496:	bf00      	nop
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000f18 	.word	0x20000f18
 800a4a8:	20000fc0 	.word	0x20000fc0

0800a4ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4a07      	ldr	r2, [pc, #28]	; (800a4d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	4a06      	ldr	r2, [pc, #24]	; (800a4dc <vApplicationGetTimerTaskMemory+0x30>)
 800a4c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4ca:	601a      	str	r2, [r3, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	200011c0 	.word	0x200011c0
 800a4dc:	20001268 	.word	0x20001268

0800a4e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f103 0208 	add.w	r2, r3, #8
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f103 0208 	add.w	r2, r3, #8
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f103 0208 	add.w	r2, r3, #8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a53a:	b480      	push	{r7}
 800a53c:	b085      	sub	sp, #20
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a582:	b480      	push	{r7}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d103      	bne.n	800a5a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e00c      	b.n	800a5bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e002      	b.n	800a5b0 <vListInsert+0x2e>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d2f6      	bcs.n	800a5aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	6892      	ldr	r2, [r2, #8]
 800a60a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	6852      	ldr	r2, [r2, #4]
 800a614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d103      	bne.n	800a628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	1e5a      	subs	r2, r3, #1
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10c      	bne.n	800a676 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	b672      	cpsid	i
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	b662      	cpsie	i
 800a670:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a676:	f002 f9f1 	bl	800ca5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a686:	fb01 f303 	mul.w	r3, r1, r3
 800a68a:	441a      	add	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	68f9      	ldr	r1, [r7, #12]
 800a6aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6ac:	fb01 f303 	mul.w	r3, r1, r3
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	22ff      	movs	r2, #255	; 0xff
 800a6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	22ff      	movs	r2, #255	; 0xff
 800a6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d114      	bne.n	800a6f6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01a      	beq.n	800a70a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3310      	adds	r3, #16
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 f9b1 	bl	800ba40 <xTaskRemoveFromEventList>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d012      	beq.n	800a70a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6e4:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <xQueueGenericReset+0xd0>)
 800a6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	e009      	b.n	800a70a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3310      	adds	r3, #16
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fef0 	bl	800a4e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3324      	adds	r3, #36	; 0x24
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff feeb 	bl	800a4e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a70a:	f002 f9db 	bl	800cac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a70e:	2301      	movs	r3, #1
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08e      	sub	sp, #56	; 0x38
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10c      	bne.n	800a74a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10c      	bne.n	800a76a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	b672      	cpsid	i
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	b662      	cpsie	i
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <xQueueGenericCreateStatic+0x5a>
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <xQueueGenericCreateStatic+0x5e>
 800a776:	2301      	movs	r3, #1
 800a778:	e000      	b.n	800a77c <xQueueGenericCreateStatic+0x60>
 800a77a:	2300      	movs	r3, #0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10c      	bne.n	800a79a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	b672      	cpsid	i
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	b662      	cpsie	i
 800a794:	623b      	str	r3, [r7, #32]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <xQueueGenericCreateStatic+0x8a>
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <xQueueGenericCreateStatic+0x8e>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <xQueueGenericCreateStatic+0x90>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10c      	bne.n	800a7ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	b672      	cpsid	i
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	b662      	cpsie	i
 800a7c4:	61fb      	str	r3, [r7, #28]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7ca:	2350      	movs	r3, #80	; 0x50
 800a7cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b50      	cmp	r3, #80	; 0x50
 800a7d2:	d00c      	beq.n	800a7ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d8:	b672      	cpsid	i
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	b662      	cpsie	i
 800a7e8:	61bb      	str	r3, [r7, #24]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00d      	beq.n	800a816 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a802:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4613      	mov	r3, r2
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f847 	bl	800a8a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a818:	4618      	mov	r0, r3
 800a81a:	3730      	adds	r7, #48	; 0x30
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08a      	sub	sp, #40	; 0x28
 800a824:	af02      	add	r7, sp, #8
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10c      	bne.n	800a84e <xQueueGenericCreate+0x2e>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	b672      	cpsid	i
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	b662      	cpsie	i
 800a848:	613b      	str	r3, [r7, #16]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a854:	2300      	movs	r3, #0
 800a856:	61fb      	str	r3, [r7, #28]
 800a858:	e004      	b.n	800a864 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	fb02 f303 	mul.w	r3, r2, r3
 800a862:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	3350      	adds	r3, #80	; 0x50
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fa23 	bl	800ccb4 <pvPortMalloc>
 800a86e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d011      	beq.n	800a89a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	3350      	adds	r3, #80	; 0x50
 800a87e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a888:	79fa      	ldrb	r2, [r7, #7]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	4613      	mov	r3, r2
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 f805 	bl	800a8a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a89a:	69bb      	ldr	r3, [r7, #24]
	}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d103      	bne.n	800a8c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e002      	b.n	800a8c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	69b8      	ldr	r0, [r7, #24]
 800a8d6:	f7ff feb7 	bl	800a648 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	78fa      	ldrb	r2, [r7, #3]
 800a8de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	; 0x38
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10c      	bne.n	800a922 <xQueueGenericSend+0x36>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	b672      	cpsid	i
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	b662      	cpsie	i
 800a91c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d103      	bne.n	800a930 <xQueueGenericSend+0x44>
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <xQueueGenericSend+0x48>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <xQueueGenericSend+0x4a>
 800a934:	2300      	movs	r3, #0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10c      	bne.n	800a954 <xQueueGenericSend+0x68>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	b672      	cpsid	i
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	b662      	cpsie	i
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d103      	bne.n	800a962 <xQueueGenericSend+0x76>
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d101      	bne.n	800a966 <xQueueGenericSend+0x7a>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <xQueueGenericSend+0x7c>
 800a966:	2300      	movs	r3, #0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10c      	bne.n	800a986 <xQueueGenericSend+0x9a>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	b672      	cpsid	i
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	b662      	cpsie	i
 800a980:	623b      	str	r3, [r7, #32]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a986:	f001 fa5d 	bl	800be44 <xTaskGetSchedulerState>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <xQueueGenericSend+0xaa>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <xQueueGenericSend+0xae>
 800a996:	2301      	movs	r3, #1
 800a998:	e000      	b.n	800a99c <xQueueGenericSend+0xb0>
 800a99a:	2300      	movs	r3, #0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10c      	bne.n	800a9ba <xQueueGenericSend+0xce>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	b672      	cpsid	i
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	b662      	cpsie	i
 800a9b4:	61fb      	str	r3, [r7, #28]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9ba:	f002 f84f 	bl	800ca5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d302      	bcc.n	800a9d0 <xQueueGenericSend+0xe4>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d129      	bne.n	800aa24 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d6:	f000 fa15 	bl	800ae04 <prvCopyDataToQueue>
 800a9da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d010      	beq.n	800aa06 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	3324      	adds	r3, #36	; 0x24
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f001 f829 	bl	800ba40 <xTaskRemoveFromEventList>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d013      	beq.n	800aa1c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9f4:	4b3f      	ldr	r3, [pc, #252]	; (800aaf4 <xQueueGenericSend+0x208>)
 800a9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	e00a      	b.n	800aa1c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d007      	beq.n	800aa1c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa0c:	4b39      	ldr	r3, [pc, #228]	; (800aaf4 <xQueueGenericSend+0x208>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa1c:	f002 f852 	bl	800cac4 <vPortExitCritical>
				return pdPASS;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e063      	b.n	800aaec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d103      	bne.n	800aa32 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa2a:	f002 f84b 	bl	800cac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e05c      	b.n	800aaec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d106      	bne.n	800aa46 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa38:	f107 0314 	add.w	r3, r7, #20
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 f865 	bl	800bb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa42:	2301      	movs	r3, #1
 800aa44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa46:	f002 f83d 	bl	800cac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa4a:	f000 fdb3 	bl	800b5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa4e:	f002 f805 	bl	800ca5c <vPortEnterCritical>
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa58:	b25b      	sxtb	r3, r3
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d103      	bne.n	800aa68 <xQueueGenericSend+0x17c>
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa6e:	b25b      	sxtb	r3, r3
 800aa70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa74:	d103      	bne.n	800aa7e <xQueueGenericSend+0x192>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa7e:	f002 f821 	bl	800cac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa82:	1d3a      	adds	r2, r7, #4
 800aa84:	f107 0314 	add.w	r3, r7, #20
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 f854 	bl	800bb38 <xTaskCheckForTimeOut>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d124      	bne.n	800aae0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa98:	f000 faac 	bl	800aff4 <prvIsQueueFull>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d018      	beq.n	800aad4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	3310      	adds	r3, #16
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 ff74 	bl	800b998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aab2:	f000 fa37 	bl	800af24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aab6:	f000 fd8b 	bl	800b5d0 <xTaskResumeAll>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f47f af7c 	bne.w	800a9ba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800aac2:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <xQueueGenericSend+0x208>)
 800aac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	e772      	b.n	800a9ba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aad6:	f000 fa25 	bl	800af24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aada:	f000 fd79 	bl	800b5d0 <xTaskResumeAll>
 800aade:	e76c      	b.n	800a9ba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aae2:	f000 fa1f 	bl	800af24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aae6:	f000 fd73 	bl	800b5d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aaea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3738      	adds	r7, #56	; 0x38
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	e000ed04 	.word	0xe000ed04

0800aaf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08e      	sub	sp, #56	; 0x38
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10c      	bne.n	800ab2a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	b672      	cpsid	i
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	b662      	cpsie	i
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <xQueueGenericSendFromISR+0x40>
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <xQueueGenericSendFromISR+0x44>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e000      	b.n	800ab3e <xQueueGenericSendFromISR+0x46>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10c      	bne.n	800ab5c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab46:	b672      	cpsid	i
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	b662      	cpsie	i
 800ab56:	623b      	str	r3, [r7, #32]
}
 800ab58:	bf00      	nop
 800ab5a:	e7fe      	b.n	800ab5a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d103      	bne.n	800ab6a <xQueueGenericSendFromISR+0x72>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <xQueueGenericSendFromISR+0x76>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e000      	b.n	800ab70 <xQueueGenericSendFromISR+0x78>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10c      	bne.n	800ab8e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	b672      	cpsid	i
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	b662      	cpsie	i
 800ab88:	61fb      	str	r3, [r7, #28]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab8e:	f002 f84d 	bl	800cc2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab92:	f3ef 8211 	mrs	r2, BASEPRI
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	b672      	cpsid	i
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	b662      	cpsie	i
 800abaa:	61ba      	str	r2, [r7, #24]
 800abac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abba:	429a      	cmp	r2, r3
 800abbc:	d302      	bcc.n	800abc4 <xQueueGenericSendFromISR+0xcc>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d12c      	bne.n	800ac1e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abd4:	f000 f916 	bl	800ae04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d112      	bne.n	800ac08 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d016      	beq.n	800ac18 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	3324      	adds	r3, #36	; 0x24
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 ff26 	bl	800ba40 <xTaskRemoveFromEventList>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00e      	beq.n	800ac18 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	e007      	b.n	800ac18 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	b25a      	sxtb	r2, r3
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ac1c:	e001      	b.n	800ac22 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	637b      	str	r3, [r7, #52]	; 0x34
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3738      	adds	r7, #56	; 0x38
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08c      	sub	sp, #48	; 0x30
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac44:	2300      	movs	r3, #0
 800ac46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10c      	bne.n	800ac6c <xQueueReceive+0x34>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	b672      	cpsid	i
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	b662      	cpsie	i
 800ac66:	623b      	str	r3, [r7, #32]
}
 800ac68:	bf00      	nop
 800ac6a:	e7fe      	b.n	800ac6a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d103      	bne.n	800ac7a <xQueueReceive+0x42>
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <xQueueReceive+0x46>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <xQueueReceive+0x48>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10c      	bne.n	800ac9e <xQueueReceive+0x66>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	b672      	cpsid	i
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	b662      	cpsie	i
 800ac98:	61fb      	str	r3, [r7, #28]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac9e:	f001 f8d1 	bl	800be44 <xTaskGetSchedulerState>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <xQueueReceive+0x76>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <xQueueReceive+0x7a>
 800acae:	2301      	movs	r3, #1
 800acb0:	e000      	b.n	800acb4 <xQueueReceive+0x7c>
 800acb2:	2300      	movs	r3, #0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10c      	bne.n	800acd2 <xQueueReceive+0x9a>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	b672      	cpsid	i
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	b662      	cpsie	i
 800accc:	61bb      	str	r3, [r7, #24]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acd2:	f001 fec3 	bl	800ca5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01f      	beq.n	800ad22 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ace2:	68b9      	ldr	r1, [r7, #8]
 800ace4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace6:	f000 f8f7 	bl	800aed8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	1e5a      	subs	r2, r3, #1
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00f      	beq.n	800ad1a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	3310      	adds	r3, #16
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 fe9e 	bl	800ba40 <xTaskRemoveFromEventList>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d007      	beq.n	800ad1a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad0a:	4b3d      	ldr	r3, [pc, #244]	; (800ae00 <xQueueReceive+0x1c8>)
 800ad0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad1a:	f001 fed3 	bl	800cac4 <vPortExitCritical>
				return pdPASS;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e069      	b.n	800adf6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad28:	f001 fecc 	bl	800cac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e062      	b.n	800adf6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad36:	f107 0310 	add.w	r3, r7, #16
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fee6 	bl	800bb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad44:	f001 febe 	bl	800cac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad48:	f000 fc34 	bl	800b5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad4c:	f001 fe86 	bl	800ca5c <vPortEnterCritical>
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad56:	b25b      	sxtb	r3, r3
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d103      	bne.n	800ad66 <xQueueReceive+0x12e>
 800ad5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad6c:	b25b      	sxtb	r3, r3
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d103      	bne.n	800ad7c <xQueueReceive+0x144>
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad7c:	f001 fea2 	bl	800cac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad80:	1d3a      	adds	r2, r7, #4
 800ad82:	f107 0310 	add.w	r3, r7, #16
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fed5 	bl	800bb38 <xTaskCheckForTimeOut>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d123      	bne.n	800addc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad96:	f000 f917 	bl	800afc8 <prvIsQueueEmpty>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d017      	beq.n	800add0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	4611      	mov	r1, r2
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 fdf5 	bl	800b998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adb0:	f000 f8b8 	bl	800af24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adb4:	f000 fc0c 	bl	800b5d0 <xTaskResumeAll>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d189      	bne.n	800acd2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800adbe:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <xQueueReceive+0x1c8>)
 800adc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	e780      	b.n	800acd2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800add0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add2:	f000 f8a7 	bl	800af24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800add6:	f000 fbfb 	bl	800b5d0 <xTaskResumeAll>
 800adda:	e77a      	b.n	800acd2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800addc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adde:	f000 f8a1 	bl	800af24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ade2:	f000 fbf5 	bl	800b5d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade8:	f000 f8ee 	bl	800afc8 <prvIsQueueEmpty>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f43f af6f 	beq.w	800acd2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3730      	adds	r7, #48	; 0x30
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10d      	bne.n	800ae3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d14d      	bne.n	800aec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 f826 	bl	800be80 <xTaskPriorityDisinherit>
 800ae34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	609a      	str	r2, [r3, #8]
 800ae3c:	e043      	b.n	800aec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d119      	bne.n	800ae78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6858      	ldr	r0, [r3, #4]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	68b9      	ldr	r1, [r7, #8]
 800ae50:	f002 ffea 	bl	800de28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5c:	441a      	add	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d32b      	bcc.n	800aec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	605a      	str	r2, [r3, #4]
 800ae76:	e026      	b.n	800aec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68d8      	ldr	r0, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae80:	461a      	mov	r2, r3
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	f002 ffd0 	bl	800de28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae90:	425b      	negs	r3, r3
 800ae92:	441a      	add	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d207      	bcs.n	800aeb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeac:	425b      	negs	r3, r3
 800aeae:	441a      	add	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d105      	bne.n	800aec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aece:	697b      	ldr	r3, [r7, #20]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d018      	beq.n	800af1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	441a      	add	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	429a      	cmp	r2, r3
 800af02:	d303      	bcc.n	800af0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68d9      	ldr	r1, [r3, #12]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af14:	461a      	mov	r2, r3
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f002 ff86 	bl	800de28 <memcpy>
	}
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af2c:	f001 fd96 	bl	800ca5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af38:	e011      	b.n	800af5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d012      	beq.n	800af68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3324      	adds	r3, #36	; 0x24
 800af46:	4618      	mov	r0, r3
 800af48:	f000 fd7a 	bl	800ba40 <xTaskRemoveFromEventList>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af52:	f000 fe57 	bl	800bc04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	3b01      	subs	r3, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af62:	2b00      	cmp	r3, #0
 800af64:	dce9      	bgt.n	800af3a <prvUnlockQueue+0x16>
 800af66:	e000      	b.n	800af6a <prvUnlockQueue+0x46>
					break;
 800af68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	22ff      	movs	r2, #255	; 0xff
 800af6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af72:	f001 fda7 	bl	800cac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af76:	f001 fd71 	bl	800ca5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af82:	e011      	b.n	800afa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d012      	beq.n	800afb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3310      	adds	r3, #16
 800af90:	4618      	mov	r0, r3
 800af92:	f000 fd55 	bl	800ba40 <xTaskRemoveFromEventList>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af9c:	f000 fe32 	bl	800bc04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dce9      	bgt.n	800af84 <prvUnlockQueue+0x60>
 800afb0:	e000      	b.n	800afb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	22ff      	movs	r2, #255	; 0xff
 800afb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afbc:	f001 fd82 	bl	800cac4 <vPortExitCritical>
}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afd0:	f001 fd44 	bl	800ca5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afdc:	2301      	movs	r3, #1
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	e001      	b.n	800afe6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afe6:	f001 fd6d 	bl	800cac4 <vPortExitCritical>

	return xReturn;
 800afea:	68fb      	ldr	r3, [r7, #12]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800affc:	f001 fd2e 	bl	800ca5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b008:	429a      	cmp	r2, r3
 800b00a:	d102      	bne.n	800b012 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	e001      	b.n	800b016 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b012:	2300      	movs	r3, #0
 800b014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b016:	f001 fd55 	bl	800cac4 <vPortExitCritical>

	return xReturn;
 800b01a:	68fb      	ldr	r3, [r7, #12]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b02e:	2300      	movs	r3, #0
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	e014      	b.n	800b05e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b034:	4a0f      	ldr	r2, [pc, #60]	; (800b074 <vQueueAddToRegistry+0x50>)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b040:	490c      	ldr	r1, [pc, #48]	; (800b074 <vQueueAddToRegistry+0x50>)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b04a:	4a0a      	ldr	r2, [pc, #40]	; (800b074 <vQueueAddToRegistry+0x50>)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	4413      	add	r3, r2
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b056:	e006      	b.n	800b066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3301      	adds	r3, #1
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b07      	cmp	r3, #7
 800b062:	d9e7      	bls.n	800b034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b064:	bf00      	nop
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20001668 	.word	0x20001668

0800b078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b088:	f001 fce8 	bl	800ca5c <vPortEnterCritical>
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b092:	b25b      	sxtb	r3, r3
 800b094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b098:	d103      	bne.n	800b0a2 <vQueueWaitForMessageRestricted+0x2a>
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0a8:	b25b      	sxtb	r3, r3
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d103      	bne.n	800b0b8 <vQueueWaitForMessageRestricted+0x40>
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b8:	f001 fd04 	bl	800cac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	3324      	adds	r3, #36	; 0x24
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 fc89 	bl	800b9e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0d2:	6978      	ldr	r0, [r7, #20]
 800b0d4:	f7ff ff26 	bl	800af24 <prvUnlockQueue>
	}
 800b0d8:	bf00      	nop
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08e      	sub	sp, #56	; 0x38
 800b0e4:	af04      	add	r7, sp, #16
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10c      	bne.n	800b10e <xTaskCreateStatic+0x2e>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	b672      	cpsid	i
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	b662      	cpsie	i
 800b108:	623b      	str	r3, [r7, #32]
}
 800b10a:	bf00      	nop
 800b10c:	e7fe      	b.n	800b10c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10c      	bne.n	800b12e <xTaskCreateStatic+0x4e>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	b672      	cpsid	i
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	b662      	cpsie	i
 800b128:	61fb      	str	r3, [r7, #28]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b12e:	23a8      	movs	r3, #168	; 0xa8
 800b130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2ba8      	cmp	r3, #168	; 0xa8
 800b136:	d00c      	beq.n	800b152 <xTaskCreateStatic+0x72>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	b672      	cpsid	i
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	b662      	cpsie	i
 800b14c:	61bb      	str	r3, [r7, #24]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b152:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01e      	beq.n	800b198 <xTaskCreateStatic+0xb8>
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01b      	beq.n	800b198 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b168:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	2202      	movs	r2, #2
 800b16e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b172:	2300      	movs	r3, #0
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	9302      	str	r3, [sp, #8]
 800b17a:	f107 0314 	add.w	r3, r7, #20
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f000 f850 	bl	800b230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b192:	f000 f8f5 	bl	800b380 <prvAddNewTaskToReadyList>
 800b196:	e001      	b.n	800b19c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b19c:	697b      	ldr	r3, [r7, #20]
	}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3728      	adds	r7, #40	; 0x28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b08c      	sub	sp, #48	; 0x30
 800b1aa:	af04      	add	r7, sp, #16
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	603b      	str	r3, [r7, #0]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1b6:	88fb      	ldrh	r3, [r7, #6]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 fd7a 	bl	800ccb4 <pvPortMalloc>
 800b1c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00e      	beq.n	800b1e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1c8:	20a8      	movs	r0, #168	; 0xa8
 800b1ca:	f001 fd73 	bl	800ccb4 <pvPortMalloc>
 800b1ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	631a      	str	r2, [r3, #48]	; 0x30
 800b1dc:	e005      	b.n	800b1ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1de:	6978      	ldr	r0, [r7, #20]
 800b1e0:	f001 fe32 	bl	800ce48 <vPortFree>
 800b1e4:	e001      	b.n	800b1ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d017      	beq.n	800b220 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1f8:	88fa      	ldrh	r2, [r7, #6]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9303      	str	r3, [sp, #12]
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	9302      	str	r3, [sp, #8]
 800b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 f80e 	bl	800b230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b214:	69f8      	ldr	r0, [r7, #28]
 800b216:	f000 f8b3 	bl	800b380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b21a:	2301      	movs	r3, #1
 800b21c:	61bb      	str	r3, [r7, #24]
 800b21e:	e002      	b.n	800b226 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b226:	69bb      	ldr	r3, [r7, #24]
	}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	461a      	mov	r2, r3
 800b248:	21a5      	movs	r1, #165	; 0xa5
 800b24a:	f002 fd53 	bl	800dcf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b258:	440b      	add	r3, r1
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	f023 0307 	bic.w	r3, r3, #7
 800b266:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f003 0307 	and.w	r3, r3, #7
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00c      	beq.n	800b28c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	b672      	cpsid	i
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	b662      	cpsie	i
 800b286:	617b      	str	r3, [r7, #20]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d01f      	beq.n	800b2d2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b292:	2300      	movs	r3, #0
 800b294:	61fb      	str	r3, [r7, #28]
 800b296:	e012      	b.n	800b2be <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	4413      	add	r3, r2
 800b29e:	7819      	ldrb	r1, [r3, #0]
 800b2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	3334      	adds	r3, #52	; 0x34
 800b2a8:	460a      	mov	r2, r1
 800b2aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	61fb      	str	r3, [r7, #28]
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	2b0f      	cmp	r3, #15
 800b2c2:	d9e9      	bls.n	800b298 <prvInitialiseNewTask+0x68>
 800b2c4:	e000      	b.n	800b2c8 <prvInitialiseNewTask+0x98>
			{
				break;
 800b2c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2d0:	e003      	b.n	800b2da <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	2b37      	cmp	r3, #55	; 0x37
 800b2de:	d901      	bls.n	800b2e4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2e0:	2337      	movs	r3, #55	; 0x37
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7ff f910 	bl	800a520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	3318      	adds	r3, #24
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff f90b 	bl	800a520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b30e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b31e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	2200      	movs	r2, #0
 800b324:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	3354      	adds	r3, #84	; 0x54
 800b334:	224c      	movs	r2, #76	; 0x4c
 800b336:	2100      	movs	r1, #0
 800b338:	4618      	mov	r0, r3
 800b33a:	f002 fcdb 	bl	800dcf4 <memset>
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	4a0c      	ldr	r2, [pc, #48]	; (800b374 <prvInitialiseNewTask+0x144>)
 800b342:	659a      	str	r2, [r3, #88]	; 0x58
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <prvInitialiseNewTask+0x148>)
 800b348:	65da      	str	r2, [r3, #92]	; 0x5c
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	4a0b      	ldr	r2, [pc, #44]	; (800b37c <prvInitialiseNewTask+0x14c>)
 800b34e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	68f9      	ldr	r1, [r7, #12]
 800b354:	69b8      	ldr	r0, [r7, #24]
 800b356:	f001 fa77 	bl	800c848 <pxPortInitialiseStack>
 800b35a:	4602      	mov	r2, r0
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d002      	beq.n	800b36c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b36c:	bf00      	nop
 800b36e:	3720      	adds	r7, #32
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	200072e0 	.word	0x200072e0
 800b378:	20007348 	.word	0x20007348
 800b37c:	200073b0 	.word	0x200073b0

0800b380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b388:	f001 fb68 	bl	800ca5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b38c:	4b2d      	ldr	r3, [pc, #180]	; (800b444 <prvAddNewTaskToReadyList+0xc4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	4a2c      	ldr	r2, [pc, #176]	; (800b444 <prvAddNewTaskToReadyList+0xc4>)
 800b394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b396:	4b2c      	ldr	r3, [pc, #176]	; (800b448 <prvAddNewTaskToReadyList+0xc8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d109      	bne.n	800b3b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b39e:	4a2a      	ldr	r2, [pc, #168]	; (800b448 <prvAddNewTaskToReadyList+0xc8>)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3a4:	4b27      	ldr	r3, [pc, #156]	; (800b444 <prvAddNewTaskToReadyList+0xc4>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d110      	bne.n	800b3ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3ac:	f000 fc4e 	bl	800bc4c <prvInitialiseTaskLists>
 800b3b0:	e00d      	b.n	800b3ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3b2:	4b26      	ldr	r3, [pc, #152]	; (800b44c <prvAddNewTaskToReadyList+0xcc>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ba:	4b23      	ldr	r3, [pc, #140]	; (800b448 <prvAddNewTaskToReadyList+0xc8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d802      	bhi.n	800b3ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3c8:	4a1f      	ldr	r2, [pc, #124]	; (800b448 <prvAddNewTaskToReadyList+0xc8>)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3ce:	4b20      	ldr	r3, [pc, #128]	; (800b450 <prvAddNewTaskToReadyList+0xd0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	4a1e      	ldr	r2, [pc, #120]	; (800b450 <prvAddNewTaskToReadyList+0xd0>)
 800b3d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3d8:	4b1d      	ldr	r3, [pc, #116]	; (800b450 <prvAddNewTaskToReadyList+0xd0>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e4:	4b1b      	ldr	r3, [pc, #108]	; (800b454 <prvAddNewTaskToReadyList+0xd4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d903      	bls.n	800b3f4 <prvAddNewTaskToReadyList+0x74>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f0:	4a18      	ldr	r2, [pc, #96]	; (800b454 <prvAddNewTaskToReadyList+0xd4>)
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	4a15      	ldr	r2, [pc, #84]	; (800b458 <prvAddNewTaskToReadyList+0xd8>)
 800b402:	441a      	add	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3304      	adds	r3, #4
 800b408:	4619      	mov	r1, r3
 800b40a:	4610      	mov	r0, r2
 800b40c:	f7ff f895 	bl	800a53a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b410:	f001 fb58 	bl	800cac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b414:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <prvAddNewTaskToReadyList+0xcc>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00e      	beq.n	800b43a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b41c:	4b0a      	ldr	r3, [pc, #40]	; (800b448 <prvAddNewTaskToReadyList+0xc8>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	429a      	cmp	r2, r3
 800b428:	d207      	bcs.n	800b43a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b42a:	4b0c      	ldr	r3, [pc, #48]	; (800b45c <prvAddNewTaskToReadyList+0xdc>)
 800b42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b43a:	bf00      	nop
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20001b7c 	.word	0x20001b7c
 800b448:	200016a8 	.word	0x200016a8
 800b44c:	20001b88 	.word	0x20001b88
 800b450:	20001b98 	.word	0x20001b98
 800b454:	20001b84 	.word	0x20001b84
 800b458:	200016ac 	.word	0x200016ac
 800b45c:	e000ed04 	.word	0xe000ed04

0800b460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b468:	2300      	movs	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d019      	beq.n	800b4a6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b472:	4b14      	ldr	r3, [pc, #80]	; (800b4c4 <vTaskDelay+0x64>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00c      	beq.n	800b494 <vTaskDelay+0x34>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	b672      	cpsid	i
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	b662      	cpsie	i
 800b48e:	60bb      	str	r3, [r7, #8]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b494:	f000 f88e 	bl	800b5b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b498:	2100      	movs	r1, #0
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fd62 	bl	800bf64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4a0:	f000 f896 	bl	800b5d0 <xTaskResumeAll>
 800b4a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d107      	bne.n	800b4bc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <vTaskDelay+0x68>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4bc:	bf00      	nop
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20001ba4 	.word	0x20001ba4
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4da:	463a      	mov	r2, r7
 800b4dc:	1d39      	adds	r1, r7, #4
 800b4de:	f107 0308 	add.w	r3, r7, #8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe ffc8 	bl	800a478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	9202      	str	r2, [sp, #8]
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	4926      	ldr	r1, [pc, #152]	; (800b594 <vTaskStartScheduler+0xc8>)
 800b4fc:	4826      	ldr	r0, [pc, #152]	; (800b598 <vTaskStartScheduler+0xcc>)
 800b4fe:	f7ff fdef 	bl	800b0e0 <xTaskCreateStatic>
 800b502:	4603      	mov	r3, r0
 800b504:	4a25      	ldr	r2, [pc, #148]	; (800b59c <vTaskStartScheduler+0xd0>)
 800b506:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b508:	4b24      	ldr	r3, [pc, #144]	; (800b59c <vTaskStartScheduler+0xd0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e001      	b.n	800b51a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d102      	bne.n	800b526 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b520:	f000 fd74 	bl	800c00c <xTimerCreateTimerTask>
 800b524:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d11d      	bne.n	800b568 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	b672      	cpsid	i
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	b662      	cpsie	i
 800b540:	613b      	str	r3, [r7, #16]
}
 800b542:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b544:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <vTaskStartScheduler+0xd4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3354      	adds	r3, #84	; 0x54
 800b54a:	4a16      	ldr	r2, [pc, #88]	; (800b5a4 <vTaskStartScheduler+0xd8>)
 800b54c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b54e:	4b16      	ldr	r3, [pc, #88]	; (800b5a8 <vTaskStartScheduler+0xdc>)
 800b550:	f04f 32ff 	mov.w	r2, #4294967295
 800b554:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b556:	4b15      	ldr	r3, [pc, #84]	; (800b5ac <vTaskStartScheduler+0xe0>)
 800b558:	2201      	movs	r2, #1
 800b55a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b55c:	4b14      	ldr	r3, [pc, #80]	; (800b5b0 <vTaskStartScheduler+0xe4>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b562:	f001 f9fd 	bl	800c960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b566:	e010      	b.n	800b58a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d10c      	bne.n	800b58a <vTaskStartScheduler+0xbe>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	b672      	cpsid	i
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	b662      	cpsie	i
 800b584:	60fb      	str	r3, [r7, #12]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <vTaskStartScheduler+0xbc>
}
 800b58a:	bf00      	nop
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	0800dfa8 	.word	0x0800dfa8
 800b598:	0800bc1d 	.word	0x0800bc1d
 800b59c:	20001ba0 	.word	0x20001ba0
 800b5a0:	200016a8 	.word	0x200016a8
 800b5a4:	2000015c 	.word	0x2000015c
 800b5a8:	20001b9c 	.word	0x20001b9c
 800b5ac:	20001b88 	.word	0x20001b88
 800b5b0:	20001b80 	.word	0x20001b80

0800b5b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5b8:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <vTaskSuspendAll+0x18>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	4a03      	ldr	r2, [pc, #12]	; (800b5cc <vTaskSuspendAll+0x18>)
 800b5c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b5c2:	bf00      	nop
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	20001ba4 	.word	0x20001ba4

0800b5d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5de:	4b43      	ldr	r3, [pc, #268]	; (800b6ec <xTaskResumeAll+0x11c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10c      	bne.n	800b600 <xTaskResumeAll+0x30>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	b672      	cpsid	i
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	b662      	cpsie	i
 800b5fa:	603b      	str	r3, [r7, #0]
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b600:	f001 fa2c 	bl	800ca5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b604:	4b39      	ldr	r3, [pc, #228]	; (800b6ec <xTaskResumeAll+0x11c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3b01      	subs	r3, #1
 800b60a:	4a38      	ldr	r2, [pc, #224]	; (800b6ec <xTaskResumeAll+0x11c>)
 800b60c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b60e:	4b37      	ldr	r3, [pc, #220]	; (800b6ec <xTaskResumeAll+0x11c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d162      	bne.n	800b6dc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b616:	4b36      	ldr	r3, [pc, #216]	; (800b6f0 <xTaskResumeAll+0x120>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d05e      	beq.n	800b6dc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b61e:	e02f      	b.n	800b680 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b620:	4b34      	ldr	r3, [pc, #208]	; (800b6f4 <xTaskResumeAll+0x124>)
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	3318      	adds	r3, #24
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fe ffe1 	bl	800a5f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3304      	adds	r3, #4
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe ffdc 	bl	800a5f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b640:	4b2d      	ldr	r3, [pc, #180]	; (800b6f8 <xTaskResumeAll+0x128>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	429a      	cmp	r2, r3
 800b646:	d903      	bls.n	800b650 <xTaskResumeAll+0x80>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	4a2a      	ldr	r2, [pc, #168]	; (800b6f8 <xTaskResumeAll+0x128>)
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b654:	4613      	mov	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4a27      	ldr	r2, [pc, #156]	; (800b6fc <xTaskResumeAll+0x12c>)
 800b65e:	441a      	add	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3304      	adds	r3, #4
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	f7fe ff67 	bl	800a53a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b670:	4b23      	ldr	r3, [pc, #140]	; (800b700 <xTaskResumeAll+0x130>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	429a      	cmp	r2, r3
 800b678:	d302      	bcc.n	800b680 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b67a:	4b22      	ldr	r3, [pc, #136]	; (800b704 <xTaskResumeAll+0x134>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b680:	4b1c      	ldr	r3, [pc, #112]	; (800b6f4 <xTaskResumeAll+0x124>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1cb      	bne.n	800b620 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b68e:	f000 fbb9 	bl	800be04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b692:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <xTaskResumeAll+0x138>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d010      	beq.n	800b6c0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b69e:	f000 f859 	bl	800b754 <xTaskIncrementTick>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b6a8:	4b16      	ldr	r3, [pc, #88]	; (800b704 <xTaskResumeAll+0x134>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f1      	bne.n	800b69e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b6ba:	4b13      	ldr	r3, [pc, #76]	; (800b708 <xTaskResumeAll+0x138>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6c0:	4b10      	ldr	r3, [pc, #64]	; (800b704 <xTaskResumeAll+0x134>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d009      	beq.n	800b6dc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6cc:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <xTaskResumeAll+0x13c>)
 800b6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6dc:	f001 f9f2 	bl	800cac4 <vPortExitCritical>

	return xAlreadyYielded;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20001ba4 	.word	0x20001ba4
 800b6f0:	20001b7c 	.word	0x20001b7c
 800b6f4:	20001b3c 	.word	0x20001b3c
 800b6f8:	20001b84 	.word	0x20001b84
 800b6fc:	200016ac 	.word	0x200016ac
 800b700:	200016a8 	.word	0x200016a8
 800b704:	20001b90 	.word	0x20001b90
 800b708:	20001b8c 	.word	0x20001b8c
 800b70c:	e000ed04 	.word	0xe000ed04

0800b710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <xTaskGetTickCount+0x1c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b71c:	687b      	ldr	r3, [r7, #4]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20001b80 	.word	0x20001b80

0800b730 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b736:	f001 fa79 	bl	800cc2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b73a:	2300      	movs	r3, #0
 800b73c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b73e:	4b04      	ldr	r3, [pc, #16]	; (800b750 <xTaskGetTickCountFromISR+0x20>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b744:	683b      	ldr	r3, [r7, #0]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	20001b80 	.word	0x20001b80

0800b754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b75e:	4b50      	ldr	r3, [pc, #320]	; (800b8a0 <xTaskIncrementTick+0x14c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	f040 808b 	bne.w	800b87e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b768:	4b4e      	ldr	r3, [pc, #312]	; (800b8a4 <xTaskIncrementTick+0x150>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b770:	4a4c      	ldr	r2, [pc, #304]	; (800b8a4 <xTaskIncrementTick+0x150>)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d122      	bne.n	800b7c2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b77c:	4b4a      	ldr	r3, [pc, #296]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00c      	beq.n	800b7a0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	b672      	cpsid	i
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	b662      	cpsie	i
 800b79a:	603b      	str	r3, [r7, #0]
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <xTaskIncrementTick+0x4a>
 800b7a0:	4b41      	ldr	r3, [pc, #260]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	4b41      	ldr	r3, [pc, #260]	; (800b8ac <xTaskIncrementTick+0x158>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a3f      	ldr	r2, [pc, #252]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	4a3f      	ldr	r2, [pc, #252]	; (800b8ac <xTaskIncrementTick+0x158>)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	4b3e      	ldr	r3, [pc, #248]	; (800b8b0 <xTaskIncrementTick+0x15c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	4a3d      	ldr	r2, [pc, #244]	; (800b8b0 <xTaskIncrementTick+0x15c>)
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	f000 fb21 	bl	800be04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7c2:	4b3c      	ldr	r3, [pc, #240]	; (800b8b4 <xTaskIncrementTick+0x160>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d349      	bcc.n	800b860 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7cc:	4b36      	ldr	r3, [pc, #216]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d104      	bne.n	800b7e0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d6:	4b37      	ldr	r3, [pc, #220]	; (800b8b4 <xTaskIncrementTick+0x160>)
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	601a      	str	r2, [r3, #0]
					break;
 800b7de:	e03f      	b.n	800b860 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e0:	4b31      	ldr	r3, [pc, #196]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d203      	bcs.n	800b800 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7f8:	4a2e      	ldr	r2, [pc, #184]	; (800b8b4 <xTaskIncrementTick+0x160>)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7fe:	e02f      	b.n	800b860 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	3304      	adds	r3, #4
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fef5 	bl	800a5f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	3318      	adds	r3, #24
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe feec 	bl	800a5f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <xTaskIncrementTick+0x164>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	429a      	cmp	r2, r3
 800b826:	d903      	bls.n	800b830 <xTaskIncrementTick+0xdc>
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	4a22      	ldr	r2, [pc, #136]	; (800b8b8 <xTaskIncrementTick+0x164>)
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4a1f      	ldr	r2, [pc, #124]	; (800b8bc <xTaskIncrementTick+0x168>)
 800b83e:	441a      	add	r2, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	3304      	adds	r3, #4
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f7fe fe77 	bl	800a53a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b850:	4b1b      	ldr	r3, [pc, #108]	; (800b8c0 <xTaskIncrementTick+0x16c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	429a      	cmp	r2, r3
 800b858:	d3b8      	bcc.n	800b7cc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b85a:	2301      	movs	r3, #1
 800b85c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b85e:	e7b5      	b.n	800b7cc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b860:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <xTaskIncrementTick+0x16c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b866:	4915      	ldr	r1, [pc, #84]	; (800b8bc <xTaskIncrementTick+0x168>)
 800b868:	4613      	mov	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	440b      	add	r3, r1
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d907      	bls.n	800b888 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e004      	b.n	800b888 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b87e:	4b11      	ldr	r3, [pc, #68]	; (800b8c4 <xTaskIncrementTick+0x170>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	4a0f      	ldr	r2, [pc, #60]	; (800b8c4 <xTaskIncrementTick+0x170>)
 800b886:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b888:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <xTaskIncrementTick+0x174>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b894:	697b      	ldr	r3, [r7, #20]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20001ba4 	.word	0x20001ba4
 800b8a4:	20001b80 	.word	0x20001b80
 800b8a8:	20001b34 	.word	0x20001b34
 800b8ac:	20001b38 	.word	0x20001b38
 800b8b0:	20001b94 	.word	0x20001b94
 800b8b4:	20001b9c 	.word	0x20001b9c
 800b8b8:	20001b84 	.word	0x20001b84
 800b8bc:	200016ac 	.word	0x200016ac
 800b8c0:	200016a8 	.word	0x200016a8
 800b8c4:	20001b8c 	.word	0x20001b8c
 800b8c8:	20001b90 	.word	0x20001b90

0800b8cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8d2:	4b2b      	ldr	r3, [pc, #172]	; (800b980 <vTaskSwitchContext+0xb4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d003      	beq.n	800b8e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8da:	4b2a      	ldr	r3, [pc, #168]	; (800b984 <vTaskSwitchContext+0xb8>)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8e0:	e048      	b.n	800b974 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b8e2:	4b28      	ldr	r3, [pc, #160]	; (800b984 <vTaskSwitchContext+0xb8>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e8:	4b27      	ldr	r3, [pc, #156]	; (800b988 <vTaskSwitchContext+0xbc>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	e012      	b.n	800b916 <vTaskSwitchContext+0x4a>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10c      	bne.n	800b910 <vTaskSwitchContext+0x44>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	b672      	cpsid	i
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	b662      	cpsie	i
 800b90a:	607b      	str	r3, [r7, #4]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <vTaskSwitchContext+0x42>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3b01      	subs	r3, #1
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	491d      	ldr	r1, [pc, #116]	; (800b98c <vTaskSwitchContext+0xc0>)
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4613      	mov	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	440b      	add	r3, r1
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0e2      	beq.n	800b8f0 <vTaskSwitchContext+0x24>
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4a15      	ldr	r2, [pc, #84]	; (800b98c <vTaskSwitchContext+0xc0>)
 800b936:	4413      	add	r3, r2
 800b938:	60bb      	str	r3, [r7, #8]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	605a      	str	r2, [r3, #4]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	3308      	adds	r3, #8
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d104      	bne.n	800b95a <vTaskSwitchContext+0x8e>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	605a      	str	r2, [r3, #4]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	4a0b      	ldr	r2, [pc, #44]	; (800b990 <vTaskSwitchContext+0xc4>)
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	4a08      	ldr	r2, [pc, #32]	; (800b988 <vTaskSwitchContext+0xbc>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <vTaskSwitchContext+0xc4>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3354      	adds	r3, #84	; 0x54
 800b970:	4a08      	ldr	r2, [pc, #32]	; (800b994 <vTaskSwitchContext+0xc8>)
 800b972:	6013      	str	r3, [r2, #0]
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20001ba4 	.word	0x20001ba4
 800b984:	20001b90 	.word	0x20001b90
 800b988:	20001b84 	.word	0x20001b84
 800b98c:	200016ac 	.word	0x200016ac
 800b990:	200016a8 	.word	0x200016a8
 800b994:	2000015c 	.word	0x2000015c

0800b998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10c      	bne.n	800b9c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	b672      	cpsid	i
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	b662      	cpsie	i
 800b9bc:	60fb      	str	r3, [r7, #12]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <vTaskPlaceOnEventList+0x48>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3318      	adds	r3, #24
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7fe fdd9 	bl	800a582 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	6838      	ldr	r0, [r7, #0]
 800b9d4:	f000 fac6 	bl	800bf64 <prvAddCurrentTaskToDelayedList>
}
 800b9d8:	bf00      	nop
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	200016a8 	.word	0x200016a8

0800b9e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10c      	bne.n	800ba10 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	b672      	cpsid	i
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	b662      	cpsie	i
 800ba0a:	617b      	str	r3, [r7, #20]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <vTaskPlaceOnEventListRestricted+0x58>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3318      	adds	r3, #24
 800ba16:	4619      	mov	r1, r3
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7fe fd8e 	bl	800a53a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	68b8      	ldr	r0, [r7, #8]
 800ba2e:	f000 fa99 	bl	800bf64 <prvAddCurrentTaskToDelayedList>
	}
 800ba32:	bf00      	nop
 800ba34:	3718      	adds	r7, #24
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	200016a8 	.word	0x200016a8

0800ba40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10c      	bne.n	800ba70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	b672      	cpsid	i
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	b662      	cpsie	i
 800ba6a:	60fb      	str	r3, [r7, #12]
}
 800ba6c:	bf00      	nop
 800ba6e:	e7fe      	b.n	800ba6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	3318      	adds	r3, #24
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fdbd 	bl	800a5f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba7a:	4b1e      	ldr	r3, [pc, #120]	; (800baf4 <xTaskRemoveFromEventList+0xb4>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d11d      	bne.n	800babe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe fdb4 	bl	800a5f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba90:	4b19      	ldr	r3, [pc, #100]	; (800baf8 <xTaskRemoveFromEventList+0xb8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d903      	bls.n	800baa0 <xTaskRemoveFromEventList+0x60>
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9c:	4a16      	ldr	r2, [pc, #88]	; (800baf8 <xTaskRemoveFromEventList+0xb8>)
 800ba9e:	6013      	str	r3, [r2, #0]
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4a13      	ldr	r2, [pc, #76]	; (800bafc <xTaskRemoveFromEventList+0xbc>)
 800baae:	441a      	add	r2, r3
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	3304      	adds	r3, #4
 800bab4:	4619      	mov	r1, r3
 800bab6:	4610      	mov	r0, r2
 800bab8:	f7fe fd3f 	bl	800a53a <vListInsertEnd>
 800babc:	e005      	b.n	800baca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3318      	adds	r3, #24
 800bac2:	4619      	mov	r1, r3
 800bac4:	480e      	ldr	r0, [pc, #56]	; (800bb00 <xTaskRemoveFromEventList+0xc0>)
 800bac6:	f7fe fd38 	bl	800a53a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	4b0d      	ldr	r3, [pc, #52]	; (800bb04 <xTaskRemoveFromEventList+0xc4>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d905      	bls.n	800bae4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bad8:	2301      	movs	r3, #1
 800bada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800badc:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <xTaskRemoveFromEventList+0xc8>)
 800bade:	2201      	movs	r2, #1
 800bae0:	601a      	str	r2, [r3, #0]
 800bae2:	e001      	b.n	800bae8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bae8:	697b      	ldr	r3, [r7, #20]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3718      	adds	r7, #24
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	20001ba4 	.word	0x20001ba4
 800baf8:	20001b84 	.word	0x20001b84
 800bafc:	200016ac 	.word	0x200016ac
 800bb00:	20001b3c 	.word	0x20001b3c
 800bb04:	200016a8 	.word	0x200016a8
 800bb08:	20001b90 	.word	0x20001b90

0800bb0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb14:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <vTaskInternalSetTimeOutState+0x24>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb1c:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <vTaskInternalSetTimeOutState+0x28>)
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	605a      	str	r2, [r3, #4]
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	20001b94 	.word	0x20001b94
 800bb34:	20001b80 	.word	0x20001b80

0800bb38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10c      	bne.n	800bb62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4c:	b672      	cpsid	i
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	b662      	cpsie	i
 800bb5c:	613b      	str	r3, [r7, #16]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10c      	bne.n	800bb82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	b672      	cpsid	i
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	b662      	cpsie	i
 800bb7c:	60fb      	str	r3, [r7, #12]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bb82:	f000 ff6b 	bl	800ca5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb86:	4b1d      	ldr	r3, [pc, #116]	; (800bbfc <xTaskCheckForTimeOut+0xc4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9e:	d102      	bne.n	800bba6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	61fb      	str	r3, [r7, #28]
 800bba4:	e023      	b.n	800bbee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	4b15      	ldr	r3, [pc, #84]	; (800bc00 <xTaskCheckForTimeOut+0xc8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d007      	beq.n	800bbc2 <xTaskCheckForTimeOut+0x8a>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d302      	bcc.n	800bbc2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	61fb      	str	r3, [r7, #28]
 800bbc0:	e015      	b.n	800bbee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d20b      	bcs.n	800bbe4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	1ad2      	subs	r2, r2, r3
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff ff97 	bl	800bb0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	61fb      	str	r3, [r7, #28]
 800bbe2:	e004      	b.n	800bbee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbea:	2301      	movs	r3, #1
 800bbec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbee:	f000 ff69 	bl	800cac4 <vPortExitCritical>

	return xReturn;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20001b80 	.word	0x20001b80
 800bc00:	20001b94 	.word	0x20001b94

0800bc04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc08:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <vTaskMissedYield+0x14>)
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	601a      	str	r2, [r3, #0]
}
 800bc0e:	bf00      	nop
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	20001b90 	.word	0x20001b90

0800bc1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc24:	f000 f852 	bl	800bccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <prvIdleTask+0x28>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d9f9      	bls.n	800bc24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <prvIdleTask+0x2c>)
 800bc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc40:	e7f0      	b.n	800bc24 <prvIdleTask+0x8>
 800bc42:	bf00      	nop
 800bc44:	200016ac 	.word	0x200016ac
 800bc48:	e000ed04 	.word	0xe000ed04

0800bc4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc52:	2300      	movs	r3, #0
 800bc54:	607b      	str	r3, [r7, #4]
 800bc56:	e00c      	b.n	800bc72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4a12      	ldr	r2, [pc, #72]	; (800bcac <prvInitialiseTaskLists+0x60>)
 800bc64:	4413      	add	r3, r2
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fe fc3a 	bl	800a4e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	607b      	str	r3, [r7, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b37      	cmp	r3, #55	; 0x37
 800bc76:	d9ef      	bls.n	800bc58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc78:	480d      	ldr	r0, [pc, #52]	; (800bcb0 <prvInitialiseTaskLists+0x64>)
 800bc7a:	f7fe fc31 	bl	800a4e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc7e:	480d      	ldr	r0, [pc, #52]	; (800bcb4 <prvInitialiseTaskLists+0x68>)
 800bc80:	f7fe fc2e 	bl	800a4e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc84:	480c      	ldr	r0, [pc, #48]	; (800bcb8 <prvInitialiseTaskLists+0x6c>)
 800bc86:	f7fe fc2b 	bl	800a4e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc8a:	480c      	ldr	r0, [pc, #48]	; (800bcbc <prvInitialiseTaskLists+0x70>)
 800bc8c:	f7fe fc28 	bl	800a4e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc90:	480b      	ldr	r0, [pc, #44]	; (800bcc0 <prvInitialiseTaskLists+0x74>)
 800bc92:	f7fe fc25 	bl	800a4e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc96:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <prvInitialiseTaskLists+0x78>)
 800bc98:	4a05      	ldr	r2, [pc, #20]	; (800bcb0 <prvInitialiseTaskLists+0x64>)
 800bc9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc9c:	4b0a      	ldr	r3, [pc, #40]	; (800bcc8 <prvInitialiseTaskLists+0x7c>)
 800bc9e:	4a05      	ldr	r2, [pc, #20]	; (800bcb4 <prvInitialiseTaskLists+0x68>)
 800bca0:	601a      	str	r2, [r3, #0]
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	200016ac 	.word	0x200016ac
 800bcb0:	20001b0c 	.word	0x20001b0c
 800bcb4:	20001b20 	.word	0x20001b20
 800bcb8:	20001b3c 	.word	0x20001b3c
 800bcbc:	20001b50 	.word	0x20001b50
 800bcc0:	20001b68 	.word	0x20001b68
 800bcc4:	20001b34 	.word	0x20001b34
 800bcc8:	20001b38 	.word	0x20001b38

0800bccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcd2:	e019      	b.n	800bd08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bcd4:	f000 fec2 	bl	800ca5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcd8:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <prvCheckTasksWaitingTermination+0x50>)
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3304      	adds	r3, #4
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fe fc85 	bl	800a5f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcea:	4b0d      	ldr	r3, [pc, #52]	; (800bd20 <prvCheckTasksWaitingTermination+0x54>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	4a0b      	ldr	r2, [pc, #44]	; (800bd20 <prvCheckTasksWaitingTermination+0x54>)
 800bcf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcf4:	4b0b      	ldr	r3, [pc, #44]	; (800bd24 <prvCheckTasksWaitingTermination+0x58>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	4a0a      	ldr	r2, [pc, #40]	; (800bd24 <prvCheckTasksWaitingTermination+0x58>)
 800bcfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcfe:	f000 fee1 	bl	800cac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f848 	bl	800bd98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd08:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <prvCheckTasksWaitingTermination+0x58>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e1      	bne.n	800bcd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd10:	bf00      	nop
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20001b50 	.word	0x20001b50
 800bd20:	20001b7c 	.word	0x20001b7c
 800bd24:	20001b64 	.word	0x20001b64

0800bd28 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bd34:	e005      	b.n	800bd42 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2ba5      	cmp	r3, #165	; 0xa5
 800bd48:	d0f5      	beq.n	800bd36 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	089b      	lsrs	r3, r3, #2
 800bd4e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	b29b      	uxth	r3, r3
	}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <uxTaskGetStackHighWaterMark+0x14>
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <uxTaskGetStackHighWaterMark+0x34>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	e000      	b.n	800bd76 <uxTaskGetStackHighWaterMark+0x16>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bd7e:	6938      	ldr	r0, [r7, #16]
 800bd80:	f7ff ffd2 	bl	800bd28 <prvTaskCheckFreeStackSpace>
 800bd84:	4603      	mov	r3, r0
 800bd86:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bd88:	68fb      	ldr	r3, [r7, #12]
	}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	200016a8 	.word	0x200016a8

0800bd98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3354      	adds	r3, #84	; 0x54
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 ffad 	bl	800dd04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d108      	bne.n	800bdc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 f845 	bl	800ce48 <vPortFree>
				vPortFree( pxTCB );
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 f842 	bl	800ce48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdc4:	e01a      	b.n	800bdfc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d103      	bne.n	800bdd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 f839 	bl	800ce48 <vPortFree>
	}
 800bdd6:	e011      	b.n	800bdfc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d00c      	beq.n	800bdfc <prvDeleteTCB+0x64>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	b672      	cpsid	i
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	b662      	cpsie	i
 800bdf6:	60fb      	str	r3, [r7, #12]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <prvDeleteTCB+0x62>
	}
 800bdfc:	bf00      	nop
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be0a:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <prvResetNextTaskUnblockTime+0x38>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d104      	bne.n	800be1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be14:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <prvResetNextTaskUnblockTime+0x3c>)
 800be16:	f04f 32ff 	mov.w	r2, #4294967295
 800be1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be1c:	e008      	b.n	800be30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1e:	4b07      	ldr	r3, [pc, #28]	; (800be3c <prvResetNextTaskUnblockTime+0x38>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4a04      	ldr	r2, [pc, #16]	; (800be40 <prvResetNextTaskUnblockTime+0x3c>)
 800be2e:	6013      	str	r3, [r2, #0]
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20001b34 	.word	0x20001b34
 800be40:	20001b9c 	.word	0x20001b9c

0800be44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be4a:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <xTaskGetSchedulerState+0x34>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d102      	bne.n	800be58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be52:	2301      	movs	r3, #1
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	e008      	b.n	800be6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be58:	4b08      	ldr	r3, [pc, #32]	; (800be7c <xTaskGetSchedulerState+0x38>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be60:	2302      	movs	r3, #2
 800be62:	607b      	str	r3, [r7, #4]
 800be64:	e001      	b.n	800be6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be66:	2300      	movs	r3, #0
 800be68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be6a:	687b      	ldr	r3, [r7, #4]
	}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	20001b88 	.word	0x20001b88
 800be7c:	20001ba4 	.word	0x20001ba4

0800be80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be8c:	2300      	movs	r3, #0
 800be8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d05a      	beq.n	800bf4c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be96:	4b30      	ldr	r3, [pc, #192]	; (800bf58 <xTaskPriorityDisinherit+0xd8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d00c      	beq.n	800beba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	b672      	cpsid	i
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	b662      	cpsie	i
 800beb4:	60fb      	str	r3, [r7, #12]
}
 800beb6:	bf00      	nop
 800beb8:	e7fe      	b.n	800beb8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10c      	bne.n	800bedc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	b672      	cpsid	i
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	b662      	cpsie	i
 800bed6:	60bb      	str	r3, [r7, #8]
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee0:	1e5a      	subs	r2, r3, #1
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beee:	429a      	cmp	r2, r3
 800bef0:	d02c      	beq.n	800bf4c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d128      	bne.n	800bf4c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	3304      	adds	r3, #4
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe fb78 	bl	800a5f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1c:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <xTaskPriorityDisinherit+0xdc>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d903      	bls.n	800bf2c <xTaskPriorityDisinherit+0xac>
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	4a0c      	ldr	r2, [pc, #48]	; (800bf5c <xTaskPriorityDisinherit+0xdc>)
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf30:	4613      	mov	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4a09      	ldr	r2, [pc, #36]	; (800bf60 <xTaskPriorityDisinherit+0xe0>)
 800bf3a:	441a      	add	r2, r3
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fe faf9 	bl	800a53a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf4c:	697b      	ldr	r3, [r7, #20]
	}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	200016a8 	.word	0x200016a8
 800bf5c:	20001b84 	.word	0x20001b84
 800bf60:	200016ac 	.word	0x200016ac

0800bf64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf6e:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf74:	4b20      	ldr	r3, [pc, #128]	; (800bff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fb3a 	bl	800a5f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf86:	d10a      	bne.n	800bf9e <prvAddCurrentTaskToDelayedList+0x3a>
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf8e:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	4819      	ldr	r0, [pc, #100]	; (800bffc <prvAddCurrentTaskToDelayedList+0x98>)
 800bf98:	f7fe facf 	bl	800a53a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf9c:	e026      	b.n	800bfec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d209      	bcs.n	800bfca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfb6:	4b12      	ldr	r3, [pc, #72]	; (800c000 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f7fe fadd 	bl	800a582 <vListInsert>
}
 800bfc8:	e010      	b.n	800bfec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfca:	4b0e      	ldr	r3, [pc, #56]	; (800c004 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f7fe fad3 	bl	800a582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	; (800c008 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d202      	bcs.n	800bfec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfe6:	4a08      	ldr	r2, [pc, #32]	; (800c008 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	6013      	str	r3, [r2, #0]
}
 800bfec:	bf00      	nop
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	20001b80 	.word	0x20001b80
 800bff8:	200016a8 	.word	0x200016a8
 800bffc:	20001b68 	.word	0x20001b68
 800c000:	20001b38 	.word	0x20001b38
 800c004:	20001b34 	.word	0x20001b34
 800c008:	20001b9c 	.word	0x20001b9c

0800c00c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08a      	sub	sp, #40	; 0x28
 800c010:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c016:	f000 fbb5 	bl	800c784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c01a:	4b1d      	ldr	r3, [pc, #116]	; (800c090 <xTimerCreateTimerTask+0x84>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d021      	beq.n	800c066 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c02a:	1d3a      	adds	r2, r7, #4
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	f107 030c 	add.w	r3, r7, #12
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe fa39 	bl	800a4ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	9202      	str	r2, [sp, #8]
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	2302      	movs	r3, #2
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	2300      	movs	r3, #0
 800c04a:	460a      	mov	r2, r1
 800c04c:	4911      	ldr	r1, [pc, #68]	; (800c094 <xTimerCreateTimerTask+0x88>)
 800c04e:	4812      	ldr	r0, [pc, #72]	; (800c098 <xTimerCreateTimerTask+0x8c>)
 800c050:	f7ff f846 	bl	800b0e0 <xTaskCreateStatic>
 800c054:	4603      	mov	r3, r0
 800c056:	4a11      	ldr	r2, [pc, #68]	; (800c09c <xTimerCreateTimerTask+0x90>)
 800c058:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c05a:	4b10      	ldr	r3, [pc, #64]	; (800c09c <xTimerCreateTimerTask+0x90>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c062:	2301      	movs	r3, #1
 800c064:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10c      	bne.n	800c086 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	b672      	cpsid	i
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	b662      	cpsie	i
 800c080:	613b      	str	r3, [r7, #16]
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c086:	697b      	ldr	r3, [r7, #20]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	20001bd8 	.word	0x20001bd8
 800c094:	0800dfb0 	.word	0x0800dfb0
 800c098:	0800c31d 	.word	0x0800c31d
 800c09c:	20001bdc 	.word	0x20001bdc

0800c0a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c0ae:	202c      	movs	r0, #44	; 0x2c
 800c0b0:	f000 fe00 	bl	800ccb4 <pvPortMalloc>
 800c0b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00d      	beq.n	800c0d8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	68b9      	ldr	r1, [r7, #8]
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f000 f847 	bl	800c166 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c0d8:	697b      	ldr	r3, [r7, #20]
	}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b08a      	sub	sp, #40	; 0x28
 800c0e6:	af02      	add	r7, sp, #8
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	60b9      	str	r1, [r7, #8]
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c0f0:	232c      	movs	r3, #44	; 0x2c
 800c0f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b2c      	cmp	r3, #44	; 0x2c
 800c0f8:	d00c      	beq.n	800c114 <xTimerCreateStatic+0x32>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	b672      	cpsid	i
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	b662      	cpsie	i
 800c10e:	61bb      	str	r3, [r7, #24]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10c      	bne.n	800c136 <xTimerCreateStatic+0x54>
	__asm volatile
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	b672      	cpsid	i
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	b662      	cpsie	i
 800c130:	617b      	str	r3, [r7, #20]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00d      	beq.n	800c15c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	2202      	movs	r2, #2
 800c144:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f000 f805 	bl	800c166 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c15c:	69fb      	ldr	r3, [r7, #28]
	}
 800c15e:	4618      	mov	r0, r3
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b086      	sub	sp, #24
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
 800c172:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10c      	bne.n	800c194 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	b672      	cpsid	i
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	b662      	cpsie	i
 800c18e:	617b      	str	r3, [r7, #20]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	2b00      	cmp	r3, #0
 800c198:	d01e      	beq.n	800c1d8 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c19a:	f000 faf3 	bl	800c784 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	6a3a      	ldr	r2, [r7, #32]
 800c1b4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe f9b0 	bl	800a520 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d008      	beq.n	800c1d8 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1cc:	f043 0304 	orr.w	r3, r3, #4
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c1d8:	bf00      	nop
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08a      	sub	sp, #40	; 0x28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
 800c1ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10c      	bne.n	800c212 <xTimerGenericCommand+0x32>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	b672      	cpsid	i
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	b662      	cpsie	i
 800c20c:	623b      	str	r3, [r7, #32]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c212:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <xTimerGenericCommand+0x9c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d02a      	beq.n	800c270 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b05      	cmp	r3, #5
 800c22a:	dc18      	bgt.n	800c25e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c22c:	f7ff fe0a 	bl	800be44 <xTaskGetSchedulerState>
 800c230:	4603      	mov	r3, r0
 800c232:	2b02      	cmp	r3, #2
 800c234:	d109      	bne.n	800c24a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c236:	4b11      	ldr	r3, [pc, #68]	; (800c27c <xTimerGenericCommand+0x9c>)
 800c238:	6818      	ldr	r0, [r3, #0]
 800c23a:	f107 0110 	add.w	r1, r7, #16
 800c23e:	2300      	movs	r3, #0
 800c240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c242:	f7fe fb53 	bl	800a8ec <xQueueGenericSend>
 800c246:	6278      	str	r0, [r7, #36]	; 0x24
 800c248:	e012      	b.n	800c270 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c24a:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <xTimerGenericCommand+0x9c>)
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	f107 0110 	add.w	r1, r7, #16
 800c252:	2300      	movs	r3, #0
 800c254:	2200      	movs	r2, #0
 800c256:	f7fe fb49 	bl	800a8ec <xQueueGenericSend>
 800c25a:	6278      	str	r0, [r7, #36]	; 0x24
 800c25c:	e008      	b.n	800c270 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c25e:	4b07      	ldr	r3, [pc, #28]	; (800c27c <xTimerGenericCommand+0x9c>)
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	f107 0110 	add.w	r1, r7, #16
 800c266:	2300      	movs	r3, #0
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	f7fe fc45 	bl	800aaf8 <xQueueGenericSendFromISR>
 800c26e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c272:	4618      	mov	r0, r3
 800c274:	3728      	adds	r7, #40	; 0x28
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20001bd8 	.word	0x20001bd8

0800c280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af02      	add	r7, sp, #8
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <prvProcessExpiredTimer+0x98>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	3304      	adds	r3, #4
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe f9ab 	bl	800a5f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d024      	beq.n	800c2f6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	699a      	ldr	r2, [r3, #24]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	18d1      	adds	r1, r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	6978      	ldr	r0, [r7, #20]
 800c2ba:	f000 f8d3 	bl	800c464 <prvInsertTimerInActiveList>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d021      	beq.n	800c308 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	6978      	ldr	r0, [r7, #20]
 800c2d0:	f7ff ff86 	bl	800c1e0 <xTimerGenericCommand>
 800c2d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d115      	bne.n	800c308 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e0:	b672      	cpsid	i
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	b662      	cpsie	i
 800c2f0:	60fb      	str	r3, [r7, #12]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2fc:	f023 0301 	bic.w	r3, r3, #1
 800c300:	b2da      	uxtb	r2, r3
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	6978      	ldr	r0, [r7, #20]
 800c30e:	4798      	blx	r3
}
 800c310:	bf00      	nop
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20001bd0 	.word	0x20001bd0

0800c31c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c324:	f107 0308 	add.w	r3, r7, #8
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 f857 	bl	800c3dc <prvGetNextExpireTime>
 800c32e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	4619      	mov	r1, r3
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 f803 	bl	800c340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c33a:	f000 f8d5 	bl	800c4e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c33e:	e7f1      	b.n	800c324 <prvTimerTask+0x8>

0800c340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c34a:	f7ff f933 	bl	800b5b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c34e:	f107 0308 	add.w	r3, r7, #8
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f866 	bl	800c424 <prvSampleTimeNow>
 800c358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d130      	bne.n	800c3c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10a      	bne.n	800c37c <prvProcessTimerOrBlockTask+0x3c>
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d806      	bhi.n	800c37c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c36e:	f7ff f92f 	bl	800b5d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c372:	68f9      	ldr	r1, [r7, #12]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7ff ff83 	bl	800c280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c37a:	e024      	b.n	800c3c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d008      	beq.n	800c394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c382:	4b13      	ldr	r3, [pc, #76]	; (800c3d0 <prvProcessTimerOrBlockTask+0x90>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <prvProcessTimerOrBlockTask+0x50>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e000      	b.n	800c392 <prvProcessTimerOrBlockTask+0x52>
 800c390:	2300      	movs	r3, #0
 800c392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c394:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <prvProcessTimerOrBlockTask+0x94>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	f7fe fe69 	bl	800b078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c3a6:	f7ff f913 	bl	800b5d0 <xTaskResumeAll>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10a      	bne.n	800c3c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3b0:	4b09      	ldr	r3, [pc, #36]	; (800c3d8 <prvProcessTimerOrBlockTask+0x98>)
 800c3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
}
 800c3c0:	e001      	b.n	800c3c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c3c2:	f7ff f905 	bl	800b5d0 <xTaskResumeAll>
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20001bd4 	.word	0x20001bd4
 800c3d4:	20001bd8 	.word	0x20001bd8
 800c3d8:	e000ed04 	.word	0xe000ed04

0800c3dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <prvGetNextExpireTime+0x44>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <prvGetNextExpireTime+0x16>
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	e000      	b.n	800c3f4 <prvGetNextExpireTime+0x18>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d105      	bne.n	800c40c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <prvGetNextExpireTime+0x44>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	e001      	b.n	800c410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c410:	68fb      	ldr	r3, [r7, #12]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20001bd0 	.word	0x20001bd0

0800c424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c42c:	f7ff f970 	bl	800b710 <xTaskGetTickCount>
 800c430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c432:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <prvSampleTimeNow+0x3c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d205      	bcs.n	800c448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c43c:	f000 f93c 	bl	800c6b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	e002      	b.n	800c44e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c44e:	4a04      	ldr	r2, [pc, #16]	; (800c460 <prvSampleTimeNow+0x3c>)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c454:	68fb      	ldr	r3, [r7, #12]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	20001be0 	.word	0x20001be0

0800c464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c472:	2300      	movs	r3, #0
 800c474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	429a      	cmp	r2, r3
 800c488:	d812      	bhi.n	800c4b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	429a      	cmp	r2, r3
 800c496:	d302      	bcc.n	800c49e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c498:	2301      	movs	r3, #1
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	e01b      	b.n	800c4d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c49e:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <prvInsertTimerInActiveList+0x7c>)
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	f7fe f86a 	bl	800a582 <vListInsert>
 800c4ae:	e012      	b.n	800c4d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d206      	bcs.n	800c4c6 <prvInsertTimerInActiveList+0x62>
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d302      	bcc.n	800c4c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	e007      	b.n	800c4d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4c6:	4b07      	ldr	r3, [pc, #28]	; (800c4e4 <prvInsertTimerInActiveList+0x80>)
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	f7fe f856 	bl	800a582 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4d6:	697b      	ldr	r3, [r7, #20]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	20001bd4 	.word	0x20001bd4
 800c4e4:	20001bd0 	.word	0x20001bd0

0800c4e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08e      	sub	sp, #56	; 0x38
 800c4ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4ee:	e0d0      	b.n	800c692 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	da1a      	bge.n	800c52c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4f6:	1d3b      	adds	r3, r7, #4
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10c      	bne.n	800c51c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	b672      	cpsid	i
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	b662      	cpsie	i
 800c516:	61fb      	str	r3, [r7, #28]
}
 800c518:	bf00      	nop
 800c51a:	e7fe      	b.n	800c51a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c522:	6850      	ldr	r0, [r2, #4]
 800c524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c526:	6892      	ldr	r2, [r2, #8]
 800c528:	4611      	mov	r1, r2
 800c52a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f2c0 80af 	blt.w	800c692 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d004      	beq.n	800c54a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	3304      	adds	r3, #4
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe f855 	bl	800a5f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c54a:	463b      	mov	r3, r7
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff ff69 	bl	800c424 <prvSampleTimeNow>
 800c552:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b09      	cmp	r3, #9
 800c558:	f200 809a 	bhi.w	800c690 <prvProcessReceivedCommands+0x1a8>
 800c55c:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <prvProcessReceivedCommands+0x7c>)
 800c55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c562:	bf00      	nop
 800c564:	0800c58d 	.word	0x0800c58d
 800c568:	0800c58d 	.word	0x0800c58d
 800c56c:	0800c58d 	.word	0x0800c58d
 800c570:	0800c605 	.word	0x0800c605
 800c574:	0800c619 	.word	0x0800c619
 800c578:	0800c667 	.word	0x0800c667
 800c57c:	0800c58d 	.word	0x0800c58d
 800c580:	0800c58d 	.word	0x0800c58d
 800c584:	0800c605 	.word	0x0800c605
 800c588:	0800c619 	.word	0x0800c619
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c592:	f043 0301 	orr.w	r3, r3, #1
 800c596:	b2da      	uxtb	r2, r3
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	699b      	ldr	r3, [r3, #24]
 800c5a4:	18d1      	adds	r1, r2, r3
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ac:	f7ff ff5a 	bl	800c464 <prvInsertTimerInActiveList>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d06d      	beq.n	800c692 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d062      	beq.n	800c692 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	441a      	add	r2, r3
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	2300      	movs	r3, #0
 800c5da:	2100      	movs	r1, #0
 800c5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5de:	f7ff fdff 	bl	800c1e0 <xTimerGenericCommand>
 800c5e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d153      	bne.n	800c692 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	b672      	cpsid	i
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	b662      	cpsie	i
 800c5fe:	61bb      	str	r3, [r7, #24]
}
 800c600:	bf00      	nop
 800c602:	e7fe      	b.n	800c602 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c60a:	f023 0301 	bic.w	r3, r3, #1
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c616:	e03c      	b.n	800c692 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c61e:	f043 0301 	orr.w	r3, r3, #1
 800c622:	b2da      	uxtb	r2, r3
 800c624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10c      	bne.n	800c652 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	b672      	cpsid	i
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	b662      	cpsie	i
 800c64c:	617b      	str	r3, [r7, #20]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	18d1      	adds	r1, r2, r3
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c65e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c660:	f7ff ff00 	bl	800c464 <prvInsertTimerInActiveList>
					break;
 800c664:	e015      	b.n	800c692 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c66c:	f003 0302 	and.w	r3, r3, #2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c676:	f000 fbe7 	bl	800ce48 <vPortFree>
 800c67a:	e00a      	b.n	800c692 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c682:	f023 0301 	bic.w	r3, r3, #1
 800c686:	b2da      	uxtb	r2, r3
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c68e:	e000      	b.n	800c692 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800c690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c692:	4b08      	ldr	r3, [pc, #32]	; (800c6b4 <prvProcessReceivedCommands+0x1cc>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	1d39      	adds	r1, r7, #4
 800c698:	2200      	movs	r2, #0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe facc 	bl	800ac38 <xQueueReceive>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f47f af24 	bne.w	800c4f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	3730      	adds	r7, #48	; 0x30
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20001bd8 	.word	0x20001bd8

0800c6b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6be:	e04a      	b.n	800c756 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6c0:	4b2e      	ldr	r3, [pc, #184]	; (800c77c <prvSwitchTimerLists+0xc4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ca:	4b2c      	ldr	r3, [pc, #176]	; (800c77c <prvSwitchTimerLists+0xc4>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fd ff8b 	bl	800a5f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d030      	beq.n	800c756 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	429a      	cmp	r2, r3
 800c704:	d90e      	bls.n	800c724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c712:	4b1a      	ldr	r3, [pc, #104]	; (800c77c <prvSwitchTimerLists+0xc4>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3304      	adds	r3, #4
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7fd ff30 	bl	800a582 <vListInsert>
 800c722:	e018      	b.n	800c756 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c724:	2300      	movs	r3, #0
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	2300      	movs	r3, #0
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	2100      	movs	r1, #0
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f7ff fd56 	bl	800c1e0 <xTimerGenericCommand>
 800c734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10c      	bne.n	800c756 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	b672      	cpsid	i
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	b662      	cpsie	i
 800c750:	603b      	str	r3, [r7, #0]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c756:	4b09      	ldr	r3, [pc, #36]	; (800c77c <prvSwitchTimerLists+0xc4>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1af      	bne.n	800c6c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c760:	4b06      	ldr	r3, [pc, #24]	; (800c77c <prvSwitchTimerLists+0xc4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c766:	4b06      	ldr	r3, [pc, #24]	; (800c780 <prvSwitchTimerLists+0xc8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a04      	ldr	r2, [pc, #16]	; (800c77c <prvSwitchTimerLists+0xc4>)
 800c76c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c76e:	4a04      	ldr	r2, [pc, #16]	; (800c780 <prvSwitchTimerLists+0xc8>)
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	6013      	str	r3, [r2, #0]
}
 800c774:	bf00      	nop
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20001bd0 	.word	0x20001bd0
 800c780:	20001bd4 	.word	0x20001bd4

0800c784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c78a:	f000 f967 	bl	800ca5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c78e:	4b15      	ldr	r3, [pc, #84]	; (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d120      	bne.n	800c7d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c796:	4814      	ldr	r0, [pc, #80]	; (800c7e8 <prvCheckForValidListAndQueue+0x64>)
 800c798:	f7fd fea2 	bl	800a4e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c79c:	4813      	ldr	r0, [pc, #76]	; (800c7ec <prvCheckForValidListAndQueue+0x68>)
 800c79e:	f7fd fe9f 	bl	800a4e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7a2:	4b13      	ldr	r3, [pc, #76]	; (800c7f0 <prvCheckForValidListAndQueue+0x6c>)
 800c7a4:	4a10      	ldr	r2, [pc, #64]	; (800c7e8 <prvCheckForValidListAndQueue+0x64>)
 800c7a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7a8:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <prvCheckForValidListAndQueue+0x70>)
 800c7aa:	4a10      	ldr	r2, [pc, #64]	; (800c7ec <prvCheckForValidListAndQueue+0x68>)
 800c7ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	4b11      	ldr	r3, [pc, #68]	; (800c7f8 <prvCheckForValidListAndQueue+0x74>)
 800c7b4:	4a11      	ldr	r2, [pc, #68]	; (800c7fc <prvCheckForValidListAndQueue+0x78>)
 800c7b6:	2110      	movs	r1, #16
 800c7b8:	200a      	movs	r0, #10
 800c7ba:	f7fd ffaf 	bl	800a71c <xQueueGenericCreateStatic>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	4a08      	ldr	r2, [pc, #32]	; (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c7c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7c4:	4b07      	ldr	r3, [pc, #28]	; (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	490b      	ldr	r1, [pc, #44]	; (800c800 <prvCheckForValidListAndQueue+0x7c>)
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fc26 	bl	800b024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7d8:	f000 f974 	bl	800cac4 <vPortExitCritical>
}
 800c7dc:	bf00      	nop
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	20001bd8 	.word	0x20001bd8
 800c7e8:	20001ba8 	.word	0x20001ba8
 800c7ec:	20001bbc 	.word	0x20001bbc
 800c7f0:	20001bd0 	.word	0x20001bd0
 800c7f4:	20001bd4 	.word	0x20001bd4
 800c7f8:	20001c84 	.word	0x20001c84
 800c7fc:	20001be4 	.word	0x20001be4
 800c800:	0800dfb8 	.word	0x0800dfb8

0800c804 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10c      	bne.n	800c830 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81a:	b672      	cpsid	i
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	b662      	cpsie	i
 800c82a:	60fb      	str	r3, [r7, #12]
}
 800c82c:	bf00      	nop
 800c82e:	e7fe      	b.n	800c82e <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800c830:	f000 f914 	bl	800ca5c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c83a:	f000 f943 	bl	800cac4 <vPortExitCritical>

	return pvReturn;
 800c83e:	693b      	ldr	r3, [r7, #16]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3718      	adds	r7, #24
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3b04      	subs	r3, #4
 800c858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3b04      	subs	r3, #4
 800c866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f023 0201 	bic.w	r2, r3, #1
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3b04      	subs	r3, #4
 800c876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c878:	4a0c      	ldr	r2, [pc, #48]	; (800c8ac <pxPortInitialiseStack+0x64>)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3b14      	subs	r3, #20
 800c882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3b04      	subs	r3, #4
 800c88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f06f 0202 	mvn.w	r2, #2
 800c896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	3b20      	subs	r3, #32
 800c89c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c89e:	68fb      	ldr	r3, [r7, #12]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	0800c8b1 	.word	0x0800c8b1

0800c8b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8ba:	4b14      	ldr	r3, [pc, #80]	; (800c90c <prvTaskExitError+0x5c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c2:	d00c      	beq.n	800c8de <prvTaskExitError+0x2e>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	b672      	cpsid	i
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	b662      	cpsie	i
 800c8d8:	60fb      	str	r3, [r7, #12]
}
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <prvTaskExitError+0x2c>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	b672      	cpsid	i
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	b662      	cpsie	i
 800c8f2:	60bb      	str	r3, [r7, #8]
}
 800c8f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8f6:	bf00      	nop
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d0fc      	beq.n	800c8f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8fe:	bf00      	nop
 800c900:	bf00      	nop
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	20000098 	.word	0x20000098

0800c910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c910:	4b07      	ldr	r3, [pc, #28]	; (800c930 <pxCurrentTCBConst2>)
 800c912:	6819      	ldr	r1, [r3, #0]
 800c914:	6808      	ldr	r0, [r1, #0]
 800c916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91a:	f380 8809 	msr	PSP, r0
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f04f 0000 	mov.w	r0, #0
 800c926:	f380 8811 	msr	BASEPRI, r0
 800c92a:	4770      	bx	lr
 800c92c:	f3af 8000 	nop.w

0800c930 <pxCurrentTCBConst2>:
 800c930:	200016a8 	.word	0x200016a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c934:	bf00      	nop
 800c936:	bf00      	nop

0800c938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c938:	4808      	ldr	r0, [pc, #32]	; (800c95c <prvPortStartFirstTask+0x24>)
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	6800      	ldr	r0, [r0, #0]
 800c93e:	f380 8808 	msr	MSP, r0
 800c942:	f04f 0000 	mov.w	r0, #0
 800c946:	f380 8814 	msr	CONTROL, r0
 800c94a:	b662      	cpsie	i
 800c94c:	b661      	cpsie	f
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	df00      	svc	0
 800c958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c95a:	bf00      	nop
 800c95c:	e000ed08 	.word	0xe000ed08

0800c960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c966:	4b37      	ldr	r3, [pc, #220]	; (800ca44 <xPortStartScheduler+0xe4>)
 800c968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	22ff      	movs	r2, #255	; 0xff
 800c976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c980:	78fb      	ldrb	r3, [r7, #3]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	4b2f      	ldr	r3, [pc, #188]	; (800ca48 <xPortStartScheduler+0xe8>)
 800c98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c98e:	4b2f      	ldr	r3, [pc, #188]	; (800ca4c <xPortStartScheduler+0xec>)
 800c990:	2207      	movs	r2, #7
 800c992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c994:	e009      	b.n	800c9aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c996:	4b2d      	ldr	r3, [pc, #180]	; (800ca4c <xPortStartScheduler+0xec>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	4a2b      	ldr	r2, [pc, #172]	; (800ca4c <xPortStartScheduler+0xec>)
 800c99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9a0:	78fb      	ldrb	r3, [r7, #3]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9b2:	2b80      	cmp	r3, #128	; 0x80
 800c9b4:	d0ef      	beq.n	800c996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9b6:	4b25      	ldr	r3, [pc, #148]	; (800ca4c <xPortStartScheduler+0xec>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f1c3 0307 	rsb	r3, r3, #7
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d00c      	beq.n	800c9dc <xPortStartScheduler+0x7c>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	b672      	cpsid	i
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	b662      	cpsie	i
 800c9d6:	60bb      	str	r3, [r7, #8]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ca4c <xPortStartScheduler+0xec>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	021b      	lsls	r3, r3, #8
 800c9e2:	4a1a      	ldr	r2, [pc, #104]	; (800ca4c <xPortStartScheduler+0xec>)
 800c9e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9e6:	4b19      	ldr	r3, [pc, #100]	; (800ca4c <xPortStartScheduler+0xec>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9ee:	4a17      	ldr	r2, [pc, #92]	; (800ca4c <xPortStartScheduler+0xec>)
 800c9f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9fa:	4b15      	ldr	r3, [pc, #84]	; (800ca50 <xPortStartScheduler+0xf0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a14      	ldr	r2, [pc, #80]	; (800ca50 <xPortStartScheduler+0xf0>)
 800ca00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca06:	4b12      	ldr	r3, [pc, #72]	; (800ca50 <xPortStartScheduler+0xf0>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a11      	ldr	r2, [pc, #68]	; (800ca50 <xPortStartScheduler+0xf0>)
 800ca0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca12:	f000 f8dd 	bl	800cbd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca16:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <xPortStartScheduler+0xf4>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca1c:	f000 f8fc 	bl	800cc18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca20:	4b0d      	ldr	r3, [pc, #52]	; (800ca58 <xPortStartScheduler+0xf8>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a0c      	ldr	r2, [pc, #48]	; (800ca58 <xPortStartScheduler+0xf8>)
 800ca26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca2c:	f7ff ff84 	bl	800c938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca30:	f7fe ff4c 	bl	800b8cc <vTaskSwitchContext>
	prvTaskExitError();
 800ca34:	f7ff ff3c 	bl	800c8b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	e000e400 	.word	0xe000e400
 800ca48:	20001cd4 	.word	0x20001cd4
 800ca4c:	20001cd8 	.word	0x20001cd8
 800ca50:	e000ed20 	.word	0xe000ed20
 800ca54:	20000098 	.word	0x20000098
 800ca58:	e000ef34 	.word	0xe000ef34

0800ca5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca66:	b672      	cpsid	i
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	b662      	cpsie	i
 800ca76:	607b      	str	r3, [r7, #4]
}
 800ca78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca7a:	4b10      	ldr	r3, [pc, #64]	; (800cabc <vPortEnterCritical+0x60>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	4a0e      	ldr	r2, [pc, #56]	; (800cabc <vPortEnterCritical+0x60>)
 800ca82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca84:	4b0d      	ldr	r3, [pc, #52]	; (800cabc <vPortEnterCritical+0x60>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d111      	bne.n	800cab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca8c:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <vPortEnterCritical+0x64>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00c      	beq.n	800cab0 <vPortEnterCritical+0x54>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	b672      	cpsid	i
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	b662      	cpsie	i
 800caaa:	603b      	str	r3, [r7, #0]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <vPortEnterCritical+0x52>
	}
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	20000098 	.word	0x20000098
 800cac0:	e000ed04 	.word	0xe000ed04

0800cac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caca:	4b13      	ldr	r3, [pc, #76]	; (800cb18 <vPortExitCritical+0x54>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10c      	bne.n	800caec <vPortExitCritical+0x28>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	b672      	cpsid	i
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	b662      	cpsie	i
 800cae6:	607b      	str	r3, [r7, #4]
}
 800cae8:	bf00      	nop
 800caea:	e7fe      	b.n	800caea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800caec:	4b0a      	ldr	r3, [pc, #40]	; (800cb18 <vPortExitCritical+0x54>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	4a09      	ldr	r2, [pc, #36]	; (800cb18 <vPortExitCritical+0x54>)
 800caf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800caf6:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <vPortExitCritical+0x54>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d105      	bne.n	800cb0a <vPortExitCritical+0x46>
 800cafe:	2300      	movs	r3, #0
 800cb00:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	f383 8811 	msr	BASEPRI, r3
}
 800cb08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20000098 	.word	0x20000098
 800cb1c:	00000000 	.word	0x00000000

0800cb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb20:	f3ef 8009 	mrs	r0, PSP
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	4b15      	ldr	r3, [pc, #84]	; (800cb80 <pxCurrentTCBConst>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	f01e 0f10 	tst.w	lr, #16
 800cb30:	bf08      	it	eq
 800cb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3a:	6010      	str	r0, [r2, #0]
 800cb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb44:	b672      	cpsid	i
 800cb46:	f380 8811 	msr	BASEPRI, r0
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	b662      	cpsie	i
 800cb54:	f7fe feba 	bl	800b8cc <vTaskSwitchContext>
 800cb58:	f04f 0000 	mov.w	r0, #0
 800cb5c:	f380 8811 	msr	BASEPRI, r0
 800cb60:	bc09      	pop	{r0, r3}
 800cb62:	6819      	ldr	r1, [r3, #0]
 800cb64:	6808      	ldr	r0, [r1, #0]
 800cb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6a:	f01e 0f10 	tst.w	lr, #16
 800cb6e:	bf08      	it	eq
 800cb70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb74:	f380 8809 	msr	PSP, r0
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop

0800cb80 <pxCurrentTCBConst>:
 800cb80:	200016a8 	.word	0x200016a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop

0800cb88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	b672      	cpsid	i
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	b662      	cpsie	i
 800cba2:	607b      	str	r3, [r7, #4]
}
 800cba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cba6:	f7fe fdd5 	bl	800b754 <xTaskIncrementTick>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d003      	beq.n	800cbb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <SysTick_Handler+0x44>)
 800cbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	f383 8811 	msr	BASEPRI, r3
}
 800cbc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	e000ed04 	.word	0xe000ed04

0800cbd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbd4:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <vPortSetupTimerInterrupt+0x34>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbda:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <vPortSetupTimerInterrupt+0x38>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <vPortSetupTimerInterrupt+0x3c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <vPortSetupTimerInterrupt+0x40>)
 800cbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbea:	099b      	lsrs	r3, r3, #6
 800cbec:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <vPortSetupTimerInterrupt+0x44>)
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbf2:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <vPortSetupTimerInterrupt+0x34>)
 800cbf4:	2207      	movs	r2, #7
 800cbf6:	601a      	str	r2, [r3, #0]
}
 800cbf8:	bf00      	nop
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	e000e010 	.word	0xe000e010
 800cc08:	e000e018 	.word	0xe000e018
 800cc0c:	20000000 	.word	0x20000000
 800cc10:	10624dd3 	.word	0x10624dd3
 800cc14:	e000e014 	.word	0xe000e014

0800cc18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc28 <vPortEnableVFP+0x10>
 800cc1c:	6801      	ldr	r1, [r0, #0]
 800cc1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc22:	6001      	str	r1, [r0, #0]
 800cc24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc26:	bf00      	nop
 800cc28:	e000ed88 	.word	0xe000ed88

0800cc2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc32:	f3ef 8305 	mrs	r3, IPSR
 800cc36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b0f      	cmp	r3, #15
 800cc3c:	d916      	bls.n	800cc6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc3e:	4a19      	ldr	r2, [pc, #100]	; (800cca4 <vPortValidateInterruptPriority+0x78>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4413      	add	r3, r2
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc48:	4b17      	ldr	r3, [pc, #92]	; (800cca8 <vPortValidateInterruptPriority+0x7c>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	7afa      	ldrb	r2, [r7, #11]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d20c      	bcs.n	800cc6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	b672      	cpsid	i
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	b662      	cpsie	i
 800cc66:	607b      	str	r3, [r7, #4]
}
 800cc68:	bf00      	nop
 800cc6a:	e7fe      	b.n	800cc6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc6c:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <vPortValidateInterruptPriority+0x80>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc74:	4b0e      	ldr	r3, [pc, #56]	; (800ccb0 <vPortValidateInterruptPriority+0x84>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d90c      	bls.n	800cc96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	b672      	cpsid	i
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	b662      	cpsie	i
 800cc90:	603b      	str	r3, [r7, #0]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <vPortValidateInterruptPriority+0x68>
	}
 800cc96:	bf00      	nop
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	e000e3f0 	.word	0xe000e3f0
 800cca8:	20001cd4 	.word	0x20001cd4
 800ccac:	e000ed0c 	.word	0xe000ed0c
 800ccb0:	20001cd8 	.word	0x20001cd8

0800ccb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b08a      	sub	sp, #40	; 0x28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ccc0:	f7fe fc78 	bl	800b5b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccc4:	4b5b      	ldr	r3, [pc, #364]	; (800ce34 <pvPortMalloc+0x180>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cccc:	f000 f91a 	bl	800cf04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccd0:	4b59      	ldr	r3, [pc, #356]	; (800ce38 <pvPortMalloc+0x184>)
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f040 8092 	bne.w	800ce02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01f      	beq.n	800cd24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800cce4:	2208      	movs	r2, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4413      	add	r3, r2
 800ccea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d016      	beq.n	800cd24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f023 0307 	bic.w	r3, r3, #7
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00c      	beq.n	800cd24 <pvPortMalloc+0x70>
	__asm volatile
 800cd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0e:	b672      	cpsid	i
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	b662      	cpsie	i
 800cd1e:	617b      	str	r3, [r7, #20]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d06b      	beq.n	800ce02 <pvPortMalloc+0x14e>
 800cd2a:	4b44      	ldr	r3, [pc, #272]	; (800ce3c <pvPortMalloc+0x188>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d866      	bhi.n	800ce02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd34:	4b42      	ldr	r3, [pc, #264]	; (800ce40 <pvPortMalloc+0x18c>)
 800cd36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd38:	4b41      	ldr	r3, [pc, #260]	; (800ce40 <pvPortMalloc+0x18c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd3e:	e004      	b.n	800cd4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d903      	bls.n	800cd5c <pvPortMalloc+0xa8>
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1f1      	bne.n	800cd40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd5c:	4b35      	ldr	r3, [pc, #212]	; (800ce34 <pvPortMalloc+0x180>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d04d      	beq.n	800ce02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2208      	movs	r2, #8
 800cd6c:	4413      	add	r3, r2
 800cd6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	1ad2      	subs	r2, r2, r3
 800cd80:	2308      	movs	r3, #8
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d921      	bls.n	800cdcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	f003 0307 	and.w	r3, r3, #7
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00c      	beq.n	800cdb4 <pvPortMalloc+0x100>
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9e:	b672      	cpsid	i
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	b662      	cpsie	i
 800cdae:	613b      	str	r3, [r7, #16]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	1ad2      	subs	r2, r2, r3
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdc6:	69b8      	ldr	r0, [r7, #24]
 800cdc8:	f000 f8fe 	bl	800cfc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdcc:	4b1b      	ldr	r3, [pc, #108]	; (800ce3c <pvPortMalloc+0x188>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	4a19      	ldr	r2, [pc, #100]	; (800ce3c <pvPortMalloc+0x188>)
 800cdd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdda:	4b18      	ldr	r3, [pc, #96]	; (800ce3c <pvPortMalloc+0x188>)
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b19      	ldr	r3, [pc, #100]	; (800ce44 <pvPortMalloc+0x190>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d203      	bcs.n	800cdee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cde6:	4b15      	ldr	r3, [pc, #84]	; (800ce3c <pvPortMalloc+0x188>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a16      	ldr	r2, [pc, #88]	; (800ce44 <pvPortMalloc+0x190>)
 800cdec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <pvPortMalloc+0x184>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce02:	f7fe fbe5 	bl	800b5d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	f003 0307 	and.w	r3, r3, #7
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00c      	beq.n	800ce2a <pvPortMalloc+0x176>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	b672      	cpsid	i
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	b662      	cpsie	i
 800ce24:	60fb      	str	r3, [r7, #12]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <pvPortMalloc+0x174>
	return pvReturn;
 800ce2a:	69fb      	ldr	r3, [r7, #28]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3728      	adds	r7, #40	; 0x28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	200058e4 	.word	0x200058e4
 800ce38:	200058f0 	.word	0x200058f0
 800ce3c:	200058e8 	.word	0x200058e8
 800ce40:	200058dc 	.word	0x200058dc
 800ce44:	200058ec 	.word	0x200058ec

0800ce48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d04c      	beq.n	800cef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce5a:	2308      	movs	r3, #8
 800ce5c:	425b      	negs	r3, r3
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	4413      	add	r3, r2
 800ce62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	4b23      	ldr	r3, [pc, #140]	; (800cefc <vPortFree+0xb4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4013      	ands	r3, r2
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10c      	bne.n	800ce90 <vPortFree+0x48>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	b672      	cpsid	i
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	b662      	cpsie	i
 800ce8a:	60fb      	str	r3, [r7, #12]
}
 800ce8c:	bf00      	nop
 800ce8e:	e7fe      	b.n	800ce8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00c      	beq.n	800ceb2 <vPortFree+0x6a>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	b672      	cpsid	i
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	b662      	cpsie	i
 800ceac:	60bb      	str	r3, [r7, #8]
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	4b11      	ldr	r3, [pc, #68]	; (800cefc <vPortFree+0xb4>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4013      	ands	r3, r2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d019      	beq.n	800cef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d115      	bne.n	800cef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b0b      	ldr	r3, [pc, #44]	; (800cefc <vPortFree+0xb4>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	43db      	mvns	r3, r3
 800ced2:	401a      	ands	r2, r3
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ced8:	f7fe fb6c 	bl	800b5b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	685a      	ldr	r2, [r3, #4]
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <vPortFree+0xb8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4413      	add	r3, r2
 800cee6:	4a06      	ldr	r2, [pc, #24]	; (800cf00 <vPortFree+0xb8>)
 800cee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceea:	6938      	ldr	r0, [r7, #16]
 800ceec:	f000 f86c 	bl	800cfc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cef0:	f7fe fb6e 	bl	800b5d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cef4:	bf00      	nop
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	200058f0 	.word	0x200058f0
 800cf00:	200058e8 	.word	0x200058e8

0800cf04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf10:	4b27      	ldr	r3, [pc, #156]	; (800cfb0 <prvHeapInit+0xac>)
 800cf12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00c      	beq.n	800cf38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3307      	adds	r3, #7
 800cf22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f023 0307 	bic.w	r3, r3, #7
 800cf2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	4a1f      	ldr	r2, [pc, #124]	; (800cfb0 <prvHeapInit+0xac>)
 800cf34:	4413      	add	r3, r2
 800cf36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf3c:	4a1d      	ldr	r2, [pc, #116]	; (800cfb4 <prvHeapInit+0xb0>)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf42:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <prvHeapInit+0xb0>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf50:	2208      	movs	r2, #8
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	1a9b      	subs	r3, r3, r2
 800cf56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f023 0307 	bic.w	r3, r3, #7
 800cf5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4a15      	ldr	r2, [pc, #84]	; (800cfb8 <prvHeapInit+0xb4>)
 800cf64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf66:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <prvHeapInit+0xb4>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf6e:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <prvHeapInit+0xb4>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	1ad2      	subs	r2, r2, r3
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf84:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <prvHeapInit+0xb4>)
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	4a0a      	ldr	r2, [pc, #40]	; (800cfbc <prvHeapInit+0xb8>)
 800cf92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	4a09      	ldr	r2, [pc, #36]	; (800cfc0 <prvHeapInit+0xbc>)
 800cf9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <prvHeapInit+0xc0>)
 800cf9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfa2:	601a      	str	r2, [r3, #0]
}
 800cfa4:	bf00      	nop
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	20001cdc 	.word	0x20001cdc
 800cfb4:	200058dc 	.word	0x200058dc
 800cfb8:	200058e4 	.word	0x200058e4
 800cfbc:	200058ec 	.word	0x200058ec
 800cfc0:	200058e8 	.word	0x200058e8
 800cfc4:	200058f0 	.word	0x200058f0

0800cfc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfd0:	4b28      	ldr	r3, [pc, #160]	; (800d074 <prvInsertBlockIntoFreeList+0xac>)
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	e002      	b.n	800cfdc <prvInsertBlockIntoFreeList+0x14>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d8f7      	bhi.n	800cfd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	4413      	add	r3, r2
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d108      	bne.n	800d00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	441a      	add	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	441a      	add	r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d118      	bne.n	800d050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	4b15      	ldr	r3, [pc, #84]	; (800d078 <prvInsertBlockIntoFreeList+0xb0>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	429a      	cmp	r2, r3
 800d028:	d00d      	beq.n	800d046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	441a      	add	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	e008      	b.n	800d058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d046:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <prvInsertBlockIntoFreeList+0xb0>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	e003      	b.n	800d058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d002      	beq.n	800d066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d066:	bf00      	nop
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	200058dc 	.word	0x200058dc
 800d078:	200058e4 	.word	0x200058e4

0800d07c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d080:	2200      	movs	r2, #0
 800d082:	4912      	ldr	r1, [pc, #72]	; (800d0cc <MX_USB_DEVICE_Init+0x50>)
 800d084:	4812      	ldr	r0, [pc, #72]	; (800d0d0 <MX_USB_DEVICE_Init+0x54>)
 800d086:	f7fb fc75 	bl	8008974 <USBD_Init>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d090:	f7f4 ff8c 	bl	8001fac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d094:	490f      	ldr	r1, [pc, #60]	; (800d0d4 <MX_USB_DEVICE_Init+0x58>)
 800d096:	480e      	ldr	r0, [pc, #56]	; (800d0d0 <MX_USB_DEVICE_Init+0x54>)
 800d098:	f7fb fc9c 	bl	80089d4 <USBD_RegisterClass>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d0a2:	f7f4 ff83 	bl	8001fac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d0a6:	490c      	ldr	r1, [pc, #48]	; (800d0d8 <MX_USB_DEVICE_Init+0x5c>)
 800d0a8:	4809      	ldr	r0, [pc, #36]	; (800d0d0 <MX_USB_DEVICE_Init+0x54>)
 800d0aa:	f7fb fbd3 	bl	8008854 <USBD_CDC_RegisterInterface>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d0b4:	f7f4 ff7a 	bl	8001fac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d0b8:	4805      	ldr	r0, [pc, #20]	; (800d0d0 <MX_USB_DEVICE_Init+0x54>)
 800d0ba:	f7fb fcc1 	bl	8008a40 <USBD_Start>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d0c4:	f7f4 ff72 	bl	8001fac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0c8:	bf00      	nop
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	200000b0 	.word	0x200000b0
 800d0d0:	200058f4 	.word	0x200058f4
 800d0d4:	20000018 	.word	0x20000018
 800d0d8:	2000009c 	.word	0x2000009c

0800d0dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4905      	ldr	r1, [pc, #20]	; (800d0f8 <CDC_Init_FS+0x1c>)
 800d0e4:	4805      	ldr	r0, [pc, #20]	; (800d0fc <CDC_Init_FS+0x20>)
 800d0e6:	f7fb fbcf 	bl	8008888 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d0ea:	4905      	ldr	r1, [pc, #20]	; (800d100 <CDC_Init_FS+0x24>)
 800d0ec:	4803      	ldr	r0, [pc, #12]	; (800d0fc <CDC_Init_FS+0x20>)
 800d0ee:	f7fb fbed 	bl	80088cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d0f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	200063d0 	.word	0x200063d0
 800d0fc:	200058f4 	.word	0x200058f4
 800d100:	20005bd0 	.word	0x20005bd0

0800d104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	4603      	mov	r3, r0
 800d11c:	6039      	str	r1, [r7, #0]
 800d11e:	71fb      	strb	r3, [r7, #7]
 800d120:	4613      	mov	r3, r2
 800d122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d124:	79fb      	ldrb	r3, [r7, #7]
 800d126:	2b23      	cmp	r3, #35	; 0x23
 800d128:	d84a      	bhi.n	800d1c0 <CDC_Control_FS+0xac>
 800d12a:	a201      	add	r2, pc, #4	; (adr r2, 800d130 <CDC_Control_FS+0x1c>)
 800d12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d130:	0800d1c1 	.word	0x0800d1c1
 800d134:	0800d1c1 	.word	0x0800d1c1
 800d138:	0800d1c1 	.word	0x0800d1c1
 800d13c:	0800d1c1 	.word	0x0800d1c1
 800d140:	0800d1c1 	.word	0x0800d1c1
 800d144:	0800d1c1 	.word	0x0800d1c1
 800d148:	0800d1c1 	.word	0x0800d1c1
 800d14c:	0800d1c1 	.word	0x0800d1c1
 800d150:	0800d1c1 	.word	0x0800d1c1
 800d154:	0800d1c1 	.word	0x0800d1c1
 800d158:	0800d1c1 	.word	0x0800d1c1
 800d15c:	0800d1c1 	.word	0x0800d1c1
 800d160:	0800d1c1 	.word	0x0800d1c1
 800d164:	0800d1c1 	.word	0x0800d1c1
 800d168:	0800d1c1 	.word	0x0800d1c1
 800d16c:	0800d1c1 	.word	0x0800d1c1
 800d170:	0800d1c1 	.word	0x0800d1c1
 800d174:	0800d1c1 	.word	0x0800d1c1
 800d178:	0800d1c1 	.word	0x0800d1c1
 800d17c:	0800d1c1 	.word	0x0800d1c1
 800d180:	0800d1c1 	.word	0x0800d1c1
 800d184:	0800d1c1 	.word	0x0800d1c1
 800d188:	0800d1c1 	.word	0x0800d1c1
 800d18c:	0800d1c1 	.word	0x0800d1c1
 800d190:	0800d1c1 	.word	0x0800d1c1
 800d194:	0800d1c1 	.word	0x0800d1c1
 800d198:	0800d1c1 	.word	0x0800d1c1
 800d19c:	0800d1c1 	.word	0x0800d1c1
 800d1a0:	0800d1c1 	.word	0x0800d1c1
 800d1a4:	0800d1c1 	.word	0x0800d1c1
 800d1a8:	0800d1c1 	.word	0x0800d1c1
 800d1ac:	0800d1c1 	.word	0x0800d1c1
 800d1b0:	0800d1c1 	.word	0x0800d1c1
 800d1b4:	0800d1c1 	.word	0x0800d1c1
 800d1b8:	0800d1c1 	.word	0x0800d1c1
 800d1bc:	0800d1c1 	.word	0x0800d1c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1c0:	bf00      	nop
  }

  return (USBD_OK);
 800d1c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08a      	sub	sp, #40	; 0x28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	480b      	ldr	r0, [pc, #44]	; (800d20c <CDC_Receive_FS+0x3c>)
 800d1de:	f7fb fb75 	bl	80088cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1e2:	480a      	ldr	r0, [pc, #40]	; (800d20c <CDC_Receive_FS+0x3c>)
 800d1e4:	f7fb fb90 	bl	8008908 <USBD_CDC_ReceivePacket>
  //uint8_t *data = "Hello World from USB CDC\n";
  uint8_t * command[8];
  //strcpy(command, Buf);
  //command[*Len] = "\0";
  SEGGER_SYSVIEW_PrintfHost("%d\n", *Len );
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4808      	ldr	r0, [pc, #32]	; (800d210 <CDC_Receive_FS+0x40>)
 800d1f0:	f7f4 fb9c 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>

  //SEGGER_SYSVIEW_PrintfHost(command);

  xQueueSendFromISR(commandQueueHandle, Buf, 100);
 800d1f4:	4b07      	ldr	r3, [pc, #28]	; (800d214 <CDC_Receive_FS+0x44>)
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	2264      	movs	r2, #100	; 0x64
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	f7fd fc7b 	bl	800aaf8 <xQueueGenericSendFromISR>



  return (USBD_OK);
 800d202:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d204:	4618      	mov	r0, r3
 800d206:	3728      	adds	r7, #40	; 0x28
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	200058f4 	.word	0x200058f4
 800d210:	0800dfc0 	.word	0x0800dfc0
 800d214:	20000eac 	.word	0x20000eac

0800d218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d218:	b480      	push	{r7}
 800d21a:	b087      	sub	sp, #28
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	4613      	mov	r3, r2
 800d224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	371c      	adds	r7, #28
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	6039      	str	r1, [r7, #0]
 800d246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2212      	movs	r2, #18
 800d24c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d24e:	4b03      	ldr	r3, [pc, #12]	; (800d25c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	200000d0 	.word	0x200000d0

0800d260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	6039      	str	r1, [r7, #0]
 800d26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2204      	movs	r2, #4
 800d270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d272:	4b03      	ldr	r3, [pc, #12]	; (800d280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d274:	4618      	mov	r0, r3
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	200000f0 	.word	0x200000f0

0800d284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	6039      	str	r1, [r7, #0]
 800d28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d105      	bne.n	800d2a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	4907      	ldr	r1, [pc, #28]	; (800d2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d29a:	4808      	ldr	r0, [pc, #32]	; (800d2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800d29c:	f7fc fda6 	bl	8009dec <USBD_GetString>
 800d2a0:	e004      	b.n	800d2ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	4904      	ldr	r1, [pc, #16]	; (800d2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2a6:	4805      	ldr	r0, [pc, #20]	; (800d2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800d2a8:	f7fc fda0 	bl	8009dec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2ac:	4b02      	ldr	r3, [pc, #8]	; (800d2b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20006bd0 	.word	0x20006bd0
 800d2bc:	0800dfc4 	.word	0x0800dfc4

0800d2c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	6039      	str	r1, [r7, #0]
 800d2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	4904      	ldr	r1, [pc, #16]	; (800d2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d2d0:	4804      	ldr	r0, [pc, #16]	; (800d2e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d2d2:	f7fc fd8b 	bl	8009dec <USBD_GetString>
  return USBD_StrDesc;
 800d2d6:	4b02      	ldr	r3, [pc, #8]	; (800d2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20006bd0 	.word	0x20006bd0
 800d2e4:	0800dfdc 	.word	0x0800dfdc

0800d2e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	6039      	str	r1, [r7, #0]
 800d2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	221a      	movs	r2, #26
 800d2f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2fa:	f000 f855 	bl	800d3a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2fe:	4b02      	ldr	r3, [pc, #8]	; (800d308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	200000f4 	.word	0x200000f4

0800d30c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	6039      	str	r1, [r7, #0]
 800d316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d318:	79fb      	ldrb	r3, [r7, #7]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d105      	bne.n	800d32a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	4907      	ldr	r1, [pc, #28]	; (800d340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d322:	4808      	ldr	r0, [pc, #32]	; (800d344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d324:	f7fc fd62 	bl	8009dec <USBD_GetString>
 800d328:	e004      	b.n	800d334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	4904      	ldr	r1, [pc, #16]	; (800d340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d32e:	4805      	ldr	r0, [pc, #20]	; (800d344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d330:	f7fc fd5c 	bl	8009dec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d334:	4b02      	ldr	r3, [pc, #8]	; (800d340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20006bd0 	.word	0x20006bd0
 800d344:	0800dff0 	.word	0x0800dff0

0800d348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	4603      	mov	r3, r0
 800d350:	6039      	str	r1, [r7, #0]
 800d352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d354:	79fb      	ldrb	r3, [r7, #7]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d105      	bne.n	800d366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	4907      	ldr	r1, [pc, #28]	; (800d37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d35e:	4808      	ldr	r0, [pc, #32]	; (800d380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d360:	f7fc fd44 	bl	8009dec <USBD_GetString>
 800d364:	e004      	b.n	800d370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	4904      	ldr	r1, [pc, #16]	; (800d37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d36a:	4805      	ldr	r0, [pc, #20]	; (800d380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d36c:	f7fc fd3e 	bl	8009dec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d370:	4b02      	ldr	r3, [pc, #8]	; (800d37c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20006bd0 	.word	0x20006bd0
 800d380:	0800dffc 	.word	0x0800dffc

0800d384 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	6039      	str	r1, [r7, #0]
 800d38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	220c      	movs	r2, #12
 800d394:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d396:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	200000e4 	.word	0x200000e4

0800d3a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3ae:	4b0f      	ldr	r3, [pc, #60]	; (800d3ec <Get_SerialNum+0x44>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3b4:	4b0e      	ldr	r3, [pc, #56]	; (800d3f0 <Get_SerialNum+0x48>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3ba:	4b0e      	ldr	r3, [pc, #56]	; (800d3f4 <Get_SerialNum+0x4c>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d009      	beq.n	800d3e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3ce:	2208      	movs	r2, #8
 800d3d0:	4909      	ldr	r1, [pc, #36]	; (800d3f8 <Get_SerialNum+0x50>)
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f000 f814 	bl	800d400 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3d8:	2204      	movs	r2, #4
 800d3da:	4908      	ldr	r1, [pc, #32]	; (800d3fc <Get_SerialNum+0x54>)
 800d3dc:	68b8      	ldr	r0, [r7, #8]
 800d3de:	f000 f80f 	bl	800d400 <IntToUnicode>
  }
}
 800d3e2:	bf00      	nop
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	1ff0f420 	.word	0x1ff0f420
 800d3f0:	1ff0f424 	.word	0x1ff0f424
 800d3f4:	1ff0f428 	.word	0x1ff0f428
 800d3f8:	200000f6 	.word	0x200000f6
 800d3fc:	20000106 	.word	0x20000106

0800d400 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d400:	b480      	push	{r7}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	4613      	mov	r3, r2
 800d40c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d412:	2300      	movs	r3, #0
 800d414:	75fb      	strb	r3, [r7, #23]
 800d416:	e027      	b.n	800d468 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	0f1b      	lsrs	r3, r3, #28
 800d41c:	2b09      	cmp	r3, #9
 800d41e:	d80b      	bhi.n	800d438 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	0f1b      	lsrs	r3, r3, #28
 800d424:	b2da      	uxtb	r2, r3
 800d426:	7dfb      	ldrb	r3, [r7, #23]
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	4619      	mov	r1, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	440b      	add	r3, r1
 800d430:	3230      	adds	r2, #48	; 0x30
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	e00a      	b.n	800d44e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	0f1b      	lsrs	r3, r3, #28
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	4619      	mov	r1, r3
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	440b      	add	r3, r1
 800d448:	3237      	adds	r2, #55	; 0x37
 800d44a:	b2d2      	uxtb	r2, r2
 800d44c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	011b      	lsls	r3, r3, #4
 800d452:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d454:	7dfb      	ldrb	r3, [r7, #23]
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	3301      	adds	r3, #1
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	4413      	add	r3, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	3301      	adds	r3, #1
 800d466:	75fb      	strb	r3, [r7, #23]
 800d468:	7dfa      	ldrb	r2, [r7, #23]
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d3d3      	bcc.n	800d418 <IntToUnicode+0x18>
  }
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	371c      	adds	r7, #28
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
	...

0800d480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b0ae      	sub	sp, #184	; 0xb8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d488:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d48c:	2200      	movs	r2, #0
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	605a      	str	r2, [r3, #4]
 800d492:	609a      	str	r2, [r3, #8]
 800d494:	60da      	str	r2, [r3, #12]
 800d496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d498:	f107 0314 	add.w	r3, r7, #20
 800d49c:	2290      	movs	r2, #144	; 0x90
 800d49e:	2100      	movs	r1, #0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fc27 	bl	800dcf4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4ae:	d161      	bne.n	800d574 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d4b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d4b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d4bc:	f107 0314 	add.w	r3, r7, #20
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7f7 fe0b 	bl	80050dc <HAL_RCCEx_PeriphCLKConfig>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d4cc:	f7f4 fd6e 	bl	8001fac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4d0:	4b2a      	ldr	r3, [pc, #168]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d4:	4a29      	ldr	r2, [pc, #164]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d4d6:	f043 0301 	orr.w	r3, r3, #1
 800d4da:	6313      	str	r3, [r2, #48]	; 0x30
 800d4dc:	4b27      	ldr	r3, [pc, #156]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e0:	f003 0301 	and.w	r3, r3, #1
 800d4e4:	613b      	str	r3, [r7, #16]
 800d4e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d4e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d4ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d502:	230a      	movs	r3, #10
 800d504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d50c:	4619      	mov	r1, r3
 800d50e:	481c      	ldr	r0, [pc, #112]	; (800d580 <HAL_PCD_MspInit+0x100>)
 800d510:	f7f5 fc00 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d514:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d51c:	2300      	movs	r3, #0
 800d51e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d522:	2300      	movs	r3, #0
 800d524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d52c:	4619      	mov	r1, r3
 800d52e:	4814      	ldr	r0, [pc, #80]	; (800d580 <HAL_PCD_MspInit+0x100>)
 800d530:	f7f5 fbf0 	bl	8002d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d534:	4b11      	ldr	r3, [pc, #68]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d538:	4a10      	ldr	r2, [pc, #64]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d53e:	6353      	str	r3, [r2, #52]	; 0x34
 800d540:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	4b0b      	ldr	r3, [pc, #44]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d550:	4a0a      	ldr	r2, [pc, #40]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d556:	6453      	str	r3, [r2, #68]	; 0x44
 800d558:	4b08      	ldr	r3, [pc, #32]	; (800d57c <HAL_PCD_MspInit+0xfc>)
 800d55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d55c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d560:	60bb      	str	r3, [r7, #8]
 800d562:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d564:	2200      	movs	r2, #0
 800d566:	2105      	movs	r1, #5
 800d568:	2043      	movs	r0, #67	; 0x43
 800d56a:	f7f5 f883 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d56e:	2043      	movs	r0, #67	; 0x43
 800d570:	f7f5 f89c 	bl	80026ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d574:	bf00      	nop
 800d576:	37b8      	adds	r7, #184	; 0xb8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	40023800 	.word	0x40023800
 800d580:	40020000 	.word	0x40020000

0800d584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d598:	4619      	mov	r1, r3
 800d59a:	4610      	mov	r0, r2
 800d59c:	f7fb fa9d 	bl	8008ada <USBD_LL_SetupStage>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d5ba:	78fa      	ldrb	r2, [r7, #3]
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	440b      	add	r3, r1
 800d5c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	78fb      	ldrb	r3, [r7, #3]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	f7fb fad7 	bl	8008b84 <USBD_LL_DataOutStage>
}
 800d5d6:	bf00      	nop
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d5f0:	78fa      	ldrb	r2, [r7, #3]
 800d5f2:	6879      	ldr	r1, [r7, #4]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	00db      	lsls	r3, r3, #3
 800d5f8:	4413      	add	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	440b      	add	r3, r1
 800d5fe:	334c      	adds	r3, #76	; 0x4c
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	78fb      	ldrb	r3, [r7, #3]
 800d604:	4619      	mov	r1, r3
 800d606:	f7fb fb70 	bl	8008cea <USBD_LL_DataInStage>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d620:	4618      	mov	r0, r3
 800d622:	f7fb fca4 	bl	8008f6e <USBD_LL_SOF>
}
 800d626:	bf00      	nop
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b084      	sub	sp, #16
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d636:	2301      	movs	r3, #1
 800d638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d102      	bne.n	800d648 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d642:	2300      	movs	r3, #0
 800d644:	73fb      	strb	r3, [r7, #15]
 800d646:	e008      	b.n	800d65a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d102      	bne.n	800d656 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d650:	2301      	movs	r3, #1
 800d652:	73fb      	strb	r3, [r7, #15]
 800d654:	e001      	b.n	800d65a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d656:	f7f4 fca9 	bl	8001fac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d660:	7bfa      	ldrb	r2, [r7, #15]
 800d662:	4611      	mov	r1, r2
 800d664:	4618      	mov	r0, r3
 800d666:	f7fb fc44 	bl	8008ef2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d670:	4618      	mov	r0, r3
 800d672:	f7fb fbec 	bl	8008e4e <USBD_LL_Reset>
}
 800d676:	bf00      	nop
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
	...

0800d680 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fb fc3f 	bl	8008f12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6812      	ldr	r2, [r2, #0]
 800d6a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6a6:	f043 0301 	orr.w	r3, r3, #1
 800d6aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a1b      	ldr	r3, [r3, #32]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d005      	beq.n	800d6c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6b4:	4b04      	ldr	r3, [pc, #16]	; (800d6c8 <HAL_PCD_SuspendCallback+0x48>)
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	4a03      	ldr	r2, [pc, #12]	; (800d6c8 <HAL_PCD_SuspendCallback+0x48>)
 800d6ba:	f043 0306 	orr.w	r3, r3, #6
 800d6be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	e000ed00 	.word	0xe000ed00

0800d6cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fb fc2f 	bl	8008f3e <USBD_LL_Resume>
}
 800d6e0:	bf00      	nop
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6fa:	78fa      	ldrb	r2, [r7, #3]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fb fc87 	bl	8009012 <USBD_LL_IsoOUTIncomplete>
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d71e:	78fa      	ldrb	r2, [r7, #3]
 800d720:	4611      	mov	r1, r2
 800d722:	4618      	mov	r0, r3
 800d724:	f7fb fc43 	bl	8008fae <USBD_LL_IsoINIncomplete>
}
 800d728:	bf00      	nop
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fb fc99 	bl	8009076 <USBD_LL_DevConnected>
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fb fc96 	bl	800908c <USBD_LL_DevDisconnected>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d13c      	bne.n	800d7f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d778:	4a20      	ldr	r2, [pc, #128]	; (800d7fc <USBD_LL_Init+0x94>)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a1e      	ldr	r2, [pc, #120]	; (800d7fc <USBD_LL_Init+0x94>)
 800d784:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d788:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <USBD_LL_Init+0x94>)
 800d78a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d78e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d790:	4b1a      	ldr	r3, [pc, #104]	; (800d7fc <USBD_LL_Init+0x94>)
 800d792:	2206      	movs	r2, #6
 800d794:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d796:	4b19      	ldr	r3, [pc, #100]	; (800d7fc <USBD_LL_Init+0x94>)
 800d798:	2202      	movs	r2, #2
 800d79a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d79c:	4b17      	ldr	r3, [pc, #92]	; (800d7fc <USBD_LL_Init+0x94>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7a2:	4b16      	ldr	r3, [pc, #88]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7a4:	2202      	movs	r2, #2
 800d7a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d7a8:	4b14      	ldr	r3, [pc, #80]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d7ae:	4b13      	ldr	r3, [pc, #76]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d7b4:	4b11      	ldr	r3, [pc, #68]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d7ba:	4b10      	ldr	r3, [pc, #64]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7bc:	2201      	movs	r2, #1
 800d7be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7c0:	4b0e      	ldr	r3, [pc, #56]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7c6:	480d      	ldr	r0, [pc, #52]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7c8:	f7f5 fc69 	bl	800309e <HAL_PCD_Init>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7d2:	f7f4 fbeb 	bl	8001fac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7d6:	2180      	movs	r1, #128	; 0x80
 800d7d8:	4808      	ldr	r0, [pc, #32]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7da:	f7f6 fee4 	bl	80045a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7de:	2240      	movs	r2, #64	; 0x40
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	4806      	ldr	r0, [pc, #24]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7e4:	f7f6 fe98 	bl	8004518 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7e8:	2280      	movs	r2, #128	; 0x80
 800d7ea:	2101      	movs	r1, #1
 800d7ec:	4803      	ldr	r0, [pc, #12]	; (800d7fc <USBD_LL_Init+0x94>)
 800d7ee:	f7f6 fe93 	bl	8004518 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20006dd0 	.word	0x20006dd0

0800d800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d816:	4618      	mov	r0, r3
 800d818:	f7f5 fd65 	bl	80032e6 <HAL_PCD_Start>
 800d81c:	4603      	mov	r3, r0
 800d81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d820:	7bfb      	ldrb	r3, [r7, #15]
 800d822:	4618      	mov	r0, r3
 800d824:	f000 f97e 	bl	800db24 <USBD_Get_USB_Status>
 800d828:	4603      	mov	r3, r0
 800d82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	4608      	mov	r0, r1
 800d840:	4611      	mov	r1, r2
 800d842:	461a      	mov	r2, r3
 800d844:	4603      	mov	r3, r0
 800d846:	70fb      	strb	r3, [r7, #3]
 800d848:	460b      	mov	r3, r1
 800d84a:	70bb      	strb	r3, [r7, #2]
 800d84c:	4613      	mov	r3, r2
 800d84e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d854:	2300      	movs	r3, #0
 800d856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d85e:	78bb      	ldrb	r3, [r7, #2]
 800d860:	883a      	ldrh	r2, [r7, #0]
 800d862:	78f9      	ldrb	r1, [r7, #3]
 800d864:	f7f6 fa52 	bl	8003d0c <HAL_PCD_EP_Open>
 800d868:	4603      	mov	r3, r0
 800d86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 f958 	bl	800db24 <USBD_Get_USB_Status>
 800d874:	4603      	mov	r3, r0
 800d876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d878:	7bbb      	ldrb	r3, [r7, #14]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	460b      	mov	r3, r1
 800d88c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d89c:	78fa      	ldrb	r2, [r7, #3]
 800d89e:	4611      	mov	r1, r2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7f6 fa9b 	bl	8003ddc <HAL_PCD_EP_Close>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f939 	bl	800db24 <USBD_Get_USB_Status>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8da:	78fa      	ldrb	r2, [r7, #3]
 800d8dc:	4611      	mov	r1, r2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7f6 fb73 	bl	8003fca <HAL_PCD_EP_SetStall>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 f91a 	bl	800db24 <USBD_Get_USB_Status>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	460b      	mov	r3, r1
 800d908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d918:	78fa      	ldrb	r2, [r7, #3]
 800d91a:	4611      	mov	r1, r2
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7f6 fbb8 	bl	8004092 <HAL_PCD_EP_ClrStall>
 800d922:	4603      	mov	r3, r0
 800d924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 f8fb 	bl	800db24 <USBD_Get_USB_Status>
 800d92e:	4603      	mov	r3, r0
 800d930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d932:	7bbb      	ldrb	r3, [r7, #14]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d94e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d954:	2b00      	cmp	r3, #0
 800d956:	da0b      	bge.n	800d970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d95e:	68f9      	ldr	r1, [r7, #12]
 800d960:	4613      	mov	r3, r2
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	4413      	add	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	440b      	add	r3, r1
 800d96a:	333e      	adds	r3, #62	; 0x3e
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	e00b      	b.n	800d988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d970:	78fb      	ldrb	r3, [r7, #3]
 800d972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d976:	68f9      	ldr	r1, [r7, #12]
 800d978:	4613      	mov	r3, r2
 800d97a:	00db      	lsls	r3, r3, #3
 800d97c:	4413      	add	r3, r2
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	440b      	add	r3, r1
 800d982:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d986:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9ae:	78fa      	ldrb	r2, [r7, #3]
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7f6 f985 	bl	8003cc2 <HAL_PCD_SetAddress>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9bc:	7bfb      	ldrb	r3, [r7, #15]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 f8b0 	bl	800db24 <USBD_Get_USB_Status>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b086      	sub	sp, #24
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	603b      	str	r3, [r7, #0]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9f0:	7af9      	ldrb	r1, [r7, #11]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	f7f6 fa9e 	bl	8003f36 <HAL_PCD_EP_Transmit>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
 800da00:	4618      	mov	r0, r3
 800da02:	f000 f88f 	bl	800db24 <USBD_Get_USB_Status>
 800da06:	4603      	mov	r3, r0
 800da08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	607a      	str	r2, [r7, #4]
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	460b      	mov	r3, r1
 800da22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da32:	7af9      	ldrb	r1, [r7, #11]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	f7f6 fa1a 	bl	8003e70 <HAL_PCD_EP_Receive>
 800da3c:	4603      	mov	r3, r0
 800da3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	4618      	mov	r0, r3
 800da44:	f000 f86e 	bl	800db24 <USBD_Get_USB_Status>
 800da48:	4603      	mov	r3, r0
 800da4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3718      	adds	r7, #24
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
 800da5e:	460b      	mov	r3, r1
 800da60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da68:	78fa      	ldrb	r2, [r7, #3]
 800da6a:	4611      	mov	r1, r2
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7f6 fa4a 	bl	8003f06 <HAL_PCD_EP_GetRxCount>
 800da72:	4603      	mov	r3, r0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800da88:	78fb      	ldrb	r3, [r7, #3]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d002      	beq.n	800da94 <HAL_PCDEx_LPM_Callback+0x18>
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d01f      	beq.n	800dad2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800da92:	e03b      	b.n	800db0c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d007      	beq.n	800daac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800da9c:	f000 f83c 	bl	800db18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800daa0:	4b1c      	ldr	r3, [pc, #112]	; (800db14 <HAL_PCDEx_LPM_Callback+0x98>)
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	4a1b      	ldr	r2, [pc, #108]	; (800db14 <HAL_PCDEx_LPM_Callback+0x98>)
 800daa6:	f023 0306 	bic.w	r3, r3, #6
 800daaa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	6812      	ldr	r2, [r2, #0]
 800daba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dabe:	f023 0301 	bic.w	r3, r3, #1
 800dac2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fb fa37 	bl	8008f3e <USBD_LL_Resume>
    break;
 800dad0:	e01c      	b.n	800db0c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	6812      	ldr	r2, [r2, #0]
 800dae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dae4:	f043 0301 	orr.w	r3, r3, #1
 800dae8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fb fa0e 	bl	8008f12 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d005      	beq.n	800db0a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dafe:	4b05      	ldr	r3, [pc, #20]	; (800db14 <HAL_PCDEx_LPM_Callback+0x98>)
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	4a04      	ldr	r2, [pc, #16]	; (800db14 <HAL_PCDEx_LPM_Callback+0x98>)
 800db04:	f043 0306 	orr.w	r3, r3, #6
 800db08:	6113      	str	r3, [r2, #16]
    break;
 800db0a:	bf00      	nop
}
 800db0c:	bf00      	nop
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	e000ed00 	.word	0xe000ed00

0800db18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db1c:	f7f4 f858 	bl	8001bd0 <SystemClock_Config>
}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db32:	79fb      	ldrb	r3, [r7, #7]
 800db34:	2b03      	cmp	r3, #3
 800db36:	d817      	bhi.n	800db68 <USBD_Get_USB_Status+0x44>
 800db38:	a201      	add	r2, pc, #4	; (adr r2, 800db40 <USBD_Get_USB_Status+0x1c>)
 800db3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3e:	bf00      	nop
 800db40:	0800db51 	.word	0x0800db51
 800db44:	0800db57 	.word	0x0800db57
 800db48:	0800db5d 	.word	0x0800db5d
 800db4c:	0800db63 	.word	0x0800db63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]
    break;
 800db54:	e00b      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db56:	2303      	movs	r3, #3
 800db58:	73fb      	strb	r3, [r7, #15]
    break;
 800db5a:	e008      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db5c:	2301      	movs	r3, #1
 800db5e:	73fb      	strb	r3, [r7, #15]
    break;
 800db60:	e005      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db62:	2303      	movs	r3, #3
 800db64:	73fb      	strb	r3, [r7, #15]
    break;
 800db66:	e002      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db68:	2303      	movs	r3, #3
 800db6a:	73fb      	strb	r3, [r7, #15]
    break;
 800db6c:	bf00      	nop
  }
  return usb_status;
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3714      	adds	r7, #20
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <malloc>:
 800db7c:	4b02      	ldr	r3, [pc, #8]	; (800db88 <malloc+0xc>)
 800db7e:	4601      	mov	r1, r0
 800db80:	6818      	ldr	r0, [r3, #0]
 800db82:	f000 b82b 	b.w	800dbdc <_malloc_r>
 800db86:	bf00      	nop
 800db88:	2000015c 	.word	0x2000015c

0800db8c <free>:
 800db8c:	4b02      	ldr	r3, [pc, #8]	; (800db98 <free+0xc>)
 800db8e:	4601      	mov	r1, r0
 800db90:	6818      	ldr	r0, [r3, #0]
 800db92:	f000 b957 	b.w	800de44 <_free_r>
 800db96:	bf00      	nop
 800db98:	2000015c 	.word	0x2000015c

0800db9c <sbrk_aligned>:
 800db9c:	b570      	push	{r4, r5, r6, lr}
 800db9e:	4e0e      	ldr	r6, [pc, #56]	; (800dbd8 <sbrk_aligned+0x3c>)
 800dba0:	460c      	mov	r4, r1
 800dba2:	6831      	ldr	r1, [r6, #0]
 800dba4:	4605      	mov	r5, r0
 800dba6:	b911      	cbnz	r1, 800dbae <sbrk_aligned+0x12>
 800dba8:	f000 f902 	bl	800ddb0 <_sbrk_r>
 800dbac:	6030      	str	r0, [r6, #0]
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f000 f8fd 	bl	800ddb0 <_sbrk_r>
 800dbb6:	1c43      	adds	r3, r0, #1
 800dbb8:	d00a      	beq.n	800dbd0 <sbrk_aligned+0x34>
 800dbba:	1cc4      	adds	r4, r0, #3
 800dbbc:	f024 0403 	bic.w	r4, r4, #3
 800dbc0:	42a0      	cmp	r0, r4
 800dbc2:	d007      	beq.n	800dbd4 <sbrk_aligned+0x38>
 800dbc4:	1a21      	subs	r1, r4, r0
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f000 f8f2 	bl	800ddb0 <_sbrk_r>
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d101      	bne.n	800dbd4 <sbrk_aligned+0x38>
 800dbd0:	f04f 34ff 	mov.w	r4, #4294967295
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	200072dc 	.word	0x200072dc

0800dbdc <_malloc_r>:
 800dbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbe0:	1ccd      	adds	r5, r1, #3
 800dbe2:	f025 0503 	bic.w	r5, r5, #3
 800dbe6:	3508      	adds	r5, #8
 800dbe8:	2d0c      	cmp	r5, #12
 800dbea:	bf38      	it	cc
 800dbec:	250c      	movcc	r5, #12
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	4607      	mov	r7, r0
 800dbf2:	db01      	blt.n	800dbf8 <_malloc_r+0x1c>
 800dbf4:	42a9      	cmp	r1, r5
 800dbf6:	d905      	bls.n	800dc04 <_malloc_r+0x28>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	2600      	movs	r6, #0
 800dbfe:	4630      	mov	r0, r6
 800dc00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dcd8 <_malloc_r+0xfc>
 800dc08:	f000 f868 	bl	800dcdc <__malloc_lock>
 800dc0c:	f8d8 3000 	ldr.w	r3, [r8]
 800dc10:	461c      	mov	r4, r3
 800dc12:	bb5c      	cbnz	r4, 800dc6c <_malloc_r+0x90>
 800dc14:	4629      	mov	r1, r5
 800dc16:	4638      	mov	r0, r7
 800dc18:	f7ff ffc0 	bl	800db9c <sbrk_aligned>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	4604      	mov	r4, r0
 800dc20:	d155      	bne.n	800dcce <_malloc_r+0xf2>
 800dc22:	f8d8 4000 	ldr.w	r4, [r8]
 800dc26:	4626      	mov	r6, r4
 800dc28:	2e00      	cmp	r6, #0
 800dc2a:	d145      	bne.n	800dcb8 <_malloc_r+0xdc>
 800dc2c:	2c00      	cmp	r4, #0
 800dc2e:	d048      	beq.n	800dcc2 <_malloc_r+0xe6>
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	4631      	mov	r1, r6
 800dc34:	4638      	mov	r0, r7
 800dc36:	eb04 0903 	add.w	r9, r4, r3
 800dc3a:	f000 f8b9 	bl	800ddb0 <_sbrk_r>
 800dc3e:	4581      	cmp	r9, r0
 800dc40:	d13f      	bne.n	800dcc2 <_malloc_r+0xe6>
 800dc42:	6821      	ldr	r1, [r4, #0]
 800dc44:	1a6d      	subs	r5, r5, r1
 800dc46:	4629      	mov	r1, r5
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f7ff ffa7 	bl	800db9c <sbrk_aligned>
 800dc4e:	3001      	adds	r0, #1
 800dc50:	d037      	beq.n	800dcc2 <_malloc_r+0xe6>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	442b      	add	r3, r5
 800dc56:	6023      	str	r3, [r4, #0]
 800dc58:	f8d8 3000 	ldr.w	r3, [r8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d038      	beq.n	800dcd2 <_malloc_r+0xf6>
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	42a2      	cmp	r2, r4
 800dc64:	d12b      	bne.n	800dcbe <_malloc_r+0xe2>
 800dc66:	2200      	movs	r2, #0
 800dc68:	605a      	str	r2, [r3, #4]
 800dc6a:	e00f      	b.n	800dc8c <_malloc_r+0xb0>
 800dc6c:	6822      	ldr	r2, [r4, #0]
 800dc6e:	1b52      	subs	r2, r2, r5
 800dc70:	d41f      	bmi.n	800dcb2 <_malloc_r+0xd6>
 800dc72:	2a0b      	cmp	r2, #11
 800dc74:	d917      	bls.n	800dca6 <_malloc_r+0xca>
 800dc76:	1961      	adds	r1, r4, r5
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	6025      	str	r5, [r4, #0]
 800dc7c:	bf18      	it	ne
 800dc7e:	6059      	strne	r1, [r3, #4]
 800dc80:	6863      	ldr	r3, [r4, #4]
 800dc82:	bf08      	it	eq
 800dc84:	f8c8 1000 	streq.w	r1, [r8]
 800dc88:	5162      	str	r2, [r4, r5]
 800dc8a:	604b      	str	r3, [r1, #4]
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f104 060b 	add.w	r6, r4, #11
 800dc92:	f000 f829 	bl	800dce8 <__malloc_unlock>
 800dc96:	f026 0607 	bic.w	r6, r6, #7
 800dc9a:	1d23      	adds	r3, r4, #4
 800dc9c:	1af2      	subs	r2, r6, r3
 800dc9e:	d0ae      	beq.n	800dbfe <_malloc_r+0x22>
 800dca0:	1b9b      	subs	r3, r3, r6
 800dca2:	50a3      	str	r3, [r4, r2]
 800dca4:	e7ab      	b.n	800dbfe <_malloc_r+0x22>
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	6862      	ldr	r2, [r4, #4]
 800dcaa:	d1dd      	bne.n	800dc68 <_malloc_r+0x8c>
 800dcac:	f8c8 2000 	str.w	r2, [r8]
 800dcb0:	e7ec      	b.n	800dc8c <_malloc_r+0xb0>
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	6864      	ldr	r4, [r4, #4]
 800dcb6:	e7ac      	b.n	800dc12 <_malloc_r+0x36>
 800dcb8:	4634      	mov	r4, r6
 800dcba:	6876      	ldr	r6, [r6, #4]
 800dcbc:	e7b4      	b.n	800dc28 <_malloc_r+0x4c>
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	e7cc      	b.n	800dc5c <_malloc_r+0x80>
 800dcc2:	230c      	movs	r3, #12
 800dcc4:	603b      	str	r3, [r7, #0]
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	f000 f80e 	bl	800dce8 <__malloc_unlock>
 800dccc:	e797      	b.n	800dbfe <_malloc_r+0x22>
 800dcce:	6025      	str	r5, [r4, #0]
 800dcd0:	e7dc      	b.n	800dc8c <_malloc_r+0xb0>
 800dcd2:	605b      	str	r3, [r3, #4]
 800dcd4:	deff      	udf	#255	; 0xff
 800dcd6:	bf00      	nop
 800dcd8:	200072d8 	.word	0x200072d8

0800dcdc <__malloc_lock>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	; (800dce4 <__malloc_lock+0x8>)
 800dcde:	f000 b8a1 	b.w	800de24 <__retarget_lock_acquire_recursive>
 800dce2:	bf00      	nop
 800dce4:	2000741c 	.word	0x2000741c

0800dce8 <__malloc_unlock>:
 800dce8:	4801      	ldr	r0, [pc, #4]	; (800dcf0 <__malloc_unlock+0x8>)
 800dcea:	f000 b89c 	b.w	800de26 <__retarget_lock_release_recursive>
 800dcee:	bf00      	nop
 800dcf0:	2000741c 	.word	0x2000741c

0800dcf4 <memset>:
 800dcf4:	4402      	add	r2, r0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d100      	bne.n	800dcfe <memset+0xa>
 800dcfc:	4770      	bx	lr
 800dcfe:	f803 1b01 	strb.w	r1, [r3], #1
 800dd02:	e7f9      	b.n	800dcf8 <memset+0x4>

0800dd04 <_reclaim_reent>:
 800dd04:	4b29      	ldr	r3, [pc, #164]	; (800ddac <_reclaim_reent+0xa8>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4283      	cmp	r3, r0
 800dd0a:	b570      	push	{r4, r5, r6, lr}
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	d04b      	beq.n	800dda8 <_reclaim_reent+0xa4>
 800dd10:	69c3      	ldr	r3, [r0, #28]
 800dd12:	b143      	cbz	r3, 800dd26 <_reclaim_reent+0x22>
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d144      	bne.n	800dda4 <_reclaim_reent+0xa0>
 800dd1a:	69e3      	ldr	r3, [r4, #28]
 800dd1c:	6819      	ldr	r1, [r3, #0]
 800dd1e:	b111      	cbz	r1, 800dd26 <_reclaim_reent+0x22>
 800dd20:	4620      	mov	r0, r4
 800dd22:	f000 f88f 	bl	800de44 <_free_r>
 800dd26:	6961      	ldr	r1, [r4, #20]
 800dd28:	b111      	cbz	r1, 800dd30 <_reclaim_reent+0x2c>
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 f88a 	bl	800de44 <_free_r>
 800dd30:	69e1      	ldr	r1, [r4, #28]
 800dd32:	b111      	cbz	r1, 800dd3a <_reclaim_reent+0x36>
 800dd34:	4620      	mov	r0, r4
 800dd36:	f000 f885 	bl	800de44 <_free_r>
 800dd3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dd3c:	b111      	cbz	r1, 800dd44 <_reclaim_reent+0x40>
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f000 f880 	bl	800de44 <_free_r>
 800dd44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd46:	b111      	cbz	r1, 800dd4e <_reclaim_reent+0x4a>
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f000 f87b 	bl	800de44 <_free_r>
 800dd4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd50:	b111      	cbz	r1, 800dd58 <_reclaim_reent+0x54>
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 f876 	bl	800de44 <_free_r>
 800dd58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dd5a:	b111      	cbz	r1, 800dd62 <_reclaim_reent+0x5e>
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f000 f871 	bl	800de44 <_free_r>
 800dd62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dd64:	b111      	cbz	r1, 800dd6c <_reclaim_reent+0x68>
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 f86c 	bl	800de44 <_free_r>
 800dd6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dd6e:	b111      	cbz	r1, 800dd76 <_reclaim_reent+0x72>
 800dd70:	4620      	mov	r0, r4
 800dd72:	f000 f867 	bl	800de44 <_free_r>
 800dd76:	6a23      	ldr	r3, [r4, #32]
 800dd78:	b1b3      	cbz	r3, 800dda8 <_reclaim_reent+0xa4>
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd80:	4718      	bx	r3
 800dd82:	5949      	ldr	r1, [r1, r5]
 800dd84:	b941      	cbnz	r1, 800dd98 <_reclaim_reent+0x94>
 800dd86:	3504      	adds	r5, #4
 800dd88:	69e3      	ldr	r3, [r4, #28]
 800dd8a:	2d80      	cmp	r5, #128	; 0x80
 800dd8c:	68d9      	ldr	r1, [r3, #12]
 800dd8e:	d1f8      	bne.n	800dd82 <_reclaim_reent+0x7e>
 800dd90:	4620      	mov	r0, r4
 800dd92:	f000 f857 	bl	800de44 <_free_r>
 800dd96:	e7c0      	b.n	800dd1a <_reclaim_reent+0x16>
 800dd98:	680e      	ldr	r6, [r1, #0]
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 f852 	bl	800de44 <_free_r>
 800dda0:	4631      	mov	r1, r6
 800dda2:	e7ef      	b.n	800dd84 <_reclaim_reent+0x80>
 800dda4:	2500      	movs	r5, #0
 800dda6:	e7ef      	b.n	800dd88 <_reclaim_reent+0x84>
 800dda8:	bd70      	pop	{r4, r5, r6, pc}
 800ddaa:	bf00      	nop
 800ddac:	2000015c 	.word	0x2000015c

0800ddb0 <_sbrk_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d06      	ldr	r5, [pc, #24]	; (800ddcc <_sbrk_r+0x1c>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f4 fae0 	bl	8002380 <_sbrk>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_sbrk_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_sbrk_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20007418 	.word	0x20007418

0800ddd0 <__errno>:
 800ddd0:	4b01      	ldr	r3, [pc, #4]	; (800ddd8 <__errno+0x8>)
 800ddd2:	6818      	ldr	r0, [r3, #0]
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	2000015c 	.word	0x2000015c

0800dddc <__libc_init_array>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	4d0d      	ldr	r5, [pc, #52]	; (800de14 <__libc_init_array+0x38>)
 800dde0:	4c0d      	ldr	r4, [pc, #52]	; (800de18 <__libc_init_array+0x3c>)
 800dde2:	1b64      	subs	r4, r4, r5
 800dde4:	10a4      	asrs	r4, r4, #2
 800dde6:	2600      	movs	r6, #0
 800dde8:	42a6      	cmp	r6, r4
 800ddea:	d109      	bne.n	800de00 <__libc_init_array+0x24>
 800ddec:	4d0b      	ldr	r5, [pc, #44]	; (800de1c <__libc_init_array+0x40>)
 800ddee:	4c0c      	ldr	r4, [pc, #48]	; (800de20 <__libc_init_array+0x44>)
 800ddf0:	f000 f874 	bl	800dedc <_init>
 800ddf4:	1b64      	subs	r4, r4, r5
 800ddf6:	10a4      	asrs	r4, r4, #2
 800ddf8:	2600      	movs	r6, #0
 800ddfa:	42a6      	cmp	r6, r4
 800ddfc:	d105      	bne.n	800de0a <__libc_init_array+0x2e>
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}
 800de00:	f855 3b04 	ldr.w	r3, [r5], #4
 800de04:	4798      	blx	r3
 800de06:	3601      	adds	r6, #1
 800de08:	e7ee      	b.n	800dde8 <__libc_init_array+0xc>
 800de0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de0e:	4798      	blx	r3
 800de10:	3601      	adds	r6, #1
 800de12:	e7f2      	b.n	800ddfa <__libc_init_array+0x1e>
 800de14:	0800e0c4 	.word	0x0800e0c4
 800de18:	0800e0c4 	.word	0x0800e0c4
 800de1c:	0800e0c4 	.word	0x0800e0c4
 800de20:	0800e0c8 	.word	0x0800e0c8

0800de24 <__retarget_lock_acquire_recursive>:
 800de24:	4770      	bx	lr

0800de26 <__retarget_lock_release_recursive>:
 800de26:	4770      	bx	lr

0800de28 <memcpy>:
 800de28:	440a      	add	r2, r1
 800de2a:	4291      	cmp	r1, r2
 800de2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de30:	d100      	bne.n	800de34 <memcpy+0xc>
 800de32:	4770      	bx	lr
 800de34:	b510      	push	{r4, lr}
 800de36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de3e:	4291      	cmp	r1, r2
 800de40:	d1f9      	bne.n	800de36 <memcpy+0xe>
 800de42:	bd10      	pop	{r4, pc}

0800de44 <_free_r>:
 800de44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de46:	2900      	cmp	r1, #0
 800de48:	d044      	beq.n	800ded4 <_free_r+0x90>
 800de4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de4e:	9001      	str	r0, [sp, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f1a1 0404 	sub.w	r4, r1, #4
 800de56:	bfb8      	it	lt
 800de58:	18e4      	addlt	r4, r4, r3
 800de5a:	f7ff ff3f 	bl	800dcdc <__malloc_lock>
 800de5e:	4a1e      	ldr	r2, [pc, #120]	; (800ded8 <_free_r+0x94>)
 800de60:	9801      	ldr	r0, [sp, #4]
 800de62:	6813      	ldr	r3, [r2, #0]
 800de64:	b933      	cbnz	r3, 800de74 <_free_r+0x30>
 800de66:	6063      	str	r3, [r4, #4]
 800de68:	6014      	str	r4, [r2, #0]
 800de6a:	b003      	add	sp, #12
 800de6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de70:	f7ff bf3a 	b.w	800dce8 <__malloc_unlock>
 800de74:	42a3      	cmp	r3, r4
 800de76:	d908      	bls.n	800de8a <_free_r+0x46>
 800de78:	6825      	ldr	r5, [r4, #0]
 800de7a:	1961      	adds	r1, r4, r5
 800de7c:	428b      	cmp	r3, r1
 800de7e:	bf01      	itttt	eq
 800de80:	6819      	ldreq	r1, [r3, #0]
 800de82:	685b      	ldreq	r3, [r3, #4]
 800de84:	1949      	addeq	r1, r1, r5
 800de86:	6021      	streq	r1, [r4, #0]
 800de88:	e7ed      	b.n	800de66 <_free_r+0x22>
 800de8a:	461a      	mov	r2, r3
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	b10b      	cbz	r3, 800de94 <_free_r+0x50>
 800de90:	42a3      	cmp	r3, r4
 800de92:	d9fa      	bls.n	800de8a <_free_r+0x46>
 800de94:	6811      	ldr	r1, [r2, #0]
 800de96:	1855      	adds	r5, r2, r1
 800de98:	42a5      	cmp	r5, r4
 800de9a:	d10b      	bne.n	800deb4 <_free_r+0x70>
 800de9c:	6824      	ldr	r4, [r4, #0]
 800de9e:	4421      	add	r1, r4
 800dea0:	1854      	adds	r4, r2, r1
 800dea2:	42a3      	cmp	r3, r4
 800dea4:	6011      	str	r1, [r2, #0]
 800dea6:	d1e0      	bne.n	800de6a <_free_r+0x26>
 800dea8:	681c      	ldr	r4, [r3, #0]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	6053      	str	r3, [r2, #4]
 800deae:	440c      	add	r4, r1
 800deb0:	6014      	str	r4, [r2, #0]
 800deb2:	e7da      	b.n	800de6a <_free_r+0x26>
 800deb4:	d902      	bls.n	800debc <_free_r+0x78>
 800deb6:	230c      	movs	r3, #12
 800deb8:	6003      	str	r3, [r0, #0]
 800deba:	e7d6      	b.n	800de6a <_free_r+0x26>
 800debc:	6825      	ldr	r5, [r4, #0]
 800debe:	1961      	adds	r1, r4, r5
 800dec0:	428b      	cmp	r3, r1
 800dec2:	bf04      	itt	eq
 800dec4:	6819      	ldreq	r1, [r3, #0]
 800dec6:	685b      	ldreq	r3, [r3, #4]
 800dec8:	6063      	str	r3, [r4, #4]
 800deca:	bf04      	itt	eq
 800decc:	1949      	addeq	r1, r1, r5
 800dece:	6021      	streq	r1, [r4, #0]
 800ded0:	6054      	str	r4, [r2, #4]
 800ded2:	e7ca      	b.n	800de6a <_free_r+0x26>
 800ded4:	b003      	add	sp, #12
 800ded6:	bd30      	pop	{r4, r5, pc}
 800ded8:	200072d8 	.word	0x200072d8

0800dedc <_init>:
 800dedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dede:	bf00      	nop
 800dee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dee2:	bc08      	pop	{r3}
 800dee4:	469e      	mov	lr, r3
 800dee6:	4770      	bx	lr

0800dee8 <_fini>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	bf00      	nop
 800deec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deee:	bc08      	pop	{r3}
 800def0:	469e      	mov	lr, r3
 800def2:	4770      	bx	lr
