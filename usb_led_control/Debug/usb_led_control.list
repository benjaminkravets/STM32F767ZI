
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf5c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800d15c  0800d15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d294  0800d294  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d29c  0800d29c  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800d2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800d418  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800d4b8  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006f58  200002b4  0800d558  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000720c  0800d558  0002720c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028ad5  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005292  00000000  00000000  00048db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d58  00000000  00000000  0004e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001b20  00000000  00000000  0004fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a1c8  00000000  00000000  000518c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002280b  00000000  00000000  0005ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d00e  00000000  00000000  0007e29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018b2a9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007bf4  00000000  00000000  0018b2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d144 	.word	0x0800d144

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800d144 	.word	0x0800d144

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002d0 	.word	0x200002d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f00c fca6 	bl	800cf38 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200002d0 	.word	0x200002d0
 800067c:	0800d15c 	.word	0x0800d15c
 8000680:	20000378 	.word	0x20000378
 8000684:	20000778 	.word	0x20000778
 8000688:	0800d230 	.word	0x0800d230

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f00c fc0d 	bl	800cf1c <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f00c fbdf 	bl	800cf1c <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002d0 	.word	0x200002d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002d0 	.word	0x200002d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002d0 	.word	0x200002d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fb27 	bl	8001060 <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fbde 	bl	80011d4 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fdb7 	bl	800158c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fd7c 	bl	800151c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fbfb 	bl	8001220 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 fe88 	bl	8001740 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 fe67 	bl	8001704 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fdcc 	bl	80015f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000b90 	.word	0x20000b90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000b90 	.word	0x20000b90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000b90 	.word	0x20000b90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000b90 	.word	0x20000b90
 8000e4c:	200002d0 	.word	0x200002d0

08000e50 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e64:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <SEGGER_SYSVIEW_Init+0x74>)
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <SEGGER_SYSVIEW_Init+0x78>)
 8000e68:	f7ff fc96 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000e72:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000e76:	785a      	ldrb	r2, [r3, #1]
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000e7a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000e7e:	7e1b      	ldrb	r3, [r3, #24]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2308      	movs	r3, #8
 8000e88:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <SEGGER_SYSVIEW_Init+0x80>)
 8000e8a:	490f      	ldr	r1, [pc, #60]	; (8000ec8 <SEGGER_SYSVIEW_Init+0x78>)
 8000e8c:	f7ff fd08 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <SEGGER_SYSVIEW_Init+0x84>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000e9c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8000ea4:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000788 	.word	0x20000788
 8000ec8:	0800d170 	.word	0x0800d170
 8000ecc:	20000b90 	.word	0x20000b90
 8000ed0:	20000b88 	.word	0x20000b88
 8000ed4:	e0001004 	.word	0xe0001004

08000ed8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6113      	str	r3, [r2, #16]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000b90 	.word	0x20000b90

08000ef8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8000f00:	f3ef 8311 	mrs	r3, BASEPRI
 8000f04:	f04f 0120 	mov.w	r1, #32
 8000f08:	f381 8811 	msr	BASEPRI, r1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8000f10:	f7ff fd42 	bl	8000998 <_PreparePacket>
 8000f14:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	f7ff fe2a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f383 8811 	msr	BASEPRI, r3
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000bc0 	.word	0x20000bc0

08000f34 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8000f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8000f42:	f04f 0120 	mov.w	r1, #32
 8000f46:	f381 8811 	msr	BASEPRI, r1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8000f4e:	f7ff fd23 	bl	8000998 <_PreparePacket>
 8000f52:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	e00b      	b.n	8000f7a <SEGGER_SYSVIEW_RecordU32+0x46>
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	1c59      	adds	r1, r3, #1
 8000f6a:	61f9      	str	r1, [r7, #28]
 8000f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	09db      	lsrs	r3, r3, #7
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7e:	d8f0      	bhi.n	8000f62 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	61fa      	str	r2, [r7, #28]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	6938      	ldr	r0, [r7, #16]
 8000f96:	f7ff fded 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f383 8811 	msr	BASEPRI, r3
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000bc0 	.word	0x20000bc0

08000fac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8000fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8000fbc:	f04f 0120 	mov.w	r1, #32
 8000fc0:	f381 8811 	msr	BASEPRI, r1
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	4825      	ldr	r0, [pc, #148]	; (800105c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8000fc8:	f7ff fce6 	bl	8000998 <_PreparePacket>
 8000fcc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fda:	e00b      	b.n	8000ff4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe2:	1c59      	adds	r1, r3, #1
 8000fe4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	09db      	lsrs	r3, r3, #7
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff8:	d8f0      	bhi.n	8000fdc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	e00b      	b.n	800102c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	6279      	str	r1, [r7, #36]	; 0x24
 800101e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	09db      	lsrs	r3, r3, #7
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b7f      	cmp	r3, #127	; 0x7f
 8001030:	d8f0      	bhi.n	8001014 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	627a      	str	r2, [r7, #36]	; 0x24
 8001038:	6a3a      	ldr	r2, [r7, #32]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	69b8      	ldr	r0, [r7, #24]
 8001048:	f7ff fd94 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f383 8811 	msr	BASEPRI, r3
}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	; 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000bc0 	.word	0x20000bc0

08001060 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001066:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800106c:	f3ef 8311 	mrs	r3, BASEPRI
 8001070:	f04f 0120 	mov.w	r1, #32
 8001074:	f381 8811 	msr	BASEPRI, r1
 8001078:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	220a      	movs	r2, #10
 8001080:	4952      	ldr	r1, [pc, #328]	; (80011cc <SEGGER_SYSVIEW_Start+0x16c>)
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8dc 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800108e:	200a      	movs	r0, #10
 8001090:	f7ff ff32 	bl	8000ef8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001094:	f3ef 8311 	mrs	r3, BASEPRI
 8001098:	f04f 0120 	mov.w	r1, #32
 800109c:	f381 8811 	msr	BASEPRI, r1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	484b      	ldr	r0, [pc, #300]	; (80011d0 <SEGGER_SYSVIEW_Start+0x170>)
 80010a4:	f7ff fc78 	bl	8000998 <_PreparePacket>
 80010a8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010b8:	e00b      	b.n	80010d2 <SEGGER_SYSVIEW_Start+0x72>
 80010ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	1c59      	adds	r1, r3, #1
 80010c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80010c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	09db      	lsrs	r3, r3, #7
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	2b7f      	cmp	r3, #127	; 0x7f
 80010d6:	d8f0      	bhi.n	80010ba <SEGGER_SYSVIEW_Start+0x5a>
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	623b      	str	r3, [r7, #32]
 80010f2:	e00b      	b.n	800110c <SEGGER_SYSVIEW_Start+0xac>
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	1c59      	adds	r1, r3, #1
 80010fc:	6279      	str	r1, [r7, #36]	; 0x24
 80010fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	09db      	lsrs	r3, r3, #7
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	2b7f      	cmp	r3, #127	; 0x7f
 8001110:	d8f0      	bhi.n	80010f4 <SEGGER_SYSVIEW_Start+0x94>
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	627a      	str	r2, [r7, #36]	; 0x24
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	e00b      	b.n	8001146 <SEGGER_SYSVIEW_Start+0xe6>
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	1c59      	adds	r1, r3, #1
 8001136:	61f9      	str	r1, [r7, #28]
 8001138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	09db      	lsrs	r3, r3, #7
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b7f      	cmp	r3, #127	; 0x7f
 800114a:	d8f0      	bhi.n	800112e <SEGGER_SYSVIEW_Start+0xce>
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	61fa      	str	r2, [r7, #28]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	e00b      	b.n	800117e <SEGGER_SYSVIEW_Start+0x11e>
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	1c59      	adds	r1, r3, #1
 800116e:	6179      	str	r1, [r7, #20]
 8001170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	09db      	lsrs	r3, r3, #7
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	2b7f      	cmp	r3, #127	; 0x7f
 8001182:	d8f0      	bhi.n	8001166 <SEGGER_SYSVIEW_Start+0x106>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	617a      	str	r2, [r7, #20]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001194:	2218      	movs	r2, #24
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fceb 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SEGGER_SYSVIEW_Start+0x168>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80011b2:	f000 f9eb 	bl	800158c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80011b6:	f000 f9b1 	bl	800151c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80011ba:	f000 fac1 	bl	8001740 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	; 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000b90 	.word	0x20000b90
 80011cc:	0800d244 	.word	0x0800d244
 80011d0:	20000bc0 	.word	0x20000bc0

080011d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80011da:	f3ef 8311 	mrs	r3, BASEPRI
 80011de:	f04f 0120 	mov.w	r1, #32
 80011e2:	f381 8811 	msr	BASEPRI, r1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <SEGGER_SYSVIEW_Stop+0x44>)
 80011ea:	f7ff fbd5 	bl	8000998 <_PreparePacket>
 80011ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SEGGER_SYSVIEW_Stop+0x48>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80011f8:	220b      	movs	r2, #11
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f7ff fcb9 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <SEGGER_SYSVIEW_Stop+0x48>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f383 8811 	msr	BASEPRI, r3
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000bc0 	.word	0x20000bc0
 800121c:	20000b90 	.word	0x20000b90

08001220 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001226:	f3ef 8311 	mrs	r3, BASEPRI
 800122a:	f04f 0120 	mov.w	r1, #32
 800122e:	f381 8811 	msr	BASEPRI, r1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4845      	ldr	r0, [pc, #276]	; (800134c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001236:	f7ff fbaf 	bl	8000998 <_PreparePacket>
 800123a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
 800124a:	e00b      	b.n	8001264 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124e:	b2da      	uxtb	r2, r3
 8001250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001252:	1c59      	adds	r1, r3, #1
 8001254:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	09db      	lsrs	r3, r3, #7
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	2b7f      	cmp	r3, #127	; 0x7f
 8001268:	d8f0      	bhi.n	800124c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	e00b      	b.n	800129e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	6279      	str	r1, [r7, #36]	; 0x24
 8001290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	09db      	lsrs	r3, r3, #7
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2b7f      	cmp	r3, #127	; 0x7f
 80012a2:	d8f0      	bhi.n	8001286 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	627a      	str	r2, [r7, #36]	; 0x24
 80012aa:	6a3a      	ldr	r2, [r7, #32]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	e00b      	b.n	80012d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	1c59      	adds	r1, r3, #1
 80012c8:	61f9      	str	r1, [r7, #28]
 80012ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	09db      	lsrs	r3, r3, #7
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b7f      	cmp	r3, #127	; 0x7f
 80012dc:	d8f0      	bhi.n	80012c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	61fa      	str	r2, [r7, #28]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	e00b      	b.n	8001310 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	1c59      	adds	r1, r3, #1
 8001300:	6179      	str	r1, [r7, #20]
 8001302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	09db      	lsrs	r3, r3, #7
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b7f      	cmp	r3, #127	; 0x7f
 8001314:	d8f0      	bhi.n	80012f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	617a      	str	r2, [r7, #20]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001326:	2218      	movs	r2, #24
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f7ff fc22 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	4798      	blx	r3
  }
}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000bc0 	.word	0x20000bc0
 8001350:	20000b90 	.word	0x20000b90

08001354 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b092      	sub	sp, #72	; 0x48
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800135c:	f3ef 8311 	mrs	r3, BASEPRI
 8001360:	f04f 0120 	mov.w	r1, #32
 8001364:	f381 8811 	msr	BASEPRI, r1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	486a      	ldr	r0, [pc, #424]	; (8001514 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800136c:	f7ff fb14 	bl	8000998 <_PreparePacket>
 8001370:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b66      	ldr	r3, [pc, #408]	; (8001518 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	643b      	str	r3, [r7, #64]	; 0x40
 8001386:	e00b      	b.n	80013a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800138a:	b2da      	uxtb	r2, r3
 800138c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	6479      	str	r1, [r7, #68]	; 0x44
 8001392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800139c:	09db      	lsrs	r3, r3, #7
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
 80013a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a2:	2b7f      	cmp	r3, #127	; 0x7f
 80013a4:	d8f0      	bhi.n	8001388 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80013a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	647a      	str	r2, [r7, #68]	; 0x44
 80013ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
 80013c0:	e00b      	b.n	80013da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80013c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c8:	1c59      	adds	r1, r3, #1
 80013ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80013cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d6:	09db      	lsrs	r3, r3, #7
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80013da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013dc:	2b7f      	cmp	r3, #127	; 0x7f
 80013de:	d8f0      	bhi.n	80013c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80013e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	4619      	mov	r1, r3
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fa9d 	bl	8000938 <_EncodeStr>
 80013fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001400:	2209      	movs	r2, #9
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	6938      	ldr	r0, [r7, #16]
 8001406:	f7ff fbb5 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
 800141e:	e00b      	b.n	8001438 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	b2da      	uxtb	r2, r3
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	6379      	str	r1, [r7, #52]	; 0x34
 800142a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	09db      	lsrs	r3, r3, #7
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143a:	2b7f      	cmp	r3, #127	; 0x7f
 800143c:	d8f0      	bhi.n	8001420 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	637a      	str	r2, [r7, #52]	; 0x34
 8001444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
 8001458:	e00b      	b.n	8001472 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	b2da      	uxtb	r2, r3
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146e:	09db      	lsrs	r3, r3, #7
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	2b7f      	cmp	r3, #127	; 0x7f
 8001476:	d8f0      	bhi.n	800145a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800147e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	e00b      	b.n	80014ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	6279      	str	r1, [r7, #36]	; 0x24
 800149e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	09db      	lsrs	r3, r3, #7
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	2b7f      	cmp	r3, #127	; 0x7f
 80014b0:	d8f0      	bhi.n	8001494 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	627a      	str	r2, [r7, #36]	; 0x24
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	e00b      	b.n	80014e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	61f9      	str	r1, [r7, #28]
 80014d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	09db      	lsrs	r3, r3, #7
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b7f      	cmp	r3, #127	; 0x7f
 80014e8:	d8f0      	bhi.n	80014cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	61fa      	str	r2, [r7, #28]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80014fa:	2215      	movs	r2, #21
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	6938      	ldr	r0, [r7, #16]
 8001500:	f7ff fb38 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f383 8811 	msr	BASEPRI, r3
}
 800150a:	bf00      	nop
 800150c:	3748      	adds	r7, #72	; 0x48
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000bc0 	.word	0x20000bc0
 8001518:	20000b90 	.word	0x20000b90

0800151c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4798      	blx	r3
  }
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000b90 	.word	0x20000b90

08001544 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800154c:	f3ef 8311 	mrs	r3, BASEPRI
 8001550:	f04f 0120 	mov.w	r1, #32
 8001554:	f381 8811 	msr	BASEPRI, r1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800155c:	f7ff fa1c 	bl	8000998 <_PreparePacket>
 8001560:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	6938      	ldr	r0, [r7, #16]
 8001568:	f7ff f9e6 	bl	8000938 <_EncodeStr>
 800156c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800156e:	220e      	movs	r2, #14
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	6938      	ldr	r0, [r7, #16]
 8001574:	f7ff fafe 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f383 8811 	msr	BASEPRI, r3
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000bc0 	.word	0x20000bc0

0800158c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01a      	beq.n	80015d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d015      	beq.n	80015d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4798      	blx	r3
 80015ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80015b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80015b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	000a      	movs	r2, r1
 80015c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80015c2:	4613      	mov	r3, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4621      	mov	r1, r4
 80015c8:	200d      	movs	r0, #13
 80015ca:	f7ff fcef 	bl	8000fac <SEGGER_SYSVIEW_RecordU32x2>
 80015ce:	e006      	b.n	80015de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	200c      	movs	r0, #12
 80015d8:	f7ff fcac 	bl	8000f34 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000b90 	.word	0x20000b90
 80015ec:	e0001004 	.word	0xe0001004

080015f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80015fa:	4b40      	ldr	r3, [pc, #256]	; (80016fc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d077      	beq.n	80016f2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
 800160c:	e008      	b.n	8001620 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	3301      	adds	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001624:	429a      	cmp	r2, r3
 8001626:	d3f2      	bcc.n	800160e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001628:	e000      	b.n	800162c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800162a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	2b00      	cmp	r3, #0
 8001630:	d055      	beq.n	80016de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001632:	f3ef 8311 	mrs	r3, BASEPRI
 8001636:	f04f 0120 	mov.w	r1, #32
 800163a:	f381 8811 	msr	BASEPRI, r1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	482f      	ldr	r0, [pc, #188]	; (8001700 <SEGGER_SYSVIEW_SendModule+0x110>)
 8001642:	f7ff f9a9 	bl	8000998 <_PreparePacket>
 8001646:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	e00b      	b.n	800166e <SEGGER_SYSVIEW_SendModule+0x7e>
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1c59      	adds	r1, r3, #1
 800165e:	6279      	str	r1, [r7, #36]	; 0x24
 8001660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	09db      	lsrs	r3, r3, #7
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b7f      	cmp	r3, #127	; 0x7f
 8001672:	d8f0      	bhi.n	8001656 <SEGGER_SYSVIEW_SendModule+0x66>
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	627a      	str	r2, [r7, #36]	; 0x24
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	e00b      	b.n	80016a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	1c59      	adds	r1, r3, #1
 8001698:	61f9      	str	r1, [r7, #28]
 800169a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	09db      	lsrs	r3, r3, #7
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b7f      	cmp	r3, #127	; 0x7f
 80016ac:	d8f0      	bhi.n	8001690 <SEGGER_SYSVIEW_SendModule+0xa0>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	61fa      	str	r2, [r7, #28]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	4619      	mov	r1, r3
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff f936 	bl	8000938 <_EncodeStr>
 80016cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80016ce:	2216      	movs	r2, #22
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	6938      	ldr	r0, [r7, #16]
 80016d4:	f7ff fa4e 	bl	8000b74 <_SendPacket>
      RECORD_END();
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <SEGGER_SYSVIEW_SendModule+0x102>
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4798      	blx	r3
    }
  }
}
 80016f2:	bf00      	nop
 80016f4:	3730      	adds	r7, #48	; 0x30
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000bb8 	.word	0x20000bb8
 8001700:	20000bc0 	.word	0x20000bc0

08001704 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00f      	beq.n	8001732 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f2      	bne.n	8001718 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000bb8 	.word	0x20000bb8

08001740 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001746:	f3ef 8311 	mrs	r3, BASEPRI
 800174a:	f04f 0120 	mov.w	r1, #32
 800174e:	f381 8811 	msr	BASEPRI, r1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4817      	ldr	r0, [pc, #92]	; (80017b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001756:	f7ff f91f 	bl	8000998 <_PreparePacket>
 800175a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e00b      	b.n	8001784 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	1c59      	adds	r1, r3, #1
 8001774:	6179      	str	r1, [r7, #20]
 8001776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	09db      	lsrs	r3, r3, #7
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b7f      	cmp	r3, #127	; 0x7f
 8001788:	d8f0      	bhi.n	800176c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	617a      	str	r2, [r7, #20]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800179a:	221b      	movs	r2, #27
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	68b8      	ldr	r0, [r7, #8]
 80017a0:	f7ff f9e8 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f383 8811 	msr	BASEPRI, r3
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000bc0 	.word	0x20000bc0
 80017b8:	20000bbc 	.word	0x20000bbc

080017bc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <_cbSendSystemDesc+0x14>)
 80017c2:	f7ff febf 	bl	8001544 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <_cbSendSystemDesc+0x18>)
 80017c8:	f7ff febc 	bl	8001544 <SEGGER_SYSVIEW_SendSysDesc>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	0800d178 	.word	0x0800d178
 80017d4:	0800d1ac 	.word	0x0800d1ac

080017d8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SEGGER_SYSVIEW_Conf+0x20>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SEGGER_SYSVIEW_Conf+0x20>)
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SEGGER_SYSVIEW_Conf+0x24>)
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <SEGGER_SYSVIEW_Conf+0x28>)
 80017e8:	f7ff fb32 	bl	8000e50 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80017ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80017f0:	f7ff fb72 	bl	8000ed8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000000 	.word	0x20000000
 80017fc:	080017bd 	.word	0x080017bd
 8001800:	0800d250 	.word	0x0800d250

08001804 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	e048      	b.n	80018a2 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001810:	4929      	ldr	r1, [pc, #164]	; (80018b8 <_cbSendTaskList+0xb4>)
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f009 fcdf 	bl	800b1e4 <uxTaskGetStackHighWaterMark>
 8001826:	4601      	mov	r1, r0
 8001828:	4823      	ldr	r0, [pc, #140]	; (80018b8 <_cbSendTaskList+0xb4>)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4403      	add	r3, r0
 8001836:	3310      	adds	r3, #16
 8001838:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800183a:	491f      	ldr	r1, [pc, #124]	; (80018b8 <_cbSendTaskList+0xb4>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	491b      	ldr	r1, [pc, #108]	; (80018b8 <_cbSendTaskList+0xb4>)
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3304      	adds	r3, #4
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	4c16      	ldr	r4, [pc, #88]	; (80018b8 <_cbSendTaskList+0xb4>)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4423      	add	r3, r4
 800186a:	3308      	adds	r3, #8
 800186c:	681c      	ldr	r4, [r3, #0]
 800186e:	4d12      	ldr	r5, [pc, #72]	; (80018b8 <_cbSendTaskList+0xb4>)
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	442b      	add	r3, r5
 800187c:	330c      	adds	r3, #12
 800187e:	681d      	ldr	r5, [r3, #0]
 8001880:	4e0d      	ldr	r6, [pc, #52]	; (80018b8 <_cbSendTaskList+0xb4>)
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4433      	add	r3, r6
 800188e:	3310      	adds	r3, #16
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	462b      	mov	r3, r5
 8001896:	4622      	mov	r2, r4
 8001898:	f000 f855 	bl	8001946 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <_cbSendTaskList+0xb8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3b1      	bcc.n	8001810 <_cbSendTaskList+0xc>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000ca4 	.word	0x20000ca4
 80018bc:	20000d44 	.word	0x20000d44

080018c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80018c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80018c8:	f009 f97a 	bl	800abc0 <xTaskGetTickCountFromISR>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2200      	movs	r2, #0
 80018d0:	469a      	mov	sl, r3
 80018d2:	4693      	mov	fp, r2
 80018d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80018d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	f04f 0a00 	mov.w	sl, #0
 80018e4:	f04f 0b00 	mov.w	fp, #0
 80018e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80018ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80018f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80018f4:	4652      	mov	r2, sl
 80018f6:	465b      	mov	r3, fp
 80018f8:	1a14      	subs	r4, r2, r0
 80018fa:	eb63 0501 	sbc.w	r5, r3, r1
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	00ab      	lsls	r3, r5, #2
 8001908:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800190c:	00a2      	lsls	r2, r4, #2
 800190e:	4614      	mov	r4, r2
 8001910:	461d      	mov	r5, r3
 8001912:	eb14 0800 	adds.w	r8, r4, r0
 8001916:	eb45 0901 	adc.w	r9, r5, r1
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800192a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800192e:	4690      	mov	r8, r2
 8001930:	4699      	mov	r9, r3
 8001932:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001936:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001946 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001946:	b580      	push	{r7, lr}
 8001948:	b08a      	sub	sp, #40	; 0x28
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2214      	movs	r2, #20
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f00b faeb 	bl	800cf38 <memset>
  TaskInfo.TaskID     = TaskID;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fcea 	bl	8001354 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198c:	f000 fba5 	bl	80020da <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001990:	f7ff ff22 	bl	80017d8 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f81a 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f000 f908 	bl	8001bac <MX_GPIO_Init>
  MX_ETH_Init();
 800199c:	f000 f888 	bl	8001ab0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80019a0:	f000 f8d4 	bl	8001b4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019a4:	f007 fed4 	bl	8009750 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <main+0x38>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <main+0x3c>)
 80019ae:	f007 ff39 	bl	8009824 <osThreadNew>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <main+0x40>)
 80019b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019b8:	f007 fefe 	bl	80097b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <main+0x34>
 80019be:	bf00      	nop
 80019c0:	0800d258 	.word	0x0800d258
 80019c4:	08001cf1 	.word	0x08001cf1
 80019c8:	20000eb8 	.word	0x20000eb8

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	; 0x50
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2234      	movs	r2, #52	; 0x34
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b faac 	bl	800cf38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019f0:	f002 fcaa 	bl	8004348 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <SystemClock_Config+0xdc>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a2b      	ldr	r2, [pc, #172]	; (8001aa8 <SystemClock_Config+0xdc>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <SystemClock_Config+0xdc>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <SystemClock_Config+0xe0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <SystemClock_Config+0xe0>)
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <SystemClock_Config+0xe0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a40:	2360      	movs	r3, #96	; 0x60
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fcd7 	bl	8004408 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a60:	f000 f956 	bl	8001d10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a64:	f002 fc80 	bl	8004368 <HAL_PWREx_EnableOverDrive>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a6e:	f000 f94f 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a72:	230f      	movs	r3, #15
 8001a74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a76:	2302      	movs	r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 ff68 	bl	8004964 <HAL_RCC_ClockConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001a9a:	f000 f939 	bl	8001d10 <Error_Handler>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3750      	adds	r7, #80	; 0x50
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000

08001ab0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_ETH_Init+0x84>)
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <MX_ETH_Init+0x88>)
 8001ab8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001ac8:	22e1      	movs	r2, #225	; 0xe1
 8001aca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_ETH_Init+0x84>)
 8001ae0:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <MX_ETH_Init+0x8c>)
 8001ae2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_ETH_Init+0x84>)
 8001ae6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001aea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_ETH_Init+0x84>)
 8001aee:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <MX_ETH_Init+0x90>)
 8001af0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_ETH_Init+0x84>)
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <MX_ETH_Init+0x94>)
 8001af6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_ETH_Init+0x84>)
 8001afa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001afe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <MX_ETH_Init+0x84>)
 8001b02:	f000 fc7d 	bl	8002400 <HAL_ETH_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001b0c:	f000 f900 	bl	8001d10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b10:	2238      	movs	r2, #56	; 0x38
 8001b12:	2100      	movs	r1, #0
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_ETH_Init+0x98>)
 8001b16:	f00b fa0f 	bl	800cf38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_ETH_Init+0x98>)
 8001b1c:	2221      	movs	r2, #33	; 0x21
 8001b1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_ETH_Init+0x98>)
 8001b22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_ETH_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000d80 	.word	0x20000d80
 8001b38:	40028000 	.word	0x40028000
 8001b3c:	20000ebc 	.word	0x20000ebc
 8001b40:	20000214 	.word	0x20000214
 8001b44:	20000174 	.word	0x20000174
 8001b48:	20000d48 	.word	0x20000d48

08001b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <MX_USART3_UART_Init+0x5c>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b90:	f003 fd36 	bl	8005600 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f000 f8b9 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000e30 	.word	0x20000e30
 8001ba8:	40004800 	.word	0x40004800

08001bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	; 0x30
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a46      	ldr	r2, [pc, #280]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a34      	ldr	r2, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c58:	4822      	ldr	r0, [pc, #136]	; (8001ce4 <MX_GPIO_Init+0x138>)
 8001c5a:	f001 f8a3 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2140      	movs	r1, #64	; 0x40
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <MX_GPIO_Init+0x13c>)
 8001c64:	f001 f89e 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481b      	ldr	r0, [pc, #108]	; (8001cec <MX_GPIO_Init+0x140>)
 8001c80:	f000 fee4 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c84:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <MX_GPIO_Init+0x138>)
 8001c9e:	f000 fed5 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ca2:	2340      	movs	r3, #64	; 0x40
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_GPIO_Init+0x13c>)
 8001cba:	f000 fec7 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_GPIO_Init+0x13c>)
 8001cd2:	f000 febb 	bl	8002a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3730      	adds	r7, #48	; 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40020800 	.word	0x40020800

08001cf0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001cf8:	f00a fb40 	bl	800c37c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f007 fe37 	bl	8009970 <osDelay>
    CDC_Transmit_FS((uint8_t*)"test", 4);
 8001d02:	2104      	movs	r1, #4
 8001d04:	4801      	ldr	r0, [pc, #4]	; (8001d0c <StartDefaultTask+0x1c>)
 8001d06:	f00a fbf7 	bl	800c4f8 <CDC_Transmit_FS>
    osDelay(1);
 8001d0a:	e7f7      	b.n	8001cfc <StartDefaultTask+0xc>
 8001d0c:	0800d1c8 	.word	0x0800d1c8

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	210f      	movs	r1, #15
 8001d56:	f06f 0001 	mvn.w	r0, #1
 8001d5a:	f000 fb1a 	bl	8002392 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <HAL_ETH_MspInit+0x158>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	f040 8096 	bne.w	8001ebc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a4c      	ldr	r2, [pc, #304]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a46      	ldr	r2, [pc, #280]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	4a40      	ldr	r2, [pc, #256]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dca:	6313      	str	r3, [r2, #48]	; 0x30
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4a34      	ldr	r2, [pc, #208]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e20:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_ETH_MspInit+0x15c>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e38:	2332      	movs	r3, #50	; 0x32
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e48:	230b      	movs	r3, #11
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	481e      	ldr	r0, [pc, #120]	; (8001ecc <HAL_ETH_MspInit+0x160>)
 8001e54:	f000 fdfa 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e58:	2386      	movs	r3, #134	; 0x86
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e68:	230b      	movs	r3, #11
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <HAL_ETH_MspInit+0x164>)
 8001e74:	f000 fdea 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e8a:	230b      	movs	r3, #11
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <HAL_ETH_MspInit+0x168>)
 8001e96:	f000 fdd9 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eac:	230b      	movs	r3, #11
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <HAL_ETH_MspInit+0x16c>)
 8001eb8:	f000 fdc8 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3738      	adds	r7, #56	; 0x38
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40028000 	.word	0x40028000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40021800 	.word	0x40021800

08001edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ae      	sub	sp, #184	; 0xb8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2290      	movs	r2, #144	; 0x90
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00b f81b 	bl	800cf38 <memset>
  if(huart->Instance==USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d13c      	bne.n	8001f86 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 ff48 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f26:	f7ff fef3 	bl	8001d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f74:	2307      	movs	r3, #7
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <HAL_UART_MspInit+0xbc>)
 8001f82:	f000 fd63 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	37b8      	adds	r7, #184	; 0xb8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40004800 	.word	0x40004800
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f8c2 	bl	8002154 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fd0:	f009 f976 	bl	800b2c0 <xTaskGetSchedulerState>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fda:	f009 ff55 	bl	800be88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <OTG_FS_IRQHandler+0x10>)
 8001fea:	f001 f83a 	bl	8003062 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20006cf4 	.word	0x20006cf4

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f00a ff3e 	bl	800cea8 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20080000 	.word	0x20080000
 8002058:	00000400 	.word	0x00000400
 800205c:	20000ec4 	.word	0x20000ec4
 8002060:	20007210 	.word	0x20007210

08002064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a4:	4c0b      	ldr	r4, [pc, #44]	; (80020d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b2:	f7ff ffd7 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f00a fefd 	bl	800ceb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ba:	f7ff fc65 	bl	8001988 <main>
  bx  lr    
 80020be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80020cc:	0800d2a4 	.word	0x0800d2a4
  ldr r2, =_sbss
 80020d0:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 80020d4:	2000720c 	.word	0x2000720c

080020d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC_IRQHandler>

080020da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020de:	2003      	movs	r0, #3
 80020e0:	f000 f94c 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e4:	200f      	movs	r0, #15
 80020e6:	f000 f805 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ea:	f7ff fe17 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f967 	bl	80023e6 <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 f92f 	bl	8002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008
 8002178:	20000ec8 	.word	0x20000ec8

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000ec8 	.word	0x20000ec8

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff ffee 	bl	800217c <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_Delay+0x44>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffde 	bl	800217c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <__NVIC_SetPriorityGrouping+0x40>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	4313      	orrs	r3, r2
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x40>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	05fa0000 	.word	0x05fa0000

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db0b      	blt.n	800226a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4907      	ldr	r1, [pc, #28]	; (8002278 <__NVIC_EnableIRQ+0x38>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e100 	.word	0xe000e100

0800227c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	db0a      	blt.n	80022a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <__NVIC_SetPriority+0x4c>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	440b      	add	r3, r1
 80022a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a4:	e00a      	b.n	80022bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <__NVIC_SetPriority+0x50>)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3b04      	subs	r3, #4
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	440b      	add	r3, r1
 80022ba:	761a      	strb	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f1c3 0307 	rsb	r3, r3, #7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf28      	it	cs
 80022ee:	2304      	movcs	r3, #4
 80022f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d902      	bls.n	8002300 <NVIC_EncodePriority+0x30>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3b03      	subs	r3, #3
 80022fe:	e000      	b.n	8002302 <NVIC_EncodePriority+0x32>
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	43d9      	mvns	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	4313      	orrs	r3, r2
         );
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff8e 	bl	800227c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff29 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff3e 	bl	8002224 <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff8e 	bl	80022d0 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5d 	bl	800227c <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff31 	bl	8002240 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06a      	b.n	80024e8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2223      	movs	r2, #35	; 0x23
 8002420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fca1 	bl	8001d6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_ETH_Init+0xf0>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_ETH_Init+0xf0>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_ETH_Init+0xf0>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_ETH_Init+0xf4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <HAL_ETH_Init+0xf4>)
 8002448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800244c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_ETH_Init+0xf4>)
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <HAL_ETH_Init+0xf4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_ETH_Init+0xf4>)
 800245e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002478:	f7ff fe80 	bl	800217c <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800247e:	e011      	b.n	80024a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002480:	f7ff fe7c 	bl	800217c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800248e:	d909      	bls.n	80024a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2204      	movs	r2, #4
 8002494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	22e0      	movs	r2, #224	; 0xe0
 800249c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e021      	b.n	80024e8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e4      	bne.n	8002480 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f958 	bl	800276c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f9ff 	bl	80028c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa55 	bl	8002972 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	461a      	mov	r2, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f9bd 	bl	8002850 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2210      	movs	r2, #16
 80024e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800

080024f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4b51      	ldr	r3, [pc, #324]	; (8002654 <ETH_SetMACConfig+0x15c>)
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7c1b      	ldrb	r3, [r3, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <ETH_SetMACConfig+0x28>
 800251a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800251e:	e000      	b.n	8002522 <ETH_SetMACConfig+0x2a>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7c5b      	ldrb	r3, [r3, #17]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <ETH_SetMACConfig+0x38>
 800252a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800252e:	e000      	b.n	8002532 <ETH_SetMACConfig+0x3a>
 8002530:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002532:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	7fdb      	ldrb	r3, [r3, #31]
 800253e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002540:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	7f92      	ldrb	r2, [r2, #30]
 800254c:	2a00      	cmp	r2, #0
 800254e:	d102      	bne.n	8002556 <ETH_SetMACConfig+0x5e>
 8002550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002554:	e000      	b.n	8002558 <ETH_SetMACConfig+0x60>
 8002556:	2200      	movs	r2, #0
                        macconf->Speed |
 8002558:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	7f1b      	ldrb	r3, [r3, #28]
 800255e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002560:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002566:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800256e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002576:	2a00      	cmp	r2, #0
 8002578:	d102      	bne.n	8002580 <ETH_SetMACConfig+0x88>
 800257a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257e:	e000      	b.n	8002582 <ETH_SetMACConfig+0x8a>
 8002580:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002582:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7bdb      	ldrb	r3, [r3, #15]
 8002588:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800258a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002590:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002598:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800259a:	4313      	orrs	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff fdee 	bl	8002194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d101      	bne.n	80025e6 <ETH_SetMACConfig+0xee>
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0xf0>
 80025e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80025f6:	2a01      	cmp	r2, #1
 80025f8:	d101      	bne.n	80025fe <ETH_SetMACConfig+0x106>
 80025fa:	2208      	movs	r2, #8
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0x108>
 80025fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002600:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002608:	2a01      	cmp	r2, #1
 800260a:	d101      	bne.n	8002610 <ETH_SetMACConfig+0x118>
 800260c:	2204      	movs	r2, #4
 800260e:	e000      	b.n	8002612 <ETH_SetMACConfig+0x11a>
 8002610:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002612:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800261a:	2a01      	cmp	r2, #1
 800261c:	d101      	bne.n	8002622 <ETH_SetMACConfig+0x12a>
 800261e:	2202      	movs	r2, #2
 8002620:	e000      	b.n	8002624 <ETH_SetMACConfig+0x12c>
 8002622:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002624:	4313      	orrs	r3, r2
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263c:	2001      	movs	r0, #1
 800263e:	f7ff fda9 	bl	8002194 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	ff20810f 	.word	0xff20810f

08002658 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <ETH_SetDMAConfig+0x110>)
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7b1b      	ldrb	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <ETH_SetDMAConfig+0x2c>
 800267e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002682:	e000      	b.n	8002686 <ETH_SetDMAConfig+0x2e>
 8002684:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	7b5b      	ldrb	r3, [r3, #13]
 800268a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800268c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	7f52      	ldrb	r2, [r2, #29]
 8002692:	2a00      	cmp	r2, #0
 8002694:	d102      	bne.n	800269c <ETH_SetDMAConfig+0x44>
 8002696:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800269a:	e000      	b.n	800269e <ETH_SetDMAConfig+0x46>
 800269c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800269e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	7b9b      	ldrb	r3, [r3, #14]
 80026a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
 80026b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	7f9b      	ldrb	r3, [r3, #30]
 80026ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026cc:	4313      	orrs	r3, r2
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	461a      	mov	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff fd50 	bl	8002194 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fc:	461a      	mov	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	791b      	ldrb	r3, [r3, #4]
 8002706:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800270c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002712:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002718:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002720:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002722:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800272a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002730:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800273a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800273e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff fd21 	bl	8002194 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	f8de3f23 	.word	0xf8de3f23

0800276c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0a6      	sub	sp, #152	; 0x98
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002780:	2300      	movs	r3, #0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027a8:	2300      	movs	r3, #0
 80027aa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027d2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027e4:	4619      	mov	r1, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fe86 	bl	80024f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002818:	2301      	movs	r3, #1
 800281a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800281c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002820:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002826:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff08 	bl	8002658 <ETH_SetDMAConfig>
}
 8002848:	bf00      	nop
 800284a:	3798      	adds	r7, #152	; 0x98
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3305      	adds	r3, #5
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	3204      	adds	r2, #4
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <ETH_MACAddressConfig+0x68>)
 8002872:	4413      	add	r3, r2
 8002874:	461a      	mov	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3303      	adds	r3, #3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	061a      	lsls	r2, r3, #24
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3302      	adds	r3, #2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3301      	adds	r3, #1
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	4313      	orrs	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <ETH_MACAddressConfig+0x6c>)
 80028a2:	4413      	add	r3, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6013      	str	r3, [r2, #0]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40028040 	.word	0x40028040
 80028bc:	40028044 	.word	0x40028044

080028c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e03e      	b.n	800294c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68d9      	ldr	r1, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	3206      	adds	r2, #6
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d80c      	bhi.n	8002930 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68d9      	ldr	r1, [r3, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	e004      	b.n	800293a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d9bd      	bls.n	80028ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002964:	611a      	str	r2, [r3, #16]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e046      	b.n	8002a0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6919      	ldr	r1, [r3, #16]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80029c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	3212      	adds	r2, #18
 80029da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d80c      	bhi.n	80029fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	e004      	b.n	8002a08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d9b5      	bls.n	8002980 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e175      	b.n	8002d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8164 	bne.w	8002d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x56>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80be 	beq.w	8002d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bee:	4a61      	ldr	r2, [pc, #388]	; (8002d74 <HAL_GPIO_Init+0x328>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_GPIO_Init+0x32c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d037      	beq.n	8002c8a <HAL_GPIO_Init+0x23e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_GPIO_Init+0x330>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_GPIO_Init+0x23a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02b      	beq.n	8002c82 <HAL_GPIO_Init+0x236>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a55      	ldr	r2, [pc, #340]	; (8002d84 <HAL_GPIO_Init+0x338>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d025      	beq.n	8002c7e <HAL_GPIO_Init+0x232>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a54      	ldr	r2, [pc, #336]	; (8002d88 <HAL_GPIO_Init+0x33c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <HAL_GPIO_Init+0x22e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a53      	ldr	r2, [pc, #332]	; (8002d8c <HAL_GPIO_Init+0x340>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x22a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_GPIO_Init+0x344>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_GPIO_Init+0x348>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x222>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a50      	ldr	r2, [pc, #320]	; (8002d98 <HAL_GPIO_Init+0x34c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x21e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x21a>
 8002c62:	2309      	movs	r3, #9
 8002c64:	e012      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c66:	230a      	movs	r3, #10
 8002c68:	e010      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	e00e      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c6e:	2307      	movs	r3, #7
 8002c70:	e00c      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e00a      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c76:	2305      	movs	r3, #5
 8002c78:	e008      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e004      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f002 0203 	and.w	r2, r2, #3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4093      	lsls	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c9c:	4935      	ldr	r1, [pc, #212]	; (8002d74 <HAL_GPIO_Init+0x328>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	f67f ae86 	bls.w	8002a6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40021400 	.word	0x40021400
 8002d90:	40021800 	.word	0x40021800
 8002d94:	40021c00 	.word	0x40021c00
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40022400 	.word	0x40022400
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd8:	b08f      	sub	sp, #60	; 0x3c
 8002dda:	af0a      	add	r7, sp, #40	; 0x28
 8002ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e116      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f009 fcd2 	bl	800c7ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 f95d 	bl	80060e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	687e      	ldr	r6, [r7, #4]
 8002e34:	466d      	mov	r5, sp
 8002e36:	f106 0410 	add.w	r4, r6, #16
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e4a:	1d33      	adds	r3, r6, #4
 8002e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f003 f83e 	bl	8005ed0 <USB_CoreInit>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0d7      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 f94b 	bl	8006108 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e04a      	b.n	8002f0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	333d      	adds	r3, #61	; 0x3d
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	b298      	uxth	r0, r3
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3344      	adds	r3, #68	; 0x44
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3340      	adds	r3, #64	; 0x40
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3348      	adds	r3, #72	; 0x48
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334c      	adds	r3, #76	; 0x4c
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	3354      	adds	r3, #84	; 0x54
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3af      	bcc.n	8002e78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e044      	b.n	8002fa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d3b5      	bcc.n	8002f1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	687e      	ldr	r6, [r7, #4]
 8002fba:	466d      	mov	r5, sp
 8002fbc:	f106 0410 	add.w	r4, r6, #16
 8002fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd0:	1d33      	adds	r3, r6, #4
 8002fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd4:	6838      	ldr	r0, [r7, #0]
 8002fd6:	f003 f8e3 	bl	80061a0 <USB_DevInit>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e014      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f001 f97b 	bl	8004300 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fa31 	bl	8007476 <USB_DevDisconnect>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_PCD_Start+0x16>
 8003030:	2302      	movs	r3, #2
 8003032:	e012      	b.n	800305a <HAL_PCD_Start+0x3c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 f83f 	bl	80060c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 f9f2 	bl	8007434 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003062:	b590      	push	{r4, r7, lr}
 8003064:	b08d      	sub	sp, #52	; 0x34
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fab0 	bl	80075de <USB_GetMode>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 84b7 	bne.w	80039f4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fa14 	bl	80074b8 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 84ad 	beq.w	80039f2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fa01 	bl	80074b8 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d107      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f002 0202 	and.w	r2, r2, #2
 80030ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 f9ef 	bl	80074b8 <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d161      	bne.n	80031a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0210 	bic.w	r2, r2, #16
 80030f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	0c5b      	lsrs	r3, r3, #17
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2b02      	cmp	r3, #2
 800311e:	d124      	bne.n	800316a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d035      	beq.n	8003198 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	6a38      	ldr	r0, [r7, #32]
 8003140:	f004 f826 	bl	8007190 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003150:	441a      	add	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003162:	441a      	add	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	621a      	str	r2, [r3, #32]
 8003168:	e016      	b.n	8003198 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	0c5b      	lsrs	r3, r3, #17
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	2b06      	cmp	r3, #6
 8003174:	d110      	bne.n	8003198 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800317c:	2208      	movs	r2, #8
 800317e:	4619      	mov	r1, r3
 8003180:	6a38      	ldr	r0, [r7, #32]
 8003182:	f004 f805 	bl	8007190 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003192:	441a      	add	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0210 	orr.w	r2, r2, #16
 80031a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 f983 	bl	80074b8 <USB_ReadInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031bc:	f040 80a7 	bne.w	800330e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 f988 	bl	80074de <USB_ReadDevAllOutEpInterrupt>
 80031ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031d0:	e099      	b.n	8003306 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 808e 	beq.w	80032fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 f9ac 	bl	8007546 <USB_ReadDevOutEPInterrupt>
 80031ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	2301      	movs	r3, #1
 800320a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800320c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fef0 	bl	8003ff4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	2308      	movs	r3, #8
 800322e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 ffc6 	bl	80041c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2310      	movs	r3, #16
 8003252:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d030      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d109      	bne.n	800327e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	3304      	adds	r3, #4
 8003292:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f009 fbb3 	bl	800ca14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	2302      	movs	r3, #2
 80032be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2320      	movs	r3, #32
 80032da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af62 	bne.w	80031d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 f8d0 	bl	80074b8 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003322:	f040 80db 	bne.w	80034dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f004 f8f1 	bl	8007512 <USB_ReadDevAllInEpInterrupt>
 8003330:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003336:	e0cd      	b.n	80034d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80c2 	beq.w	80034c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f004 f917 	bl	8007582 <USB_ReadDevInEPInterrupt>
 8003354:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d057      	beq.n	8003410 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	2201      	movs	r2, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	69f9      	ldr	r1, [r7, #28]
 800337c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003380:	4013      	ands	r3, r2
 8003382:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003390:	461a      	mov	r2, r3
 8003392:	2301      	movs	r3, #1
 8003394:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d132      	bne.n	8003404 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334c      	adds	r3, #76	; 0x4c
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4403      	add	r3, r0
 80033be:	3348      	adds	r3, #72	; 0x48
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4419      	add	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4403      	add	r3, r0
 80033d2:	334c      	adds	r3, #76	; 0x4c
 80033d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d113      	bne.n	8003404 <HAL_PCD_IRQHandler+0x3a2>
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3354      	adds	r3, #84	; 0x54
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033fc:	461a      	mov	r2, r3
 80033fe:	2101      	movs	r1, #1
 8003400:	f004 f920 	bl	8007644 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f009 fa7d 	bl	800c90a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2308      	movs	r3, #8
 800342a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003442:	461a      	mov	r2, r3
 8003444:	2310      	movs	r3, #16
 8003446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	461a      	mov	r2, r3
 8003460:	2340      	movs	r3, #64	; 0x40
 8003462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d023      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	6a38      	ldr	r0, [r7, #32]
 8003472:	f002 fff3 	bl	800645c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	3338      	adds	r3, #56	; 0x38
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	3304      	adds	r3, #4
 8003488:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	78db      	ldrb	r3, [r3, #3]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f009 faca 	bl	800ca38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b0:	461a      	mov	r2, r3
 80034b2:	2302      	movs	r3, #2
 80034b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fd08 	bl	8003ed8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	3301      	adds	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f47f af2e 	bne.w	8003338 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 ffe9 	bl	80074b8 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f0:	d122      	bne.n	8003538 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800350c:	2b01      	cmp	r3, #1
 800350e:	d108      	bne.n	8003522 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f009 fc44 	bl	800cda8 <HAL_PCDEx_LPM_Callback>
 8003520:	e002      	b.n	8003528 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f009 fa68 	bl	800c9f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f003 ffbb 	bl	80074b8 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354c:	d112      	bne.n	8003574 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f009 fa24 	bl	800c9ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003572:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 ff9d 	bl	80074b8 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003588:	d121      	bne.n	80035ce <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003598:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d111      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	f003 020f 	and.w	r2, r3, #15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035be:	2101      	movs	r1, #1
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f009 fbf1 	bl	800cda8 <HAL_PCDEx_LPM_Callback>
 80035c6:	e002      	b.n	80035ce <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f009 f9ef 	bl	800c9ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 ff70 	bl	80074b8 <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	f040 80b7 	bne.w	8003754 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2110      	movs	r1, #16
 8003600:	4618      	mov	r0, r3
 8003602:	f002 ff2b 	bl	800645c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	e046      	b.n	800369a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	461a      	mov	r2, r3
 800361a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800361e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	440a      	add	r2, r1
 8003636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800363e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003652:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003664:	0151      	lsls	r1, r2, #5
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	440a      	add	r2, r1
 800366a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800366e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003672:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800368e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003692:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	3301      	adds	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3b3      	bcc.n	800360c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f043 030b 	orr.w	r3, r3, #11
 80036d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e6:	f043 030b 	orr.w	r3, r3, #11
 80036ea:	6453      	str	r3, [r2, #68]	; 0x44
 80036ec:	e015      	b.n	800371a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fc:	4619      	mov	r1, r3
 80036fe:	f242 032b 	movw	r3, #8235	; 0x202b
 8003702:	4313      	orrs	r3, r2
 8003704:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003714:	f043 030b 	orr.w	r3, r3, #11
 8003718:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003728:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800372c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800373e:	461a      	mov	r2, r3
 8003740:	f003 ff80 	bl	8007644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fead 	bl	80074b8 <USB_ReadInterrupts>
 800375e:	4603      	mov	r3, r0
 8003760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003768:	d124      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f003 ff44 	bl	80075fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 feec 	bl	8006556 <USB_GetDevSpeed>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	f001 fadd 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 800378e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	4620      	mov	r0, r4
 800379a:	f002 fbf1 	bl	8005f80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f009 f8db 	bl	800c95a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fe7d 	bl	80074b8 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d10a      	bne.n	80037de <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f009 f8b8 	bl	800c93e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 0208 	and.w	r2, r2, #8
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fe68 	bl	80074b8 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b80      	cmp	r3, #128	; 0x80
 80037f0:	d122      	bne.n	8003838 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fe:	2301      	movs	r3, #1
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	e014      	b.n	800382e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	b2db      	uxtb	r3, r3
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fb27 	bl	8003e76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	3301      	adds	r3, #1
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	429a      	cmp	r2, r3
 8003836:	d3e5      	bcc.n	8003804 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f003 fe3b 	bl	80074b8 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384c:	d13b      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384e:	2301      	movs	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	e02b      	b.n	80038ac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3340      	adds	r3, #64	; 0x40
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d115      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800387a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	da12      	bge.n	80038a6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	333f      	adds	r3, #63	; 0x3f
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fae8 	bl	8003e76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	3301      	adds	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3ce      	bcc.n	8003854 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 fdf4 	bl	80074b8 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038da:	d155      	bne.n	8003988 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038dc:	2301      	movs	r3, #1
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	e045      	b.n	800396e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d12e      	bne.n	8003968 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800390a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800390c:	2b00      	cmp	r3, #0
 800390e:	da2b      	bge.n	8003968 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800391c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003920:	429a      	cmp	r2, r3
 8003922:	d121      	bne.n	8003968 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003964:	6053      	str	r3, [r2, #4]
            break;
 8003966:	e007      	b.n	8003978 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	3301      	adds	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	429a      	cmp	r2, r3
 8003976:	d3b4      	bcc.n	80038e2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f003 fd93 	bl	80074b8 <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399c:	d10a      	bne.n	80039b4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f009 f85c 	bl	800ca5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 fd7d 	bl	80074b8 <USB_ReadInterrupts>
 80039be:	4603      	mov	r3, r0
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d115      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f009 f84c 	bl	800ca78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	e000      	b.n	80039f4 <HAL_PCD_IRQHandler+0x992>
      return;
 80039f2:	bf00      	nop
    }
  }
}
 80039f4:	3734      	adds	r7, #52	; 0x34
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}

080039fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_SetAddress+0x1a>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e013      	b.n	8003a3c <HAL_PCD_SetAddress+0x42>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 fcdb 	bl	80073e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	70fb      	strb	r3, [r7, #3]
 8003a56:	460b      	mov	r3, r1
 8003a58:	803b      	strh	r3, [r7, #0]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da0f      	bge.n	8003a8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	3338      	adds	r3, #56	; 0x38
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	705a      	strb	r2, [r3, #1]
 8003a88:	e00f      	b.n	8003aaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ab6:	883a      	ldrh	r2, [r7, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	78ba      	ldrb	r2, [r7, #2]
 8003ac0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	785b      	ldrb	r3, [r3, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ad4:	78bb      	ldrb	r3, [r7, #2]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d102      	bne.n	8003ae0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_PCD_EP_Open+0xaa>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e00e      	b.n	8003b0c <HAL_PCD_EP_Open+0xc8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68f9      	ldr	r1, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fd4f 	bl	80065a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da0f      	bge.n	8003b48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3338      	adds	r3, #56	; 0x38
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	705a      	strb	r2, [r3, #1]
 8003b46:	e00f      	b.n	8003b68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3304      	adds	r3, #4
 8003b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_PCD_EP_Close+0x6e>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e00e      	b.n	8003ba0 <HAL_PCD_EP_Close+0x8c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f002 fd8d 	bl	80066b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2200      	movs	r2, #0
 8003be8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bea:	7afb      	ldrb	r3, [r7, #11]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c04:	7afb      	ldrb	r3, [r7, #11]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	f003 f874 	bl	8006d08 <USB_EP0StartXfer>
 8003c20:	e008      	b.n	8003c34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	f002 fe1a 	bl	8006868 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c60:	681b      	ldr	r3, [r3, #0]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3338      	adds	r3, #56	; 0x38
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2201      	movs	r2, #1
 8003cac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cae:	7afb      	ldrb	r3, [r7, #11]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6979      	ldr	r1, [r7, #20]
 8003ce0:	f003 f812 	bl	8006d08 <USB_EP0StartXfer>
 8003ce4:	e008      	b.n	8003cf8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	f002 fdb8 	bl	8006868 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d901      	bls.n	8003d20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e050      	b.n	8003dc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	da0f      	bge.n	8003d48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	3338      	adds	r3, #56	; 0x38
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	705a      	strb	r2, [r3, #1]
 8003d46:	e00d      	b.n	8003d64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_PCD_EP_SetStall+0x82>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e01e      	b.n	8003dc2 <HAL_PCD_EP_SetStall+0xc0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fa54 	bl	8007240 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	b2d9      	uxtb	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db2:	461a      	mov	r2, r3
 8003db4:	f003 fc46 	bl	8007644 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d901      	bls.n	8003de8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e042      	b.n	8003e6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0f      	bge.n	8003e10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3338      	adds	r3, #56	; 0x38
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	705a      	strb	r2, [r3, #1]
 8003e0e:	e00f      	b.n	8003e30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_PCD_EP_ClrStall+0x86>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e00e      	b.n	8003e6e <HAL_PCD_EP_ClrStall+0xa4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 fa5c 	bl	800731c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da0c      	bge.n	8003ea4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	3338      	adds	r3, #56	; 0x38
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e00c      	b.n	8003ebe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 020f 	and.w	r2, r3, #15
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	3304      	adds	r3, #4
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f003 f87b 	bl	8006fc0 <USB_EPStopXfer>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ece:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	3338      	adds	r3, #56	; 0x38
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4413      	add	r3, r2
 8003efc:	3304      	adds	r3, #4
 8003efe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1a      	ldr	r2, [r3, #32]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d901      	bls.n	8003f10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e06c      	b.n	8003fea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d902      	bls.n	8003f2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3303      	adds	r3, #3
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f34:	e02b      	b.n	8003f8e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d902      	bls.n	8003f52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3303      	adds	r3, #3
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6919      	ldr	r1, [r3, #16]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6978      	ldr	r0, [r7, #20]
 8003f72:	f003 f8cf 	bl	8007114 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	441a      	add	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	441a      	add	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d809      	bhi.n	8003fb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d203      	bcs.n	8003fb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1be      	bne.n	8003f36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d811      	bhi.n	8003fe8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	2201      	movs	r2, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	6939      	ldr	r1, [r7, #16]
 8003fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	333c      	adds	r3, #60	; 0x3c
 800400c:	3304      	adds	r3, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d17b      	bne.n	8004122 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4a61      	ldr	r2, [pc, #388]	; (80041bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	f240 80b9 	bls.w	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80b3 	beq.w	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004056:	461a      	mov	r2, r3
 8004058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405c:	6093      	str	r3, [r2, #8]
 800405e:	e0a7      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	461a      	mov	r2, r3
 8004078:	2320      	movs	r3, #32
 800407a:	6093      	str	r3, [r2, #8]
 800407c:	e098      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 8093 	bne.w	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4a4b      	ldr	r2, [pc, #300]	; (80041bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d90f      	bls.n	80040b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	461a      	mov	r2, r3
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	e07e      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	0159      	lsls	r1, r3, #5
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	440b      	add	r3, r1
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d114      	bne.n	8004114 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040fc:	461a      	mov	r2, r3
 80040fe:	2101      	movs	r1, #1
 8004100:	f003 faa0 	bl	8007644 <USB_EP0_OutStart>
 8004104:	e006      	b.n	8004114 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f008 fbda 	bl	800c8d4 <HAL_PCD_DataOutStageCallback>
 8004120:	e046      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d124      	bne.n	8004174 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	e032      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	461a      	mov	r2, r3
 8004162:	2320      	movs	r3, #32
 8004164:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f008 fbb1 	bl	800c8d4 <HAL_PCD_DataOutStageCallback>
 8004172:	e01d      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d114      	bne.n	80041a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d108      	bne.n	80041a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800419c:	461a      	mov	r2, r3
 800419e:	2100      	movs	r1, #0
 80041a0:	f003 fa50 	bl	8007644 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f008 fb92 	bl	800c8d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	4f54300a 	.word	0x4f54300a
 80041c0:	4f54310a 	.word	0x4f54310a

080041c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	333c      	adds	r3, #60	; 0x3c
 80041dc:	3304      	adds	r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a15      	ldr	r2, [pc, #84]	; (800424c <PCD_EP_OutSetupPacket_int+0x88>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d90e      	bls.n	8004218 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	461a      	mov	r2, r3
 8004212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004216:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f008 fb49 	bl	800c8b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <PCD_EP_OutSetupPacket_int+0x88>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d90c      	bls.n	8004240 <PCD_EP_OutSetupPacket_int+0x7c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d108      	bne.n	8004240 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004238:	461a      	mov	r2, r3
 800423a:	2101      	movs	r1, #1
 800423c:	f003 fa02 	bl	8007644 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	4f54300a 	.word	0x4f54300a

08004250 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
 800425c:	4613      	mov	r3, r2
 800425e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800426e:	883b      	ldrh	r3, [r7, #0]
 8004270:	0419      	lsls	r1, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	430a      	orrs	r2, r1
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
 800427c:	e028      	b.n	80042d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4413      	add	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e00d      	b.n	80042ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	3340      	adds	r3, #64	; 0x40
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	3301      	adds	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d3ec      	bcc.n	8004292 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042b8:	883b      	ldrh	r3, [r7, #0]
 80042ba:	0418      	lsls	r0, r3, #16
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	4302      	orrs	r2, r0
 80042c8:	3340      	adds	r3, #64	; 0x40
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_PCDEx_ActivateLPM+0x44>)
 8004330:	4313      	orrs	r3, r2
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	10000003 	.word	0x10000003

08004348 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40007000 	.word	0x40007000

08004368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_PWREx_EnableOverDrive+0x98>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_PWREx_EnableOverDrive+0x98>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_PWREx_EnableOverDrive+0x98>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004396:	f7fd fef1 	bl	800217c <HAL_GetTick>
 800439a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800439c:	e009      	b.n	80043b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800439e:	f7fd feed 	bl	800217c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ac:	d901      	bls.n	80043b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e022      	b.n	80043f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d1ee      	bne.n	800439e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0f      	ldr	r2, [pc, #60]	; (8004404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043cc:	f7fd fed6 	bl	800217c <HAL_GetTick>
 80043d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043d2:	e009      	b.n	80043e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d4:	f7fd fed2 	bl	800217c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e2:	d901      	bls.n	80043e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e007      	b.n	80043f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f4:	d1ee      	bne.n	80043d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	40007000 	.word	0x40007000

08004408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e29b      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8087 	beq.w	800453a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800442c:	4b96      	ldr	r3, [pc, #600]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b04      	cmp	r3, #4
 8004436:	d00c      	beq.n	8004452 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004438:	4b93      	ldr	r3, [pc, #588]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d112      	bne.n	800446a <HAL_RCC_OscConfig+0x62>
 8004444:	4b90      	ldr	r3, [pc, #576]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004450:	d10b      	bne.n	800446a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004452:	4b8d      	ldr	r3, [pc, #564]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d06c      	beq.n	8004538 <HAL_RCC_OscConfig+0x130>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d168      	bne.n	8004538 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e275      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d106      	bne.n	8004482 <HAL_RCC_OscConfig+0x7a>
 8004474:	4b84      	ldr	r3, [pc, #528]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a83      	ldr	r2, [pc, #524]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800447a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	e02e      	b.n	80044e0 <HAL_RCC_OscConfig+0xd8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x9c>
 800448a:	4b7f      	ldr	r3, [pc, #508]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7e      	ldr	r2, [pc, #504]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b7c      	ldr	r3, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7b      	ldr	r2, [pc, #492]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800449c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e01d      	b.n	80044e0 <HAL_RCC_OscConfig+0xd8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0xc0>
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a75      	ldr	r2, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b73      	ldr	r3, [pc, #460]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a72      	ldr	r2, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e00b      	b.n	80044e0 <HAL_RCC_OscConfig+0xd8>
 80044c8:	4b6f      	ldr	r3, [pc, #444]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6e      	ldr	r2, [pc, #440]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a6b      	ldr	r2, [pc, #428]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80044da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d013      	beq.n	8004510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd fe48 	bl	800217c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fd fe44 	bl	800217c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e229      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b61      	ldr	r3, [pc, #388]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0xe8>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd fe34 	bl	800217c <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004518:	f7fd fe30 	bl	800217c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e215      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	4b57      	ldr	r3, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x110>
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d069      	beq.n	800461a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004546:	4b50      	ldr	r3, [pc, #320]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004552:	4b4d      	ldr	r3, [pc, #308]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b08      	cmp	r3, #8
 800455c:	d11c      	bne.n	8004598 <HAL_RCC_OscConfig+0x190>
 800455e:	4b4a      	ldr	r3, [pc, #296]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x17a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1e9      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	493d      	ldr	r1, [pc, #244]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	e040      	b.n	800461a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d023      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a38      	ldr	r2, [pc, #224]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fde6 	bl	800217c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b4:	f7fd fde2 	bl	800217c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e1c7      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4929      	ldr	r1, [pc, #164]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
 80045e6:	e018      	b.n	800461a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a26      	ldr	r2, [pc, #152]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fdc2 	bl	800217c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd fdbe 	bl	800217c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1a3      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d038      	beq.n	8004698 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d019      	beq.n	8004662 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462e:	4b16      	ldr	r3, [pc, #88]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fd fd9f 	bl	800217c <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004642:	f7fd fd9b 	bl	800217c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e180      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x23a>
 8004660:	e01a      	b.n	8004698 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_RCC_OscConfig+0x280>)
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd fd85 	bl	800217c <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004676:	f7fd fd81 	bl	800217c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d903      	bls.n	800468c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e166      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
 8004688:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b92      	ldr	r3, [pc, #584]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ee      	bne.n	8004676 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a4 	beq.w	80047ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b8c      	ldr	r3, [pc, #560]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4a88      	ldr	r2, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b86      	ldr	r3, [pc, #536]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ce:	4b83      	ldr	r3, [pc, #524]	; (80048dc <HAL_RCC_OscConfig+0x4d4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d118      	bne.n	800470c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046da:	4b80      	ldr	r3, [pc, #512]	; (80048dc <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7f      	ldr	r2, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x4d4>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e6:	f7fd fd49 	bl	800217c <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ee:	f7fd fd45 	bl	800217c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b64      	cmp	r3, #100	; 0x64
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e12a      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004700:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCC_OscConfig+0x4d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x31a>
 8004714:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a6f      	ldr	r2, [pc, #444]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	e02d      	b.n	800477e <HAL_RCC_OscConfig+0x376>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x33c>
 800472a:	4b6b      	ldr	r3, [pc, #428]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	4a6a      	ldr	r2, [pc, #424]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6713      	str	r3, [r2, #112]	; 0x70
 8004736:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a67      	ldr	r2, [pc, #412]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	e01c      	b.n	800477e <HAL_RCC_OscConfig+0x376>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b05      	cmp	r3, #5
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_OscConfig+0x35e>
 800474c:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	4a61      	ldr	r2, [pc, #388]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	6713      	str	r3, [r2, #112]	; 0x70
 8004758:	4b5f      	ldr	r3, [pc, #380]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a5e      	ldr	r2, [pc, #376]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	e00b      	b.n	800477e <HAL_RCC_OscConfig+0x376>
 8004766:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a5b      	ldr	r2, [pc, #364]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6713      	str	r3, [r2, #112]	; 0x70
 8004772:	4b59      	ldr	r3, [pc, #356]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a58      	ldr	r2, [pc, #352]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fd fcf9 	bl	800217c <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fd fcf5 	bl	800217c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0d8      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ee      	beq.n	800478e <HAL_RCC_OscConfig+0x386>
 80047b0:	e014      	b.n	80047dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b2:	f7fd fce3 	bl	800217c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fd fcdf 	bl	800217c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0c2      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b3d      	ldr	r3, [pc, #244]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4a3c      	ldr	r2, [pc, #240]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80ae 	beq.w	8004954 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f8:	4b37      	ldr	r3, [pc, #220]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d06d      	beq.n	80048e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d14b      	bne.n	80048a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a31      	ldr	r2, [pc, #196]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fcb0 	bl	800217c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fd fcac 	bl	800217c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e091      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	3b01      	subs	r3, #1
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	061b      	lsls	r3, r3, #24
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	491b      	ldr	r1, [pc, #108]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004870:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd fc7e 	bl	800217c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd fc7a 	bl	800217c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e05f      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x47c>
 80048a2:	e057      	b.n	8004954 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a4:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fc64 	bl	800217c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fd fc60 	bl	800217c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e045      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <HAL_RCC_OscConfig+0x4d0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4b0>
 80048d6:	e03d      	b.n	8004954 <HAL_RCC_OscConfig+0x54c>
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_RCC_OscConfig+0x558>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d030      	beq.n	8004950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d129      	bne.n	8004950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d122      	bne.n	8004950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004916:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004918:	4293      	cmp	r3, r2
 800491a:	d119      	bne.n	8004950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d10f      	bne.n	8004950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0d0      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800497c:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d910      	bls.n	80049ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 020f 	bic.w	r2, r3, #15
 8004992:	4965      	ldr	r1, [pc, #404]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0b8      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c4:	4b59      	ldr	r3, [pc, #356]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a58      	ldr	r2, [pc, #352]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049dc:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a52      	ldr	r2, [pc, #328]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 80049e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e8:	4b50      	ldr	r3, [pc, #320]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	494d      	ldr	r1, [pc, #308]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d040      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b47      	ldr	r3, [pc, #284]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d115      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e07f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a26:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e073      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a36:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e06b      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4936      	ldr	r1, [pc, #216]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fd fb90 	bl	800217c <HAL_GetTick>
 8004a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a60:	f7fd fb8c 	bl	800217c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e053      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 020c 	and.w	r2, r3, #12
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d1eb      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a88:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d210      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 020f 	bic.w	r2, r3, #15
 8004a9e:	4922      	ldr	r1, [pc, #136]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e032      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4916      	ldr	r1, [pc, #88]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	490e      	ldr	r1, [pc, #56]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af6:	f000 f821 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	490a      	ldr	r1, [pc, #40]	; (8004b30 <HAL_RCC_ClockConfig+0x1cc>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1d0>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1d4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd faec 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023c00 	.word	0x40023c00
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800d27c 	.word	0x0800d27c
 8004b34:	20000000 	.word	0x20000000
 8004b38:	20000004 	.word	0x20000004

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b094      	sub	sp, #80	; 0x50
 8004b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
 8004b48:	2300      	movs	r3, #0
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b54:	4b79      	ldr	r3, [pc, #484]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d00d      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x40>
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	f200 80e1 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b6e:	e0db      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b73      	ldr	r3, [pc, #460]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b74:	e0db      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b76:	4b73      	ldr	r3, [pc, #460]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b7a:	e0d8      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b86:	4b6d      	ldr	r3, [pc, #436]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d063      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8004baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	0159      	lsls	r1, r3, #5
 8004bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc0:	0150      	lsls	r0, r2, #5
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	1a51      	subs	r1, r2, r1
 8004bca:	6139      	str	r1, [r7, #16]
 8004bcc:	4629      	mov	r1, r5
 8004bce:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be0:	4659      	mov	r1, fp
 8004be2:	018b      	lsls	r3, r1, #6
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bea:	4651      	mov	r1, sl
 8004bec:	018a      	lsls	r2, r1, #6
 8004bee:	4651      	mov	r1, sl
 8004bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0e:	4690      	mov	r8, r2
 8004c10:	4699      	mov	r9, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	eb18 0303 	adds.w	r3, r8, r3
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	eb49 0303 	adc.w	r3, r9, r3
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	024b      	lsls	r3, r1, #9
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c38:	4621      	mov	r1, r4
 8004c3a:	024a      	lsls	r2, r1, #9
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c4c:	f7fb fb42 	bl	80002d4 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	e058      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5a:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	2200      	movs	r2, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	4611      	mov	r1, r2
 8004c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	f04f 0000 	mov.w	r0, #0
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	0159      	lsls	r1, r3, #5
 8004c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c86:	0150      	lsls	r0, r2, #5
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c92:	4649      	mov	r1, r9
 8004c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cac:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00eb      	lsls	r3, r5, #3
 8004cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	18e3      	adds	r3, r4, r3
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	464b      	mov	r3, r9
 8004cd0:	eb45 0303 	adc.w	r3, r5, r3
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	028b      	lsls	r3, r1, #10
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cec:	4621      	mov	r1, r4
 8004cee:	028a      	lsls	r2, r1, #10
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	61fa      	str	r2, [r7, #28]
 8004cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d00:	f7fb fae8 	bl	80002d4 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	3301      	adds	r3, #1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3750      	adds	r7, #80	; 0x50
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	007a1200 	.word	0x007a1200

08004d48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000000 	.word	0x20000000

08004d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d64:	f7ff fff0 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0a9b      	lsrs	r3, r3, #10
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800d28c 	.word	0x0800d28c

08004d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d8c:	f7ff ffdc 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0b5b      	lsrs	r3, r3, #13
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	0800d28c 	.word	0x0800d28c

08004db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d012      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dd8:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a68      	ldr	r2, [pc, #416]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004de2:	6093      	str	r3, [r2, #8]
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	4964      	ldr	r1, [pc, #400]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d017      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e0a:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	4959      	ldr	r1, [pc, #356]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e28:	d101      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e46:	4b4e      	ldr	r3, [pc, #312]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	494a      	ldr	r1, [pc, #296]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e64:	d101      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 808b 	beq.w	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	4a39      	ldr	r2, [pc, #228]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea0:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eac:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a34      	ldr	r2, [pc, #208]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fd f960 	bl	800217c <HAL_GetTick>
 8004ebc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec0:	f7fd f95c 	bl	800217c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	; 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e38f      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ede:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d035      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d02e      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004efc:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f06:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f24:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d114      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fd f924 	bl	800217c <HAL_GetTick>
 8004f34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fd f920 	bl	800217c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e351      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ee      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f66:	d111      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	4901      	ldr	r1, [pc, #4]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
 8004f7e:	e00b      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40007000 	.word	0x40007000
 8004f88:	0ffffcff 	.word	0x0ffffcff
 8004f8c:	4bac      	ldr	r3, [pc, #688]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4aab      	ldr	r2, [pc, #684]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f96:	6093      	str	r3, [r2, #8]
 8004f98:	4ba9      	ldr	r3, [pc, #676]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa4:	49a6      	ldr	r1, [pc, #664]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fb6:	4ba2      	ldr	r3, [pc, #648]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fbc:	4aa0      	ldr	r2, [pc, #640]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fc6:	4b9e      	ldr	r3, [pc, #632]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	499b      	ldr	r1, [pc, #620]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe4:	4b96      	ldr	r3, [pc, #600]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff2:	4993      	ldr	r1, [pc, #588]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005006:	4b8e      	ldr	r3, [pc, #568]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005014:	498a      	ldr	r1, [pc, #552]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005028:	4b85      	ldr	r3, [pc, #532]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005036:	4982      	ldr	r1, [pc, #520]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800504a:	4b7d      	ldr	r3, [pc, #500]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4979      	ldr	r1, [pc, #484]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800506c:	4b74      	ldr	r3, [pc, #464]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f023 0203 	bic.w	r2, r3, #3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	4971      	ldr	r1, [pc, #452]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800508e:	4b6c      	ldr	r3, [pc, #432]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f023 020c 	bic.w	r2, r3, #12
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509c:	4968      	ldr	r1, [pc, #416]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050b0:	4b63      	ldr	r3, [pc, #396]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	4960      	ldr	r1, [pc, #384]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050d2:	4b5b      	ldr	r3, [pc, #364]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	4957      	ldr	r1, [pc, #348]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050f4:	4b52      	ldr	r3, [pc, #328]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	494f      	ldr	r1, [pc, #316]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005116:	4b4a      	ldr	r3, [pc, #296]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005124:	4946      	ldr	r1, [pc, #280]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005138:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	493e      	ldr	r1, [pc, #248]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005168:	4935      	ldr	r1, [pc, #212]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800517c:	4b30      	ldr	r3, [pc, #192]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	492d      	ldr	r1, [pc, #180]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800519e:	4b28      	ldr	r3, [pc, #160]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ac:	4924      	ldr	r1, [pc, #144]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051bc:	d101      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ec:	4914      	ldr	r1, [pc, #80]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005210:	490b      	ldr	r1, [pc, #44]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00f      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005224:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005234:	4902      	ldr	r1, [pc, #8]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800523c:	e002      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005250:	4b8a      	ldr	r3, [pc, #552]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005256:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	4986      	ldr	r1, [pc, #536]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005274:	4b81      	ldr	r3, [pc, #516]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	497d      	ldr	r1, [pc, #500]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d006      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80d6 	beq.w	800544c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052a0:	4b76      	ldr	r3, [pc, #472]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a75      	ldr	r2, [pc, #468]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ac:	f7fc ff66 	bl	800217c <HAL_GetTick>
 80052b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052b4:	f7fc ff62 	bl	800217c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e195      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c6:	4b6d      	ldr	r3, [pc, #436]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d021      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11d      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052e6:	4b65      	ldr	r3, [pc, #404]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052f4:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fa:	0e1b      	lsrs	r3, r3, #24
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	4958      	ldr	r1, [pc, #352]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02e      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534c:	d129      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800534e:	4b4b      	ldr	r3, [pc, #300]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800535c:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005362:	0f1b      	lsrs	r3, r3, #28
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	019a      	lsls	r2, r3, #6
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	061b      	lsls	r3, r3, #24
 800537c:	431a      	orrs	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	071b      	lsls	r3, r3, #28
 8005382:	493e      	ldr	r1, [pc, #248]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800538a:	4b3c      	ldr	r3, [pc, #240]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005390:	f023 021f 	bic.w	r2, r3, #31
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	3b01      	subs	r3, #1
 800539a:	4938      	ldr	r1, [pc, #224]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01d      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ae:	4b33      	ldr	r3, [pc, #204]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053bc:	4b2f      	ldr	r3, [pc, #188]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	0f1b      	lsrs	r3, r3, #28
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	019a      	lsls	r2, r3, #6
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	431a      	orrs	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	071b      	lsls	r3, r3, #28
 80053e2:	4926      	ldr	r1, [pc, #152]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	019a      	lsls	r2, r3, #6
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	041b      	lsls	r3, r3, #16
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	061b      	lsls	r3, r3, #24
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	071b      	lsls	r3, r3, #28
 8005412:	491a      	ldr	r1, [pc, #104]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005420:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005426:	f7fc fea9 	bl	800217c <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800542e:	f7fc fea5 	bl	800217c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b64      	cmp	r3, #100	; 0x64
 800543a:	d901      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e0d8      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005440:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 80ce 	bne.w	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a08      	ldr	r2, [pc, #32]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005460:	f7fc fe8c 	bl	800217c <HAL_GetTick>
 8005464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005466:	e00b      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005468:	f7fc fe88 	bl	800217c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d904      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e0bb      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005480:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800548c:	d0ec      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d02e      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d12a      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054b6:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054c4:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	0f1b      	lsrs	r3, r3, #28
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	019a      	lsls	r2, r3, #6
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	071b      	lsls	r3, r3, #28
 80054ea:	4944      	ldr	r1, [pc, #272]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054f2:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	493d      	ldr	r1, [pc, #244]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d022      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800551c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005520:	d11d      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	0e1b      	lsrs	r3, r3, #24
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005530:	4b32      	ldr	r3, [pc, #200]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	0f1b      	lsrs	r3, r3, #28
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	019a      	lsls	r2, r3, #6
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	431a      	orrs	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	071b      	lsls	r3, r3, #28
 8005556:	4929      	ldr	r1, [pc, #164]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d028      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800556a:	4b24      	ldr	r3, [pc, #144]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005578:	4b20      	ldr	r3, [pc, #128]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	019a      	lsls	r2, r3, #6
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	4917      	ldr	r1, [pc, #92]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4911      	ldr	r1, [pc, #68]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c8:	f7fc fdd8 	bl	800217c <HAL_GetTick>
 80055cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055d0:	f7fc fdd4 	bl	800217c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e007      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d1ef      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e040      	b.n	8005694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fc fc5a 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f82c 	bl	800569c <UART_SetConfig>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e022      	b.n	8005694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa84 	bl	8005b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb0b 	bl	8005ca8 <UART_CheckIdleState>
 8005692:	4603      	mov	r3, r0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4ba6      	ldr	r3, [pc, #664]	; (8005960 <UART_SetConfig+0x2c4>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	6979      	ldr	r1, [r7, #20]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a94      	ldr	r2, [pc, #592]	; (8005964 <UART_SetConfig+0x2c8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d120      	bne.n	800575a <UART_SetConfig+0xbe>
 8005718:	4b93      	ldr	r3, [pc, #588]	; (8005968 <UART_SetConfig+0x2cc>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d816      	bhi.n	8005754 <UART_SetConfig+0xb8>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <UART_SetConfig+0x90>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	0800573d 	.word	0x0800573d
 8005730:	08005749 	.word	0x08005749
 8005734:	08005743 	.word	0x08005743
 8005738:	0800574f 	.word	0x0800574f
 800573c:	2301      	movs	r3, #1
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e150      	b.n	80059e4 <UART_SetConfig+0x348>
 8005742:	2302      	movs	r3, #2
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e14d      	b.n	80059e4 <UART_SetConfig+0x348>
 8005748:	2304      	movs	r3, #4
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e14a      	b.n	80059e4 <UART_SetConfig+0x348>
 800574e:	2308      	movs	r3, #8
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e147      	b.n	80059e4 <UART_SetConfig+0x348>
 8005754:	2310      	movs	r3, #16
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e144      	b.n	80059e4 <UART_SetConfig+0x348>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a83      	ldr	r2, [pc, #524]	; (800596c <UART_SetConfig+0x2d0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d132      	bne.n	80057ca <UART_SetConfig+0x12e>
 8005764:	4b80      	ldr	r3, [pc, #512]	; (8005968 <UART_SetConfig+0x2cc>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f003 030c 	and.w	r3, r3, #12
 800576e:	2b0c      	cmp	r3, #12
 8005770:	d828      	bhi.n	80057c4 <UART_SetConfig+0x128>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <UART_SetConfig+0xdc>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080057c5 	.word	0x080057c5
 8005780:	080057c5 	.word	0x080057c5
 8005784:	080057c5 	.word	0x080057c5
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057c5 	.word	0x080057c5
 8005790:	080057c5 	.word	0x080057c5
 8005794:	080057c5 	.word	0x080057c5
 8005798:	080057b3 	.word	0x080057b3
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057c5 	.word	0x080057c5
 80057a8:	080057bf 	.word	0x080057bf
 80057ac:	2300      	movs	r3, #0
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e118      	b.n	80059e4 <UART_SetConfig+0x348>
 80057b2:	2302      	movs	r3, #2
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e115      	b.n	80059e4 <UART_SetConfig+0x348>
 80057b8:	2304      	movs	r3, #4
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e112      	b.n	80059e4 <UART_SetConfig+0x348>
 80057be:	2308      	movs	r3, #8
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	e10f      	b.n	80059e4 <UART_SetConfig+0x348>
 80057c4:	2310      	movs	r3, #16
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e10c      	b.n	80059e4 <UART_SetConfig+0x348>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a68      	ldr	r2, [pc, #416]	; (8005970 <UART_SetConfig+0x2d4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d120      	bne.n	8005816 <UART_SetConfig+0x17a>
 80057d4:	4b64      	ldr	r3, [pc, #400]	; (8005968 <UART_SetConfig+0x2cc>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057de:	2b30      	cmp	r3, #48	; 0x30
 80057e0:	d013      	beq.n	800580a <UART_SetConfig+0x16e>
 80057e2:	2b30      	cmp	r3, #48	; 0x30
 80057e4:	d814      	bhi.n	8005810 <UART_SetConfig+0x174>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d009      	beq.n	80057fe <UART_SetConfig+0x162>
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d810      	bhi.n	8005810 <UART_SetConfig+0x174>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <UART_SetConfig+0x15c>
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d006      	beq.n	8005804 <UART_SetConfig+0x168>
 80057f6:	e00b      	b.n	8005810 <UART_SetConfig+0x174>
 80057f8:	2300      	movs	r3, #0
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e0f2      	b.n	80059e4 <UART_SetConfig+0x348>
 80057fe:	2302      	movs	r3, #2
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e0ef      	b.n	80059e4 <UART_SetConfig+0x348>
 8005804:	2304      	movs	r3, #4
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e0ec      	b.n	80059e4 <UART_SetConfig+0x348>
 800580a:	2308      	movs	r3, #8
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e0e9      	b.n	80059e4 <UART_SetConfig+0x348>
 8005810:	2310      	movs	r3, #16
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e0e6      	b.n	80059e4 <UART_SetConfig+0x348>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a56      	ldr	r2, [pc, #344]	; (8005974 <UART_SetConfig+0x2d8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d120      	bne.n	8005862 <UART_SetConfig+0x1c6>
 8005820:	4b51      	ldr	r3, [pc, #324]	; (8005968 <UART_SetConfig+0x2cc>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800582a:	2bc0      	cmp	r3, #192	; 0xc0
 800582c:	d013      	beq.n	8005856 <UART_SetConfig+0x1ba>
 800582e:	2bc0      	cmp	r3, #192	; 0xc0
 8005830:	d814      	bhi.n	800585c <UART_SetConfig+0x1c0>
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d009      	beq.n	800584a <UART_SetConfig+0x1ae>
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d810      	bhi.n	800585c <UART_SetConfig+0x1c0>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <UART_SetConfig+0x1a8>
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d006      	beq.n	8005850 <UART_SetConfig+0x1b4>
 8005842:	e00b      	b.n	800585c <UART_SetConfig+0x1c0>
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e0cc      	b.n	80059e4 <UART_SetConfig+0x348>
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e0c9      	b.n	80059e4 <UART_SetConfig+0x348>
 8005850:	2304      	movs	r3, #4
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e0c6      	b.n	80059e4 <UART_SetConfig+0x348>
 8005856:	2308      	movs	r3, #8
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e0c3      	b.n	80059e4 <UART_SetConfig+0x348>
 800585c:	2310      	movs	r3, #16
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e0c0      	b.n	80059e4 <UART_SetConfig+0x348>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a44      	ldr	r2, [pc, #272]	; (8005978 <UART_SetConfig+0x2dc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d125      	bne.n	80058b8 <UART_SetConfig+0x21c>
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <UART_SetConfig+0x2cc>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587a:	d017      	beq.n	80058ac <UART_SetConfig+0x210>
 800587c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005880:	d817      	bhi.n	80058b2 <UART_SetConfig+0x216>
 8005882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005886:	d00b      	beq.n	80058a0 <UART_SetConfig+0x204>
 8005888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588c:	d811      	bhi.n	80058b2 <UART_SetConfig+0x216>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <UART_SetConfig+0x1fe>
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	d006      	beq.n	80058a6 <UART_SetConfig+0x20a>
 8005898:	e00b      	b.n	80058b2 <UART_SetConfig+0x216>
 800589a:	2300      	movs	r3, #0
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e0a1      	b.n	80059e4 <UART_SetConfig+0x348>
 80058a0:	2302      	movs	r3, #2
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e09e      	b.n	80059e4 <UART_SetConfig+0x348>
 80058a6:	2304      	movs	r3, #4
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e09b      	b.n	80059e4 <UART_SetConfig+0x348>
 80058ac:	2308      	movs	r3, #8
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e098      	b.n	80059e4 <UART_SetConfig+0x348>
 80058b2:	2310      	movs	r3, #16
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e095      	b.n	80059e4 <UART_SetConfig+0x348>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2f      	ldr	r2, [pc, #188]	; (800597c <UART_SetConfig+0x2e0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d125      	bne.n	800590e <UART_SetConfig+0x272>
 80058c2:	4b29      	ldr	r3, [pc, #164]	; (8005968 <UART_SetConfig+0x2cc>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d0:	d017      	beq.n	8005902 <UART_SetConfig+0x266>
 80058d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d6:	d817      	bhi.n	8005908 <UART_SetConfig+0x26c>
 80058d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058dc:	d00b      	beq.n	80058f6 <UART_SetConfig+0x25a>
 80058de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e2:	d811      	bhi.n	8005908 <UART_SetConfig+0x26c>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <UART_SetConfig+0x254>
 80058e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ec:	d006      	beq.n	80058fc <UART_SetConfig+0x260>
 80058ee:	e00b      	b.n	8005908 <UART_SetConfig+0x26c>
 80058f0:	2301      	movs	r3, #1
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e076      	b.n	80059e4 <UART_SetConfig+0x348>
 80058f6:	2302      	movs	r3, #2
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e073      	b.n	80059e4 <UART_SetConfig+0x348>
 80058fc:	2304      	movs	r3, #4
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e070      	b.n	80059e4 <UART_SetConfig+0x348>
 8005902:	2308      	movs	r3, #8
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e06d      	b.n	80059e4 <UART_SetConfig+0x348>
 8005908:	2310      	movs	r3, #16
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e06a      	b.n	80059e4 <UART_SetConfig+0x348>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <UART_SetConfig+0x2e4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d138      	bne.n	800598a <UART_SetConfig+0x2ee>
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <UART_SetConfig+0x2cc>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005926:	d017      	beq.n	8005958 <UART_SetConfig+0x2bc>
 8005928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800592c:	d82a      	bhi.n	8005984 <UART_SetConfig+0x2e8>
 800592e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005932:	d00b      	beq.n	800594c <UART_SetConfig+0x2b0>
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005938:	d824      	bhi.n	8005984 <UART_SetConfig+0x2e8>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <UART_SetConfig+0x2aa>
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	d006      	beq.n	8005952 <UART_SetConfig+0x2b6>
 8005944:	e01e      	b.n	8005984 <UART_SetConfig+0x2e8>
 8005946:	2300      	movs	r3, #0
 8005948:	77fb      	strb	r3, [r7, #31]
 800594a:	e04b      	b.n	80059e4 <UART_SetConfig+0x348>
 800594c:	2302      	movs	r3, #2
 800594e:	77fb      	strb	r3, [r7, #31]
 8005950:	e048      	b.n	80059e4 <UART_SetConfig+0x348>
 8005952:	2304      	movs	r3, #4
 8005954:	77fb      	strb	r3, [r7, #31]
 8005956:	e045      	b.n	80059e4 <UART_SetConfig+0x348>
 8005958:	2308      	movs	r3, #8
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e042      	b.n	80059e4 <UART_SetConfig+0x348>
 800595e:	bf00      	nop
 8005960:	efff69f3 	.word	0xefff69f3
 8005964:	40011000 	.word	0x40011000
 8005968:	40023800 	.word	0x40023800
 800596c:	40004400 	.word	0x40004400
 8005970:	40004800 	.word	0x40004800
 8005974:	40004c00 	.word	0x40004c00
 8005978:	40005000 	.word	0x40005000
 800597c:	40011400 	.word	0x40011400
 8005980:	40007800 	.word	0x40007800
 8005984:	2310      	movs	r3, #16
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e02c      	b.n	80059e4 <UART_SetConfig+0x348>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a72      	ldr	r2, [pc, #456]	; (8005b58 <UART_SetConfig+0x4bc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d125      	bne.n	80059e0 <UART_SetConfig+0x344>
 8005994:	4b71      	ldr	r3, [pc, #452]	; (8005b5c <UART_SetConfig+0x4c0>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800599e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059a2:	d017      	beq.n	80059d4 <UART_SetConfig+0x338>
 80059a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059a8:	d817      	bhi.n	80059da <UART_SetConfig+0x33e>
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ae:	d00b      	beq.n	80059c8 <UART_SetConfig+0x32c>
 80059b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b4:	d811      	bhi.n	80059da <UART_SetConfig+0x33e>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <UART_SetConfig+0x326>
 80059ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059be:	d006      	beq.n	80059ce <UART_SetConfig+0x332>
 80059c0:	e00b      	b.n	80059da <UART_SetConfig+0x33e>
 80059c2:	2300      	movs	r3, #0
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e00d      	b.n	80059e4 <UART_SetConfig+0x348>
 80059c8:	2302      	movs	r3, #2
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e00a      	b.n	80059e4 <UART_SetConfig+0x348>
 80059ce:	2304      	movs	r3, #4
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e007      	b.n	80059e4 <UART_SetConfig+0x348>
 80059d4:	2308      	movs	r3, #8
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e004      	b.n	80059e4 <UART_SetConfig+0x348>
 80059da:	2310      	movs	r3, #16
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e001      	b.n	80059e4 <UART_SetConfig+0x348>
 80059e0:	2310      	movs	r3, #16
 80059e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ec:	d15b      	bne.n	8005aa6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80059ee:	7ffb      	ldrb	r3, [r7, #31]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d828      	bhi.n	8005a46 <UART_SetConfig+0x3aa>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <UART_SetConfig+0x360>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005a29 	.word	0x08005a29
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005a47 	.word	0x08005a47
 8005a0c:	08005a37 	.word	0x08005a37
 8005a10:	08005a47 	.word	0x08005a47
 8005a14:	08005a47 	.word	0x08005a47
 8005a18:	08005a47 	.word	0x08005a47
 8005a1c:	08005a3f 	.word	0x08005a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a20:	f7ff f99e 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8005a24:	61b8      	str	r0, [r7, #24]
        break;
 8005a26:	e013      	b.n	8005a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a28:	f7ff f9ae 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8005a2c:	61b8      	str	r0, [r7, #24]
        break;
 8005a2e:	e00f      	b.n	8005a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a30:	4b4b      	ldr	r3, [pc, #300]	; (8005b60 <UART_SetConfig+0x4c4>)
 8005a32:	61bb      	str	r3, [r7, #24]
        break;
 8005a34:	e00c      	b.n	8005a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a36:	f7ff f881 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8005a3a:	61b8      	str	r0, [r7, #24]
        break;
 8005a3c:	e008      	b.n	8005a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a42:	61bb      	str	r3, [r7, #24]
        break;
 8005a44:	e004      	b.n	8005a50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d074      	beq.n	8005b40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b0f      	cmp	r3, #15
 8005a70:	d916      	bls.n	8005aa0 <UART_SetConfig+0x404>
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d212      	bcs.n	8005aa0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f023 030f 	bic.w	r3, r3, #15
 8005a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	89fb      	ldrh	r3, [r7, #14]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	89fa      	ldrh	r2, [r7, #14]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	e04f      	b.n	8005b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	77bb      	strb	r3, [r7, #30]
 8005aa4:	e04c      	b.n	8005b40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d828      	bhi.n	8005afe <UART_SetConfig+0x462>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x418>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7ff f942 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8005adc:	61b8      	str	r0, [r7, #24]
        break;
 8005ade:	e013      	b.n	8005b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7ff f952 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	61b8      	str	r0, [r7, #24]
        break;
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <UART_SetConfig+0x4c4>)
 8005aea:	61bb      	str	r3, [r7, #24]
        break;
 8005aec:	e00c      	b.n	8005b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7ff f825 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8005af2:	61b8      	str	r0, [r7, #24]
        break;
 8005af4:	e008      	b.n	8005b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	61bb      	str	r3, [r7, #24]
        break;
 8005afc:	e004      	b.n	8005b08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	77bb      	strb	r3, [r7, #30]
        break;
 8005b06:	bf00      	nop
    }

    if (pclk != 0U)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d018      	beq.n	8005b40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	085a      	lsrs	r2, r3, #1
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b0f      	cmp	r3, #15
 8005b26:	d909      	bls.n	8005b3c <UART_SetConfig+0x4a0>
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d205      	bcs.n	8005b3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e001      	b.n	8005b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40007c00 	.word	0x40007c00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	00f42400 	.word	0x00f42400

08005b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c62:	d10a      	bne.n	8005c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb8:	f7fc fa60 	bl	800217c <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d10e      	bne.n	8005cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f831 	bl	8005d42 <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e027      	b.n	8005d3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d10e      	bne.n	8005d16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f81b 	bl	8005d42 <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e011      	b.n	8005d3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b09c      	sub	sp, #112	; 0x70
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d52:	e0a7      	b.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	f000 80a3 	beq.w	8005ea4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fc fa0d 	bl	800217c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d13f      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d88:	667b      	str	r3, [r7, #100]	; 0x64
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e6      	bne.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e5      	bne.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e068      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d050      	beq.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e10:	d148      	bne.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e6      	bne.n	8005e1c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e6e:	623a      	str	r2, [r7, #32]
 8005e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	69f9      	ldr	r1, [r7, #28]
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e010      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	f43f af48 	beq.w	8005d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3770      	adds	r7, #112	; 0x70
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	f107 001c 	add.w	r0, r7, #28
 8005ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d120      	bne.n	8005f2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <USB_CoreInit+0xac>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d105      	bne.n	8005f1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fbee 	bl	8007700 <USB_CoreReset>
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e010      	b.n	8005f4c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fbe2 	bl	8007700 <USB_CoreReset>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d10b      	bne.n	8005f6a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f043 0206 	orr.w	r2, r3, #6
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f76:	b004      	add	sp, #16
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	ffbdffbf 	.word	0xffbdffbf

08005f80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d165      	bne.n	8006060 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4a41      	ldr	r2, [pc, #260]	; (800609c <USB_SetTurnaroundTime+0x11c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d906      	bls.n	8005faa <USB_SetTurnaroundTime+0x2a>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4a40      	ldr	r2, [pc, #256]	; (80060a0 <USB_SetTurnaroundTime+0x120>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d202      	bcs.n	8005faa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fa4:	230f      	movs	r3, #15
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e062      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4a3c      	ldr	r2, [pc, #240]	; (80060a0 <USB_SetTurnaroundTime+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d306      	bcc.n	8005fc0 <USB_SetTurnaroundTime+0x40>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a3b      	ldr	r2, [pc, #236]	; (80060a4 <USB_SetTurnaroundTime+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d202      	bcs.n	8005fc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fba:	230e      	movs	r3, #14
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e057      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4a38      	ldr	r2, [pc, #224]	; (80060a4 <USB_SetTurnaroundTime+0x124>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d306      	bcc.n	8005fd6 <USB_SetTurnaroundTime+0x56>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4a37      	ldr	r2, [pc, #220]	; (80060a8 <USB_SetTurnaroundTime+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d202      	bcs.n	8005fd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fd0:	230d      	movs	r3, #13
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e04c      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a33      	ldr	r2, [pc, #204]	; (80060a8 <USB_SetTurnaroundTime+0x128>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d306      	bcc.n	8005fec <USB_SetTurnaroundTime+0x6c>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a32      	ldr	r2, [pc, #200]	; (80060ac <USB_SetTurnaroundTime+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d802      	bhi.n	8005fec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e041      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	; (80060ac <USB_SetTurnaroundTime+0x12c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d906      	bls.n	8006002 <USB_SetTurnaroundTime+0x82>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4a2e      	ldr	r2, [pc, #184]	; (80060b0 <USB_SetTurnaroundTime+0x130>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d802      	bhi.n	8006002 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ffc:	230b      	movs	r3, #11
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e036      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <USB_SetTurnaroundTime+0x130>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d906      	bls.n	8006018 <USB_SetTurnaroundTime+0x98>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a29      	ldr	r2, [pc, #164]	; (80060b4 <USB_SetTurnaroundTime+0x134>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d802      	bhi.n	8006018 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006012:	230a      	movs	r3, #10
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e02b      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <USB_SetTurnaroundTime+0x134>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d906      	bls.n	800602e <USB_SetTurnaroundTime+0xae>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4a25      	ldr	r2, [pc, #148]	; (80060b8 <USB_SetTurnaroundTime+0x138>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d202      	bcs.n	800602e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006028:	2309      	movs	r3, #9
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e020      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <USB_SetTurnaroundTime+0x138>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d306      	bcc.n	8006044 <USB_SetTurnaroundTime+0xc4>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <USB_SetTurnaroundTime+0x13c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d802      	bhi.n	8006044 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800603e:	2308      	movs	r3, #8
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e015      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <USB_SetTurnaroundTime+0x13c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d906      	bls.n	800605a <USB_SetTurnaroundTime+0xda>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <USB_SetTurnaroundTime+0x140>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d202      	bcs.n	800605a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006054:	2307      	movs	r3, #7
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e00a      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800605a:	2306      	movs	r3, #6
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e007      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006066:	2309      	movs	r3, #9
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e001      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800606c:	2309      	movs	r3, #9
 800606e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	029b      	lsls	r3, r3, #10
 8006084:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	00d8acbf 	.word	0x00d8acbf
 80060a0:	00e4e1c0 	.word	0x00e4e1c0
 80060a4:	00f42400 	.word	0x00f42400
 80060a8:	01067380 	.word	0x01067380
 80060ac:	011a499f 	.word	0x011a499f
 80060b0:	01312cff 	.word	0x01312cff
 80060b4:	014ca43f 	.word	0x014ca43f
 80060b8:	016e3600 	.word	0x016e3600
 80060bc:	01a6ab1f 	.word	0x01a6ab1f
 80060c0:	01e84800 	.word	0x01e84800

080060c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f043 0201 	orr.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d115      	bne.n	8006156 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006136:	2001      	movs	r0, #1
 8006138:	f7fc f82c 	bl	8002194 <HAL_Delay>
      ms++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fa4b 	bl	80075de <USB_GetMode>
 8006148:	4603      	mov	r3, r0
 800614a:	2b01      	cmp	r3, #1
 800614c:	d01e      	beq.n	800618c <USB_SetCurrentMode+0x84>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b31      	cmp	r3, #49	; 0x31
 8006152:	d9f0      	bls.n	8006136 <USB_SetCurrentMode+0x2e>
 8006154:	e01a      	b.n	800618c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d115      	bne.n	8006188 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006168:	2001      	movs	r0, #1
 800616a:	f7fc f813 	bl	8002194 <HAL_Delay>
      ms++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 fa32 	bl	80075de <USB_GetMode>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <USB_SetCurrentMode+0x84>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b31      	cmp	r3, #49	; 0x31
 8006184:	d9f0      	bls.n	8006168 <USB_SetCurrentMode+0x60>
 8006186:	e001      	b.n	800618c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e005      	b.n	8006198 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b32      	cmp	r3, #50	; 0x32
 8006190:	d101      	bne.n	8006196 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061a0:	b084      	sub	sp, #16
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	e009      	b.n	80061d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3340      	adds	r3, #64	; 0x40
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3301      	adds	r3, #1
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b0e      	cmp	r3, #14
 80061d8:	d9f2      	bls.n	80061c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11c      	bne.n	800621a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ee:	f043 0302 	orr.w	r3, r3, #2
 80061f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e005      	b.n	8006226 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	4619      	mov	r1, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	461a      	mov	r2, r3
 8006242:	680b      	ldr	r3, [r1, #0]
 8006244:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10c      	bne.n	8006266 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d104      	bne.n	800625c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006252:	2100      	movs	r1, #0
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f965 	bl	8006524 <USB_SetDevSpeed>
 800625a:	e008      	b.n	800626e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800625c:	2101      	movs	r1, #1
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f960 	bl	8006524 <USB_SetDevSpeed>
 8006264:	e003      	b.n	800626e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006266:	2103      	movs	r1, #3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f95b 	bl	8006524 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800626e:	2110      	movs	r1, #16
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8f3 	bl	800645c <USB_FlushTxFifo>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f91f 	bl	80064c4 <USB_FlushRxFifo>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006296:	461a      	mov	r2, r3
 8006298:	2300      	movs	r3, #0
 800629a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	461a      	mov	r2, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ae:	461a      	mov	r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b4:	2300      	movs	r3, #0
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	e043      	b.n	8006342 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d0:	d118      	bne.n	8006304 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e013      	b.n	8006316 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	461a      	mov	r2, r3
 80062fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	e008      	b.n	8006316 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	461a      	mov	r2, r3
 8006324:	2300      	movs	r3, #0
 8006326:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006334:	461a      	mov	r2, r3
 8006336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800633a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3301      	adds	r3, #1
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	429a      	cmp	r2, r3
 8006348:	d3b7      	bcc.n	80062ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	e043      	b.n	80063d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006366:	d118      	bne.n	800639a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	461a      	mov	r2, r3
 800637c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e013      	b.n	80063ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	461a      	mov	r2, r3
 8006392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e008      	b.n	80063ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	461a      	mov	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	461a      	mov	r2, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ca:	461a      	mov	r2, r3
 80063cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3301      	adds	r3, #1
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d3b7      	bcc.n	8006350 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006400:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f043 0210 	orr.w	r2, r3, #16
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <USB_DevInit+0x2b4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f043 0208 	orr.w	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d105      	bne.n	8006444 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	4b06      	ldr	r3, [pc, #24]	; (8006458 <USB_DevInit+0x2b8>)
 800643e:	4313      	orrs	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006450:	b004      	add	sp, #16
 8006452:	4770      	bx	lr
 8006454:	803c3800 	.word	0x803c3800
 8006458:	40000004 	.word	0x40000004

0800645c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a13      	ldr	r2, [pc, #76]	; (80064c0 <USB_FlushTxFifo+0x64>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e01b      	b.n	80064b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	daf2      	bge.n	800646a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	019b      	lsls	r3, r3, #6
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <USB_FlushTxFifo+0x64>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d901      	bls.n	80064a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e006      	b.n	80064b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d0f0      	beq.n	8006494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	00030d40 	.word	0x00030d40

080064c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a11      	ldr	r2, [pc, #68]	; (8006520 <USB_FlushRxFifo+0x5c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e018      	b.n	8006514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	daf2      	bge.n	80064d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2210      	movs	r2, #16
 80064f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a08      	ldr	r2, [pc, #32]	; (8006520 <USB_FlushRxFifo+0x5c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e006      	b.n	8006514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b10      	cmp	r3, #16
 8006510:	d0f0      	beq.n	80064f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	00030d40 	.word	0x00030d40

08006524 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006544:	4313      	orrs	r3, r2
 8006546:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006556:	b480      	push	{r7}
 8006558:	b087      	sub	sp, #28
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
 800657a:	e00a      	b.n	8006592 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d002      	beq.n	8006588 <USB_GetDevSpeed+0x32>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b06      	cmp	r3, #6
 8006586:	d102      	bne.n	800658e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006588:	2302      	movs	r3, #2
 800658a:	75fb      	strb	r3, [r7, #23]
 800658c:	e001      	b.n	8006592 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800658e:	230f      	movs	r3, #15
 8006590:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006592:	7dfb      	ldrb	r3, [r7, #23]
}
 8006594:	4618      	mov	r0, r3
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d139      	bne.n	8006630 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	68f9      	ldr	r1, [r7, #12]
 80065d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065da:	4313      	orrs	r3, r2
 80065dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d153      	bne.n	800669c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	791b      	ldrb	r3, [r3, #4]
 800660e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006610:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	059b      	lsls	r3, r3, #22
 8006616:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006618:	431a      	orrs	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	0159      	lsls	r1, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	440b      	add	r3, r1
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	4619      	mov	r1, r3
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <USB_ActivateEndpoint+0x10c>)
 800662a:	4313      	orrs	r3, r2
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	e035      	b.n	800669c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2101      	movs	r1, #1
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	68f9      	ldr	r1, [r7, #12]
 800664a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800664e:	4313      	orrs	r3, r2
 8006650:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d119      	bne.n	800669c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006684:	430b      	orrs	r3, r1
 8006686:	431a      	orrs	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	0159      	lsls	r1, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	440b      	add	r3, r1
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	4619      	mov	r1, r3
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <USB_ActivateEndpoint+0x10c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	10008000 	.word	0x10008000

080066b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d161      	bne.n	8006790 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e2:	d11f      	bne.n	8006724 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006702:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006722:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	2101      	movs	r1, #1
 8006736:	fa01 f303 	lsl.w	r3, r1, r3
 800673a:	b29b      	uxth	r3, r3
 800673c:	43db      	mvns	r3, r3
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006744:	4013      	ands	r3, r2
 8006746:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	b29b      	uxth	r3, r3
 8006760:	43db      	mvns	r3, r3
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006768:	4013      	ands	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	0159      	lsls	r1, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	440b      	add	r3, r1
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	4619      	mov	r1, r3
 8006788:	4b35      	ldr	r3, [pc, #212]	; (8006860 <USB_DeactivateEndpoint+0x1b0>)
 800678a:	4013      	ands	r3, r2
 800678c:	600b      	str	r3, [r1, #0]
 800678e:	e060      	b.n	8006852 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067a6:	d11f      	bne.n	80067e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	2101      	movs	r1, #1
 80067fa:	fa01 f303 	lsl.w	r3, r1, r3
 80067fe:	041b      	lsls	r3, r3, #16
 8006800:	43db      	mvns	r3, r3
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006808:	4013      	ands	r3, r2
 800680a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	2101      	movs	r1, #1
 800681e:	fa01 f303 	lsl.w	r3, r1, r3
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	43db      	mvns	r3, r3
 8006826:	68f9      	ldr	r1, [r7, #12]
 8006828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800682c:	4013      	ands	r3, r2
 800682e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	0159      	lsls	r1, r3, #5
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	440b      	add	r3, r1
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	4619      	mov	r1, r3
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <USB_DeactivateEndpoint+0x1b4>)
 800684e:	4013      	ands	r3, r2
 8006850:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	ec337800 	.word	0xec337800
 8006864:	eff37800 	.word	0xeff37800

08006868 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 8163 	bne.w	8006b50 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d132      	bne.n	80068f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	0159      	lsls	r1, r3, #5
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	440b      	add	r3, r1
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	4619      	mov	r1, r3
 80068ae:	4ba5      	ldr	r3, [pc, #660]	; (8006b44 <USB_EPStartXfer+0x2dc>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	0159      	lsls	r1, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	440b      	add	r3, r1
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	4619      	mov	r1, r3
 80068f0:	4b95      	ldr	r3, [pc, #596]	; (8006b48 <USB_EPStartXfer+0x2e0>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	610b      	str	r3, [r1, #16]
 80068f6:	e074      	b.n	80069e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	0159      	lsls	r1, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	440b      	add	r3, r1
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	4619      	mov	r1, r3
 8006914:	4b8c      	ldr	r3, [pc, #560]	; (8006b48 <USB_EPStartXfer+0x2e0>)
 8006916:	4013      	ands	r3, r2
 8006918:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	0159      	lsls	r1, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	440b      	add	r3, r1
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	4619      	mov	r1, r3
 8006936:	4b83      	ldr	r3, [pc, #524]	; (8006b44 <USB_EPStartXfer+0x2dc>)
 8006938:	4013      	ands	r3, r2
 800693a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	440b      	add	r3, r1
 8006954:	1e59      	subs	r1, r3, #1
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	fbb1 f3f3 	udiv	r3, r1, r3
 800695e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006960:	4b7a      	ldr	r3, [pc, #488]	; (8006b4c <USB_EPStartXfer+0x2e4>)
 8006962:	400b      	ands	r3, r1
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	0148      	lsls	r0, r1, #5
 8006968:	69f9      	ldr	r1, [r7, #28]
 800696a:	4401      	add	r1, r0
 800696c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006970:	4313      	orrs	r3, r2
 8006972:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	0148      	lsls	r0, r1, #5
 800698e:	69f9      	ldr	r1, [r7, #28]
 8006990:	4401      	add	r1, r0
 8006992:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006996:	4313      	orrs	r3, r2
 8006998:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	791b      	ldrb	r3, [r3, #4]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d11f      	bne.n	80069e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d14b      	bne.n	8006a80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	461a      	mov	r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d128      	bne.n	8006a5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d110      	bne.n	8006a3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e00f      	b.n	8006a5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e137      	b.n	8006cf0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	791b      	ldrb	r3, [r3, #4]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d015      	beq.n	8006ad4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 811f 	beq.w	8006cf0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	634b      	str	r3, [r1, #52]	; 0x34
 8006ad2:	e10d      	b.n	8006cf0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d110      	bne.n	8006b06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	e00f      	b.n	8006b26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6919      	ldr	r1, [r3, #16]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	b298      	uxth	r0, r3
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4603      	mov	r3, r0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 faea 	bl	8007114 <USB_WritePacket>
 8006b40:	e0d6      	b.n	8006cf0 <USB_EPStartXfer+0x488>
 8006b42:	bf00      	nop
 8006b44:	e007ffff 	.word	0xe007ffff
 8006b48:	fff80000 	.word	0xfff80000
 8006b4c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	0159      	lsls	r1, r3, #5
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	440b      	add	r3, r1
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <USB_EPStartXfer+0x494>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	0159      	lsls	r1, r3, #5
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	440b      	add	r3, r1
 8006b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4b5c      	ldr	r3, [pc, #368]	; (8006d00 <USB_EPStartXfer+0x498>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d123      	bne.n	8006be4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb2:	69b9      	ldr	r1, [r7, #24]
 8006bb4:	0148      	lsls	r0, r1, #5
 8006bb6:	69f9      	ldr	r1, [r7, #28]
 8006bb8:	4401      	add	r1, r0
 8006bba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006be0:	6113      	str	r3, [r2, #16]
 8006be2:	e037      	b.n	8006c54 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	1e5a      	subs	r2, r3, #1
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	8afa      	ldrh	r2, [r7, #22]
 8006c00:	fb03 f202 	mul.w	r2, r3, r2
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	8afb      	ldrh	r3, [r7, #22]
 8006c18:	04d9      	lsls	r1, r3, #19
 8006c1a:	4b3a      	ldr	r3, [pc, #232]	; (8006d04 <USB_EPStartXfer+0x49c>)
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	69b9      	ldr	r1, [r7, #24]
 8006c20:	0148      	lsls	r0, r1, #5
 8006c22:	69f9      	ldr	r1, [r7, #28]
 8006c24:	4401      	add	r1, r0
 8006c26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c44:	69b9      	ldr	r1, [r7, #24]
 8006c46:	0148      	lsls	r0, r1, #5
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	4401      	add	r1, r0
 8006c4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c50:	4313      	orrs	r3, r2
 8006c52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10d      	bne.n	8006c76 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6919      	ldr	r1, [r3, #16]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	460a      	mov	r2, r1
 8006c74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d128      	bne.n	8006cd0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d110      	bne.n	8006cb0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e00f      	b.n	8006cd0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3720      	adds	r7, #32
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	fff80000 	.word	0xfff80000
 8006d00:	e007ffff 	.word	0xe007ffff
 8006d04:	1ff80000 	.word	0x1ff80000

08006d08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f040 80ce 	bne.w	8006ec6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d132      	bne.n	8006d98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	0159      	lsls	r1, r3, #5
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	440b      	add	r3, r1
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4b9a      	ldr	r3, [pc, #616]	; (8006fb8 <USB_EP0StartXfer+0x2b0>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	0159      	lsls	r1, r3, #5
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	440b      	add	r3, r1
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4b8a      	ldr	r3, [pc, #552]	; (8006fbc <USB_EP0StartXfer+0x2b4>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	610b      	str	r3, [r1, #16]
 8006d96:	e04e      	b.n	8006e36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	0159      	lsls	r1, r3, #5
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	440b      	add	r3, r1
 8006dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db2:	4619      	mov	r1, r3
 8006db4:	4b81      	ldr	r3, [pc, #516]	; (8006fbc <USB_EP0StartXfer+0x2b4>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	0159      	lsls	r1, r3, #5
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	440b      	add	r3, r1
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4b78      	ldr	r3, [pc, #480]	; (8006fb8 <USB_EP0StartXfer+0x2b0>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e26:	6939      	ldr	r1, [r7, #16]
 8006e28:	0148      	lsls	r0, r1, #5
 8006e2a:	6979      	ldr	r1, [r7, #20]
 8006e2c:	4401      	add	r1, r0
 8006e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e32:	4313      	orrs	r3, r2
 8006e34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d11e      	bne.n	8006e7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	461a      	mov	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	e097      	b.n	8006faa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	0151      	lsls	r1, r2, #5
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	440a      	add	r2, r1
 8006e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8083 	beq.w	8006faa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	6979      	ldr	r1, [r7, #20]
 8006ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	634b      	str	r3, [r1, #52]	; 0x34
 8006ec4:	e071      	b.n	8006faa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	0159      	lsls	r1, r3, #5
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	440b      	add	r3, r1
 8006edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <USB_EP0StartXfer+0x2b4>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	0159      	lsls	r1, r3, #5
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	440b      	add	r3, r1
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	4619      	mov	r1, r3
 8006f04:	4b2c      	ldr	r3, [pc, #176]	; (8006fb8 <USB_EP0StartXfer+0x2b0>)
 8006f06:	4013      	ands	r3, r2
 8006f08:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f58:	6939      	ldr	r1, [r7, #16]
 8006f5a:	0148      	lsls	r0, r1, #5
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	4401      	add	r1, r0
 8006f60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f64:	4313      	orrs	r3, r2
 8006f66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d10d      	bne.n	8006f8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6919      	ldr	r1, [r3, #16]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	460a      	mov	r2, r1
 8006f88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e007ffff 	.word	0xe007ffff
 8006fbc:	fff80000 	.word	0xfff80000

08006fc0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d14a      	bne.n	8007074 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff6:	f040 8086 	bne.w	8007106 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800701c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f242 7210 	movw	r2, #10000	; 0x2710
 800704e:	4293      	cmp	r3, r2
 8007050:	d902      	bls.n	8007058 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
          break;
 8007056:	e056      	b.n	8007106 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007070:	d0e7      	beq.n	8007042 <USB_EPStopXfer+0x82>
 8007072:	e048      	b.n	8007106 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800708c:	d13b      	bne.n	8007106 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	7812      	ldrb	r2, [r2, #0]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f242 7210 	movw	r2, #10000	; 0x2710
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d902      	bls.n	80070ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
          break;
 80070ea:	e00c      	b.n	8007106 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007104:	d0e7      	beq.n	80070d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007114:	b480      	push	{r7}
 8007116:	b089      	sub	sp, #36	; 0x24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	460b      	mov	r3, r1
 8007124:	71fb      	strb	r3, [r7, #7]
 8007126:	4613      	mov	r3, r2
 8007128:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d123      	bne.n	8007182 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800713a:	88bb      	ldrh	r3, [r7, #4]
 800713c:	3303      	adds	r3, #3
 800713e:	089b      	lsrs	r3, r3, #2
 8007140:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	e018      	b.n	800717a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	031a      	lsls	r2, r3, #12
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4413      	add	r3, r2
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	461a      	mov	r2, r3
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	3301      	adds	r3, #1
 8007160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	3301      	adds	r3, #1
 8007166:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	3301      	adds	r3, #1
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	429a      	cmp	r2, r3
 8007180:	d3e2      	bcc.n	8007148 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3724      	adds	r7, #36	; 0x24
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007190:	b480      	push	{r7}
 8007192:	b08b      	sub	sp, #44	; 0x2c
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	089b      	lsrs	r3, r3, #2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	e014      	b.n	80071e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	3301      	adds	r3, #1
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	3301      	adds	r3, #1
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	3301      	adds	r3, #1
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	3301      	adds	r3, #1
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	3301      	adds	r3, #1
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d3e6      	bcc.n	80071bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071ee:	8bfb      	ldrh	r3, [r7, #30]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01e      	beq.n	8007232 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	461a      	mov	r2, r3
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	701a      	strb	r2, [r3, #0]
      i++;
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	3301      	adds	r3, #1
 800721e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	3301      	adds	r3, #1
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007226:	8bfb      	ldrh	r3, [r7, #30]
 8007228:	3b01      	subs	r3, #1
 800722a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800722c:	8bfb      	ldrh	r3, [r7, #30]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1ea      	bne.n	8007208 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007234:	4618      	mov	r0, r3
 8007236:	372c      	adds	r7, #44	; 0x2c
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d12c      	bne.n	80072b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	db12      	blt.n	8007294 <USB_EPSetStall+0x54>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00f      	beq.n	8007294 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007292:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	e02b      	b.n	800730e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	db12      	blt.n	80072ee <USB_EPSetStall+0xae>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00f      	beq.n	80072ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800730c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d128      	bne.n	800738a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007356:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d003      	beq.n	8007368 <USB_EPClearStall+0x4c>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	791b      	ldrb	r3, [r3, #4]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d138      	bne.n	80073da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	e027      	b.n	80073da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	791b      	ldrb	r3, [r3, #4]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d003      	beq.n	80073ba <USB_EPClearStall+0x9e>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	791b      	ldrb	r3, [r3, #4]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d10f      	bne.n	80073da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007406:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800740a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800741c:	68f9      	ldr	r1, [r7, #12]
 800741e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007462:	f023 0302 	bic.w	r3, r3, #2
 8007466:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a4:	f043 0302 	orr.w	r3, r3, #2
 80074a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4013      	ands	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074d0:	68fb      	ldr	r3, [r7, #12]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4013      	ands	r3, r2
 8007500:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	0c1b      	lsrs	r3, r3, #16
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4013      	ands	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	b29b      	uxth	r3, r3
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4013      	ands	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007574:	68bb      	ldr	r3, [r7, #8]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075d0:	68bb      	ldr	r3, [r7, #8]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f003 0301 	and.w	r3, r3, #1
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007616:	4619      	mov	r1, r3
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <USB_ActivateSetup+0x44>)
 800761a:	4013      	ands	r3, r2
 800761c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800762c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	fffff800 	.word	0xfffff800

08007644 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	460b      	mov	r3, r1
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	333c      	adds	r3, #60	; 0x3c
 800765a:	3304      	adds	r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4a26      	ldr	r2, [pc, #152]	; (80076fc <USB_EP0_OutStart+0xb8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d90a      	bls.n	800767e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007678:	d101      	bne.n	800767e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e037      	b.n	80076ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	461a      	mov	r2, r3
 8007686:	2300      	movs	r3, #0
 8007688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800769c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ac:	f043 0318 	orr.w	r3, r3, #24
 80076b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d10f      	bne.n	80076ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	4f54300a 	.word	0x4f54300a

08007700 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a13      	ldr	r2, [pc, #76]	; (8007764 <USB_CoreReset+0x64>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e01b      	b.n	8007756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	daf2      	bge.n	800770c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4a09      	ldr	r2, [pc, #36]	; (8007764 <USB_CoreReset+0x64>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e006      	b.n	8007756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d0f0      	beq.n	8007736 <USB_CoreReset+0x36>

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	00030d40 	.word	0x00030d40

08007768 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007774:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007778:	f005 fbc0 	bl	800cefc <malloc>
 800777c:	4603      	mov	r3, r0
 800777e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	32b0      	adds	r2, #176	; 0xb0
 8007790:	2100      	movs	r1, #0
 8007792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007796:	2302      	movs	r3, #2
 8007798:	e0d4      	b.n	8007944 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800779a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800779e:	2100      	movs	r1, #0
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f005 fbc9 	bl	800cf38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32b0      	adds	r2, #176	; 0xb0
 80077b0:	68f9      	ldr	r1, [r7, #12]
 80077b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	32b0      	adds	r2, #176	; 0xb0
 80077c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7c1b      	ldrb	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d138      	bne.n	8007844 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077d2:	4b5e      	ldr	r3, [pc, #376]	; (800794c <USBD_CDC_Init+0x1e4>)
 80077d4:	7819      	ldrb	r1, [r3, #0]
 80077d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077da:	2202      	movs	r2, #2
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f005 f9c0 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077e2:	4b5a      	ldr	r3, [pc, #360]	; (800794c <USBD_CDC_Init+0x1e4>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	f003 020f 	and.w	r2, r3, #15
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3324      	adds	r3, #36	; 0x24
 80077f8:	2201      	movs	r2, #1
 80077fa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077fc:	4b54      	ldr	r3, [pc, #336]	; (8007950 <USBD_CDC_Init+0x1e8>)
 80077fe:	7819      	ldrb	r1, [r3, #0]
 8007800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007804:	2202      	movs	r2, #2
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f005 f9ab 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800780c:	4b50      	ldr	r3, [pc, #320]	; (8007950 <USBD_CDC_Init+0x1e8>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 020f 	and.w	r2, r3, #15
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007824:	2201      	movs	r2, #1
 8007826:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007828:	4b4a      	ldr	r3, [pc, #296]	; (8007954 <USBD_CDC_Init+0x1ec>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	3326      	adds	r3, #38	; 0x26
 800783e:	2210      	movs	r2, #16
 8007840:	801a      	strh	r2, [r3, #0]
 8007842:	e035      	b.n	80078b0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007844:	4b41      	ldr	r3, [pc, #260]	; (800794c <USBD_CDC_Init+0x1e4>)
 8007846:	7819      	ldrb	r1, [r3, #0]
 8007848:	2340      	movs	r3, #64	; 0x40
 800784a:	2202      	movs	r2, #2
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f005 f988 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007852:	4b3e      	ldr	r3, [pc, #248]	; (800794c <USBD_CDC_Init+0x1e4>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	3324      	adds	r3, #36	; 0x24
 8007868:	2201      	movs	r2, #1
 800786a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800786c:	4b38      	ldr	r3, [pc, #224]	; (8007950 <USBD_CDC_Init+0x1e8>)
 800786e:	7819      	ldrb	r1, [r3, #0]
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	2202      	movs	r2, #2
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f005 f974 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800787a:	4b35      	ldr	r3, [pc, #212]	; (8007950 <USBD_CDC_Init+0x1e8>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 020f 	and.w	r2, r3, #15
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007892:	2201      	movs	r2, #1
 8007894:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007896:	4b2f      	ldr	r3, [pc, #188]	; (8007954 <USBD_CDC_Init+0x1ec>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f003 020f 	and.w	r2, r3, #15
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	3326      	adds	r3, #38	; 0x26
 80078ac:	2210      	movs	r2, #16
 80078ae:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078b0:	4b28      	ldr	r3, [pc, #160]	; (8007954 <USBD_CDC_Init+0x1ec>)
 80078b2:	7819      	ldrb	r1, [r3, #0]
 80078b4:	2308      	movs	r3, #8
 80078b6:	2203      	movs	r2, #3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f005 f952 	bl	800cb62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078be:	4b25      	ldr	r3, [pc, #148]	; (8007954 <USBD_CDC_Init+0x1ec>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 020f 	and.w	r2, r3, #15
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	2201      	movs	r2, #1
 80078d6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	33b0      	adds	r3, #176	; 0xb0
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800790e:	2302      	movs	r3, #2
 8007910:	e018      	b.n	8007944 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800791a:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <USBD_CDC_Init+0x1e8>)
 800791c:	7819      	ldrb	r1, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f005 fa09 	bl	800cd40 <USBD_LL_PrepareReceive>
 800792e:	e008      	b.n	8007942 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <USBD_CDC_Init+0x1e8>)
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f005 f9ff 	bl	800cd40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000093 	.word	0x20000093
 8007950:	20000094 	.word	0x20000094
 8007954:	20000095 	.word	0x20000095

08007958 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007964:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <USBD_CDC_DeInit+0xf8>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f005 f91f 	bl	800cbae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007970:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <USBD_CDC_DeInit+0xf8>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f003 020f 	and.w	r2, r3, #15
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	3324      	adds	r3, #36	; 0x24
 8007986:	2200      	movs	r2, #0
 8007988:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800798a:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <USBD_CDC_DeInit+0xfc>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f005 f90c 	bl	800cbae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007996:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <USBD_CDC_DeInit+0xfc>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f003 020f 	and.w	r2, r3, #15
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079ae:	2200      	movs	r2, #0
 80079b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079b2:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <USBD_CDC_DeInit+0x100>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f005 f8f8 	bl	800cbae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079be:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <USBD_CDC_DeInit+0x100>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 020f 	and.w	r2, r3, #15
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	3324      	adds	r3, #36	; 0x24
 80079d4:	2200      	movs	r2, #0
 80079d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079d8:	4b1f      	ldr	r3, [pc, #124]	; (8007a58 <USBD_CDC_DeInit+0x100>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3326      	adds	r3, #38	; 0x26
 80079ee:	2200      	movs	r2, #0
 80079f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	32b0      	adds	r2, #176	; 0xb0
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01f      	beq.n	8007a44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	33b0      	adds	r3, #176	; 0xb0
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	32b0      	adds	r2, #176	; 0xb0
 8007a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f005 fa70 	bl	800cf0c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32b0      	adds	r2, #176	; 0xb0
 8007a36:	2100      	movs	r1, #0
 8007a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000093 	.word	0x20000093
 8007a54:	20000094 	.word	0x20000094
 8007a58:	20000095 	.word	0x20000095

08007a5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	32b0      	adds	r2, #176	; 0xb0
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e0bf      	b.n	8007c0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d050      	beq.n	8007b3a <USBD_CDC_Setup+0xde>
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	f040 80af 	bne.w	8007bfc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88db      	ldrh	r3, [r3, #6]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d03a      	beq.n	8007b1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b25b      	sxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da1b      	bge.n	8007ae8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	33b0      	adds	r3, #176	; 0xb0
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ac6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	88d2      	ldrh	r2, [r2, #6]
 8007acc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	2b07      	cmp	r3, #7
 8007ad4:	bf28      	it	cs
 8007ad6:	2307      	movcs	r3, #7
 8007ad8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	89fa      	ldrh	r2, [r7, #14]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fdad 	bl	8009640 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ae6:	e090      	b.n	8007c0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	785a      	ldrb	r2, [r3, #1]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	2b3f      	cmp	r3, #63	; 0x3f
 8007af8:	d803      	bhi.n	8007b02 <USBD_CDC_Setup+0xa6>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	88db      	ldrh	r3, [r3, #6]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	e000      	b.n	8007b04 <USBD_CDC_Setup+0xa8>
 8007b02:	2240      	movs	r2, #64	; 0x40
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b0a:	6939      	ldr	r1, [r7, #16]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007b12:	461a      	mov	r2, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fdbf 	bl	8009698 <USBD_CtlPrepareRx>
      break;
 8007b1a:	e076      	b.n	8007c0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	33b0      	adds	r3, #176	; 0xb0
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	7850      	ldrb	r0, [r2, #1]
 8007b32:	2200      	movs	r2, #0
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	4798      	blx	r3
      break;
 8007b38:	e067      	b.n	8007c0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b0b      	cmp	r3, #11
 8007b40:	d851      	bhi.n	8007be6 <USBD_CDC_Setup+0x18a>
 8007b42:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <USBD_CDC_Setup+0xec>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b79 	.word	0x08007b79
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007be7 	.word	0x08007be7
 8007b54:	08007be7 	.word	0x08007be7
 8007b58:	08007be7 	.word	0x08007be7
 8007b5c:	08007be7 	.word	0x08007be7
 8007b60:	08007be7 	.word	0x08007be7
 8007b64:	08007be7 	.word	0x08007be7
 8007b68:	08007be7 	.word	0x08007be7
 8007b6c:	08007be7 	.word	0x08007be7
 8007b70:	08007ba3 	.word	0x08007ba3
 8007b74:	08007bcd 	.word	0x08007bcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d107      	bne.n	8007b94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b84:	f107 030a 	add.w	r3, r7, #10
 8007b88:	2202      	movs	r2, #2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fd57 	bl	8009640 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b92:	e032      	b.n	8007bfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 fce1 	bl	800955e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	75fb      	strb	r3, [r7, #23]
          break;
 8007ba0:	e02b      	b.n	8007bfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d107      	bne.n	8007bbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bae:	f107 030d 	add.w	r3, r7, #13
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fd42 	bl	8009640 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bbc:	e01d      	b.n	8007bfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fccc 	bl	800955e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bca:	e016      	b.n	8007bfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d00f      	beq.n	8007bf8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fcbf 	bl	800955e <USBD_CtlError>
            ret = USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007be4:	e008      	b.n	8007bf8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fcb8 	bl	800955e <USBD_CtlError>
          ret = USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf2:	e002      	b.n	8007bfa <USBD_CDC_Setup+0x19e>
          break;
 8007bf4:	bf00      	nop
 8007bf6:	e008      	b.n	8007c0a <USBD_CDC_Setup+0x1ae>
          break;
 8007bf8:	bf00      	nop
      }
      break;
 8007bfa:	e006      	b.n	8007c0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fcad 	bl	800955e <USBD_CtlError>
      ret = USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32b0      	adds	r2, #176	; 0xb0
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e065      	b.n	8007d0a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	32b0      	adds	r2, #176	; 0xb0
 8007c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	f003 020f 	and.w	r2, r3, #15
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	440b      	add	r3, r1
 8007c60:	3318      	adds	r3, #24
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02f      	beq.n	8007cc8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 020f 	and.w	r2, r3, #15
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	3318      	adds	r3, #24
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	f003 010f 	and.w	r1, r3, #15
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	460b      	mov	r3, r1
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	440b      	add	r3, r1
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4403      	add	r3, r0
 8007c90:	3348      	adds	r3, #72	; 0x48
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d112      	bne.n	8007cc8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cba:	78f9      	ldrb	r1, [r7, #3]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f005 f81c 	bl	800ccfe <USBD_LL_Transmit>
 8007cc6:	e01f      	b.n	8007d08 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	33b0      	adds	r3, #176	; 0xb0
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d010      	beq.n	8007d08 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	33b0      	adds	r3, #176	; 0xb0
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	32b0      	adds	r2, #176	; 0xb0
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	32b0      	adds	r2, #176	; 0xb0
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e01a      	b.n	8007d7a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f005 f81a 	bl	800cd82 <USBD_LL_GetRxDataSize>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	33b0      	adds	r3, #176	; 0xb0
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d74:	4611      	mov	r1, r2
 8007d76:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32b0      	adds	r2, #176	; 0xb0
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e025      	b.n	8007df0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	33b0      	adds	r3, #176	; 0xb0
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01a      	beq.n	8007dee <USBD_CDC_EP0_RxReady+0x6c>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dbe:	2bff      	cmp	r3, #255	; 0xff
 8007dc0:	d015      	beq.n	8007dee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	33b0      	adds	r3, #176	; 0xb0
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007dda:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007de2:	b292      	uxth	r2, r2
 8007de4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	22ff      	movs	r2, #255	; 0xff
 8007dea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e00:	2182      	movs	r1, #130	; 0x82
 8007e02:	4818      	ldr	r0, [pc, #96]	; (8007e64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e04:	f000 fd49 	bl	800889a <USBD_GetEpDesc>
 8007e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4815      	ldr	r0, [pc, #84]	; (8007e64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e0e:	f000 fd44 	bl	800889a <USBD_GetEpDesc>
 8007e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e14:	2181      	movs	r1, #129	; 0x81
 8007e16:	4813      	ldr	r0, [pc, #76]	; (8007e64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e18:	f000 fd3f 	bl	800889a <USBD_GetEpDesc>
 8007e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2210      	movs	r2, #16
 8007e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d006      	beq.n	8007e3e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e38:	711a      	strb	r2, [r3, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d006      	beq.n	8007e52 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e4c:	711a      	strb	r2, [r3, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2243      	movs	r2, #67	; 0x43
 8007e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000050 	.word	0x20000050

08007e68 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e70:	2182      	movs	r1, #130	; 0x82
 8007e72:	4818      	ldr	r0, [pc, #96]	; (8007ed4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e74:	f000 fd11 	bl	800889a <USBD_GetEpDesc>
 8007e78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4815      	ldr	r0, [pc, #84]	; (8007ed4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e7e:	f000 fd0c 	bl	800889a <USBD_GetEpDesc>
 8007e82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e84:	2181      	movs	r1, #129	; 0x81
 8007e86:	4813      	ldr	r0, [pc, #76]	; (8007ed4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e88:	f000 fd07 	bl	800889a <USBD_GetEpDesc>
 8007e8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2210      	movs	r2, #16
 8007e98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d006      	beq.n	8007eae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	711a      	strb	r2, [r3, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f042 0202 	orr.w	r2, r2, #2
 8007eac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d006      	beq.n	8007ec2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	711a      	strb	r2, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f042 0202 	orr.w	r2, r2, #2
 8007ec0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2243      	movs	r2, #67	; 0x43
 8007ec6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000050 	.word	0x20000050

08007ed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ee0:	2182      	movs	r1, #130	; 0x82
 8007ee2:	4818      	ldr	r0, [pc, #96]	; (8007f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ee4:	f000 fcd9 	bl	800889a <USBD_GetEpDesc>
 8007ee8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eea:	2101      	movs	r1, #1
 8007eec:	4815      	ldr	r0, [pc, #84]	; (8007f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eee:	f000 fcd4 	bl	800889a <USBD_GetEpDesc>
 8007ef2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ef4:	2181      	movs	r1, #129	; 0x81
 8007ef6:	4813      	ldr	r0, [pc, #76]	; (8007f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ef8:	f000 fccf 	bl	800889a <USBD_GetEpDesc>
 8007efc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2210      	movs	r2, #16
 8007f08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f18:	711a      	strb	r2, [r3, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2c:	711a      	strb	r2, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2243      	movs	r2, #67	; 0x43
 8007f36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000050 	.word	0x20000050

08007f48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	220a      	movs	r2, #10
 8007f54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f56:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	2000000c 	.word	0x2000000c

08007f68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e009      	b.n	8007f90 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	33b0      	adds	r3, #176	; 0xb0
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	32b0      	adds	r2, #176	; 0xb0
 8007fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e008      	b.n	8007fd4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	32b0      	adds	r2, #176	; 0xb0
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008000:	2303      	movs	r3, #3
 8008002:	e004      	b.n	800800e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32b0      	adds	r2, #176	; 0xb0
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008034:	2301      	movs	r3, #1
 8008036:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800803e:	2303      	movs	r3, #3
 8008040:	e025      	b.n	800808e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11f      	bne.n	800808c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2201      	movs	r2, #1
 8008050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008054:	4b10      	ldr	r3, [pc, #64]	; (8008098 <USBD_CDC_TransmitPacket+0x7c>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 020f 	and.w	r2, r3, #15
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4403      	add	r3, r0
 800806e:	3318      	adds	r3, #24
 8008070:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <USBD_CDC_TransmitPacket+0x7c>)
 8008074:	7819      	ldrb	r1, [r3, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f004 fe3b 	bl	800ccfe <USBD_LL_Transmit>

    ret = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000093 	.word	0x20000093

0800809c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32b0      	adds	r2, #176	; 0xb0
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	32b0      	adds	r2, #176	; 0xb0
 80080be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e018      	b.n	80080fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7c1b      	ldrb	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <USBD_CDC_ReceivePacket+0x68>)
 80080d4:	7819      	ldrb	r1, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f004 fe2d 	bl	800cd40 <USBD_LL_PrepareReceive>
 80080e6:	e008      	b.n	80080fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <USBD_CDC_ReceivePacket+0x68>)
 80080ea:	7819      	ldrb	r1, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f004 fe23 	bl	800cd40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000094 	.word	0x20000094

08008108 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	e01f      	b.n	8008160 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	79fa      	ldrb	r2, [r7, #7]
 8008152:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f004 fc9d 	bl	800ca94 <USBD_LL_Init>
 800815a:	4603      	mov	r3, r0
 800815c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	e025      	b.n	80081cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	32ae      	adds	r2, #174	; 0xae
 8008192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00f      	beq.n	80081bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	32ae      	adds	r2, #174	; 0xae
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	f107 020e 	add.w	r2, r7, #14
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	4602      	mov	r2, r0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f004 fca5 	bl	800cb2c <USBD_LL_Start>
 80081e2:	4603      	mov	r3, r0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	460b      	mov	r3, r1
 800820c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d009      	beq.n	8008230 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
 800822c:	4603      	mov	r3, r0
 800822e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	4611      	mov	r1, r2
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008260:	2303      	movs	r3, #3
 8008262:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f001 f932 	bl	80094ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d01a      	beq.n	80082e0 <USBD_LL_SetupStage+0x72>
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d822      	bhi.n	80082f4 <USBD_LL_SetupStage+0x86>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <USBD_LL_SetupStage+0x4a>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d00a      	beq.n	80082cc <USBD_LL_SetupStage+0x5e>
 80082b6:	e01d      	b.n	80082f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fb5f 	bl	8008984 <USBD_StdDevReq>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ca:	e020      	b.n	800830e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fbc7 	bl	8008a68 <USBD_StdItfReq>
 80082da:	4603      	mov	r3, r0
 80082dc:	73fb      	strb	r3, [r7, #15]
      break;
 80082de:	e016      	b.n	800830e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fc29 	bl	8008b40 <USBD_StdEPReq>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	e00c      	b.n	800830e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f004 fc72 	bl	800cbec <USBD_LL_StallEP>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	bf00      	nop
  }

  return ret;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	460b      	mov	r3, r1
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d16e      	bne.n	800840e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800833e:	2b03      	cmp	r3, #3
 8008340:	f040 8098 	bne.w	8008474 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	429a      	cmp	r2, r3
 800834e:	d913      	bls.n	8008378 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	1ad2      	subs	r2, r2, r3
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	4293      	cmp	r3, r2
 8008368:	bf28      	it	cs
 800836a:	4613      	movcs	r3, r2
 800836c:	461a      	mov	r2, r3
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f001 f9ae 	bl	80096d2 <USBD_CtlContinueRx>
 8008376:	e07d      	b.n	8008474 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	2b02      	cmp	r3, #2
 8008384:	d014      	beq.n	80083b0 <USBD_LL_DataOutStage+0x98>
 8008386:	2b02      	cmp	r3, #2
 8008388:	d81d      	bhi.n	80083c6 <USBD_LL_DataOutStage+0xae>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <USBD_LL_DataOutStage+0x7c>
 800838e:	2b01      	cmp	r3, #1
 8008390:	d003      	beq.n	800839a <USBD_LL_DataOutStage+0x82>
 8008392:	e018      	b.n	80083c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	75bb      	strb	r3, [r7, #22]
            break;
 8008398:	e018      	b.n	80083cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	4619      	mov	r1, r3
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fa5e 	bl	8008866 <USBD_CoreFindIF>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75bb      	strb	r3, [r7, #22]
            break;
 80083ae:	e00d      	b.n	80083cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fa60 	bl	8008880 <USBD_CoreFindEP>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75bb      	strb	r3, [r7, #22]
            break;
 80083c4:	e002      	b.n	80083cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75bb      	strb	r3, [r7, #22]
            break;
 80083ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083cc:	7dbb      	ldrb	r3, [r7, #22]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d119      	bne.n	8008406 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d113      	bne.n	8008406 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083de:	7dba      	ldrb	r2, [r7, #22]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	32ae      	adds	r2, #174	; 0xae
 80083e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80083ee:	7dba      	ldrb	r2, [r7, #22]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083f6:	7dba      	ldrb	r2, [r7, #22]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	32ae      	adds	r2, #174	; 0xae
 80083fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f001 f974 	bl	80096f4 <USBD_CtlSendStatus>
 800840c:	e032      	b.n	8008474 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fa31 	bl	8008880 <USBD_CoreFindEP>
 800841e:	4603      	mov	r3, r0
 8008420:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008422:	7dbb      	ldrb	r3, [r7, #22]
 8008424:	2bff      	cmp	r3, #255	; 0xff
 8008426:	d025      	beq.n	8008474 <USBD_LL_DataOutStage+0x15c>
 8008428:	7dbb      	ldrb	r3, [r7, #22]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d122      	bne.n	8008474 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b03      	cmp	r3, #3
 8008438:	d117      	bne.n	800846a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800843a:	7dba      	ldrb	r2, [r7, #22]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	32ae      	adds	r2, #174	; 0xae
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00f      	beq.n	800846a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800844a:	7dba      	ldrb	r2, [r7, #22]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008452:	7dba      	ldrb	r2, [r7, #22]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	32ae      	adds	r2, #174	; 0xae
 8008458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	7afa      	ldrb	r2, [r7, #11]
 8008460:	4611      	mov	r1, r2
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	e000      	b.n	8008476 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b086      	sub	sp, #24
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	460b      	mov	r3, r1
 8008488:	607a      	str	r2, [r7, #4]
 800848a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d16f      	bne.n	8008572 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3314      	adds	r3, #20
 8008496:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d15a      	bne.n	8008558 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d914      	bls.n	80084d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f001 f8d6 	bl	8009676 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f004 fc35 	bl	800cd40 <USBD_LL_PrepareReceive>
 80084d6:	e03f      	b.n	8008558 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d11c      	bne.n	800851e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d316      	bcc.n	800851e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d20f      	bcs.n	800851e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 f8b7 	bl	8009676 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008510:	2300      	movs	r3, #0
 8008512:	2200      	movs	r2, #0
 8008514:	2100      	movs	r1, #0
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f004 fc12 	bl	800cd40 <USBD_LL_PrepareReceive>
 800851c:	e01c      	b.n	8008558 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b03      	cmp	r3, #3
 8008528:	d10f      	bne.n	800854a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800854a:	2180      	movs	r1, #128	; 0x80
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f004 fb4d 	bl	800cbec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f001 f8e1 	bl	800971a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d03a      	beq.n	80085d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff fe42 	bl	80081ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008570:	e032      	b.n	80085d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4619      	mov	r1, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f97f 	bl	8008880 <USBD_CoreFindEP>
 8008582:	4603      	mov	r3, r0
 8008584:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	2bff      	cmp	r3, #255	; 0xff
 800858a:	d025      	beq.n	80085d8 <USBD_LL_DataInStage+0x15a>
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d122      	bne.n	80085d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b03      	cmp	r3, #3
 800859c:	d11c      	bne.n	80085d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800859e:	7dfa      	ldrb	r2, [r7, #23]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	32ae      	adds	r2, #174	; 0xae
 80085a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d014      	beq.n	80085d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80085ae:	7dfa      	ldrb	r2, [r7, #23]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085b6:	7dfa      	ldrb	r2, [r7, #23]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	32ae      	adds	r2, #174	; 0xae
 80085bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	7afa      	ldrb	r2, [r7, #11]
 80085c4:	4611      	mov	r1, r2
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	4798      	blx	r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085ce:	7dbb      	ldrb	r3, [r7, #22]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085d4:	7dbb      	ldrb	r3, [r7, #22]
 80085d6:	e000      	b.n	80085da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00e      	beq.n	8008648 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6852      	ldr	r2, [r2, #4]
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	4611      	mov	r1, r2
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008644:	2303      	movs	r3, #3
 8008646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f004 fa87 	bl	800cb62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2240      	movs	r2, #64	; 0x40
 8008660:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008664:	2340      	movs	r3, #64	; 0x40
 8008666:	2200      	movs	r2, #0
 8008668:	2180      	movs	r1, #128	; 0x80
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f004 fa79 	bl	800cb62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2240      	movs	r2, #64	; 0x40
 800867a:	621a      	str	r2, [r3, #32]

  return ret;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	78fa      	ldrb	r2, [r7, #3]
 8008696:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2204      	movs	r2, #4
 80086c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d106      	bne.n	80086f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b03      	cmp	r3, #3
 8008714:	d110      	bne.n	8008738 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	32ae      	adds	r2, #174	; 0xae
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	e01c      	b.n	800879e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b03      	cmp	r3, #3
 800876e:	d115      	bne.n	800879c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	32ae      	adds	r2, #174	; 0xae
 800877a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	32ae      	adds	r2, #174	; 0xae
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	4611      	mov	r1, r2
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	32ae      	adds	r2, #174	; 0xae
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e01c      	b.n	8008802 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d115      	bne.n	8008800 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	; 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	32ae      	adds	r2, #174	; 0xae
 80087f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	4611      	mov	r1, r2
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00e      	beq.n	800885c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6852      	ldr	r2, [r2, #4]
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	4611      	mov	r1, r2
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008858:	2303      	movs	r3, #3
 800885a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008872:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800888c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b086      	sub	sp, #24
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	885b      	ldrh	r3, [r3, #2]
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	429a      	cmp	r2, r3
 80088c0:	d920      	bls.n	8008904 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088ca:	e013      	b.n	80088f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088cc:	f107 030a 	add.w	r3, r7, #10
 80088d0:	4619      	mov	r1, r3
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f000 f81b 	bl	800890e <USBD_GetNextDesc>
 80088d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d108      	bne.n	80088f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	789b      	ldrb	r3, [r3, #2]
 80088ea:	78fa      	ldrb	r2, [r7, #3]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d008      	beq.n	8008902 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	897b      	ldrh	r3, [r7, #10]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d8e5      	bhi.n	80088cc <USBD_GetEpDesc+0x32>
 8008900:	e000      	b.n	8008904 <USBD_GetEpDesc+0x6a>
          break;
 8008902:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008904:	693b      	ldr	r3, [r7, #16]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800890e:	b480      	push	{r7}
 8008910:	b085      	sub	sp, #20
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	881a      	ldrh	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	4413      	add	r3, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4413      	add	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	3301      	adds	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008966:	8a3b      	ldrh	r3, [r7, #16]
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	b21a      	sxth	r2, r3
 800896c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008970:	4313      	orrs	r3, r2
 8008972:	b21b      	sxth	r3, r3
 8008974:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008976:	89fb      	ldrh	r3, [r7, #14]
}
 8008978:	4618      	mov	r0, r3
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d005      	beq.n	80089aa <USBD_StdDevReq+0x26>
 800899e:	2b40      	cmp	r3, #64	; 0x40
 80089a0:	d857      	bhi.n	8008a52 <USBD_StdDevReq+0xce>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00f      	beq.n	80089c6 <USBD_StdDevReq+0x42>
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d153      	bne.n	8008a52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	32ae      	adds	r2, #174	; 0xae
 80089b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
      break;
 80089c4:	e04a      	b.n	8008a5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d83b      	bhi.n	8008a46 <USBD_StdDevReq+0xc2>
 80089ce:	a201      	add	r2, pc, #4	; (adr r2, 80089d4 <USBD_StdDevReq+0x50>)
 80089d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d4:	08008a29 	.word	0x08008a29
 80089d8:	08008a3d 	.word	0x08008a3d
 80089dc:	08008a47 	.word	0x08008a47
 80089e0:	08008a33 	.word	0x08008a33
 80089e4:	08008a47 	.word	0x08008a47
 80089e8:	08008a07 	.word	0x08008a07
 80089ec:	080089fd 	.word	0x080089fd
 80089f0:	08008a47 	.word	0x08008a47
 80089f4:	08008a1f 	.word	0x08008a1f
 80089f8:	08008a11 	.word	0x08008a11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa3c 	bl	8008e7c <USBD_GetDescriptor>
          break;
 8008a04:	e024      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fbcb 	bl	80091a4 <USBD_SetAddress>
          break;
 8008a0e:	e01f      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fc0a 	bl	800922c <USBD_SetConfig>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8008a1c:	e018      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fcad 	bl	8009380 <USBD_GetConfig>
          break;
 8008a26:	e013      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fcde 	bl	80093ec <USBD_GetStatus>
          break;
 8008a30:	e00e      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fd0d 	bl	8009454 <USBD_SetFeature>
          break;
 8008a3a:	e009      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fd31 	bl	80094a6 <USBD_ClrFeature>
          break;
 8008a44:	e004      	b.n	8008a50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fd88 	bl	800955e <USBD_CtlError>
          break;
 8008a4e:	bf00      	nop
      }
      break;
 8008a50:	e004      	b.n	8008a5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fd82 	bl	800955e <USBD_CtlError>
      break;
 8008a5a:	bf00      	nop
  }

  return ret;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop

08008a68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a7e:	2b40      	cmp	r3, #64	; 0x40
 8008a80:	d005      	beq.n	8008a8e <USBD_StdItfReq+0x26>
 8008a82:	2b40      	cmp	r3, #64	; 0x40
 8008a84:	d852      	bhi.n	8008b2c <USBD_StdItfReq+0xc4>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <USBD_StdItfReq+0x26>
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d14e      	bne.n	8008b2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d840      	bhi.n	8008b1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	889b      	ldrh	r3, [r3, #4]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d836      	bhi.n	8008b14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	889b      	ldrh	r3, [r3, #4]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff fed9 	bl	8008866 <USBD_CoreFindIF>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2bff      	cmp	r3, #255	; 0xff
 8008abc:	d01d      	beq.n	8008afa <USBD_StdItfReq+0x92>
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d11a      	bne.n	8008afa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ac4:	7bba      	ldrb	r2, [r7, #14]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	32ae      	adds	r2, #174	; 0xae
 8008aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00f      	beq.n	8008af4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ad4:	7bba      	ldrb	r2, [r7, #14]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008adc:	7bba      	ldrb	r2, [r7, #14]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	32ae      	adds	r2, #174	; 0xae
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008af2:	e004      	b.n	8008afe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008af4:	2303      	movs	r3, #3
 8008af6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008af8:	e001      	b.n	8008afe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008afa:	2303      	movs	r3, #3
 8008afc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d110      	bne.n	8008b28 <USBD_StdItfReq+0xc0>
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10d      	bne.n	8008b28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fdf1 	bl	80096f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b12:	e009      	b.n	8008b28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fd21 	bl	800955e <USBD_CtlError>
          break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fd1c 	bl	800955e <USBD_CtlError>
          break;
 8008b26:	e000      	b.n	8008b2a <USBD_StdItfReq+0xc2>
          break;
 8008b28:	bf00      	nop
      }
      break;
 8008b2a:	e004      	b.n	8008b36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fd15 	bl	800955e <USBD_CtlError>
      break;
 8008b34:	bf00      	nop
  }

  return ret;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	889b      	ldrh	r3, [r3, #4]
 8008b52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b5c:	2b40      	cmp	r3, #64	; 0x40
 8008b5e:	d007      	beq.n	8008b70 <USBD_StdEPReq+0x30>
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	f200 817f 	bhi.w	8008e64 <USBD_StdEPReq+0x324>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d02a      	beq.n	8008bc0 <USBD_StdEPReq+0x80>
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	f040 817a 	bne.w	8008e64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff fe83 	bl	8008880 <USBD_CoreFindEP>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b7e:	7b7b      	ldrb	r3, [r7, #13]
 8008b80:	2bff      	cmp	r3, #255	; 0xff
 8008b82:	f000 8174 	beq.w	8008e6e <USBD_StdEPReq+0x32e>
 8008b86:	7b7b      	ldrb	r3, [r7, #13]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 8170 	bne.w	8008e6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b8e:	7b7a      	ldrb	r2, [r7, #13]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b96:	7b7a      	ldrb	r2, [r7, #13]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	32ae      	adds	r2, #174	; 0xae
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8163 	beq.w	8008e6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ba8:	7b7a      	ldrb	r2, [r7, #13]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32ae      	adds	r2, #174	; 0xae
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bbe:	e156      	b.n	8008e6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d008      	beq.n	8008bda <USBD_StdEPReq+0x9a>
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	f300 8145 	bgt.w	8008e58 <USBD_StdEPReq+0x318>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 809b 	beq.w	8008d0a <USBD_StdEPReq+0x1ca>
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d03c      	beq.n	8008c52 <USBD_StdEPReq+0x112>
 8008bd8:	e13e      	b.n	8008e58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d002      	beq.n	8008bec <USBD_StdEPReq+0xac>
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d016      	beq.n	8008c18 <USBD_StdEPReq+0xd8>
 8008bea:	e02c      	b.n	8008c46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <USBD_StdEPReq+0xce>
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	2b80      	cmp	r3, #128	; 0x80
 8008bf6:	d00a      	beq.n	8008c0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f003 fff5 	bl	800cbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f003 fff1 	bl	800cbec <USBD_LL_StallEP>
 8008c0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c0c:	e020      	b.n	8008c50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fca4 	bl	800955e <USBD_CtlError>
              break;
 8008c16:	e01b      	b.n	8008c50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	885b      	ldrh	r3, [r3, #2]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10e      	bne.n	8008c3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <USBD_StdEPReq+0xfe>
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b80      	cmp	r3, #128	; 0x80
 8008c2a:	d008      	beq.n	8008c3e <USBD_StdEPReq+0xfe>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	88db      	ldrh	r3, [r3, #6]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f003 ffd7 	bl	800cbec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fd58 	bl	80096f4 <USBD_CtlSendStatus>

              break;
 8008c44:	e004      	b.n	8008c50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fc88 	bl	800955e <USBD_CtlError>
              break;
 8008c4e:	bf00      	nop
          }
          break;
 8008c50:	e107      	b.n	8008e62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d002      	beq.n	8008c64 <USBD_StdEPReq+0x124>
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d016      	beq.n	8008c90 <USBD_StdEPReq+0x150>
 8008c62:	e04b      	b.n	8008cfc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00d      	beq.n	8008c86 <USBD_StdEPReq+0x146>
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b80      	cmp	r3, #128	; 0x80
 8008c6e:	d00a      	beq.n	8008c86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f003 ffb9 	bl	800cbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c7a:	2180      	movs	r1, #128	; 0x80
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f003 ffb5 	bl	800cbec <USBD_LL_StallEP>
 8008c82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c84:	e040      	b.n	8008d08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc68 	bl	800955e <USBD_CtlError>
              break;
 8008c8e:	e03b      	b.n	8008d08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	885b      	ldrh	r3, [r3, #2]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d136      	bne.n	8008d06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f003 ffbf 	bl	800cc2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fd21 	bl	80096f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff fde2 	bl	8008880 <USBD_CoreFindEP>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cc0:	7b7b      	ldrb	r3, [r7, #13]
 8008cc2:	2bff      	cmp	r3, #255	; 0xff
 8008cc4:	d01f      	beq.n	8008d06 <USBD_StdEPReq+0x1c6>
 8008cc6:	7b7b      	ldrb	r3, [r7, #13]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11c      	bne.n	8008d06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ccc:	7b7a      	ldrb	r2, [r7, #13]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cd4:	7b7a      	ldrb	r2, [r7, #13]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	32ae      	adds	r2, #174	; 0xae
 8008cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d010      	beq.n	8008d06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ce4:	7b7a      	ldrb	r2, [r7, #13]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	32ae      	adds	r2, #174	; 0xae
 8008cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cfa:	e004      	b.n	8008d06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fc2d 	bl	800955e <USBD_CtlError>
              break;
 8008d04:	e000      	b.n	8008d08 <USBD_StdEPReq+0x1c8>
              break;
 8008d06:	bf00      	nop
          }
          break;
 8008d08:	e0ab      	b.n	8008e62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d002      	beq.n	8008d1c <USBD_StdEPReq+0x1dc>
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d032      	beq.n	8008d80 <USBD_StdEPReq+0x240>
 8008d1a:	e097      	b.n	8008e4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d007      	beq.n	8008d32 <USBD_StdEPReq+0x1f2>
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b80      	cmp	r3, #128	; 0x80
 8008d26:	d004      	beq.n	8008d32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fc17 	bl	800955e <USBD_CtlError>
                break;
 8008d30:	e091      	b.n	8008e56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	da0b      	bge.n	8008d52 <USBD_StdEPReq+0x212>
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	3310      	adds	r3, #16
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	3304      	adds	r3, #4
 8008d50:	e00b      	b.n	8008d6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4413      	add	r3, r2
 8008d68:	3304      	adds	r3, #4
 8008d6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2202      	movs	r2, #2
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc61 	bl	8009640 <USBD_CtlSendData>
              break;
 8008d7e:	e06a      	b.n	8008e56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da11      	bge.n	8008dac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	f003 020f 	and.w	r2, r3, #15
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	3324      	adds	r3, #36	; 0x24
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d117      	bne.n	8008dd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fbda 	bl	800955e <USBD_CtlError>
                  break;
 8008daa:	e054      	b.n	8008e56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fbc7 	bl	800955e <USBD_CtlError>
                  break;
 8008dd0:	e041      	b.n	8008e56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	da0b      	bge.n	8008df2 <USBD_StdEPReq+0x2b2>
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	3310      	adds	r3, #16
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	3304      	adds	r3, #4
 8008df0:	e00b      	b.n	8008e0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df8:	4613      	mov	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	4413      	add	r3, r2
 8008e08:	3304      	adds	r3, #4
 8008e0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <USBD_StdEPReq+0x2d8>
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d103      	bne.n	8008e20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e00e      	b.n	8008e3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f003 ff1f 	bl	800cc68 <USBD_LL_IsStallEP>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	e002      	b.n	8008e3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2202      	movs	r2, #2
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fbfb 	bl	8009640 <USBD_CtlSendData>
              break;
 8008e4a:	e004      	b.n	8008e56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fb85 	bl	800955e <USBD_CtlError>
              break;
 8008e54:	bf00      	nop
          }
          break;
 8008e56:	e004      	b.n	8008e62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fb7f 	bl	800955e <USBD_CtlError>
          break;
 8008e60:	bf00      	nop
      }
      break;
 8008e62:	e005      	b.n	8008e70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fb79 	bl	800955e <USBD_CtlError>
      break;
 8008e6c:	e000      	b.n	8008e70 <USBD_StdEPReq+0x330>
      break;
 8008e6e:	bf00      	nop
  }

  return ret;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	0a1b      	lsrs	r3, r3, #8
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	2b0e      	cmp	r3, #14
 8008e9e:	f200 8152 	bhi.w	8009146 <USBD_GetDescriptor+0x2ca>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <USBD_GetDescriptor+0x2c>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008f19 	.word	0x08008f19
 8008eac:	08008f31 	.word	0x08008f31
 8008eb0:	08008f71 	.word	0x08008f71
 8008eb4:	08009147 	.word	0x08009147
 8008eb8:	08009147 	.word	0x08009147
 8008ebc:	080090e7 	.word	0x080090e7
 8008ec0:	08009113 	.word	0x08009113
 8008ec4:	08009147 	.word	0x08009147
 8008ec8:	08009147 	.word	0x08009147
 8008ecc:	08009147 	.word	0x08009147
 8008ed0:	08009147 	.word	0x08009147
 8008ed4:	08009147 	.word	0x08009147
 8008ed8:	08009147 	.word	0x08009147
 8008edc:	08009147 	.word	0x08009147
 8008ee0:	08008ee5 	.word	0x08008ee5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7c12      	ldrb	r2, [r2, #16]
 8008efc:	f107 0108 	add.w	r1, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f06:	e126      	b.n	8009156 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fb27 	bl	800955e <USBD_CtlError>
        err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
      break;
 8008f16:	e11e      	b.n	8009156 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	7c12      	ldrb	r2, [r2, #16]
 8008f24:	f107 0108 	add.w	r1, r7, #8
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4798      	blx	r3
 8008f2c:	60f8      	str	r0, [r7, #12]
      break;
 8008f2e:	e112      	b.n	8009156 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7c1b      	ldrb	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10d      	bne.n	8008f54 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	f107 0208 	add.w	r2, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	2202      	movs	r2, #2
 8008f50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f52:	e100      	b.n	8009156 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	f107 0208 	add.w	r2, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	701a      	strb	r2, [r3, #0]
      break;
 8008f6e:	e0f2      	b.n	8009156 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	f200 80ac 	bhi.w	80090d4 <USBD_GetDescriptor+0x258>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <USBD_GetDescriptor+0x108>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008f9d 	.word	0x08008f9d
 8008f88:	08008fd1 	.word	0x08008fd1
 8008f8c:	08009005 	.word	0x08009005
 8008f90:	08009039 	.word	0x08009039
 8008f94:	0800906d 	.word	0x0800906d
 8008f98:	080090a1 	.word	0x080090a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	7c12      	ldrb	r2, [r2, #16]
 8008fb4:	f107 0108 	add.w	r1, r7, #8
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fbe:	e091      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 facb 	bl	800955e <USBD_CtlError>
            err++;
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fce:	e089      	b.n	80090e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	7c12      	ldrb	r2, [r2, #16]
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff2:	e077      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fab1 	bl	800955e <USBD_CtlError>
            err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
          break;
 8009002:	e06f      	b.n	80090e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7c12      	ldrb	r2, [r2, #16]
 800901c:	f107 0108 	add.w	r1, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009026:	e05d      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa97 	bl	800955e <USBD_CtlError>
            err++;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	3301      	adds	r3, #1
 8009034:	72fb      	strb	r3, [r7, #11]
          break;
 8009036:	e055      	b.n	80090e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	7c12      	ldrb	r2, [r2, #16]
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905a:	e043      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa7d 	bl	800955e <USBD_CtlError>
            err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
          break;
 800906a:	e03b      	b.n	80090e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800908e:	e029      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa63 	bl	800955e <USBD_CtlError>
            err++;
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	3301      	adds	r3, #1
 800909c:	72fb      	strb	r3, [r7, #11]
          break;
 800909e:	e021      	b.n	80090e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	7c12      	ldrb	r2, [r2, #16]
 80090b8:	f107 0108 	add.w	r1, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c2:	e00f      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa49 	bl	800955e <USBD_CtlError>
            err++;
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	3301      	adds	r3, #1
 80090d0:	72fb      	strb	r3, [r7, #11]
          break;
 80090d2:	e007      	b.n	80090e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa41 	bl	800955e <USBD_CtlError>
          err++;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	3301      	adds	r3, #1
 80090e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090e2:	bf00      	nop
      }
      break;
 80090e4:	e037      	b.n	8009156 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7c1b      	ldrb	r3, [r3, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	f107 0208 	add.w	r2, r7, #8
 80090fa:	4610      	mov	r0, r2
 80090fc:	4798      	blx	r3
 80090fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009100:	e029      	b.n	8009156 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa2a 	bl	800955e <USBD_CtlError>
        err++;
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	3301      	adds	r3, #1
 800910e:	72fb      	strb	r3, [r7, #11]
      break;
 8009110:	e021      	b.n	8009156 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7c1b      	ldrb	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10d      	bne.n	8009136 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	f107 0208 	add.w	r2, r7, #8
 8009126:	4610      	mov	r0, r2
 8009128:	4798      	blx	r3
 800912a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3301      	adds	r3, #1
 8009130:	2207      	movs	r2, #7
 8009132:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009134:	e00f      	b.n	8009156 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fa10 	bl	800955e <USBD_CtlError>
        err++;
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	3301      	adds	r3, #1
 8009142:	72fb      	strb	r3, [r7, #11]
      break;
 8009144:	e007      	b.n	8009156 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fa08 	bl	800955e <USBD_CtlError>
      err++;
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	3301      	adds	r3, #1
 8009152:	72fb      	strb	r3, [r7, #11]
      break;
 8009154:	bf00      	nop
  }

  if (err != 0U)
 8009156:	7afb      	ldrb	r3, [r7, #11]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11e      	bne.n	800919a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	88db      	ldrh	r3, [r3, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d016      	beq.n	8009192 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009164:	893b      	ldrh	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	88da      	ldrh	r2, [r3, #6]
 800916e:	893b      	ldrh	r3, [r7, #8]
 8009170:	4293      	cmp	r3, r2
 8009172:	bf28      	it	cs
 8009174:	4613      	movcs	r3, r2
 8009176:	b29b      	uxth	r3, r3
 8009178:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800917a:	893b      	ldrh	r3, [r7, #8]
 800917c:	461a      	mov	r2, r3
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa5d 	bl	8009640 <USBD_CtlSendData>
 8009186:	e009      	b.n	800919c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f9e7 	bl	800955e <USBD_CtlError>
 8009190:	e004      	b.n	800919c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 faae 	bl	80096f4 <USBD_CtlSendStatus>
 8009198:	e000      	b.n	800919c <USBD_GetDescriptor+0x320>
    return;
 800919a:	bf00      	nop
  }
}
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop

080091a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	889b      	ldrh	r3, [r3, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d131      	bne.n	800921a <USBD_SetAddress+0x76>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	88db      	ldrh	r3, [r3, #6]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d12d      	bne.n	800921a <USBD_SetAddress+0x76>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	2b7f      	cmp	r3, #127	; 0x7f
 80091c4:	d829      	bhi.n	800921a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d104      	bne.n	80091e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f9bc 	bl	800955e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e6:	e01d      	b.n	8009224 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f003 fd63 	bl	800ccc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa7a 	bl	80096f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920e:	e009      	b.n	8009224 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009218:	e004      	b.n	8009224 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f99e 	bl	800955e <USBD_CtlError>
  }
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	4b4e      	ldr	r3, [pc, #312]	; (800937c <USBD_SetConfig+0x150>)
 8009242:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009244:	4b4d      	ldr	r3, [pc, #308]	; (800937c <USBD_SetConfig+0x150>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d905      	bls.n	8009258 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f985 	bl	800955e <USBD_CtlError>
    return USBD_FAIL;
 8009254:	2303      	movs	r3, #3
 8009256:	e08c      	b.n	8009372 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d002      	beq.n	800926a <USBD_SetConfig+0x3e>
 8009264:	2b03      	cmp	r3, #3
 8009266:	d029      	beq.n	80092bc <USBD_SetConfig+0x90>
 8009268:	e075      	b.n	8009356 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800926a:	4b44      	ldr	r3, [pc, #272]	; (800937c <USBD_SetConfig+0x150>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d020      	beq.n	80092b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009272:	4b42      	ldr	r3, [pc, #264]	; (800937c <USBD_SetConfig+0x150>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800927c:	4b3f      	ldr	r3, [pc, #252]	; (800937c <USBD_SetConfig+0x150>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fe ffbd 	bl	8008202 <USBD_SetClassConfig>
 8009288:	4603      	mov	r3, r0
 800928a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d008      	beq.n	80092a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f962 	bl	800955e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092a2:	e065      	b.n	8009370 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa25 	bl	80096f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2203      	movs	r2, #3
 80092ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092b2:	e05d      	b.n	8009370 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fa1d 	bl	80096f4 <USBD_CtlSendStatus>
      break;
 80092ba:	e059      	b.n	8009370 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092bc:	4b2f      	ldr	r3, [pc, #188]	; (800937c <USBD_SetConfig+0x150>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d112      	bne.n	80092ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092cc:	4b2b      	ldr	r3, [pc, #172]	; (800937c <USBD_SetConfig+0x150>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092d6:	4b29      	ldr	r3, [pc, #164]	; (800937c <USBD_SetConfig+0x150>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7fe ffac 	bl	800823a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa06 	bl	80096f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092e8:	e042      	b.n	8009370 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092ea:	4b24      	ldr	r3, [pc, #144]	; (800937c <USBD_SetConfig+0x150>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d02a      	beq.n	800934e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7fe ff9a 	bl	800823a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009306:	4b1d      	ldr	r3, [pc, #116]	; (800937c <USBD_SetConfig+0x150>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009310:	4b1a      	ldr	r3, [pc, #104]	; (800937c <USBD_SetConfig+0x150>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7fe ff73 	bl	8008202 <USBD_SetClassConfig>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00f      	beq.n	8009346 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f918 	bl	800955e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7fe ff7f 	bl	800823a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009344:	e014      	b.n	8009370 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f9d4 	bl	80096f4 <USBD_CtlSendStatus>
      break;
 800934c:	e010      	b.n	8009370 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f9d0 	bl	80096f4 <USBD_CtlSendStatus>
      break;
 8009354:	e00c      	b.n	8009370 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f900 	bl	800955e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800935e:	4b07      	ldr	r3, [pc, #28]	; (800937c <USBD_SetConfig+0x150>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fe ff68 	bl	800823a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800936a:	2303      	movs	r3, #3
 800936c:	73fb      	strb	r3, [r7, #15]
      break;
 800936e:	bf00      	nop
  }

  return ret;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000ecc 	.word	0x20000ecc

08009380 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	88db      	ldrh	r3, [r3, #6]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d004      	beq.n	800939c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f8e2 	bl	800955e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800939a:	e023      	b.n	80093e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	dc02      	bgt.n	80093ae <USBD_GetConfig+0x2e>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc03      	bgt.n	80093b4 <USBD_GetConfig+0x34>
 80093ac:	e015      	b.n	80093da <USBD_GetConfig+0x5a>
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d00b      	beq.n	80093ca <USBD_GetConfig+0x4a>
 80093b2:	e012      	b.n	80093da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3308      	adds	r3, #8
 80093be:	2201      	movs	r2, #1
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f93c 	bl	8009640 <USBD_CtlSendData>
        break;
 80093c8:	e00c      	b.n	80093e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3304      	adds	r3, #4
 80093ce:	2201      	movs	r2, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f934 	bl	8009640 <USBD_CtlSendData>
        break;
 80093d8:	e004      	b.n	80093e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8be 	bl	800955e <USBD_CtlError>
        break;
 80093e2:	bf00      	nop
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	2b02      	cmp	r3, #2
 8009402:	d81e      	bhi.n	8009442 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	88db      	ldrh	r3, [r3, #6]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d004      	beq.n	8009416 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f8a5 	bl	800955e <USBD_CtlError>
        break;
 8009414:	e01a      	b.n	800944c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f043 0202 	orr.w	r2, r3, #2
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	330c      	adds	r3, #12
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f900 	bl	8009640 <USBD_CtlSendData>
      break;
 8009440:	e004      	b.n	800944c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f88a 	bl	800955e <USBD_CtlError>
      break;
 800944a:	bf00      	nop
  }
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	885b      	ldrh	r3, [r3, #2]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d107      	bne.n	8009476 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f940 	bl	80096f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009474:	e013      	b.n	800949e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d10b      	bne.n	8009496 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	889b      	ldrh	r3, [r3, #4]
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	b29b      	uxth	r3, r3
 8009486:	b2da      	uxtb	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f930 	bl	80096f4 <USBD_CtlSendStatus>
}
 8009494:	e003      	b.n	800949e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f860 	bl	800955e <USBD_CtlError>
}
 800949e:	bf00      	nop
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d80b      	bhi.n	80094d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	885b      	ldrh	r3, [r3, #2]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d10c      	bne.n	80094e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f910 	bl	80096f4 <USBD_CtlSendStatus>
      }
      break;
 80094d4:	e004      	b.n	80094e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f840 	bl	800955e <USBD_CtlError>
      break;
 80094de:	e000      	b.n	80094e2 <USBD_ClrFeature+0x3c>
      break;
 80094e0:	bf00      	nop
  }
}
 80094e2:	bf00      	nop
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3301      	adds	r3, #1
 8009504:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	781a      	ldrb	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7ff fa17 	bl	8008948 <SWAPBYTE>
 800951a:	4603      	mov	r3, r0
 800951c:	461a      	mov	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3301      	adds	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7ff fa0a 	bl	8008948 <SWAPBYTE>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff f9fd 	bl	8008948 <SWAPBYTE>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	80da      	strh	r2, [r3, #6]
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009568:	2180      	movs	r1, #128	; 0x80
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f003 fb3e 	bl	800cbec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009570:	2100      	movs	r1, #0
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f003 fb3a 	bl	800cbec <USBD_LL_StallEP>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d036      	beq.n	8009604 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800959a:	6938      	ldr	r0, [r7, #16]
 800959c:	f000 f836 	bl	800960c <USBD_GetLen>
 80095a0:	4603      	mov	r3, r0
 80095a2:	3301      	adds	r3, #1
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	4413      	add	r3, r2
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	7812      	ldrb	r2, [r2, #0]
 80095b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	3301      	adds	r3, #1
 80095be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	4413      	add	r3, r2
 80095c6:	2203      	movs	r2, #3
 80095c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	3301      	adds	r3, #1
 80095ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095d0:	e013      	b.n	80095fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	4413      	add	r3, r2
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	7812      	ldrb	r2, [r2, #0]
 80095dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3301      	adds	r3, #1
 80095e2:	613b      	str	r3, [r7, #16]
    idx++;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	3301      	adds	r3, #1
 80095e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	4413      	add	r3, r2
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	3301      	adds	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e7      	bne.n	80095d2 <USBD_GetString+0x52>
 8009602:	e000      	b.n	8009606 <USBD_GetString+0x86>
    return;
 8009604:	bf00      	nop
  }
}
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800961c:	e005      	b.n	800962a <USBD_GetLen+0x1e>
  {
    len++;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	3301      	adds	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3301      	adds	r3, #1
 8009628:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f5      	bne.n	800961e <USBD_GetLen+0x12>
  }

  return len;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2202      	movs	r2, #2
 8009650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	2100      	movs	r1, #0
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f003 fb49 	bl	800ccfe <USBD_LL_Transmit>

  return USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	2100      	movs	r1, #0
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f003 fb38 	bl	800ccfe <USBD_LL_Transmit>

  return USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2203      	movs	r2, #3
 80096a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	2100      	movs	r1, #0
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f003 fb3c 	bl	800cd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	2100      	movs	r1, #0
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f003 fb2b 	bl	800cd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2204      	movs	r2, #4
 8009700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009704:	2300      	movs	r3, #0
 8009706:	2200      	movs	r2, #0
 8009708:	2100      	movs	r1, #0
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f003 faf7 	bl	800ccfe <USBD_LL_Transmit>

  return USBD_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2205      	movs	r2, #5
 8009726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800972a:	2300      	movs	r3, #0
 800972c:	2200      	movs	r2, #0
 800972e:	2100      	movs	r1, #0
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f003 fb05 	bl	800cd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009744:	bf00      	nop
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
	...

08009750 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009756:	f3ef 8305 	mrs	r3, IPSR
 800975a:	60bb      	str	r3, [r7, #8]
  return(result);
 800975c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10f      	bne.n	8009782 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009762:	f3ef 8310 	mrs	r3, PRIMASK
 8009766:	607b      	str	r3, [r7, #4]
  return(result);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d105      	bne.n	800977a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800976e:	f3ef 8311 	mrs	r3, BASEPRI
 8009772:	603b      	str	r3, [r7, #0]
  return(result);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d007      	beq.n	800978a <osKernelInitialize+0x3a>
 800977a:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <osKernelInitialize+0x64>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d103      	bne.n	800978a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009782:	f06f 0305 	mvn.w	r3, #5
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e00c      	b.n	80097a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800978a:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <osKernelInitialize+0x64>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009792:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <osKernelInitialize+0x64>)
 8009794:	2201      	movs	r2, #1
 8009796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e002      	b.n	80097a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800979e:	f04f 33ff 	mov.w	r3, #4294967295
 80097a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000ed0 	.word	0x20000ed0

080097b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097be:	f3ef 8305 	mrs	r3, IPSR
 80097c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80097c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10f      	bne.n	80097ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ca:	f3ef 8310 	mrs	r3, PRIMASK
 80097ce:	607b      	str	r3, [r7, #4]
  return(result);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097d6:	f3ef 8311 	mrs	r3, BASEPRI
 80097da:	603b      	str	r3, [r7, #0]
  return(result);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d007      	beq.n	80097f2 <osKernelStart+0x3a>
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <osKernelStart+0x68>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d103      	bne.n	80097f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80097ea:	f06f 0305 	mvn.w	r3, #5
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	e010      	b.n	8009814 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097f2:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <osKernelStart+0x68>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d109      	bne.n	800980e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097fa:	f7ff ffa1 	bl	8009740 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <osKernelStart+0x68>)
 8009800:	2202      	movs	r2, #2
 8009802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009804:	f001 f8b4 	bl	800a970 <vTaskStartScheduler>
      stat = osOK;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e002      	b.n	8009814 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009814:	68fb      	ldr	r3, [r7, #12]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000ed0 	.word	0x20000ed0

08009824 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b090      	sub	sp, #64	; 0x40
 8009828:	af04      	add	r7, sp, #16
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009834:	f3ef 8305 	mrs	r3, IPSR
 8009838:	61fb      	str	r3, [r7, #28]
  return(result);
 800983a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800983c:	2b00      	cmp	r3, #0
 800983e:	f040 808f 	bne.w	8009960 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009842:	f3ef 8310 	mrs	r3, PRIMASK
 8009846:	61bb      	str	r3, [r7, #24]
  return(result);
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800984e:	f3ef 8311 	mrs	r3, BASEPRI
 8009852:	617b      	str	r3, [r7, #20]
  return(result);
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <osThreadNew+0x3e>
 800985a:	4b44      	ldr	r3, [pc, #272]	; (800996c <osThreadNew+0x148>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b02      	cmp	r3, #2
 8009860:	d07e      	beq.n	8009960 <osThreadNew+0x13c>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d07b      	beq.n	8009960 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009868:	2380      	movs	r3, #128	; 0x80
 800986a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800986c:	2318      	movs	r3, #24
 800986e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009874:	f04f 33ff 	mov.w	r3, #4294967295
 8009878:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d045      	beq.n	800990c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <osThreadNew+0x6a>
        name = attr->name;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d008      	beq.n	80098b4 <osThreadNew+0x90>
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	2b38      	cmp	r3, #56	; 0x38
 80098a6:	d805      	bhi.n	80098b4 <osThreadNew+0x90>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <osThreadNew+0x94>
        return (NULL);
 80098b4:	2300      	movs	r3, #0
 80098b6:	e054      	b.n	8009962 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	089b      	lsrs	r3, r3, #2
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00e      	beq.n	80098ee <osThreadNew+0xca>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b5b      	cmp	r3, #91	; 0x5b
 80098d6:	d90a      	bls.n	80098ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d006      	beq.n	80098ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <osThreadNew+0xca>
        mem = 1;
 80098e8:	2301      	movs	r3, #1
 80098ea:	623b      	str	r3, [r7, #32]
 80098ec:	e010      	b.n	8009910 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10c      	bne.n	8009910 <osThreadNew+0xec>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d108      	bne.n	8009910 <osThreadNew+0xec>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <osThreadNew+0xec>
          mem = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	623b      	str	r3, [r7, #32]
 800990a:	e001      	b.n	8009910 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d110      	bne.n	8009938 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800991e:	9202      	str	r2, [sp, #8]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 fe3f 	bl	800a5b0 <xTaskCreateStatic>
 8009932:	4603      	mov	r3, r0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e013      	b.n	8009960 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d110      	bne.n	8009960 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	b29a      	uxth	r2, r3
 8009942:	f107 0310 	add.w	r3, r7, #16
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fe90 	bl	800a676 <xTaskCreate>
 8009956:	4603      	mov	r3, r0
 8009958:	2b01      	cmp	r3, #1
 800995a:	d001      	beq.n	8009960 <osThreadNew+0x13c>
          hTask = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009960:	693b      	ldr	r3, [r7, #16]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3730      	adds	r7, #48	; 0x30
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000ed0 	.word	0x20000ed0

08009970 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009978:	f3ef 8305 	mrs	r3, IPSR
 800997c:	613b      	str	r3, [r7, #16]
  return(result);
 800997e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10f      	bne.n	80099a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009984:	f3ef 8310 	mrs	r3, PRIMASK
 8009988:	60fb      	str	r3, [r7, #12]
  return(result);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d105      	bne.n	800999c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009990:	f3ef 8311 	mrs	r3, BASEPRI
 8009994:	60bb      	str	r3, [r7, #8]
  return(result);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d007      	beq.n	80099ac <osDelay+0x3c>
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <osDelay+0x58>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d103      	bne.n	80099ac <osDelay+0x3c>
    stat = osErrorISR;
 80099a4:	f06f 0305 	mvn.w	r3, #5
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e007      	b.n	80099bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 ffa4 	bl	800a904 <vTaskDelay>
    }
  }

  return (stat);
 80099bc:	697b      	ldr	r3, [r7, #20]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000ed0 	.word	0x20000ed0

080099cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4a07      	ldr	r2, [pc, #28]	; (80099f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80099dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4a06      	ldr	r2, [pc, #24]	; (80099fc <vApplicationGetIdleTaskMemory+0x30>)
 80099e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2280      	movs	r2, #128	; 0x80
 80099e8:	601a      	str	r2, [r3, #0]
}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	20000ed4 	.word	0x20000ed4
 80099fc:	20000f30 	.word	0x20000f30

08009a00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4a07      	ldr	r2, [pc, #28]	; (8009a2c <vApplicationGetTimerTaskMemory+0x2c>)
 8009a10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4a06      	ldr	r2, [pc, #24]	; (8009a30 <vApplicationGetTimerTaskMemory+0x30>)
 8009a16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a1e:	601a      	str	r2, [r3, #0]
}
 8009a20:	bf00      	nop
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	20001130 	.word	0x20001130
 8009a30:	2000118c 	.word	0x2000118c

08009a34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f103 0208 	add.w	r2, r3, #8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f103 0208 	add.w	r2, r3, #8
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f103 0208 	add.w	r2, r3, #8
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a82:	bf00      	nop
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b085      	sub	sp, #20
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	601a      	str	r2, [r3, #0]
}
 8009aca:	bf00      	nop
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aec:	d103      	bne.n	8009af6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e00c      	b.n	8009b10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3308      	adds	r3, #8
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	e002      	b.n	8009b04 <vListInsert+0x2e>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d2f6      	bcs.n	8009afe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6892      	ldr	r2, [r2, #8]
 8009b5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6852      	ldr	r2, [r2, #4]
 8009b68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d103      	bne.n	8009b7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	1e5a      	subs	r2, r3, #1
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10c      	bne.n	8009bca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	b672      	cpsid	i
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	b662      	cpsie	i
 8009bc4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009bca:	f002 f8c7 	bl	800bd5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bda:	fb01 f303 	mul.w	r3, r1, r3
 8009bde:	441a      	add	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	68f9      	ldr	r1, [r7, #12]
 8009bfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c00:	fb01 f303 	mul.w	r3, r1, r3
 8009c04:	441a      	add	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	22ff      	movs	r2, #255	; 0xff
 8009c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	22ff      	movs	r2, #255	; 0xff
 8009c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d114      	bne.n	8009c4a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01a      	beq.n	8009c5e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3310      	adds	r3, #16
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 f949 	bl	800aec4 <xTaskRemoveFromEventList>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d012      	beq.n	8009c5e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c38:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <xQueueGenericReset+0xd0>)
 8009c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	e009      	b.n	8009c5e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3310      	adds	r3, #16
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fef0 	bl	8009a34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3324      	adds	r3, #36	; 0x24
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff feeb 	bl	8009a34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c5e:	f002 f8b1 	bl	800bdc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c62:	2301      	movs	r3, #1
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08e      	sub	sp, #56	; 0x38
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10c      	bne.n	8009c9e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	b672      	cpsid	i
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	b662      	cpsie	i
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10c      	bne.n	8009cbe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	b672      	cpsid	i
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	b662      	cpsie	i
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <xQueueGenericCreateStatic+0x5a>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <xQueueGenericCreateStatic+0x5e>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <xQueueGenericCreateStatic+0x60>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10c      	bne.n	8009cee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	b672      	cpsid	i
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	b662      	cpsie	i
 8009ce8:	623b      	str	r3, [r7, #32]
}
 8009cea:	bf00      	nop
 8009cec:	e7fe      	b.n	8009cec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <xQueueGenericCreateStatic+0x8a>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <xQueueGenericCreateStatic+0x8e>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <xQueueGenericCreateStatic+0x90>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10c      	bne.n	8009d1e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	b672      	cpsid	i
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	b662      	cpsie	i
 8009d18:	61fb      	str	r3, [r7, #28]
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d1e:	2350      	movs	r3, #80	; 0x50
 8009d20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b50      	cmp	r3, #80	; 0x50
 8009d26:	d00c      	beq.n	8009d42 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	b672      	cpsid	i
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	b662      	cpsie	i
 8009d3c:	61bb      	str	r3, [r7, #24]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00d      	beq.n	8009d6a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	68b9      	ldr	r1, [r7, #8]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 f805 	bl	8009d74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3730      	adds	r7, #48	; 0x30
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d103      	bne.n	8009d90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	e002      	b.n	8009d96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009da2:	2101      	movs	r1, #1
 8009da4:	69b8      	ldr	r0, [r7, #24]
 8009da6:	f7ff fef9 	bl	8009b9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	78fa      	ldrb	r2, [r7, #3]
 8009dae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08e      	sub	sp, #56	; 0x38
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10c      	bne.n	8009df2 <xQueueGenericSend+0x36>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	b672      	cpsid	i
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	b662      	cpsie	i
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dee:	bf00      	nop
 8009df0:	e7fe      	b.n	8009df0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <xQueueGenericSend+0x44>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <xQueueGenericSend+0x48>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e000      	b.n	8009e06 <xQueueGenericSend+0x4a>
 8009e04:	2300      	movs	r3, #0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10c      	bne.n	8009e24 <xQueueGenericSend+0x68>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	b672      	cpsid	i
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	b662      	cpsie	i
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d103      	bne.n	8009e32 <xQueueGenericSend+0x76>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <xQueueGenericSend+0x7a>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueGenericSend+0x7c>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10c      	bne.n	8009e56 <xQueueGenericSend+0x9a>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	b672      	cpsid	i
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	b662      	cpsie	i
 8009e50:	623b      	str	r3, [r7, #32]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e56:	f001 fa33 	bl	800b2c0 <xTaskGetSchedulerState>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <xQueueGenericSend+0xaa>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <xQueueGenericSend+0xae>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <xQueueGenericSend+0xb0>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10c      	bne.n	8009e8a <xQueueGenericSend+0xce>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	b672      	cpsid	i
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	b662      	cpsie	i
 8009e84:	61fb      	str	r3, [r7, #28]
}
 8009e86:	bf00      	nop
 8009e88:	e7fe      	b.n	8009e88 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e8a:	f001 ff67 	bl	800bd5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d302      	bcc.n	8009ea0 <xQueueGenericSend+0xe4>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d129      	bne.n	8009ef4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ea6:	f000 fa15 	bl	800a2d4 <prvCopyDataToQueue>
 8009eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d010      	beq.n	8009ed6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 f803 	bl	800aec4 <xTaskRemoveFromEventList>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d013      	beq.n	8009eec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ec4:	4b3f      	ldr	r3, [pc, #252]	; (8009fc4 <xQueueGenericSend+0x208>)
 8009ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	e00a      	b.n	8009eec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d007      	beq.n	8009eec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009edc:	4b39      	ldr	r3, [pc, #228]	; (8009fc4 <xQueueGenericSend+0x208>)
 8009ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009eec:	f001 ff6a 	bl	800bdc4 <vPortExitCritical>
				return pdPASS;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e063      	b.n	8009fbc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d103      	bne.n	8009f02 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009efa:	f001 ff63 	bl	800bdc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e05c      	b.n	8009fbc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f08:	f107 0314 	add.w	r3, r7, #20
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 f83f 	bl	800af90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f12:	2301      	movs	r3, #1
 8009f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f16:	f001 ff55 	bl	800bdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f1a:	f000 fd93 	bl	800aa44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f1e:	f001 ff1d 	bl	800bd5c <vPortEnterCritical>
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f28:	b25b      	sxtb	r3, r3
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d103      	bne.n	8009f38 <xQueueGenericSend+0x17c>
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f3e:	b25b      	sxtb	r3, r3
 8009f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f44:	d103      	bne.n	8009f4e <xQueueGenericSend+0x192>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f4e:	f001 ff39 	bl	800bdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f52:	1d3a      	adds	r2, r7, #4
 8009f54:	f107 0314 	add.w	r3, r7, #20
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f82e 	bl	800afbc <xTaskCheckForTimeOut>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d124      	bne.n	8009fb0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f68:	f000 faac 	bl	800a4c4 <prvIsQueueFull>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d018      	beq.n	8009fa4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	3310      	adds	r3, #16
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 ff4e 	bl	800ae1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f82:	f000 fa37 	bl	800a3f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f86:	f000 fd6b 	bl	800aa60 <xTaskResumeAll>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f47f af7c 	bne.w	8009e8a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009f92:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <xQueueGenericSend+0x208>)
 8009f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	e772      	b.n	8009e8a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa6:	f000 fa25 	bl	800a3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009faa:	f000 fd59 	bl	800aa60 <xTaskResumeAll>
 8009fae:	e76c      	b.n	8009e8a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb2:	f000 fa1f 	bl	800a3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fb6:	f000 fd53 	bl	800aa60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3738      	adds	r7, #56	; 0x38
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	e000ed04 	.word	0xe000ed04

08009fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08e      	sub	sp, #56	; 0x38
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10c      	bne.n	8009ffa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d103      	bne.n	800a008 <xQueueGenericSendFromISR+0x40>
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <xQueueGenericSendFromISR+0x44>
 800a008:	2301      	movs	r3, #1
 800a00a:	e000      	b.n	800a00e <xQueueGenericSendFromISR+0x46>
 800a00c:	2300      	movs	r3, #0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10c      	bne.n	800a02c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	b672      	cpsid	i
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	b662      	cpsie	i
 800a026:	623b      	str	r3, [r7, #32]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d103      	bne.n	800a03a <xQueueGenericSendFromISR+0x72>
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <xQueueGenericSendFromISR+0x76>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <xQueueGenericSendFromISR+0x78>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10c      	bne.n	800a05e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	b672      	cpsid	i
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	b662      	cpsie	i
 800a058:	61fb      	str	r3, [r7, #28]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a05e:	f001 ff65 	bl	800bf2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a062:	f3ef 8211 	mrs	r2, BASEPRI
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	b672      	cpsid	i
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	b662      	cpsie	i
 800a07a:	61ba      	str	r2, [r7, #24]
 800a07c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a07e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <xQueueGenericSendFromISR+0xcc>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d12c      	bne.n	800a0ee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0a4:	f000 f916 	bl	800a2d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d112      	bne.n	800a0d8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d016      	beq.n	800a0e8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	3324      	adds	r3, #36	; 0x24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 ff00 	bl	800aec4 <xTaskRemoveFromEventList>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00e      	beq.n	800a0e8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e007      	b.n	800a0e8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0dc:	3301      	adds	r3, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	b25a      	sxtb	r2, r3
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a0ec:	e001      	b.n	800a0f2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a100:	4618      	mov	r0, r3
 800a102:	3738      	adds	r7, #56	; 0x38
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08c      	sub	sp, #48	; 0x30
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a114:	2300      	movs	r3, #0
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10c      	bne.n	800a13c <xQueueReceive+0x34>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	b672      	cpsid	i
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	b662      	cpsie	i
 800a136:	623b      	str	r3, [r7, #32]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <xQueueReceive+0x42>
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <xQueueReceive+0x46>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <xQueueReceive+0x48>
 800a14e:	2300      	movs	r3, #0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10c      	bne.n	800a16e <xQueueReceive+0x66>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a158:	b672      	cpsid	i
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	b662      	cpsie	i
 800a168:	61fb      	str	r3, [r7, #28]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a16e:	f001 f8a7 	bl	800b2c0 <xTaskGetSchedulerState>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <xQueueReceive+0x76>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <xQueueReceive+0x7a>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueReceive+0x7c>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10c      	bne.n	800a1a2 <xQueueReceive+0x9a>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	b672      	cpsid	i
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	b662      	cpsie	i
 800a19c:	61bb      	str	r3, [r7, #24]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1a2:	f001 fddb 	bl	800bd5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01f      	beq.n	800a1f2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b6:	f000 f8f7 	bl	800a3a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	1e5a      	subs	r2, r3, #1
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00f      	beq.n	800a1ea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	3310      	adds	r3, #16
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fe78 	bl	800aec4 <xTaskRemoveFromEventList>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d007      	beq.n	800a1ea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1da:	4b3d      	ldr	r3, [pc, #244]	; (800a2d0 <xQueueReceive+0x1c8>)
 800a1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1ea:	f001 fdeb 	bl	800bdc4 <vPortExitCritical>
				return pdPASS;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e069      	b.n	800a2c6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d103      	bne.n	800a200 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f8:	f001 fde4 	bl	800bdc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	e062      	b.n	800a2c6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	2b00      	cmp	r3, #0
 800a204:	d106      	bne.n	800a214 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a206:	f107 0310 	add.w	r3, r7, #16
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fec0 	bl	800af90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a214:	f001 fdd6 	bl	800bdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a218:	f000 fc14 	bl	800aa44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a21c:	f001 fd9e 	bl	800bd5c <vPortEnterCritical>
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a226:	b25b      	sxtb	r3, r3
 800a228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22c:	d103      	bne.n	800a236 <xQueueReceive+0x12e>
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a23c:	b25b      	sxtb	r3, r3
 800a23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a242:	d103      	bne.n	800a24c <xQueueReceive+0x144>
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a24c:	f001 fdba 	bl	800bdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a250:	1d3a      	adds	r2, r7, #4
 800a252:	f107 0310 	add.w	r3, r7, #16
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 feaf 	bl	800afbc <xTaskCheckForTimeOut>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d123      	bne.n	800a2ac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a266:	f000 f917 	bl	800a498 <prvIsQueueEmpty>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d017      	beq.n	800a2a0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	3324      	adds	r3, #36	; 0x24
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fdcf 	bl	800ae1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a27e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a280:	f000 f8b8 	bl	800a3f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a284:	f000 fbec 	bl	800aa60 <xTaskResumeAll>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d189      	bne.n	800a1a2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <xQueueReceive+0x1c8>)
 800a290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	e780      	b.n	800a1a2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a2:	f000 f8a7 	bl	800a3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2a6:	f000 fbdb 	bl	800aa60 <xTaskResumeAll>
 800a2aa:	e77a      	b.n	800a1a2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ae:	f000 f8a1 	bl	800a3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2b2:	f000 fbd5 	bl	800aa60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b8:	f000 f8ee 	bl	800a498 <prvIsQueueEmpty>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f43f af6f 	beq.w	800a1a2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3730      	adds	r7, #48	; 0x30
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	e000ed04 	.word	0xe000ed04

0800a2d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10d      	bne.n	800a30e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d14d      	bne.n	800a396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fffc 	bl	800b2fc <xTaskPriorityDisinherit>
 800a304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	609a      	str	r2, [r3, #8]
 800a30c:	e043      	b.n	800a396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d119      	bne.n	800a348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6858      	ldr	r0, [r3, #4]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	461a      	mov	r2, r3
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	f002 fdfc 	bl	800cf1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	441a      	add	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d32b      	bcc.n	800a396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	e026      	b.n	800a396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	68d8      	ldr	r0, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	461a      	mov	r2, r3
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	f002 fde2 	bl	800cf1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a360:	425b      	negs	r3, r3
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d207      	bcs.n	800a384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	425b      	negs	r3, r3
 800a37e:	441a      	add	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d105      	bne.n	800a396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	3b01      	subs	r3, #1
 800a394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a39e:	697b      	ldr	r3, [r7, #20]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d018      	beq.n	800a3ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	441a      	add	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68da      	ldr	r2, [r3, #12]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d303      	bcc.n	800a3dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68d9      	ldr	r1, [r3, #12]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6838      	ldr	r0, [r7, #0]
 800a3e8:	f002 fd98 	bl	800cf1c <memcpy>
	}
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3fc:	f001 fcae 	bl	800bd5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a408:	e011      	b.n	800a42e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d012      	beq.n	800a438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3324      	adds	r3, #36	; 0x24
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fd54 	bl	800aec4 <xTaskRemoveFromEventList>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a422:	f000 fe31 	bl	800b088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	3b01      	subs	r3, #1
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dce9      	bgt.n	800a40a <prvUnlockQueue+0x16>
 800a436:	e000      	b.n	800a43a <prvUnlockQueue+0x46>
					break;
 800a438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	22ff      	movs	r2, #255	; 0xff
 800a43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a442:	f001 fcbf 	bl	800bdc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a446:	f001 fc89 	bl	800bd5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a452:	e011      	b.n	800a478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d012      	beq.n	800a482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3310      	adds	r3, #16
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fd2f 	bl	800aec4 <xTaskRemoveFromEventList>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a46c:	f000 fe0c 	bl	800b088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	3b01      	subs	r3, #1
 800a474:	b2db      	uxtb	r3, r3
 800a476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dce9      	bgt.n	800a454 <prvUnlockQueue+0x60>
 800a480:	e000      	b.n	800a484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	22ff      	movs	r2, #255	; 0xff
 800a488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a48c:	f001 fc9a 	bl	800bdc4 <vPortExitCritical>
}
 800a490:	bf00      	nop
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4a0:	f001 fc5c 	bl	800bd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	e001      	b.n	800a4b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4b6:	f001 fc85 	bl	800bdc4 <vPortExitCritical>

	return xReturn;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4cc:	f001 fc46 	bl	800bd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d102      	bne.n	800a4e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e001      	b.n	800a4e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4e6:	f001 fc6d 	bl	800bdc4 <vPortExitCritical>

	return xReturn;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4fe:	2300      	movs	r3, #0
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	e014      	b.n	800a52e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a504:	4a0f      	ldr	r2, [pc, #60]	; (800a544 <vQueueAddToRegistry+0x50>)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10b      	bne.n	800a528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a510:	490c      	ldr	r1, [pc, #48]	; (800a544 <vQueueAddToRegistry+0x50>)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a51a:	4a0a      	ldr	r2, [pc, #40]	; (800a544 <vQueueAddToRegistry+0x50>)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	4413      	add	r3, r2
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a526:	e006      	b.n	800a536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b07      	cmp	r3, #7
 800a532:	d9e7      	bls.n	800a504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	2000158c 	.word	0x2000158c

0800a548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a558:	f001 fc00 	bl	800bd5c <vPortEnterCritical>
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a562:	b25b      	sxtb	r3, r3
 800a564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a568:	d103      	bne.n	800a572 <vQueueWaitForMessageRestricted+0x2a>
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a578:	b25b      	sxtb	r3, r3
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d103      	bne.n	800a588 <vQueueWaitForMessageRestricted+0x40>
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a588:	f001 fc1c 	bl	800bdc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	2b00      	cmp	r3, #0
 800a592:	d106      	bne.n	800a5a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	3324      	adds	r3, #36	; 0x24
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fc63 	bl	800ae68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a5a2:	6978      	ldr	r0, [r7, #20]
 800a5a4:	f7ff ff26 	bl	800a3f4 <prvUnlockQueue>
	}
 800a5a8:	bf00      	nop
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08e      	sub	sp, #56	; 0x38
 800a5b4:	af04      	add	r7, sp, #16
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10c      	bne.n	800a5de <xTaskCreateStatic+0x2e>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	b672      	cpsid	i
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	b662      	cpsie	i
 800a5d8:	623b      	str	r3, [r7, #32]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10c      	bne.n	800a5fe <xTaskCreateStatic+0x4e>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	b672      	cpsid	i
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	b662      	cpsie	i
 800a5f8:	61fb      	str	r3, [r7, #28]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5fe:	235c      	movs	r3, #92	; 0x5c
 800a600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b5c      	cmp	r3, #92	; 0x5c
 800a606:	d00c      	beq.n	800a622 <xTaskCreateStatic+0x72>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	b672      	cpsid	i
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	b662      	cpsie	i
 800a61c:	61bb      	str	r3, [r7, #24]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	2b00      	cmp	r3, #0
 800a628:	d01e      	beq.n	800a668 <xTaskCreateStatic+0xb8>
 800a62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01b      	beq.n	800a668 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	2202      	movs	r2, #2
 800a63e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a642:	2300      	movs	r3, #0
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	f107 0314 	add.w	r3, r7, #20
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f850 	bl	800a700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a662:	f000 f8df 	bl	800a824 <prvAddNewTaskToReadyList>
 800a666:	e001      	b.n	800a66c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a66c:	697b      	ldr	r3, [r7, #20]
	}
 800a66e:	4618      	mov	r0, r3
 800a670:	3728      	adds	r7, #40	; 0x28
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a676:	b580      	push	{r7, lr}
 800a678:	b08c      	sub	sp, #48	; 0x30
 800a67a:	af04      	add	r7, sp, #16
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	4613      	mov	r3, r2
 800a684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4618      	mov	r0, r3
 800a68c:	f001 fc92 	bl	800bfb4 <pvPortMalloc>
 800a690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00e      	beq.n	800a6b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a698:	205c      	movs	r0, #92	; 0x5c
 800a69a:	f001 fc8b 	bl	800bfb4 <pvPortMalloc>
 800a69e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a6ac:	e005      	b.n	800a6ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6ae:	6978      	ldr	r0, [r7, #20]
 800a6b0:	f001 fd4a 	bl	800c148 <vPortFree>
 800a6b4:	e001      	b.n	800a6ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d017      	beq.n	800a6f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6c8:	88fa      	ldrh	r2, [r7, #6]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9303      	str	r3, [sp, #12]
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	9302      	str	r3, [sp, #8]
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f000 f80e 	bl	800a700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6e4:	69f8      	ldr	r0, [r7, #28]
 800a6e6:	f000 f89d 	bl	800a824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	61bb      	str	r3, [r7, #24]
 800a6ee:	e002      	b.n	800a6f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3720      	adds	r7, #32
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	461a      	mov	r2, r3
 800a718:	21a5      	movs	r1, #165	; 0xa5
 800a71a:	f002 fc0d 	bl	800cf38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a728:	440b      	add	r3, r1
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00c      	beq.n	800a75c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	b672      	cpsid	i
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	b662      	cpsie	i
 800a756:	617b      	str	r3, [r7, #20]
}
 800a758:	bf00      	nop
 800a75a:	e7fe      	b.n	800a75a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01f      	beq.n	800a7a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
 800a766:	e012      	b.n	800a78e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	7819      	ldrb	r1, [r3, #0]
 800a770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	3334      	adds	r3, #52	; 0x34
 800a778:	460a      	mov	r2, r1
 800a77a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	4413      	add	r3, r2
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	3301      	adds	r3, #1
 800a78c:	61fb      	str	r3, [r7, #28]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b0f      	cmp	r3, #15
 800a792:	d9e9      	bls.n	800a768 <prvInitialiseNewTask+0x68>
 800a794:	e000      	b.n	800a798 <prvInitialiseNewTask+0x98>
			{
				break;
 800a796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7a0:	e003      	b.n	800a7aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2b37      	cmp	r3, #55	; 0x37
 800a7ae:	d901      	bls.n	800a7b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7b0:	2337      	movs	r3, #55	; 0x37
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff f952 	bl	8009a74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	3318      	adds	r3, #24
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff f94d 	bl	8009a74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	68f9      	ldr	r1, [r7, #12]
 800a802:	69b8      	ldr	r0, [r7, #24]
 800a804:	f001 f99c 	bl	800bb40 <pxPortInitialiseStack>
 800a808:	4602      	mov	r2, r0
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a81a:	bf00      	nop
 800a81c:	3720      	adds	r7, #32
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a82c:	f001 fa96 	bl	800bd5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a830:	4b2d      	ldr	r3, [pc, #180]	; (800a8e8 <prvAddNewTaskToReadyList+0xc4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3301      	adds	r3, #1
 800a836:	4a2c      	ldr	r2, [pc, #176]	; (800a8e8 <prvAddNewTaskToReadyList+0xc4>)
 800a838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a83a:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d109      	bne.n	800a856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a842:	4a2a      	ldr	r2, [pc, #168]	; (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a848:	4b27      	ldr	r3, [pc, #156]	; (800a8e8 <prvAddNewTaskToReadyList+0xc4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d110      	bne.n	800a872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a850:	f000 fc3e 	bl	800b0d0 <prvInitialiseTaskLists>
 800a854:	e00d      	b.n	800a872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a856:	4b26      	ldr	r3, [pc, #152]	; (800a8f0 <prvAddNewTaskToReadyList+0xcc>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d109      	bne.n	800a872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a85e:	4b23      	ldr	r3, [pc, #140]	; (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a868:	429a      	cmp	r2, r3
 800a86a:	d802      	bhi.n	800a872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a86c:	4a1f      	ldr	r2, [pc, #124]	; (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a872:	4b20      	ldr	r3, [pc, #128]	; (800a8f4 <prvAddNewTaskToReadyList+0xd0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	4a1e      	ldr	r2, [pc, #120]	; (800a8f4 <prvAddNewTaskToReadyList+0xd0>)
 800a87a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a87c:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <prvAddNewTaskToReadyList+0xd0>)
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4b1b      	ldr	r3, [pc, #108]	; (800a8f8 <prvAddNewTaskToReadyList+0xd4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d903      	bls.n	800a898 <prvAddNewTaskToReadyList+0x74>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a894:	4a18      	ldr	r2, [pc, #96]	; (800a8f8 <prvAddNewTaskToReadyList+0xd4>)
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4a15      	ldr	r2, [pc, #84]	; (800a8fc <prvAddNewTaskToReadyList+0xd8>)
 800a8a6:	441a      	add	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7ff f8ed 	bl	8009a8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8b4:	f001 fa86 	bl	800bdc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <prvAddNewTaskToReadyList+0xcc>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00e      	beq.n	800a8de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d207      	bcs.n	800a8de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	; (800a900 <prvAddNewTaskToReadyList+0xdc>)
 800a8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20001aa0 	.word	0x20001aa0
 800a8ec:	200015cc 	.word	0x200015cc
 800a8f0:	20001aac 	.word	0x20001aac
 800a8f4:	20001abc 	.word	0x20001abc
 800a8f8:	20001aa8 	.word	0x20001aa8
 800a8fc:	200015d0 	.word	0x200015d0
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d019      	beq.n	800a94a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a916:	4b14      	ldr	r3, [pc, #80]	; (800a968 <vTaskDelay+0x64>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <vTaskDelay+0x34>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	b672      	cpsid	i
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	b662      	cpsie	i
 800a932:	60bb      	str	r3, [r7, #8]
}
 800a934:	bf00      	nop
 800a936:	e7fe      	b.n	800a936 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a938:	f000 f884 	bl	800aa44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a93c:	2100      	movs	r1, #0
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fd4e 	bl	800b3e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a944:	f000 f88c 	bl	800aa60 <xTaskResumeAll>
 800a948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d107      	bne.n	800a960 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <vTaskDelay+0x68>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a960:	bf00      	nop
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20001ac8 	.word	0x20001ac8
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a97e:	463a      	mov	r2, r7
 800a980:	1d39      	adds	r1, r7, #4
 800a982:	f107 0308 	add.w	r3, r7, #8
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff f820 	bl	80099cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	9202      	str	r2, [sp, #8]
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	2300      	movs	r3, #0
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	2300      	movs	r3, #0
 800a99c:	460a      	mov	r2, r1
 800a99e:	4923      	ldr	r1, [pc, #140]	; (800aa2c <vTaskStartScheduler+0xbc>)
 800a9a0:	4823      	ldr	r0, [pc, #140]	; (800aa30 <vTaskStartScheduler+0xc0>)
 800a9a2:	f7ff fe05 	bl	800a5b0 <xTaskCreateStatic>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4a22      	ldr	r2, [pc, #136]	; (800aa34 <vTaskStartScheduler+0xc4>)
 800a9aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9ac:	4b21      	ldr	r3, [pc, #132]	; (800aa34 <vTaskStartScheduler+0xc4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	e001      	b.n	800a9be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d102      	bne.n	800a9ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9c4:	f000 fd60 	bl	800b488 <xTimerCreateTimerTask>
 800a9c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d118      	bne.n	800aa02 <vTaskStartScheduler+0x92>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	b672      	cpsid	i
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	b662      	cpsie	i
 800a9e4:	613b      	str	r3, [r7, #16]
}
 800a9e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9e8:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <vTaskStartScheduler+0xc8>)
 800a9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9f0:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <vTaskStartScheduler+0xcc>)
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9f6:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <vTaskStartScheduler+0xd0>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9fc:	f001 f930 	bl	800bc60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa00:	e010      	b.n	800aa24 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d10c      	bne.n	800aa24 <vTaskStartScheduler+0xb4>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	b672      	cpsid	i
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	b662      	cpsie	i
 800aa1e:	60fb      	str	r3, [r7, #12]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <vTaskStartScheduler+0xb2>
}
 800aa24:	bf00      	nop
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	0800d1d0 	.word	0x0800d1d0
 800aa30:	0800b0a1 	.word	0x0800b0a1
 800aa34:	20001ac4 	.word	0x20001ac4
 800aa38:	20001ac0 	.word	0x20001ac0
 800aa3c:	20001aac 	.word	0x20001aac
 800aa40:	20001aa4 	.word	0x20001aa4

0800aa44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <vTaskSuspendAll+0x18>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	4a03      	ldr	r2, [pc, #12]	; (800aa5c <vTaskSuspendAll+0x18>)
 800aa50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800aa52:	bf00      	nop
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	20001ac8 	.word	0x20001ac8

0800aa60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa6e:	4b43      	ldr	r3, [pc, #268]	; (800ab7c <xTaskResumeAll+0x11c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10c      	bne.n	800aa90 <xTaskResumeAll+0x30>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	b672      	cpsid	i
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	b662      	cpsie	i
 800aa8a:	603b      	str	r3, [r7, #0]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa90:	f001 f964 	bl	800bd5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa94:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <xTaskResumeAll+0x11c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	4a38      	ldr	r2, [pc, #224]	; (800ab7c <xTaskResumeAll+0x11c>)
 800aa9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa9e:	4b37      	ldr	r3, [pc, #220]	; (800ab7c <xTaskResumeAll+0x11c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d162      	bne.n	800ab6c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaa6:	4b36      	ldr	r3, [pc, #216]	; (800ab80 <xTaskResumeAll+0x120>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d05e      	beq.n	800ab6c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaae:	e02f      	b.n	800ab10 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab0:	4b34      	ldr	r3, [pc, #208]	; (800ab84 <xTaskResumeAll+0x124>)
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3318      	adds	r3, #24
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff f843 	bl	8009b48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff f83e 	bl	8009b48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad0:	4b2d      	ldr	r3, [pc, #180]	; (800ab88 <xTaskResumeAll+0x128>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d903      	bls.n	800aae0 <xTaskResumeAll+0x80>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	4a2a      	ldr	r2, [pc, #168]	; (800ab88 <xTaskResumeAll+0x128>)
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4a27      	ldr	r2, [pc, #156]	; (800ab8c <xTaskResumeAll+0x12c>)
 800aaee:	441a      	add	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	f7fe ffc9 	bl	8009a8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab00:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <xTaskResumeAll+0x130>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d302      	bcc.n	800ab10 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ab0a:	4b22      	ldr	r3, [pc, #136]	; (800ab94 <xTaskResumeAll+0x134>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab10:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <xTaskResumeAll+0x124>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1cb      	bne.n	800aab0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab1e:	f000 fbaf 	bl	800b280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab22:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <xTaskResumeAll+0x138>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d010      	beq.n	800ab50 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab2e:	f000 f859 	bl	800abe4 <xTaskIncrementTick>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ab38:	4b16      	ldr	r3, [pc, #88]	; (800ab94 <xTaskResumeAll+0x134>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f1      	bne.n	800ab2e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <xTaskResumeAll+0x138>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab50:	4b10      	ldr	r3, [pc, #64]	; (800ab94 <xTaskResumeAll+0x134>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d009      	beq.n	800ab6c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab5c:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <xTaskResumeAll+0x13c>)
 800ab5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab6c:	f001 f92a 	bl	800bdc4 <vPortExitCritical>

	return xAlreadyYielded;
 800ab70:	68bb      	ldr	r3, [r7, #8]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20001ac8 	.word	0x20001ac8
 800ab80:	20001aa0 	.word	0x20001aa0
 800ab84:	20001a60 	.word	0x20001a60
 800ab88:	20001aa8 	.word	0x20001aa8
 800ab8c:	200015d0 	.word	0x200015d0
 800ab90:	200015cc 	.word	0x200015cc
 800ab94:	20001ab4 	.word	0x20001ab4
 800ab98:	20001ab0 	.word	0x20001ab0
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aba6:	4b05      	ldr	r3, [pc, #20]	; (800abbc <xTaskGetTickCount+0x1c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abac:	687b      	ldr	r3, [r7, #4]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20001aa4 	.word	0x20001aa4

0800abc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abc6:	f001 f9b1 	bl	800bf2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800abca:	2300      	movs	r3, #0
 800abcc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800abce:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <xTaskGetTickCountFromISR+0x20>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abd4:	683b      	ldr	r3, [r7, #0]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20001aa4 	.word	0x20001aa4

0800abe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abea:	2300      	movs	r3, #0
 800abec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abee:	4b50      	ldr	r3, [pc, #320]	; (800ad30 <xTaskIncrementTick+0x14c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 808b 	bne.w	800ad0e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abf8:	4b4e      	ldr	r3, [pc, #312]	; (800ad34 <xTaskIncrementTick+0x150>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3301      	adds	r3, #1
 800abfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac00:	4a4c      	ldr	r2, [pc, #304]	; (800ad34 <xTaskIncrementTick+0x150>)
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d122      	bne.n	800ac52 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac0c:	4b4a      	ldr	r3, [pc, #296]	; (800ad38 <xTaskIncrementTick+0x154>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00c      	beq.n	800ac30 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1a:	b672      	cpsid	i
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	b662      	cpsie	i
 800ac2a:	603b      	str	r3, [r7, #0]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <xTaskIncrementTick+0x4a>
 800ac30:	4b41      	ldr	r3, [pc, #260]	; (800ad38 <xTaskIncrementTick+0x154>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	4b41      	ldr	r3, [pc, #260]	; (800ad3c <xTaskIncrementTick+0x158>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a3f      	ldr	r2, [pc, #252]	; (800ad38 <xTaskIncrementTick+0x154>)
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	4a3f      	ldr	r2, [pc, #252]	; (800ad3c <xTaskIncrementTick+0x158>)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	4b3e      	ldr	r3, [pc, #248]	; (800ad40 <xTaskIncrementTick+0x15c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	4a3d      	ldr	r2, [pc, #244]	; (800ad40 <xTaskIncrementTick+0x15c>)
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	f000 fb17 	bl	800b280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac52:	4b3c      	ldr	r3, [pc, #240]	; (800ad44 <xTaskIncrementTick+0x160>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d349      	bcc.n	800acf0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac5c:	4b36      	ldr	r3, [pc, #216]	; (800ad38 <xTaskIncrementTick+0x154>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d104      	bne.n	800ac70 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac66:	4b37      	ldr	r3, [pc, #220]	; (800ad44 <xTaskIncrementTick+0x160>)
 800ac68:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6c:	601a      	str	r2, [r3, #0]
					break;
 800ac6e:	e03f      	b.n	800acf0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac70:	4b31      	ldr	r3, [pc, #196]	; (800ad38 <xTaskIncrementTick+0x154>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d203      	bcs.n	800ac90 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac88:	4a2e      	ldr	r2, [pc, #184]	; (800ad44 <xTaskIncrementTick+0x160>)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac8e:	e02f      	b.n	800acf0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe ff57 	bl	8009b48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d004      	beq.n	800acac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	3318      	adds	r3, #24
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe ff4e 	bl	8009b48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb0:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <xTaskIncrementTick+0x164>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d903      	bls.n	800acc0 <xTaskIncrementTick+0xdc>
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4a22      	ldr	r2, [pc, #136]	; (800ad48 <xTaskIncrementTick+0x164>)
 800acbe:	6013      	str	r3, [r2, #0]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4a1f      	ldr	r2, [pc, #124]	; (800ad4c <xTaskIncrementTick+0x168>)
 800acce:	441a      	add	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4619      	mov	r1, r3
 800acd6:	4610      	mov	r0, r2
 800acd8:	f7fe fed9 	bl	8009a8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace0:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <xTaskIncrementTick+0x16c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d3b8      	bcc.n	800ac5c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800acea:	2301      	movs	r3, #1
 800acec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acee:	e7b5      	b.n	800ac5c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acf0:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <xTaskIncrementTick+0x16c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf6:	4915      	ldr	r1, [pc, #84]	; (800ad4c <xTaskIncrementTick+0x168>)
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d907      	bls.n	800ad18 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	e004      	b.n	800ad18 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad0e:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <xTaskIncrementTick+0x170>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3301      	adds	r3, #1
 800ad14:	4a0f      	ldr	r2, [pc, #60]	; (800ad54 <xTaskIncrementTick+0x170>)
 800ad16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad18:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <xTaskIncrementTick+0x174>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ad20:	2301      	movs	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad24:	697b      	ldr	r3, [r7, #20]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20001ac8 	.word	0x20001ac8
 800ad34:	20001aa4 	.word	0x20001aa4
 800ad38:	20001a58 	.word	0x20001a58
 800ad3c:	20001a5c 	.word	0x20001a5c
 800ad40:	20001ab8 	.word	0x20001ab8
 800ad44:	20001ac0 	.word	0x20001ac0
 800ad48:	20001aa8 	.word	0x20001aa8
 800ad4c:	200015d0 	.word	0x200015d0
 800ad50:	200015cc 	.word	0x200015cc
 800ad54:	20001ab0 	.word	0x20001ab0
 800ad58:	20001ab4 	.word	0x20001ab4

0800ad5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad62:	4b29      	ldr	r3, [pc, #164]	; (800ae08 <vTaskSwitchContext+0xac>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad6a:	4b28      	ldr	r3, [pc, #160]	; (800ae0c <vTaskSwitchContext+0xb0>)
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad70:	e043      	b.n	800adfa <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800ad72:	4b26      	ldr	r3, [pc, #152]	; (800ae0c <vTaskSwitchContext+0xb0>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad78:	4b25      	ldr	r3, [pc, #148]	; (800ae10 <vTaskSwitchContext+0xb4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e012      	b.n	800ada6 <vTaskSwitchContext+0x4a>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10c      	bne.n	800ada0 <vTaskSwitchContext+0x44>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	b672      	cpsid	i
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	b662      	cpsie	i
 800ad9a:	607b      	str	r3, [r7, #4]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <vTaskSwitchContext+0x42>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	491b      	ldr	r1, [pc, #108]	; (800ae14 <vTaskSwitchContext+0xb8>)
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	4613      	mov	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	440b      	add	r3, r1
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0e2      	beq.n	800ad80 <vTaskSwitchContext+0x24>
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4a13      	ldr	r2, [pc, #76]	; (800ae14 <vTaskSwitchContext+0xb8>)
 800adc6:	4413      	add	r3, r2
 800adc8:	60bb      	str	r3, [r7, #8]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	605a      	str	r2, [r3, #4]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	3308      	adds	r3, #8
 800addc:	429a      	cmp	r2, r3
 800adde:	d104      	bne.n	800adea <vTaskSwitchContext+0x8e>
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	605a      	str	r2, [r3, #4]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	4a09      	ldr	r2, [pc, #36]	; (800ae18 <vTaskSwitchContext+0xbc>)
 800adf2:	6013      	str	r3, [r2, #0]
 800adf4:	4a06      	ldr	r2, [pc, #24]	; (800ae10 <vTaskSwitchContext+0xb4>)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6013      	str	r3, [r2, #0]
}
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20001ac8 	.word	0x20001ac8
 800ae0c:	20001ab4 	.word	0x20001ab4
 800ae10:	20001aa8 	.word	0x20001aa8
 800ae14:	200015d0 	.word	0x200015d0
 800ae18:	200015cc 	.word	0x200015cc

0800ae1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10c      	bne.n	800ae46 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	b672      	cpsid	i
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	b662      	cpsie	i
 800ae40:	60fb      	str	r3, [r7, #12]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae46:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <vTaskPlaceOnEventList+0x48>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3318      	adds	r3, #24
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7fe fe41 	bl	8009ad6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae54:	2101      	movs	r1, #1
 800ae56:	6838      	ldr	r0, [r7, #0]
 800ae58:	f000 fac2 	bl	800b3e0 <prvAddCurrentTaskToDelayedList>
}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	200015cc 	.word	0x200015cc

0800ae68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10c      	bne.n	800ae94 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	b672      	cpsid	i
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	b662      	cpsie	i
 800ae8e:	617b      	str	r3, [r7, #20]
}
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae94:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <vTaskPlaceOnEventListRestricted+0x58>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3318      	adds	r3, #24
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7fe fdf6 	bl	8009a8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800aea8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	68b8      	ldr	r0, [r7, #8]
 800aeb2:	f000 fa95 	bl	800b3e0 <prvAddCurrentTaskToDelayedList>
	}
 800aeb6:	bf00      	nop
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200015cc 	.word	0x200015cc

0800aec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10c      	bne.n	800aef4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	b672      	cpsid	i
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	b662      	cpsie	i
 800aeee:	60fb      	str	r3, [r7, #12]
}
 800aef0:	bf00      	nop
 800aef2:	e7fe      	b.n	800aef2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	3318      	adds	r3, #24
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fe fe25 	bl	8009b48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aefe:	4b1e      	ldr	r3, [pc, #120]	; (800af78 <xTaskRemoveFromEventList+0xb4>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d11d      	bne.n	800af42 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	3304      	adds	r3, #4
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe fe1c 	bl	8009b48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af14:	4b19      	ldr	r3, [pc, #100]	; (800af7c <xTaskRemoveFromEventList+0xb8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d903      	bls.n	800af24 <xTaskRemoveFromEventList+0x60>
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	4a16      	ldr	r2, [pc, #88]	; (800af7c <xTaskRemoveFromEventList+0xb8>)
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4a13      	ldr	r2, [pc, #76]	; (800af80 <xTaskRemoveFromEventList+0xbc>)
 800af32:	441a      	add	r2, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	3304      	adds	r3, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fe fda7 	bl	8009a8e <vListInsertEnd>
 800af40:	e005      	b.n	800af4e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	3318      	adds	r3, #24
 800af46:	4619      	mov	r1, r3
 800af48:	480e      	ldr	r0, [pc, #56]	; (800af84 <xTaskRemoveFromEventList+0xc0>)
 800af4a:	f7fe fda0 	bl	8009a8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <xTaskRemoveFromEventList+0xc4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af58:	429a      	cmp	r2, r3
 800af5a:	d905      	bls.n	800af68 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af60:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <xTaskRemoveFromEventList+0xc8>)
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e001      	b.n	800af6c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af6c:	697b      	ldr	r3, [r7, #20]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20001ac8 	.word	0x20001ac8
 800af7c:	20001aa8 	.word	0x20001aa8
 800af80:	200015d0 	.word	0x200015d0
 800af84:	20001a60 	.word	0x20001a60
 800af88:	200015cc 	.word	0x200015cc
 800af8c:	20001ab4 	.word	0x20001ab4

0800af90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af98:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <vTaskInternalSetTimeOutState+0x24>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afa0:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <vTaskInternalSetTimeOutState+0x28>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	605a      	str	r2, [r3, #4]
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	20001ab8 	.word	0x20001ab8
 800afb8:	20001aa4 	.word	0x20001aa4

0800afbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10c      	bne.n	800afe6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	b672      	cpsid	i
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	b662      	cpsie	i
 800afe0:	613b      	str	r3, [r7, #16]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	b672      	cpsid	i
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	b662      	cpsie	i
 800b000:	60fb      	str	r3, [r7, #12]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b006:	f000 fea9 	bl	800bd5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b00a:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <xTaskCheckForTimeOut+0xc4>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d102      	bne.n	800b02a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b024:	2300      	movs	r3, #0
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	e023      	b.n	800b072 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	4b15      	ldr	r3, [pc, #84]	; (800b084 <xTaskCheckForTimeOut+0xc8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d007      	beq.n	800b046 <xTaskCheckForTimeOut+0x8a>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d302      	bcc.n	800b046 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b040:	2301      	movs	r3, #1
 800b042:	61fb      	str	r3, [r7, #28]
 800b044:	e015      	b.n	800b072 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d20b      	bcs.n	800b068 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff ff97 	bl	800af90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
 800b066:	e004      	b.n	800b072 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b06e:	2301      	movs	r3, #1
 800b070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b072:	f000 fea7 	bl	800bdc4 <vPortExitCritical>

	return xReturn;
 800b076:	69fb      	ldr	r3, [r7, #28]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	20001aa4 	.word	0x20001aa4
 800b084:	20001ab8 	.word	0x20001ab8

0800b088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b08c:	4b03      	ldr	r3, [pc, #12]	; (800b09c <vTaskMissedYield+0x14>)
 800b08e:	2201      	movs	r2, #1
 800b090:	601a      	str	r2, [r3, #0]
}
 800b092:	bf00      	nop
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	20001ab4 	.word	0x20001ab4

0800b0a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0a8:	f000 f852 	bl	800b150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <prvIdleTask+0x28>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d9f9      	bls.n	800b0a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <prvIdleTask+0x2c>)
 800b0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0c4:	e7f0      	b.n	800b0a8 <prvIdleTask+0x8>
 800b0c6:	bf00      	nop
 800b0c8:	200015d0 	.word	0x200015d0
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]
 800b0da:	e00c      	b.n	800b0f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4a12      	ldr	r2, [pc, #72]	; (800b130 <prvInitialiseTaskLists+0x60>)
 800b0e8:	4413      	add	r3, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fca2 	bl	8009a34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	607b      	str	r3, [r7, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b37      	cmp	r3, #55	; 0x37
 800b0fa:	d9ef      	bls.n	800b0dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0fc:	480d      	ldr	r0, [pc, #52]	; (800b134 <prvInitialiseTaskLists+0x64>)
 800b0fe:	f7fe fc99 	bl	8009a34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b102:	480d      	ldr	r0, [pc, #52]	; (800b138 <prvInitialiseTaskLists+0x68>)
 800b104:	f7fe fc96 	bl	8009a34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b108:	480c      	ldr	r0, [pc, #48]	; (800b13c <prvInitialiseTaskLists+0x6c>)
 800b10a:	f7fe fc93 	bl	8009a34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b10e:	480c      	ldr	r0, [pc, #48]	; (800b140 <prvInitialiseTaskLists+0x70>)
 800b110:	f7fe fc90 	bl	8009a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b114:	480b      	ldr	r0, [pc, #44]	; (800b144 <prvInitialiseTaskLists+0x74>)
 800b116:	f7fe fc8d 	bl	8009a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <prvInitialiseTaskLists+0x78>)
 800b11c:	4a05      	ldr	r2, [pc, #20]	; (800b134 <prvInitialiseTaskLists+0x64>)
 800b11e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <prvInitialiseTaskLists+0x7c>)
 800b122:	4a05      	ldr	r2, [pc, #20]	; (800b138 <prvInitialiseTaskLists+0x68>)
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	200015d0 	.word	0x200015d0
 800b134:	20001a30 	.word	0x20001a30
 800b138:	20001a44 	.word	0x20001a44
 800b13c:	20001a60 	.word	0x20001a60
 800b140:	20001a74 	.word	0x20001a74
 800b144:	20001a8c 	.word	0x20001a8c
 800b148:	20001a58 	.word	0x20001a58
 800b14c:	20001a5c 	.word	0x20001a5c

0800b150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b156:	e019      	b.n	800b18c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b158:	f000 fe00 	bl	800bd5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15c:	4b10      	ldr	r3, [pc, #64]	; (800b1a0 <prvCheckTasksWaitingTermination+0x50>)
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3304      	adds	r3, #4
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fced 	bl	8009b48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b16e:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <prvCheckTasksWaitingTermination+0x54>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3b01      	subs	r3, #1
 800b174:	4a0b      	ldr	r2, [pc, #44]	; (800b1a4 <prvCheckTasksWaitingTermination+0x54>)
 800b176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <prvCheckTasksWaitingTermination+0x58>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <prvCheckTasksWaitingTermination+0x58>)
 800b180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b182:	f000 fe1f 	bl	800bdc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f848 	bl	800b21c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <prvCheckTasksWaitingTermination+0x58>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e1      	bne.n	800b158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20001a74 	.word	0x20001a74
 800b1a4:	20001aa0 	.word	0x20001aa0
 800b1a8:	20001a88 	.word	0x20001a88

0800b1ac <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b1b8:	e005      	b.n	800b1c6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2ba5      	cmp	r3, #165	; 0xa5
 800b1cc:	d0f5      	beq.n	800b1ba <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	089b      	lsrs	r3, r3, #2
 800b1d2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	b29b      	uxth	r3, r3
	}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d102      	bne.n	800b1f8 <uxTaskGetStackHighWaterMark+0x14>
 800b1f2:	4b09      	ldr	r3, [pc, #36]	; (800b218 <uxTaskGetStackHighWaterMark+0x34>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	e000      	b.n	800b1fa <uxTaskGetStackHighWaterMark+0x16>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b200:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b202:	6938      	ldr	r0, [r7, #16]
 800b204:	f7ff ffd2 	bl	800b1ac <prvTaskCheckFreeStackSpace>
 800b208:	4603      	mov	r3, r0
 800b20a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800b20c:	68fb      	ldr	r3, [r7, #12]
	}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	200015cc 	.word	0x200015cc

0800b21c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d108      	bne.n	800b240 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	4618      	mov	r0, r3
 800b234:	f000 ff88 	bl	800c148 <vPortFree>
				vPortFree( pxTCB );
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 ff85 	bl	800c148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b23e:	e01a      	b.n	800b276 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b246:	2b01      	cmp	r3, #1
 800b248:	d103      	bne.n	800b252 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 ff7c 	bl	800c148 <vPortFree>
	}
 800b250:	e011      	b.n	800b276 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d00c      	beq.n	800b276 <prvDeleteTCB+0x5a>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	b672      	cpsid	i
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	b662      	cpsie	i
 800b270:	60fb      	str	r3, [r7, #12]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <prvDeleteTCB+0x58>
	}
 800b276:	bf00      	nop
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b286:	4b0c      	ldr	r3, [pc, #48]	; (800b2b8 <prvResetNextTaskUnblockTime+0x38>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d104      	bne.n	800b29a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b290:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <prvResetNextTaskUnblockTime+0x3c>)
 800b292:	f04f 32ff 	mov.w	r2, #4294967295
 800b296:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b298:	e008      	b.n	800b2ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b29a:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <prvResetNextTaskUnblockTime+0x38>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	4a04      	ldr	r2, [pc, #16]	; (800b2bc <prvResetNextTaskUnblockTime+0x3c>)
 800b2aa:	6013      	str	r3, [r2, #0]
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	20001a58 	.word	0x20001a58
 800b2bc:	20001ac0 	.word	0x20001ac0

0800b2c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <xTaskGetSchedulerState+0x34>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d102      	bne.n	800b2d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	e008      	b.n	800b2e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d4:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <xTaskGetSchedulerState+0x38>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	607b      	str	r3, [r7, #4]
 800b2e0:	e001      	b.n	800b2e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2e6:	687b      	ldr	r3, [r7, #4]
	}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	20001aac 	.word	0x20001aac
 800b2f8:	20001ac8 	.word	0x20001ac8

0800b2fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b308:	2300      	movs	r3, #0
 800b30a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d05a      	beq.n	800b3c8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b312:	4b30      	ldr	r3, [pc, #192]	; (800b3d4 <xTaskPriorityDisinherit+0xd8>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d00c      	beq.n	800b336 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	b672      	cpsid	i
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	b662      	cpsie	i
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10c      	bne.n	800b358 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	b672      	cpsid	i
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	b662      	cpsie	i
 800b352:	60bb      	str	r3, [r7, #8]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d02c      	beq.n	800b3c8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b372:	2b00      	cmp	r3, #0
 800b374:	d128      	bne.n	800b3c8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3304      	adds	r3, #4
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fbe4 	bl	8009b48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b398:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <xTaskPriorityDisinherit+0xdc>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d903      	bls.n	800b3a8 <xTaskPriorityDisinherit+0xac>
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	4a0c      	ldr	r2, [pc, #48]	; (800b3d8 <xTaskPriorityDisinherit+0xdc>)
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4a09      	ldr	r2, [pc, #36]	; (800b3dc <xTaskPriorityDisinherit+0xe0>)
 800b3b6:	441a      	add	r2, r3
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fe fb65 	bl	8009a8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3c8:	697b      	ldr	r3, [r7, #20]
	}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	200015cc 	.word	0x200015cc
 800b3d8:	20001aa8 	.word	0x20001aa8
 800b3dc:	200015d0 	.word	0x200015d0

0800b3e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3ea:	4b21      	ldr	r3, [pc, #132]	; (800b470 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3f0:	4b20      	ldr	r3, [pc, #128]	; (800b474 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fba6 	bl	8009b48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d10a      	bne.n	800b41a <prvAddCurrentTaskToDelayedList+0x3a>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b40a:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <prvAddCurrentTaskToDelayedList+0x94>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3304      	adds	r3, #4
 800b410:	4619      	mov	r1, r3
 800b412:	4819      	ldr	r0, [pc, #100]	; (800b478 <prvAddCurrentTaskToDelayedList+0x98>)
 800b414:	f7fe fb3b 	bl	8009a8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b418:	e026      	b.n	800b468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4413      	add	r3, r2
 800b420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <prvAddCurrentTaskToDelayedList+0x94>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d209      	bcs.n	800b446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <prvAddCurrentTaskToDelayedList+0x94>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7fe fb49 	bl	8009ad6 <vListInsert>
}
 800b444:	e010      	b.n	800b468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b446:	4b0e      	ldr	r3, [pc, #56]	; (800b480 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddCurrentTaskToDelayedList+0x94>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3304      	adds	r3, #4
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	f7fe fb3f 	bl	8009ad6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d202      	bcs.n	800b468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b462:	4a08      	ldr	r2, [pc, #32]	; (800b484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6013      	str	r3, [r2, #0]
}
 800b468:	bf00      	nop
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20001aa4 	.word	0x20001aa4
 800b474:	200015cc 	.word	0x200015cc
 800b478:	20001a8c 	.word	0x20001a8c
 800b47c:	20001a5c 	.word	0x20001a5c
 800b480:	20001a58 	.word	0x20001a58
 800b484:	20001ac0 	.word	0x20001ac0

0800b488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b492:	f000 fb15 	bl	800bac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b496:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <xTimerCreateTimerTask+0x84>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d021      	beq.n	800b4e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4a6:	1d3a      	adds	r2, r7, #4
 800b4a8:	f107 0108 	add.w	r1, r7, #8
 800b4ac:	f107 030c 	add.w	r3, r7, #12
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe faa5 	bl	8009a00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	9202      	str	r2, [sp, #8]
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	4911      	ldr	r1, [pc, #68]	; (800b510 <xTimerCreateTimerTask+0x88>)
 800b4ca:	4812      	ldr	r0, [pc, #72]	; (800b514 <xTimerCreateTimerTask+0x8c>)
 800b4cc:	f7ff f870 	bl	800a5b0 <xTaskCreateStatic>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4a11      	ldr	r2, [pc, #68]	; (800b518 <xTimerCreateTimerTask+0x90>)
 800b4d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <xTimerCreateTimerTask+0x90>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10c      	bne.n	800b502 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ec:	b672      	cpsid	i
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	b662      	cpsie	i
 800b4fc:	613b      	str	r3, [r7, #16]
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b502:	697b      	ldr	r3, [r7, #20]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20001afc 	.word	0x20001afc
 800b510:	0800d1d8 	.word	0x0800d1d8
 800b514:	0800b659 	.word	0x0800b659
 800b518:	20001b00 	.word	0x20001b00

0800b51c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08a      	sub	sp, #40	; 0x28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10c      	bne.n	800b54e <xTimerGenericCommand+0x32>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	b672      	cpsid	i
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	b662      	cpsie	i
 800b548:	623b      	str	r3, [r7, #32]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b54e:	4b1a      	ldr	r3, [pc, #104]	; (800b5b8 <xTimerGenericCommand+0x9c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d02a      	beq.n	800b5ac <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b05      	cmp	r3, #5
 800b566:	dc18      	bgt.n	800b59a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b568:	f7ff feaa 	bl	800b2c0 <xTaskGetSchedulerState>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d109      	bne.n	800b586 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b572:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <xTimerGenericCommand+0x9c>)
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	f107 0110 	add.w	r1, r7, #16
 800b57a:	2300      	movs	r3, #0
 800b57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57e:	f7fe fc1d 	bl	8009dbc <xQueueGenericSend>
 800b582:	6278      	str	r0, [r7, #36]	; 0x24
 800b584:	e012      	b.n	800b5ac <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <xTimerGenericCommand+0x9c>)
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f107 0110 	add.w	r1, r7, #16
 800b58e:	2300      	movs	r3, #0
 800b590:	2200      	movs	r2, #0
 800b592:	f7fe fc13 	bl	8009dbc <xQueueGenericSend>
 800b596:	6278      	str	r0, [r7, #36]	; 0x24
 800b598:	e008      	b.n	800b5ac <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b59a:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <xTimerGenericCommand+0x9c>)
 800b59c:	6818      	ldr	r0, [r3, #0]
 800b59e:	f107 0110 	add.w	r1, r7, #16
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	683a      	ldr	r2, [r7, #0]
 800b5a6:	f7fe fd0f 	bl	8009fc8 <xQueueGenericSendFromISR>
 800b5aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3728      	adds	r7, #40	; 0x28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20001afc 	.word	0x20001afc

0800b5bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c6:	4b23      	ldr	r3, [pc, #140]	; (800b654 <prvProcessExpiredTimer+0x98>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fe fab7 	bl	8009b48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d024      	beq.n	800b632 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	699a      	ldr	r2, [r3, #24]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	18d1      	adds	r1, r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	6978      	ldr	r0, [r7, #20]
 800b5f6:	f000 f8d3 	bl	800b7a0 <prvInsertTimerInActiveList>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d021      	beq.n	800b644 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b600:	2300      	movs	r3, #0
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	2300      	movs	r3, #0
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	2100      	movs	r1, #0
 800b60a:	6978      	ldr	r0, [r7, #20]
 800b60c:	f7ff ff86 	bl	800b51c <xTimerGenericCommand>
 800b610:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d115      	bne.n	800b644 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	b672      	cpsid	i
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	b662      	cpsie	i
 800b62c:	60fb      	str	r3, [r7, #12]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b638:	f023 0301 	bic.w	r3, r3, #1
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	6a1b      	ldr	r3, [r3, #32]
 800b648:	6978      	ldr	r0, [r7, #20]
 800b64a:	4798      	blx	r3
}
 800b64c:	bf00      	nop
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20001af4 	.word	0x20001af4

0800b658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b660:	f107 0308 	add.w	r3, r7, #8
 800b664:	4618      	mov	r0, r3
 800b666:	f000 f857 	bl	800b718 <prvGetNextExpireTime>
 800b66a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4619      	mov	r1, r3
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f803 	bl	800b67c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b676:	f000 f8d5 	bl	800b824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b67a:	e7f1      	b.n	800b660 <prvTimerTask+0x8>

0800b67c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b686:	f7ff f9dd 	bl	800aa44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b68a:	f107 0308 	add.w	r3, r7, #8
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f866 	bl	800b760 <prvSampleTimeNow>
 800b694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d130      	bne.n	800b6fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <prvProcessTimerOrBlockTask+0x3c>
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d806      	bhi.n	800b6b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b6aa:	f7ff f9d9 	bl	800aa60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b6ae:	68f9      	ldr	r1, [r7, #12]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ff83 	bl	800b5bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b6b6:	e024      	b.n	800b702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d008      	beq.n	800b6d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6be:	4b13      	ldr	r3, [pc, #76]	; (800b70c <prvProcessTimerOrBlockTask+0x90>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <prvProcessTimerOrBlockTask+0x50>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e000      	b.n	800b6ce <prvProcessTimerOrBlockTask+0x52>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6d0:	4b0f      	ldr	r3, [pc, #60]	; (800b710 <prvProcessTimerOrBlockTask+0x94>)
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f7fe ff33 	bl	800a548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6e2:	f7ff f9bd 	bl	800aa60 <xTaskResumeAll>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10a      	bne.n	800b702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <prvProcessTimerOrBlockTask+0x98>)
 800b6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	f3bf 8f6f 	isb	sy
}
 800b6fc:	e001      	b.n	800b702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6fe:	f7ff f9af 	bl	800aa60 <xTaskResumeAll>
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	20001af8 	.word	0x20001af8
 800b710:	20001afc 	.word	0x20001afc
 800b714:	e000ed04 	.word	0xe000ed04

0800b718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b720:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <prvGetNextExpireTime+0x44>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <prvGetNextExpireTime+0x16>
 800b72a:	2201      	movs	r2, #1
 800b72c:	e000      	b.n	800b730 <prvGetNextExpireTime+0x18>
 800b72e:	2200      	movs	r2, #0
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d105      	bne.n	800b748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b73c:	4b07      	ldr	r3, [pc, #28]	; (800b75c <prvGetNextExpireTime+0x44>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	e001      	b.n	800b74c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b74c:	68fb      	ldr	r3, [r7, #12]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20001af4 	.word	0x20001af4

0800b760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b768:	f7ff fa1a 	bl	800aba0 <xTaskGetTickCount>
 800b76c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b76e:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <prvSampleTimeNow+0x3c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	429a      	cmp	r2, r3
 800b776:	d205      	bcs.n	800b784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b778:	f000 f93c 	bl	800b9f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	e002      	b.n	800b78a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b78a:	4a04      	ldr	r2, [pc, #16]	; (800b79c <prvSampleTimeNow+0x3c>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b790:	68fb      	ldr	r3, [r7, #12]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20001b04 	.word	0x20001b04

0800b7a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d812      	bhi.n	800b7ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d302      	bcc.n	800b7da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e01b      	b.n	800b812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7da:	4b10      	ldr	r3, [pc, #64]	; (800b81c <prvInsertTimerInActiveList+0x7c>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7fe f976 	bl	8009ad6 <vListInsert>
 800b7ea:	e012      	b.n	800b812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d206      	bcs.n	800b802 <prvInsertTimerInActiveList+0x62>
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d302      	bcc.n	800b802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	e007      	b.n	800b812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b802:	4b07      	ldr	r3, [pc, #28]	; (800b820 <prvInsertTimerInActiveList+0x80>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3304      	adds	r3, #4
 800b80a:	4619      	mov	r1, r3
 800b80c:	4610      	mov	r0, r2
 800b80e:	f7fe f962 	bl	8009ad6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b812:	697b      	ldr	r3, [r7, #20]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20001af8 	.word	0x20001af8
 800b820:	20001af4 	.word	0x20001af4

0800b824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08e      	sub	sp, #56	; 0x38
 800b828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b82a:	e0d0      	b.n	800b9ce <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da1a      	bge.n	800b868 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b832:	1d3b      	adds	r3, r7, #4
 800b834:	3304      	adds	r3, #4
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10c      	bne.n	800b858 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	b672      	cpsid	i
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	b662      	cpsie	i
 800b852:	61fb      	str	r3, [r7, #28]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b85e:	6850      	ldr	r0, [r2, #4]
 800b860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b862:	6892      	ldr	r2, [r2, #8]
 800b864:	4611      	mov	r1, r2
 800b866:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f2c0 80ae 	blt.w	800b9cc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	3304      	adds	r3, #4
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe f961 	bl	8009b48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b886:	463b      	mov	r3, r7
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff ff69 	bl	800b760 <prvSampleTimeNow>
 800b88e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b09      	cmp	r3, #9
 800b894:	f200 809b 	bhi.w	800b9ce <prvProcessReceivedCommands+0x1aa>
 800b898:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <prvProcessReceivedCommands+0x7c>)
 800b89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89e:	bf00      	nop
 800b8a0:	0800b8c9 	.word	0x0800b8c9
 800b8a4:	0800b8c9 	.word	0x0800b8c9
 800b8a8:	0800b8c9 	.word	0x0800b8c9
 800b8ac:	0800b941 	.word	0x0800b941
 800b8b0:	0800b955 	.word	0x0800b955
 800b8b4:	0800b9a3 	.word	0x0800b9a3
 800b8b8:	0800b8c9 	.word	0x0800b8c9
 800b8bc:	0800b8c9 	.word	0x0800b8c9
 800b8c0:	0800b941 	.word	0x0800b941
 800b8c4:	0800b955 	.word	0x0800b955
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	18d1      	adds	r1, r2, r3
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e8:	f7ff ff5a 	bl	800b7a0 <prvInsertTimerInActiveList>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d06d      	beq.n	800b9ce <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b900:	f003 0304 	and.w	r3, r3, #4
 800b904:	2b00      	cmp	r3, #0
 800b906:	d062      	beq.n	800b9ce <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	441a      	add	r2, r3
 800b910:	2300      	movs	r3, #0
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	2300      	movs	r3, #0
 800b916:	2100      	movs	r1, #0
 800b918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91a:	f7ff fdff 	bl	800b51c <xTimerGenericCommand>
 800b91e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d153      	bne.n	800b9ce <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	b672      	cpsid	i
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	b662      	cpsie	i
 800b93a:	61bb      	str	r3, [r7, #24]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b946:	f023 0301 	bic.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b952:	e03c      	b.n	800b9ce <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b95a:	f043 0301 	orr.w	r3, r3, #1
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10c      	bne.n	800b98e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	b672      	cpsid	i
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	b662      	cpsie	i
 800b988:	617b      	str	r3, [r7, #20]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	699a      	ldr	r2, [r3, #24]
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	18d1      	adds	r1, r2, r3
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99c:	f7ff ff00 	bl	800b7a0 <prvInsertTimerInActiveList>
					break;
 800b9a0:	e015      	b.n	800b9ce <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9b2:	f000 fbc9 	bl	800c148 <vPortFree>
 800b9b6:	e00a      	b.n	800b9ce <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9be:	f023 0301 	bic.w	r3, r3, #1
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9ca:	e000      	b.n	800b9ce <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9ce:	4b08      	ldr	r3, [pc, #32]	; (800b9f0 <prvProcessReceivedCommands+0x1cc>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1d39      	adds	r1, r7, #4
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fb96 	bl	800a108 <xQueueReceive>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f47f af24 	bne.w	800b82c <prvProcessReceivedCommands+0x8>
	}
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
 800b9e8:	3730      	adds	r7, #48	; 0x30
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20001afc 	.word	0x20001afc

0800b9f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9fa:	e04a      	b.n	800ba92 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9fc:	4b2e      	ldr	r3, [pc, #184]	; (800bab8 <prvSwitchTimerLists+0xc4>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba06:	4b2c      	ldr	r3, [pc, #176]	; (800bab8 <prvSwitchTimerLists+0xc4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe f897 	bl	8009b48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d030      	beq.n	800ba92 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4413      	add	r3, r2
 800ba38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d90e      	bls.n	800ba60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba4e:	4b1a      	ldr	r3, [pc, #104]	; (800bab8 <prvSwitchTimerLists+0xc4>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7fe f83c 	bl	8009ad6 <vListInsert>
 800ba5e:	e018      	b.n	800ba92 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba60:	2300      	movs	r3, #0
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	2300      	movs	r3, #0
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f7ff fd56 	bl	800b51c <xTimerGenericCommand>
 800ba70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10c      	bne.n	800ba92 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	b672      	cpsid	i
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	b662      	cpsie	i
 800ba8c:	603b      	str	r3, [r7, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba92:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <prvSwitchTimerLists+0xc4>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1af      	bne.n	800b9fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba9c:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <prvSwitchTimerLists+0xc4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800baa2:	4b06      	ldr	r3, [pc, #24]	; (800babc <prvSwitchTimerLists+0xc8>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a04      	ldr	r2, [pc, #16]	; (800bab8 <prvSwitchTimerLists+0xc4>)
 800baa8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800baaa:	4a04      	ldr	r2, [pc, #16]	; (800babc <prvSwitchTimerLists+0xc8>)
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	6013      	str	r3, [r2, #0]
}
 800bab0:	bf00      	nop
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20001af4 	.word	0x20001af4
 800babc:	20001af8 	.word	0x20001af8

0800bac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bac6:	f000 f949 	bl	800bd5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800baca:	4b15      	ldr	r3, [pc, #84]	; (800bb20 <prvCheckForValidListAndQueue+0x60>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d120      	bne.n	800bb14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bad2:	4814      	ldr	r0, [pc, #80]	; (800bb24 <prvCheckForValidListAndQueue+0x64>)
 800bad4:	f7fd ffae 	bl	8009a34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bad8:	4813      	ldr	r0, [pc, #76]	; (800bb28 <prvCheckForValidListAndQueue+0x68>)
 800bada:	f7fd ffab 	bl	8009a34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bade:	4b13      	ldr	r3, [pc, #76]	; (800bb2c <prvCheckForValidListAndQueue+0x6c>)
 800bae0:	4a10      	ldr	r2, [pc, #64]	; (800bb24 <prvCheckForValidListAndQueue+0x64>)
 800bae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bae4:	4b12      	ldr	r3, [pc, #72]	; (800bb30 <prvCheckForValidListAndQueue+0x70>)
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <prvCheckForValidListAndQueue+0x68>)
 800bae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800baea:	2300      	movs	r3, #0
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	4b11      	ldr	r3, [pc, #68]	; (800bb34 <prvCheckForValidListAndQueue+0x74>)
 800baf0:	4a11      	ldr	r2, [pc, #68]	; (800bb38 <prvCheckForValidListAndQueue+0x78>)
 800baf2:	2110      	movs	r1, #16
 800baf4:	200a      	movs	r0, #10
 800baf6:	f7fe f8bb 	bl	8009c70 <xQueueGenericCreateStatic>
 800bafa:	4603      	mov	r3, r0
 800bafc:	4a08      	ldr	r2, [pc, #32]	; (800bb20 <prvCheckForValidListAndQueue+0x60>)
 800bafe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb00:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <prvCheckForValidListAndQueue+0x60>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb08:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <prvCheckForValidListAndQueue+0x60>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	490b      	ldr	r1, [pc, #44]	; (800bb3c <prvCheckForValidListAndQueue+0x7c>)
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe fcf0 	bl	800a4f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb14:	f000 f956 	bl	800bdc4 <vPortExitCritical>
}
 800bb18:	bf00      	nop
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20001afc 	.word	0x20001afc
 800bb24:	20001acc 	.word	0x20001acc
 800bb28:	20001ae0 	.word	0x20001ae0
 800bb2c:	20001af4 	.word	0x20001af4
 800bb30:	20001af8 	.word	0x20001af8
 800bb34:	20001ba8 	.word	0x20001ba8
 800bb38:	20001b08 	.word	0x20001b08
 800bb3c:	0800d1e0 	.word	0x0800d1e0

0800bb40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3b04      	subs	r3, #4
 800bb50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	3b04      	subs	r3, #4
 800bb5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	f023 0201 	bic.w	r2, r3, #1
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3b04      	subs	r3, #4
 800bb6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb70:	4a0c      	ldr	r2, [pc, #48]	; (800bba4 <pxPortInitialiseStack+0x64>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3b14      	subs	r3, #20
 800bb7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3b04      	subs	r3, #4
 800bb86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f06f 0202 	mvn.w	r2, #2
 800bb8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3b20      	subs	r3, #32
 800bb94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb96:	68fb      	ldr	r3, [r7, #12]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3714      	adds	r7, #20
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr
 800bba4:	0800bba9 	.word	0x0800bba9

0800bba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbb2:	4b14      	ldr	r3, [pc, #80]	; (800bc04 <prvTaskExitError+0x5c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d00c      	beq.n	800bbd6 <prvTaskExitError+0x2e>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	b672      	cpsid	i
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	b662      	cpsie	i
 800bbd0:	60fb      	str	r3, [r7, #12]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <prvTaskExitError+0x2c>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	b672      	cpsid	i
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	b662      	cpsie	i
 800bbea:	60bb      	str	r3, [r7, #8]
}
 800bbec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbee:	bf00      	nop
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0fc      	beq.n	800bbf0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20000098 	.word	0x20000098
	...

0800bc10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <pxCurrentTCBConst2>)
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1a:	f380 8809 	msr	PSP, r0
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8811 	msr	BASEPRI, r0
 800bc2a:	4770      	bx	lr
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst2>:
 800bc30:	200015cc 	.word	0x200015cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc38:	4808      	ldr	r0, [pc, #32]	; (800bc5c <prvPortStartFirstTask+0x24>)
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	6800      	ldr	r0, [r0, #0]
 800bc3e:	f380 8808 	msr	MSP, r0
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8814 	msr	CONTROL, r0
 800bc4a:	b662      	cpsie	i
 800bc4c:	b661      	cpsie	f
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	df00      	svc	0
 800bc58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc5a:	bf00      	nop
 800bc5c:	e000ed08 	.word	0xe000ed08

0800bc60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc66:	4b37      	ldr	r3, [pc, #220]	; (800bd44 <xPortStartScheduler+0xe4>)
 800bc68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	4b2f      	ldr	r3, [pc, #188]	; (800bd48 <xPortStartScheduler+0xe8>)
 800bc8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc8e:	4b2f      	ldr	r3, [pc, #188]	; (800bd4c <xPortStartScheduler+0xec>)
 800bc90:	2207      	movs	r2, #7
 800bc92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc94:	e009      	b.n	800bcaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bc96:	4b2d      	ldr	r3, [pc, #180]	; (800bd4c <xPortStartScheduler+0xec>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	4a2b      	ldr	r2, [pc, #172]	; (800bd4c <xPortStartScheduler+0xec>)
 800bc9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb2:	2b80      	cmp	r3, #128	; 0x80
 800bcb4:	d0ef      	beq.n	800bc96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcb6:	4b25      	ldr	r3, [pc, #148]	; (800bd4c <xPortStartScheduler+0xec>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f1c3 0307 	rsb	r3, r3, #7
 800bcbe:	2b04      	cmp	r3, #4
 800bcc0:	d00c      	beq.n	800bcdc <xPortStartScheduler+0x7c>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	b672      	cpsid	i
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	b662      	cpsie	i
 800bcd6:	60bb      	str	r3, [r7, #8]
}
 800bcd8:	bf00      	nop
 800bcda:	e7fe      	b.n	800bcda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcdc:	4b1b      	ldr	r3, [pc, #108]	; (800bd4c <xPortStartScheduler+0xec>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	021b      	lsls	r3, r3, #8
 800bce2:	4a1a      	ldr	r2, [pc, #104]	; (800bd4c <xPortStartScheduler+0xec>)
 800bce4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bce6:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <xPortStartScheduler+0xec>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcee:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <xPortStartScheduler+0xec>)
 800bcf0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <xPortStartScheduler+0xf0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a14      	ldr	r2, [pc, #80]	; (800bd50 <xPortStartScheduler+0xf0>)
 800bd00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd06:	4b12      	ldr	r3, [pc, #72]	; (800bd50 <xPortStartScheduler+0xf0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a11      	ldr	r2, [pc, #68]	; (800bd50 <xPortStartScheduler+0xf0>)
 800bd0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd12:	f000 f8dd 	bl	800bed0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd16:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <xPortStartScheduler+0xf4>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd1c:	f000 f8fc 	bl	800bf18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd20:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <xPortStartScheduler+0xf8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a0c      	ldr	r2, [pc, #48]	; (800bd58 <xPortStartScheduler+0xf8>)
 800bd26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd2c:	f7ff ff84 	bl	800bc38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd30:	f7ff f814 	bl	800ad5c <vTaskSwitchContext>
	prvTaskExitError();
 800bd34:	f7ff ff38 	bl	800bba8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	e000e400 	.word	0xe000e400
 800bd48:	20001bf8 	.word	0x20001bf8
 800bd4c:	20001bfc 	.word	0x20001bfc
 800bd50:	e000ed20 	.word	0xe000ed20
 800bd54:	20000098 	.word	0x20000098
 800bd58:	e000ef34 	.word	0xe000ef34

0800bd5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	b672      	cpsid	i
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	b662      	cpsie	i
 800bd76:	607b      	str	r3, [r7, #4]
}
 800bd78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd7a:	4b10      	ldr	r3, [pc, #64]	; (800bdbc <vPortEnterCritical+0x60>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	4a0e      	ldr	r2, [pc, #56]	; (800bdbc <vPortEnterCritical+0x60>)
 800bd82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd84:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <vPortEnterCritical+0x60>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d111      	bne.n	800bdb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd8c:	4b0c      	ldr	r3, [pc, #48]	; (800bdc0 <vPortEnterCritical+0x64>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00c      	beq.n	800bdb0 <vPortEnterCritical+0x54>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	b672      	cpsid	i
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	b662      	cpsie	i
 800bdaa:	603b      	str	r3, [r7, #0]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <vPortEnterCritical+0x52>
	}
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000098 	.word	0x20000098
 800bdc0:	e000ed04 	.word	0xe000ed04

0800bdc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdca:	4b13      	ldr	r3, [pc, #76]	; (800be18 <vPortExitCritical+0x54>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10c      	bne.n	800bdec <vPortExitCritical+0x28>
	__asm volatile
 800bdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd6:	b672      	cpsid	i
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	b662      	cpsie	i
 800bde6:	607b      	str	r3, [r7, #4]
}
 800bde8:	bf00      	nop
 800bdea:	e7fe      	b.n	800bdea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <vPortExitCritical+0x54>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	4a09      	ldr	r2, [pc, #36]	; (800be18 <vPortExitCritical+0x54>)
 800bdf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdf6:	4b08      	ldr	r3, [pc, #32]	; (800be18 <vPortExitCritical+0x54>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d105      	bne.n	800be0a <vPortExitCritical+0x46>
 800bdfe:	2300      	movs	r3, #0
 800be00:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	f383 8811 	msr	BASEPRI, r3
}
 800be08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be0a:	bf00      	nop
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	20000098 	.word	0x20000098
 800be1c:	00000000 	.word	0x00000000

0800be20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be20:	f3ef 8009 	mrs	r0, PSP
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	4b15      	ldr	r3, [pc, #84]	; (800be80 <pxCurrentTCBConst>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	f01e 0f10 	tst.w	lr, #16
 800be30:	bf08      	it	eq
 800be32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3a:	6010      	str	r0, [r2, #0]
 800be3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be44:	b672      	cpsid	i
 800be46:	f380 8811 	msr	BASEPRI, r0
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	b662      	cpsie	i
 800be54:	f7fe ff82 	bl	800ad5c <vTaskSwitchContext>
 800be58:	f04f 0000 	mov.w	r0, #0
 800be5c:	f380 8811 	msr	BASEPRI, r0
 800be60:	bc09      	pop	{r0, r3}
 800be62:	6819      	ldr	r1, [r3, #0]
 800be64:	6808      	ldr	r0, [r1, #0]
 800be66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6a:	f01e 0f10 	tst.w	lr, #16
 800be6e:	bf08      	it	eq
 800be70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be74:	f380 8809 	msr	PSP, r0
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop

0800be80 <pxCurrentTCBConst>:
 800be80:	200015cc 	.word	0x200015cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop

0800be88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	b672      	cpsid	i
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	b662      	cpsie	i
 800bea2:	607b      	str	r3, [r7, #4]
}
 800bea4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bea6:	f7fe fe9d 	bl	800abe4 <xTaskIncrementTick>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800beb0:	4b06      	ldr	r3, [pc, #24]	; (800becc <xPortSysTickHandler+0x44>)
 800beb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	2300      	movs	r3, #0
 800beba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	f383 8811 	msr	BASEPRI, r3
}
 800bec2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	e000ed04 	.word	0xe000ed04

0800bed0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bed4:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <vPortSetupTimerInterrupt+0x34>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <vPortSetupTimerInterrupt+0x38>)
 800bedc:	2200      	movs	r2, #0
 800bede:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <vPortSetupTimerInterrupt+0x3c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a0a      	ldr	r2, [pc, #40]	; (800bf10 <vPortSetupTimerInterrupt+0x40>)
 800bee6:	fba2 2303 	umull	r2, r3, r2, r3
 800beea:	099b      	lsrs	r3, r3, #6
 800beec:	4a09      	ldr	r2, [pc, #36]	; (800bf14 <vPortSetupTimerInterrupt+0x44>)
 800beee:	3b01      	subs	r3, #1
 800bef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bef2:	4b04      	ldr	r3, [pc, #16]	; (800bf04 <vPortSetupTimerInterrupt+0x34>)
 800bef4:	2207      	movs	r2, #7
 800bef6:	601a      	str	r2, [r3, #0]
}
 800bef8:	bf00      	nop
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	e000e010 	.word	0xe000e010
 800bf08:	e000e018 	.word	0xe000e018
 800bf0c:	20000000 	.word	0x20000000
 800bf10:	10624dd3 	.word	0x10624dd3
 800bf14:	e000e014 	.word	0xe000e014

0800bf18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf28 <vPortEnableVFP+0x10>
 800bf1c:	6801      	ldr	r1, [r0, #0]
 800bf1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf22:	6001      	str	r1, [r0, #0]
 800bf24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf26:	bf00      	nop
 800bf28:	e000ed88 	.word	0xe000ed88

0800bf2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf32:	f3ef 8305 	mrs	r3, IPSR
 800bf36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b0f      	cmp	r3, #15
 800bf3c:	d916      	bls.n	800bf6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf3e:	4a19      	ldr	r2, [pc, #100]	; (800bfa4 <vPortValidateInterruptPriority+0x78>)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4413      	add	r3, r2
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf48:	4b17      	ldr	r3, [pc, #92]	; (800bfa8 <vPortValidateInterruptPriority+0x7c>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	7afa      	ldrb	r2, [r7, #11]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d20c      	bcs.n	800bf6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	b672      	cpsid	i
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	b662      	cpsie	i
 800bf66:	607b      	str	r3, [r7, #4]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf6c:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <vPortValidateInterruptPriority+0x80>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf74:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <vPortValidateInterruptPriority+0x84>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d90c      	bls.n	800bf96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	b672      	cpsid	i
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	b662      	cpsie	i
 800bf90:	603b      	str	r3, [r7, #0]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <vPortValidateInterruptPriority+0x68>
	}
 800bf96:	bf00      	nop
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	e000e3f0 	.word	0xe000e3f0
 800bfa8:	20001bf8 	.word	0x20001bf8
 800bfac:	e000ed0c 	.word	0xe000ed0c
 800bfb0:	20001bfc 	.word	0x20001bfc

0800bfb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08a      	sub	sp, #40	; 0x28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfc0:	f7fe fd40 	bl	800aa44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfc4:	4b5b      	ldr	r3, [pc, #364]	; (800c134 <pvPortMalloc+0x180>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d101      	bne.n	800bfd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfcc:	f000 f91a 	bl	800c204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfd0:	4b59      	ldr	r3, [pc, #356]	; (800c138 <pvPortMalloc+0x184>)
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f040 8092 	bne.w	800c102 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d01f      	beq.n	800c024 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bfe4:	2208      	movs	r2, #8
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4413      	add	r3, r2
 800bfea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f003 0307 	and.w	r3, r3, #7
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d016      	beq.n	800c024 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f023 0307 	bic.w	r3, r3, #7
 800bffc:	3308      	adds	r3, #8
 800bffe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00c      	beq.n	800c024 <pvPortMalloc+0x70>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	b672      	cpsid	i
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	b662      	cpsie	i
 800c01e:	617b      	str	r3, [r7, #20]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d06b      	beq.n	800c102 <pvPortMalloc+0x14e>
 800c02a:	4b44      	ldr	r3, [pc, #272]	; (800c13c <pvPortMalloc+0x188>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d866      	bhi.n	800c102 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c034:	4b42      	ldr	r3, [pc, #264]	; (800c140 <pvPortMalloc+0x18c>)
 800c036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c038:	4b41      	ldr	r3, [pc, #260]	; (800c140 <pvPortMalloc+0x18c>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c03e:	e004      	b.n	800c04a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	429a      	cmp	r2, r3
 800c052:	d903      	bls.n	800c05c <pvPortMalloc+0xa8>
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f1      	bne.n	800c040 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c05c:	4b35      	ldr	r3, [pc, #212]	; (800c134 <pvPortMalloc+0x180>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	429a      	cmp	r2, r3
 800c064:	d04d      	beq.n	800c102 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2208      	movs	r2, #8
 800c06c:	4413      	add	r3, r2
 800c06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	2308      	movs	r3, #8
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	429a      	cmp	r2, r3
 800c086:	d921      	bls.n	800c0cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00c      	beq.n	800c0b4 <pvPortMalloc+0x100>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	b672      	cpsid	i
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	b662      	cpsie	i
 800c0ae:	613b      	str	r3, [r7, #16]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	685a      	ldr	r2, [r3, #4]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	1ad2      	subs	r2, r2, r3
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0c6:	69b8      	ldr	r0, [r7, #24]
 800c0c8:	f000 f8fe 	bl	800c2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0cc:	4b1b      	ldr	r3, [pc, #108]	; (800c13c <pvPortMalloc+0x188>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	4a19      	ldr	r2, [pc, #100]	; (800c13c <pvPortMalloc+0x188>)
 800c0d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0da:	4b18      	ldr	r3, [pc, #96]	; (800c13c <pvPortMalloc+0x188>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	4b19      	ldr	r3, [pc, #100]	; (800c144 <pvPortMalloc+0x190>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d203      	bcs.n	800c0ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0e6:	4b15      	ldr	r3, [pc, #84]	; (800c13c <pvPortMalloc+0x188>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a16      	ldr	r2, [pc, #88]	; (800c144 <pvPortMalloc+0x190>)
 800c0ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	685a      	ldr	r2, [r3, #4]
 800c0f2:	4b11      	ldr	r3, [pc, #68]	; (800c138 <pvPortMalloc+0x184>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c102:	f7fe fcad 	bl	800aa60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00c      	beq.n	800c12a <pvPortMalloc+0x176>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	b672      	cpsid	i
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	b662      	cpsie	i
 800c124:	60fb      	str	r3, [r7, #12]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <pvPortMalloc+0x174>
	return pvReturn;
 800c12a:	69fb      	ldr	r3, [r7, #28]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3728      	adds	r7, #40	; 0x28
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	20005808 	.word	0x20005808
 800c138:	20005814 	.word	0x20005814
 800c13c:	2000580c 	.word	0x2000580c
 800c140:	20005800 	.word	0x20005800
 800c144:	20005810 	.word	0x20005810

0800c148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d04c      	beq.n	800c1f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c15a:	2308      	movs	r3, #8
 800c15c:	425b      	negs	r3, r3
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4413      	add	r3, r2
 800c162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	4b23      	ldr	r3, [pc, #140]	; (800c1fc <vPortFree+0xb4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4013      	ands	r3, r2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10c      	bne.n	800c190 <vPortFree+0x48>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	b672      	cpsid	i
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	b662      	cpsie	i
 800c18a:	60fb      	str	r3, [r7, #12]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00c      	beq.n	800c1b2 <vPortFree+0x6a>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	b672      	cpsid	i
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	b662      	cpsie	i
 800c1ac:	60bb      	str	r3, [r7, #8]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	4b11      	ldr	r3, [pc, #68]	; (800c1fc <vPortFree+0xb4>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d019      	beq.n	800c1f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d115      	bne.n	800c1f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <vPortFree+0xb4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	401a      	ands	r2, r3
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1d8:	f7fe fc34 	bl	800aa44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <vPortFree+0xb8>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	4a06      	ldr	r2, [pc, #24]	; (800c200 <vPortFree+0xb8>)
 800c1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1ea:	6938      	ldr	r0, [r7, #16]
 800c1ec:	f000 f86c 	bl	800c2c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c1f0:	f7fe fc36 	bl	800aa60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1f4:	bf00      	nop
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	20005814 	.word	0x20005814
 800c200:	2000580c 	.word	0x2000580c

0800c204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c20a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c210:	4b27      	ldr	r3, [pc, #156]	; (800c2b0 <prvHeapInit+0xac>)
 800c212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00c      	beq.n	800c238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3307      	adds	r3, #7
 800c222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f023 0307 	bic.w	r3, r3, #7
 800c22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	4a1f      	ldr	r2, [pc, #124]	; (800c2b0 <prvHeapInit+0xac>)
 800c234:	4413      	add	r3, r2
 800c236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c23c:	4a1d      	ldr	r2, [pc, #116]	; (800c2b4 <prvHeapInit+0xb0>)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c242:	4b1c      	ldr	r3, [pc, #112]	; (800c2b4 <prvHeapInit+0xb0>)
 800c244:	2200      	movs	r2, #0
 800c246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	4413      	add	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c250:	2208      	movs	r2, #8
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f023 0307 	bic.w	r3, r3, #7
 800c25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	4a15      	ldr	r2, [pc, #84]	; (800c2b8 <prvHeapInit+0xb4>)
 800c264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c266:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <prvHeapInit+0xb4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2200      	movs	r2, #0
 800c26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c26e:	4b12      	ldr	r3, [pc, #72]	; (800c2b8 <prvHeapInit+0xb4>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c284:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <prvHeapInit+0xb4>)
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	4a0a      	ldr	r2, [pc, #40]	; (800c2bc <prvHeapInit+0xb8>)
 800c292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	4a09      	ldr	r2, [pc, #36]	; (800c2c0 <prvHeapInit+0xbc>)
 800c29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c29c:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <prvHeapInit+0xc0>)
 800c29e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	20001c00 	.word	0x20001c00
 800c2b4:	20005800 	.word	0x20005800
 800c2b8:	20005808 	.word	0x20005808
 800c2bc:	20005810 	.word	0x20005810
 800c2c0:	2000580c 	.word	0x2000580c
 800c2c4:	20005814 	.word	0x20005814

0800c2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2d0:	4b28      	ldr	r3, [pc, #160]	; (800c374 <prvInsertBlockIntoFreeList+0xac>)
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e002      	b.n	800c2dc <prvInsertBlockIntoFreeList+0x14>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d8f7      	bhi.n	800c2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d108      	bne.n	800c30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	441a      	add	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d118      	bne.n	800c350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	4b15      	ldr	r3, [pc, #84]	; (800c378 <prvInsertBlockIntoFreeList+0xb0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d00d      	beq.n	800c346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	441a      	add	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	e008      	b.n	800c358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c346:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <prvInsertBlockIntoFreeList+0xb0>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	e003      	b.n	800c358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d002      	beq.n	800c366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c366:	bf00      	nop
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20005800 	.word	0x20005800
 800c378:	20005808 	.word	0x20005808

0800c37c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c380:	2200      	movs	r2, #0
 800c382:	4912      	ldr	r1, [pc, #72]	; (800c3cc <MX_USB_DEVICE_Init+0x50>)
 800c384:	4812      	ldr	r0, [pc, #72]	; (800c3d0 <MX_USB_DEVICE_Init+0x54>)
 800c386:	f7fb febf 	bl	8008108 <USBD_Init>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d001      	beq.n	800c394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c390:	f7f5 fcbe 	bl	8001d10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c394:	490f      	ldr	r1, [pc, #60]	; (800c3d4 <MX_USB_DEVICE_Init+0x58>)
 800c396:	480e      	ldr	r0, [pc, #56]	; (800c3d0 <MX_USB_DEVICE_Init+0x54>)
 800c398:	f7fb fee6 	bl	8008168 <USBD_RegisterClass>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3a2:	f7f5 fcb5 	bl	8001d10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c3a6:	490c      	ldr	r1, [pc, #48]	; (800c3d8 <MX_USB_DEVICE_Init+0x5c>)
 800c3a8:	4809      	ldr	r0, [pc, #36]	; (800c3d0 <MX_USB_DEVICE_Init+0x54>)
 800c3aa:	f7fb fddd 	bl	8007f68 <USBD_CDC_RegisterInterface>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3b4:	f7f5 fcac 	bl	8001d10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3b8:	4805      	ldr	r0, [pc, #20]	; (800c3d0 <MX_USB_DEVICE_Init+0x54>)
 800c3ba:	f7fb ff0b 	bl	80081d4 <USBD_Start>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3c4:	f7f5 fca4 	bl	8001d10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3c8:	bf00      	nop
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	200000b0 	.word	0x200000b0
 800c3d0:	20005818 	.word	0x20005818
 800c3d4:	20000018 	.word	0x20000018
 800c3d8:	2000009c 	.word	0x2000009c

0800c3dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4905      	ldr	r1, [pc, #20]	; (800c3f8 <CDC_Init_FS+0x1c>)
 800c3e4:	4805      	ldr	r0, [pc, #20]	; (800c3fc <CDC_Init_FS+0x20>)
 800c3e6:	f7fb fdd9 	bl	8007f9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3ea:	4905      	ldr	r1, [pc, #20]	; (800c400 <CDC_Init_FS+0x24>)
 800c3ec:	4803      	ldr	r0, [pc, #12]	; (800c3fc <CDC_Init_FS+0x20>)
 800c3ee:	f7fb fdf7 	bl	8007fe0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	200062f4 	.word	0x200062f4
 800c3fc:	20005818 	.word	0x20005818
 800c400:	20005af4 	.word	0x20005af4

0800c404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
 800c420:	4613      	mov	r3, r2
 800c422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b23      	cmp	r3, #35	; 0x23
 800c428:	d84a      	bhi.n	800c4c0 <CDC_Control_FS+0xac>
 800c42a:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <CDC_Control_FS+0x1c>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c4c1 	.word	0x0800c4c1
 800c434:	0800c4c1 	.word	0x0800c4c1
 800c438:	0800c4c1 	.word	0x0800c4c1
 800c43c:	0800c4c1 	.word	0x0800c4c1
 800c440:	0800c4c1 	.word	0x0800c4c1
 800c444:	0800c4c1 	.word	0x0800c4c1
 800c448:	0800c4c1 	.word	0x0800c4c1
 800c44c:	0800c4c1 	.word	0x0800c4c1
 800c450:	0800c4c1 	.word	0x0800c4c1
 800c454:	0800c4c1 	.word	0x0800c4c1
 800c458:	0800c4c1 	.word	0x0800c4c1
 800c45c:	0800c4c1 	.word	0x0800c4c1
 800c460:	0800c4c1 	.word	0x0800c4c1
 800c464:	0800c4c1 	.word	0x0800c4c1
 800c468:	0800c4c1 	.word	0x0800c4c1
 800c46c:	0800c4c1 	.word	0x0800c4c1
 800c470:	0800c4c1 	.word	0x0800c4c1
 800c474:	0800c4c1 	.word	0x0800c4c1
 800c478:	0800c4c1 	.word	0x0800c4c1
 800c47c:	0800c4c1 	.word	0x0800c4c1
 800c480:	0800c4c1 	.word	0x0800c4c1
 800c484:	0800c4c1 	.word	0x0800c4c1
 800c488:	0800c4c1 	.word	0x0800c4c1
 800c48c:	0800c4c1 	.word	0x0800c4c1
 800c490:	0800c4c1 	.word	0x0800c4c1
 800c494:	0800c4c1 	.word	0x0800c4c1
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c1 	.word	0x0800c4c1
 800c4a0:	0800c4c1 	.word	0x0800c4c1
 800c4a4:	0800c4c1 	.word	0x0800c4c1
 800c4a8:	0800c4c1 	.word	0x0800c4c1
 800c4ac:	0800c4c1 	.word	0x0800c4c1
 800c4b0:	0800c4c1 	.word	0x0800c4c1
 800c4b4:	0800c4c1 	.word	0x0800c4c1
 800c4b8:	0800c4c1 	.word	0x0800c4c1
 800c4bc:	0800c4c1 	.word	0x0800c4c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4c0:	bf00      	nop
  }

  return (USBD_OK);
 800c4c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	4805      	ldr	r0, [pc, #20]	; (800c4f4 <CDC_Receive_FS+0x24>)
 800c4de:	f7fb fd7f 	bl	8007fe0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c4e2:	4804      	ldr	r0, [pc, #16]	; (800c4f4 <CDC_Receive_FS+0x24>)
 800c4e4:	f7fb fdda 	bl	800809c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c4e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20005818 	.word	0x20005818

0800c4f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c508:	4b0d      	ldr	r3, [pc, #52]	; (800c540 <CDC_Transmit_FS+0x48>)
 800c50a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c50e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e00b      	b.n	800c536 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c51e:	887b      	ldrh	r3, [r7, #2]
 800c520:	461a      	mov	r2, r3
 800c522:	6879      	ldr	r1, [r7, #4]
 800c524:	4806      	ldr	r0, [pc, #24]	; (800c540 <CDC_Transmit_FS+0x48>)
 800c526:	f7fb fd39 	bl	8007f9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c52a:	4805      	ldr	r0, [pc, #20]	; (800c540 <CDC_Transmit_FS+0x48>)
 800c52c:	f7fb fd76 	bl	800801c <USBD_CDC_TransmitPacket>
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c534:	7bfb      	ldrb	r3, [r7, #15]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20005818 	.word	0x20005818

0800c544 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c556:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	371c      	adds	r7, #28
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
	...

0800c568 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	6039      	str	r1, [r7, #0]
 800c572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2212      	movs	r2, #18
 800c578:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c57a:	4b03      	ldr	r3, [pc, #12]	; (800c588 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	200000d0 	.word	0x200000d0

0800c58c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	4603      	mov	r3, r0
 800c594:	6039      	str	r1, [r7, #0]
 800c596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2204      	movs	r2, #4
 800c59c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c59e:	4b03      	ldr	r3, [pc, #12]	; (800c5ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	200000f0 	.word	0x200000f0

0800c5b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	6039      	str	r1, [r7, #0]
 800c5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d105      	bne.n	800c5ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	4907      	ldr	r1, [pc, #28]	; (800c5e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c5c6:	4808      	ldr	r0, [pc, #32]	; (800c5e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5c8:	f7fc ffda 	bl	8009580 <USBD_GetString>
 800c5cc:	e004      	b.n	800c5d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	4904      	ldr	r1, [pc, #16]	; (800c5e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c5d2:	4805      	ldr	r0, [pc, #20]	; (800c5e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5d4:	f7fc ffd4 	bl	8009580 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5d8:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20006af4 	.word	0x20006af4
 800c5e8:	0800d1e8 	.word	0x0800d1e8

0800c5ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	4904      	ldr	r1, [pc, #16]	; (800c60c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c5fc:	4804      	ldr	r0, [pc, #16]	; (800c610 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c5fe:	f7fc ffbf 	bl	8009580 <USBD_GetString>
  return USBD_StrDesc;
 800c602:	4b02      	ldr	r3, [pc, #8]	; (800c60c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20006af4 	.word	0x20006af4
 800c610:	0800d200 	.word	0x0800d200

0800c614 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	6039      	str	r1, [r7, #0]
 800c61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	221a      	movs	r2, #26
 800c624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c626:	f000 f855 	bl	800c6d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c62a:	4b02      	ldr	r3, [pc, #8]	; (800c634 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	200000f4 	.word	0x200000f4

0800c638 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	6039      	str	r1, [r7, #0]
 800c642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c644:	79fb      	ldrb	r3, [r7, #7]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d105      	bne.n	800c656 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	4907      	ldr	r1, [pc, #28]	; (800c66c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c64e:	4808      	ldr	r0, [pc, #32]	; (800c670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c650:	f7fc ff96 	bl	8009580 <USBD_GetString>
 800c654:	e004      	b.n	800c660 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	4904      	ldr	r1, [pc, #16]	; (800c66c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c65a:	4805      	ldr	r0, [pc, #20]	; (800c670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c65c:	f7fc ff90 	bl	8009580 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c660:	4b02      	ldr	r3, [pc, #8]	; (800c66c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20006af4 	.word	0x20006af4
 800c670:	0800d214 	.word	0x0800d214

0800c674 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	4603      	mov	r3, r0
 800c67c:	6039      	str	r1, [r7, #0]
 800c67e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d105      	bne.n	800c692 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	4907      	ldr	r1, [pc, #28]	; (800c6a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c68a:	4808      	ldr	r0, [pc, #32]	; (800c6ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c68c:	f7fc ff78 	bl	8009580 <USBD_GetString>
 800c690:	e004      	b.n	800c69c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	4904      	ldr	r1, [pc, #16]	; (800c6a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c696:	4805      	ldr	r0, [pc, #20]	; (800c6ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c698:	f7fc ff72 	bl	8009580 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c69c:	4b02      	ldr	r3, [pc, #8]	; (800c6a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20006af4 	.word	0x20006af4
 800c6ac:	0800d220 	.word	0x0800d220

0800c6b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	6039      	str	r1, [r7, #0]
 800c6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	220c      	movs	r2, #12
 800c6c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c6c2:	4b03      	ldr	r3, [pc, #12]	; (800c6d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	200000e4 	.word	0x200000e4

0800c6d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6da:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <Get_SerialNum+0x44>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6e0:	4b0e      	ldr	r3, [pc, #56]	; (800c71c <Get_SerialNum+0x48>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6e6:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Get_SerialNum+0x4c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d009      	beq.n	800c70e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6fa:	2208      	movs	r2, #8
 800c6fc:	4909      	ldr	r1, [pc, #36]	; (800c724 <Get_SerialNum+0x50>)
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f000 f814 	bl	800c72c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c704:	2204      	movs	r2, #4
 800c706:	4908      	ldr	r1, [pc, #32]	; (800c728 <Get_SerialNum+0x54>)
 800c708:	68b8      	ldr	r0, [r7, #8]
 800c70a:	f000 f80f 	bl	800c72c <IntToUnicode>
  }
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	1ff0f420 	.word	0x1ff0f420
 800c71c:	1ff0f424 	.word	0x1ff0f424
 800c720:	1ff0f428 	.word	0x1ff0f428
 800c724:	200000f6 	.word	0x200000f6
 800c728:	20000106 	.word	0x20000106

0800c72c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c73e:	2300      	movs	r3, #0
 800c740:	75fb      	strb	r3, [r7, #23]
 800c742:	e027      	b.n	800c794 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	0f1b      	lsrs	r3, r3, #28
 800c748:	2b09      	cmp	r3, #9
 800c74a:	d80b      	bhi.n	800c764 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	0f1b      	lsrs	r3, r3, #28
 800c750:	b2da      	uxtb	r2, r3
 800c752:	7dfb      	ldrb	r3, [r7, #23]
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4619      	mov	r1, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	440b      	add	r3, r1
 800c75c:	3230      	adds	r2, #48	; 0x30
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	e00a      	b.n	800c77a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	0f1b      	lsrs	r3, r3, #28
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	4619      	mov	r1, r3
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	440b      	add	r3, r1
 800c774:	3237      	adds	r2, #55	; 0x37
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	011b      	lsls	r3, r3, #4
 800c77e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c780:	7dfb      	ldrb	r3, [r7, #23]
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	3301      	adds	r3, #1
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	4413      	add	r3, r2
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	3301      	adds	r3, #1
 800c792:	75fb      	strb	r3, [r7, #23]
 800c794:	7dfa      	ldrb	r2, [r7, #23]
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d3d3      	bcc.n	800c744 <IntToUnicode+0x18>
  }
}
 800c79c:	bf00      	nop
 800c79e:	bf00      	nop
 800c7a0:	371c      	adds	r7, #28
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
	...

0800c7ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b0ae      	sub	sp, #184	; 0xb8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	605a      	str	r2, [r3, #4]
 800c7be:	609a      	str	r2, [r3, #8]
 800c7c0:	60da      	str	r2, [r3, #12]
 800c7c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c7c4:	f107 0314 	add.w	r3, r7, #20
 800c7c8:	2290      	movs	r2, #144	; 0x90
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fbb3 	bl	800cf38 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7da:	d161      	bne.n	800c8a0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c7dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c7e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c7e8:	f107 0314 	add.w	r3, r7, #20
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7f8 fadf 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800c7f8:	f7f5 fa8a 	bl	8001d10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7fc:	4b2a      	ldr	r3, [pc, #168]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c800:	4a29      	ldr	r2, [pc, #164]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c802:	f043 0301 	orr.w	r3, r3, #1
 800c806:	6313      	str	r3, [r2, #48]	; 0x30
 800c808:	4b27      	ldr	r3, [pc, #156]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c814:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c81c:	2302      	movs	r3, #2
 800c81e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c822:	2300      	movs	r3, #0
 800c824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c828:	2303      	movs	r3, #3
 800c82a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c82e:	230a      	movs	r3, #10
 800c830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c834:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c838:	4619      	mov	r1, r3
 800c83a:	481c      	ldr	r0, [pc, #112]	; (800c8ac <HAL_PCD_MspInit+0x100>)
 800c83c:	f7f6 f906 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c840:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c848:	2300      	movs	r3, #0
 800c84a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c854:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c858:	4619      	mov	r1, r3
 800c85a:	4814      	ldr	r0, [pc, #80]	; (800c8ac <HAL_PCD_MspInit+0x100>)
 800c85c:	f7f6 f8f6 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c860:	4b11      	ldr	r3, [pc, #68]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c864:	4a10      	ldr	r2, [pc, #64]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86a:	6353      	str	r3, [r2, #52]	; 0x34
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4b0b      	ldr	r3, [pc, #44]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87c:	4a0a      	ldr	r2, [pc, #40]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c87e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c882:	6453      	str	r3, [r2, #68]	; 0x44
 800c884:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <HAL_PCD_MspInit+0xfc>)
 800c886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c88c:	60bb      	str	r3, [r7, #8]
 800c88e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c890:	2200      	movs	r2, #0
 800c892:	2105      	movs	r1, #5
 800c894:	2043      	movs	r0, #67	; 0x43
 800c896:	f7f5 fd7c 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c89a:	2043      	movs	r0, #67	; 0x43
 800c89c:	f7f5 fd95 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8a0:	bf00      	nop
 800c8a2:	37b8      	adds	r7, #184	; 0xb8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	40023800 	.word	0x40023800
 800c8ac:	40020000 	.word	0x40020000

0800c8b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7fb fcd1 	bl	800826e <USBD_LL_SetupStage>
}
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800c8e6:	78fa      	ldrb	r2, [r7, #3]
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	78fb      	ldrb	r3, [r7, #3]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	f7fb fd0b 	bl	8008318 <USBD_LL_DataOutStage>
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800c91c:	78fa      	ldrb	r2, [r7, #3]
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4613      	mov	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	440b      	add	r3, r1
 800c92a:	334c      	adds	r3, #76	; 0x4c
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	78fb      	ldrb	r3, [r7, #3]
 800c930:	4619      	mov	r1, r3
 800c932:	f7fb fda4 	bl	800847e <USBD_LL_DataInStage>
}
 800c936:	bf00      	nop
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fb fed8 	bl	8008702 <USBD_LL_SOF>
}
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c962:	2301      	movs	r3, #1
 800c964:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
 800c972:	e008      	b.n	800c986 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d102      	bne.n	800c982 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c97c:	2301      	movs	r3, #1
 800c97e:	73fb      	strb	r3, [r7, #15]
 800c980:	e001      	b.n	800c986 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c982:	f7f5 f9c5 	bl	8001d10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c98c:	7bfa      	ldrb	r2, [r7, #15]
 800c98e:	4611      	mov	r1, r2
 800c990:	4618      	mov	r0, r3
 800c992:	f7fb fe78 	bl	8008686 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fb fe20 	bl	80085e2 <USBD_LL_Reset>
}
 800c9a2:	bf00      	nop
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
	...

0800c9ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fb fe73 	bl	80086a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6812      	ldr	r2, [r2, #0]
 800c9ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
 800c9d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9e0:	4b04      	ldr	r3, [pc, #16]	; (800c9f4 <HAL_PCD_SuspendCallback+0x48>)
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	4a03      	ldr	r2, [pc, #12]	; (800c9f4 <HAL_PCD_SuspendCallback+0x48>)
 800c9e6:	f043 0306 	orr.w	r3, r3, #6
 800c9ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	e000ed00 	.word	0xe000ed00

0800c9f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fb fe63 	bl	80086d2 <USBD_LL_Resume>
}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ca26:	78fa      	ldrb	r2, [r7, #3]
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fb febb 	bl	80087a6 <USBD_LL_IsoOUTIncomplete>
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ca4a:	78fa      	ldrb	r2, [r7, #3]
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fb fe77 	bl	8008742 <USBD_LL_IsoINIncomplete>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fb fecd 	bl	800880a <USBD_LL_DevConnected>
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fb feca 	bl	8008820 <USBD_LL_DevDisconnected>
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d13c      	bne.n	800cb1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800caa4:	4a20      	ldr	r2, [pc, #128]	; (800cb28 <USBD_LL_Init+0x94>)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a1e      	ldr	r2, [pc, #120]	; (800cb28 <USBD_LL_Init+0x94>)
 800cab0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cab4:	4b1c      	ldr	r3, [pc, #112]	; (800cb28 <USBD_LL_Init+0x94>)
 800cab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800caba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cabc:	4b1a      	ldr	r3, [pc, #104]	; (800cb28 <USBD_LL_Init+0x94>)
 800cabe:	2206      	movs	r2, #6
 800cac0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cac2:	4b19      	ldr	r3, [pc, #100]	; (800cb28 <USBD_LL_Init+0x94>)
 800cac4:	2202      	movs	r2, #2
 800cac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cac8:	4b17      	ldr	r3, [pc, #92]	; (800cb28 <USBD_LL_Init+0x94>)
 800caca:	2200      	movs	r2, #0
 800cacc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cace:	4b16      	ldr	r3, [pc, #88]	; (800cb28 <USBD_LL_Init+0x94>)
 800cad0:	2202      	movs	r2, #2
 800cad2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800cad4:	4b14      	ldr	r3, [pc, #80]	; (800cb28 <USBD_LL_Init+0x94>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cada:	4b13      	ldr	r3, [pc, #76]	; (800cb28 <USBD_LL_Init+0x94>)
 800cadc:	2200      	movs	r2, #0
 800cade:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cae0:	4b11      	ldr	r3, [pc, #68]	; (800cb28 <USBD_LL_Init+0x94>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cae6:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <USBD_LL_Init+0x94>)
 800cae8:	2201      	movs	r2, #1
 800caea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800caec:	4b0e      	ldr	r3, [pc, #56]	; (800cb28 <USBD_LL_Init+0x94>)
 800caee:	2200      	movs	r2, #0
 800caf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800caf2:	480d      	ldr	r0, [pc, #52]	; (800cb28 <USBD_LL_Init+0x94>)
 800caf4:	f7f6 f96f 	bl	8002dd6 <HAL_PCD_Init>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cafe:	f7f5 f907 	bl	8001d10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb02:	2180      	movs	r1, #128	; 0x80
 800cb04:	4808      	ldr	r0, [pc, #32]	; (800cb28 <USBD_LL_Init+0x94>)
 800cb06:	f7f7 fbea 	bl	80042de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb0a:	2240      	movs	r2, #64	; 0x40
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	4806      	ldr	r0, [pc, #24]	; (800cb28 <USBD_LL_Init+0x94>)
 800cb10:	f7f7 fb9e 	bl	8004250 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb14:	2280      	movs	r2, #128	; 0x80
 800cb16:	2101      	movs	r1, #1
 800cb18:	4803      	ldr	r0, [pc, #12]	; (800cb28 <USBD_LL_Init+0x94>)
 800cb1a:	f7f7 fb99 	bl	8004250 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20006cf4 	.word	0x20006cf4

0800cb2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f6 fa6b 	bl	800301e <HAL_PCD_Start>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 f97e 	bl	800ce50 <USBD_Get_USB_Status>
 800cb54:	4603      	mov	r3, r0
 800cb56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b084      	sub	sp, #16
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	4608      	mov	r0, r1
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4603      	mov	r3, r0
 800cb72:	70fb      	strb	r3, [r7, #3]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70bb      	strb	r3, [r7, #2]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb8a:	78bb      	ldrb	r3, [r7, #2]
 800cb8c:	883a      	ldrh	r2, [r7, #0]
 800cb8e:	78f9      	ldrb	r1, [r7, #3]
 800cb90:	f7f6 ff58 	bl	8003a44 <HAL_PCD_EP_Open>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 f958 	bl	800ce50 <USBD_Get_USB_Status>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbc8:	78fa      	ldrb	r2, [r7, #3]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7f6 ffa1 	bl	8003b14 <HAL_PCD_EP_Close>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f939 	bl	800ce50 <USBD_Get_USB_Status>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc06:	78fa      	ldrb	r2, [r7, #3]
 800cc08:	4611      	mov	r1, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f7 f879 	bl	8003d02 <HAL_PCD_EP_SetStall>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f91a 	bl	800ce50 <USBD_Get_USB_Status>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	460b      	mov	r3, r1
 800cc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	4611      	mov	r1, r2
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f7 f8be 	bl	8003dca <HAL_PCD_EP_ClrStall>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f8fb 	bl	800ce50 <USBD_Get_USB_Status>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	da0b      	bge.n	800cc9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	440b      	add	r3, r1
 800cc96:	333e      	adds	r3, #62	; 0x3e
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	e00b      	b.n	800ccb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4613      	mov	r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	440b      	add	r3, r1
 800ccae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ccb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccda:	78fa      	ldrb	r2, [r7, #3]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7f6 fe8b 	bl	80039fa <HAL_PCD_SetAddress>
 800cce4:	4603      	mov	r3, r0
 800cce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 f8b0 	bl	800ce50 <USBD_Get_USB_Status>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b086      	sub	sp, #24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd1c:	7af9      	ldrb	r1, [r7, #11]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	f7f6 ffa4 	bl	8003c6e <HAL_PCD_EP_Transmit>
 800cd26:	4603      	mov	r3, r0
 800cd28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f88f 	bl	800ce50 <USBD_Get_USB_Status>
 800cd32:	4603      	mov	r3, r0
 800cd34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd36:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	607a      	str	r2, [r7, #4]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd5e:	7af9      	ldrb	r1, [r7, #11]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	f7f6 ff20 	bl	8003ba8 <HAL_PCD_EP_Receive>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 f86e 	bl	800ce50 <USBD_Get_USB_Status>
 800cd74:	4603      	mov	r3, r0
 800cd76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd78:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b082      	sub	sp, #8
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd94:	78fa      	ldrb	r2, [r7, #3]
 800cd96:	4611      	mov	r1, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7f6 ff50 	bl	8003c3e <HAL_PCD_EP_GetRxCount>
 800cd9e:	4603      	mov	r3, r0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cdb4:	78fb      	ldrb	r3, [r7, #3]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <HAL_PCDEx_LPM_Callback+0x18>
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d01f      	beq.n	800cdfe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cdbe:	e03b      	b.n	800ce38 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d007      	beq.n	800cdd8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cdc8:	f000 f83c 	bl	800ce44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdcc:	4b1c      	ldr	r3, [pc, #112]	; (800ce40 <HAL_PCDEx_LPM_Callback+0x98>)
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	; (800ce40 <HAL_PCDEx_LPM_Callback+0x98>)
 800cdd2:	f023 0306 	bic.w	r3, r3, #6
 800cdd6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6812      	ldr	r2, [r2, #0]
 800cde6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdea:	f023 0301 	bic.w	r3, r3, #1
 800cdee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fb fc6b 	bl	80086d2 <USBD_LL_Resume>
    break;
 800cdfc:	e01c      	b.n	800ce38 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	6812      	ldr	r2, [r2, #0]
 800ce0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce10:	f043 0301 	orr.w	r3, r3, #1
 800ce14:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fb fc42 	bl	80086a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d005      	beq.n	800ce36 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce2a:	4b05      	ldr	r3, [pc, #20]	; (800ce40 <HAL_PCDEx_LPM_Callback+0x98>)
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	4a04      	ldr	r2, [pc, #16]	; (800ce40 <HAL_PCDEx_LPM_Callback+0x98>)
 800ce30:	f043 0306 	orr.w	r3, r3, #6
 800ce34:	6113      	str	r3, [r2, #16]
    break;
 800ce36:	bf00      	nop
}
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	e000ed00 	.word	0xe000ed00

0800ce44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ce48:	f7f4 fdc0 	bl	80019cc <SystemClock_Config>
}
 800ce4c:	bf00      	nop
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	d817      	bhi.n	800ce94 <USBD_Get_USB_Status+0x44>
 800ce64:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <USBD_Get_USB_Status+0x1c>)
 800ce66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6a:	bf00      	nop
 800ce6c:	0800ce7d 	.word	0x0800ce7d
 800ce70:	0800ce83 	.word	0x0800ce83
 800ce74:	0800ce89 	.word	0x0800ce89
 800ce78:	0800ce8f 	.word	0x0800ce8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce80:	e00b      	b.n	800ce9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce82:	2303      	movs	r3, #3
 800ce84:	73fb      	strb	r3, [r7, #15]
    break;
 800ce86:	e008      	b.n	800ce9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce8c:	e005      	b.n	800ce9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	73fb      	strb	r3, [r7, #15]
    break;
 800ce92:	e002      	b.n	800ce9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce94:	2303      	movs	r3, #3
 800ce96:	73fb      	strb	r3, [r7, #15]
    break;
 800ce98:	bf00      	nop
  }
  return usb_status;
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <__errno>:
 800cea8:	4b01      	ldr	r3, [pc, #4]	; (800ceb0 <__errno+0x8>)
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20000110 	.word	0x20000110

0800ceb4 <__libc_init_array>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4d0d      	ldr	r5, [pc, #52]	; (800ceec <__libc_init_array+0x38>)
 800ceb8:	4c0d      	ldr	r4, [pc, #52]	; (800cef0 <__libc_init_array+0x3c>)
 800ceba:	1b64      	subs	r4, r4, r5
 800cebc:	10a4      	asrs	r4, r4, #2
 800cebe:	2600      	movs	r6, #0
 800cec0:	42a6      	cmp	r6, r4
 800cec2:	d109      	bne.n	800ced8 <__libc_init_array+0x24>
 800cec4:	4d0b      	ldr	r5, [pc, #44]	; (800cef4 <__libc_init_array+0x40>)
 800cec6:	4c0c      	ldr	r4, [pc, #48]	; (800cef8 <__libc_init_array+0x44>)
 800cec8:	f000 f93c 	bl	800d144 <_init>
 800cecc:	1b64      	subs	r4, r4, r5
 800cece:	10a4      	asrs	r4, r4, #2
 800ced0:	2600      	movs	r6, #0
 800ced2:	42a6      	cmp	r6, r4
 800ced4:	d105      	bne.n	800cee2 <__libc_init_array+0x2e>
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cedc:	4798      	blx	r3
 800cede:	3601      	adds	r6, #1
 800cee0:	e7ee      	b.n	800cec0 <__libc_init_array+0xc>
 800cee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cee6:	4798      	blx	r3
 800cee8:	3601      	adds	r6, #1
 800ceea:	e7f2      	b.n	800ced2 <__libc_init_array+0x1e>
 800ceec:	0800d29c 	.word	0x0800d29c
 800cef0:	0800d29c 	.word	0x0800d29c
 800cef4:	0800d29c 	.word	0x0800d29c
 800cef8:	0800d2a0 	.word	0x0800d2a0

0800cefc <malloc>:
 800cefc:	4b02      	ldr	r3, [pc, #8]	; (800cf08 <malloc+0xc>)
 800cefe:	4601      	mov	r1, r0
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	f000 b88d 	b.w	800d020 <_malloc_r>
 800cf06:	bf00      	nop
 800cf08:	20000110 	.word	0x20000110

0800cf0c <free>:
 800cf0c:	4b02      	ldr	r3, [pc, #8]	; (800cf18 <free+0xc>)
 800cf0e:	4601      	mov	r1, r0
 800cf10:	6818      	ldr	r0, [r3, #0]
 800cf12:	f000 b819 	b.w	800cf48 <_free_r>
 800cf16:	bf00      	nop
 800cf18:	20000110 	.word	0x20000110

0800cf1c <memcpy>:
 800cf1c:	440a      	add	r2, r1
 800cf1e:	4291      	cmp	r1, r2
 800cf20:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf24:	d100      	bne.n	800cf28 <memcpy+0xc>
 800cf26:	4770      	bx	lr
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf32:	4291      	cmp	r1, r2
 800cf34:	d1f9      	bne.n	800cf2a <memcpy+0xe>
 800cf36:	bd10      	pop	{r4, pc}

0800cf38 <memset>:
 800cf38:	4402      	add	r2, r0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d100      	bne.n	800cf42 <memset+0xa>
 800cf40:	4770      	bx	lr
 800cf42:	f803 1b01 	strb.w	r1, [r3], #1
 800cf46:	e7f9      	b.n	800cf3c <memset+0x4>

0800cf48 <_free_r>:
 800cf48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf4a:	2900      	cmp	r1, #0
 800cf4c:	d044      	beq.n	800cfd8 <_free_r+0x90>
 800cf4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf52:	9001      	str	r0, [sp, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f1a1 0404 	sub.w	r4, r1, #4
 800cf5a:	bfb8      	it	lt
 800cf5c:	18e4      	addlt	r4, r4, r3
 800cf5e:	f000 f8e3 	bl	800d128 <__malloc_lock>
 800cf62:	4a1e      	ldr	r2, [pc, #120]	; (800cfdc <_free_r+0x94>)
 800cf64:	9801      	ldr	r0, [sp, #4]
 800cf66:	6813      	ldr	r3, [r2, #0]
 800cf68:	b933      	cbnz	r3, 800cf78 <_free_r+0x30>
 800cf6a:	6063      	str	r3, [r4, #4]
 800cf6c:	6014      	str	r4, [r2, #0]
 800cf6e:	b003      	add	sp, #12
 800cf70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf74:	f000 b8de 	b.w	800d134 <__malloc_unlock>
 800cf78:	42a3      	cmp	r3, r4
 800cf7a:	d908      	bls.n	800cf8e <_free_r+0x46>
 800cf7c:	6825      	ldr	r5, [r4, #0]
 800cf7e:	1961      	adds	r1, r4, r5
 800cf80:	428b      	cmp	r3, r1
 800cf82:	bf01      	itttt	eq
 800cf84:	6819      	ldreq	r1, [r3, #0]
 800cf86:	685b      	ldreq	r3, [r3, #4]
 800cf88:	1949      	addeq	r1, r1, r5
 800cf8a:	6021      	streq	r1, [r4, #0]
 800cf8c:	e7ed      	b.n	800cf6a <_free_r+0x22>
 800cf8e:	461a      	mov	r2, r3
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	b10b      	cbz	r3, 800cf98 <_free_r+0x50>
 800cf94:	42a3      	cmp	r3, r4
 800cf96:	d9fa      	bls.n	800cf8e <_free_r+0x46>
 800cf98:	6811      	ldr	r1, [r2, #0]
 800cf9a:	1855      	adds	r5, r2, r1
 800cf9c:	42a5      	cmp	r5, r4
 800cf9e:	d10b      	bne.n	800cfb8 <_free_r+0x70>
 800cfa0:	6824      	ldr	r4, [r4, #0]
 800cfa2:	4421      	add	r1, r4
 800cfa4:	1854      	adds	r4, r2, r1
 800cfa6:	42a3      	cmp	r3, r4
 800cfa8:	6011      	str	r1, [r2, #0]
 800cfaa:	d1e0      	bne.n	800cf6e <_free_r+0x26>
 800cfac:	681c      	ldr	r4, [r3, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	6053      	str	r3, [r2, #4]
 800cfb2:	4421      	add	r1, r4
 800cfb4:	6011      	str	r1, [r2, #0]
 800cfb6:	e7da      	b.n	800cf6e <_free_r+0x26>
 800cfb8:	d902      	bls.n	800cfc0 <_free_r+0x78>
 800cfba:	230c      	movs	r3, #12
 800cfbc:	6003      	str	r3, [r0, #0]
 800cfbe:	e7d6      	b.n	800cf6e <_free_r+0x26>
 800cfc0:	6825      	ldr	r5, [r4, #0]
 800cfc2:	1961      	adds	r1, r4, r5
 800cfc4:	428b      	cmp	r3, r1
 800cfc6:	bf04      	itt	eq
 800cfc8:	6819      	ldreq	r1, [r3, #0]
 800cfca:	685b      	ldreq	r3, [r3, #4]
 800cfcc:	6063      	str	r3, [r4, #4]
 800cfce:	bf04      	itt	eq
 800cfd0:	1949      	addeq	r1, r1, r5
 800cfd2:	6021      	streq	r1, [r4, #0]
 800cfd4:	6054      	str	r4, [r2, #4]
 800cfd6:	e7ca      	b.n	800cf6e <_free_r+0x26>
 800cfd8:	b003      	add	sp, #12
 800cfda:	bd30      	pop	{r4, r5, pc}
 800cfdc:	200071fc 	.word	0x200071fc

0800cfe0 <sbrk_aligned>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	4e0e      	ldr	r6, [pc, #56]	; (800d01c <sbrk_aligned+0x3c>)
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	6831      	ldr	r1, [r6, #0]
 800cfe8:	4605      	mov	r5, r0
 800cfea:	b911      	cbnz	r1, 800cff2 <sbrk_aligned+0x12>
 800cfec:	f000 f88c 	bl	800d108 <_sbrk_r>
 800cff0:	6030      	str	r0, [r6, #0]
 800cff2:	4621      	mov	r1, r4
 800cff4:	4628      	mov	r0, r5
 800cff6:	f000 f887 	bl	800d108 <_sbrk_r>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	d00a      	beq.n	800d014 <sbrk_aligned+0x34>
 800cffe:	1cc4      	adds	r4, r0, #3
 800d000:	f024 0403 	bic.w	r4, r4, #3
 800d004:	42a0      	cmp	r0, r4
 800d006:	d007      	beq.n	800d018 <sbrk_aligned+0x38>
 800d008:	1a21      	subs	r1, r4, r0
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f87c 	bl	800d108 <_sbrk_r>
 800d010:	3001      	adds	r0, #1
 800d012:	d101      	bne.n	800d018 <sbrk_aligned+0x38>
 800d014:	f04f 34ff 	mov.w	r4, #4294967295
 800d018:	4620      	mov	r0, r4
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	20007200 	.word	0x20007200

0800d020 <_malloc_r>:
 800d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	1ccd      	adds	r5, r1, #3
 800d026:	f025 0503 	bic.w	r5, r5, #3
 800d02a:	3508      	adds	r5, #8
 800d02c:	2d0c      	cmp	r5, #12
 800d02e:	bf38      	it	cc
 800d030:	250c      	movcc	r5, #12
 800d032:	2d00      	cmp	r5, #0
 800d034:	4607      	mov	r7, r0
 800d036:	db01      	blt.n	800d03c <_malloc_r+0x1c>
 800d038:	42a9      	cmp	r1, r5
 800d03a:	d905      	bls.n	800d048 <_malloc_r+0x28>
 800d03c:	230c      	movs	r3, #12
 800d03e:	603b      	str	r3, [r7, #0]
 800d040:	2600      	movs	r6, #0
 800d042:	4630      	mov	r0, r6
 800d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d048:	4e2e      	ldr	r6, [pc, #184]	; (800d104 <_malloc_r+0xe4>)
 800d04a:	f000 f86d 	bl	800d128 <__malloc_lock>
 800d04e:	6833      	ldr	r3, [r6, #0]
 800d050:	461c      	mov	r4, r3
 800d052:	bb34      	cbnz	r4, 800d0a2 <_malloc_r+0x82>
 800d054:	4629      	mov	r1, r5
 800d056:	4638      	mov	r0, r7
 800d058:	f7ff ffc2 	bl	800cfe0 <sbrk_aligned>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	4604      	mov	r4, r0
 800d060:	d14d      	bne.n	800d0fe <_malloc_r+0xde>
 800d062:	6834      	ldr	r4, [r6, #0]
 800d064:	4626      	mov	r6, r4
 800d066:	2e00      	cmp	r6, #0
 800d068:	d140      	bne.n	800d0ec <_malloc_r+0xcc>
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	4631      	mov	r1, r6
 800d06e:	4638      	mov	r0, r7
 800d070:	eb04 0803 	add.w	r8, r4, r3
 800d074:	f000 f848 	bl	800d108 <_sbrk_r>
 800d078:	4580      	cmp	r8, r0
 800d07a:	d13a      	bne.n	800d0f2 <_malloc_r+0xd2>
 800d07c:	6821      	ldr	r1, [r4, #0]
 800d07e:	3503      	adds	r5, #3
 800d080:	1a6d      	subs	r5, r5, r1
 800d082:	f025 0503 	bic.w	r5, r5, #3
 800d086:	3508      	adds	r5, #8
 800d088:	2d0c      	cmp	r5, #12
 800d08a:	bf38      	it	cc
 800d08c:	250c      	movcc	r5, #12
 800d08e:	4629      	mov	r1, r5
 800d090:	4638      	mov	r0, r7
 800d092:	f7ff ffa5 	bl	800cfe0 <sbrk_aligned>
 800d096:	3001      	adds	r0, #1
 800d098:	d02b      	beq.n	800d0f2 <_malloc_r+0xd2>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	442b      	add	r3, r5
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	e00e      	b.n	800d0c0 <_malloc_r+0xa0>
 800d0a2:	6822      	ldr	r2, [r4, #0]
 800d0a4:	1b52      	subs	r2, r2, r5
 800d0a6:	d41e      	bmi.n	800d0e6 <_malloc_r+0xc6>
 800d0a8:	2a0b      	cmp	r2, #11
 800d0aa:	d916      	bls.n	800d0da <_malloc_r+0xba>
 800d0ac:	1961      	adds	r1, r4, r5
 800d0ae:	42a3      	cmp	r3, r4
 800d0b0:	6025      	str	r5, [r4, #0]
 800d0b2:	bf18      	it	ne
 800d0b4:	6059      	strne	r1, [r3, #4]
 800d0b6:	6863      	ldr	r3, [r4, #4]
 800d0b8:	bf08      	it	eq
 800d0ba:	6031      	streq	r1, [r6, #0]
 800d0bc:	5162      	str	r2, [r4, r5]
 800d0be:	604b      	str	r3, [r1, #4]
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f104 060b 	add.w	r6, r4, #11
 800d0c6:	f000 f835 	bl	800d134 <__malloc_unlock>
 800d0ca:	f026 0607 	bic.w	r6, r6, #7
 800d0ce:	1d23      	adds	r3, r4, #4
 800d0d0:	1af2      	subs	r2, r6, r3
 800d0d2:	d0b6      	beq.n	800d042 <_malloc_r+0x22>
 800d0d4:	1b9b      	subs	r3, r3, r6
 800d0d6:	50a3      	str	r3, [r4, r2]
 800d0d8:	e7b3      	b.n	800d042 <_malloc_r+0x22>
 800d0da:	6862      	ldr	r2, [r4, #4]
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	bf0c      	ite	eq
 800d0e0:	6032      	streq	r2, [r6, #0]
 800d0e2:	605a      	strne	r2, [r3, #4]
 800d0e4:	e7ec      	b.n	800d0c0 <_malloc_r+0xa0>
 800d0e6:	4623      	mov	r3, r4
 800d0e8:	6864      	ldr	r4, [r4, #4]
 800d0ea:	e7b2      	b.n	800d052 <_malloc_r+0x32>
 800d0ec:	4634      	mov	r4, r6
 800d0ee:	6876      	ldr	r6, [r6, #4]
 800d0f0:	e7b9      	b.n	800d066 <_malloc_r+0x46>
 800d0f2:	230c      	movs	r3, #12
 800d0f4:	603b      	str	r3, [r7, #0]
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	f000 f81c 	bl	800d134 <__malloc_unlock>
 800d0fc:	e7a1      	b.n	800d042 <_malloc_r+0x22>
 800d0fe:	6025      	str	r5, [r4, #0]
 800d100:	e7de      	b.n	800d0c0 <_malloc_r+0xa0>
 800d102:	bf00      	nop
 800d104:	200071fc 	.word	0x200071fc

0800d108 <_sbrk_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4d06      	ldr	r5, [pc, #24]	; (800d124 <_sbrk_r+0x1c>)
 800d10c:	2300      	movs	r3, #0
 800d10e:	4604      	mov	r4, r0
 800d110:	4608      	mov	r0, r1
 800d112:	602b      	str	r3, [r5, #0]
 800d114:	f7f4 ff70 	bl	8001ff8 <_sbrk>
 800d118:	1c43      	adds	r3, r0, #1
 800d11a:	d102      	bne.n	800d122 <_sbrk_r+0x1a>
 800d11c:	682b      	ldr	r3, [r5, #0]
 800d11e:	b103      	cbz	r3, 800d122 <_sbrk_r+0x1a>
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	20007204 	.word	0x20007204

0800d128 <__malloc_lock>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__malloc_lock+0x8>)
 800d12a:	f000 b809 	b.w	800d140 <__retarget_lock_acquire_recursive>
 800d12e:	bf00      	nop
 800d130:	20007208 	.word	0x20007208

0800d134 <__malloc_unlock>:
 800d134:	4801      	ldr	r0, [pc, #4]	; (800d13c <__malloc_unlock+0x8>)
 800d136:	f000 b804 	b.w	800d142 <__retarget_lock_release_recursive>
 800d13a:	bf00      	nop
 800d13c:	20007208 	.word	0x20007208

0800d140 <__retarget_lock_acquire_recursive>:
 800d140:	4770      	bx	lr

0800d142 <__retarget_lock_release_recursive>:
 800d142:	4770      	bx	lr

0800d144 <_init>:
 800d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d146:	bf00      	nop
 800d148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14a:	bc08      	pop	{r3}
 800d14c:	469e      	mov	lr, r3
 800d14e:	4770      	bx	lr

0800d150 <_fini>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	bf00      	nop
 800d154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d156:	bc08      	pop	{r3}
 800d158:	469e      	mov	lr, r3
 800d15a:	4770      	bx	lr
