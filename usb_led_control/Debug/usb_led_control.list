
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800e0a8  0800e0a8  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2dc  0800e2dc  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2dc  0800e2dc  0001e2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2e4  0800e2e4  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2e4  0800e2e4  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2e8  0800e2e8  0001e2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800e2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800e460  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800e500  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007070  200002b4  0800e5a0  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007324  0800e5a0  00027324  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030169  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a64  00000000  00000000  0005044b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002300  00000000  00000000  00055eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002098  00000000  00000000  000581b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ab9d  00000000  00000000  0005a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028fce  00000000  00000000  00064de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117866  00000000  00000000  0008ddb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a5619  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000096ec  00000000  00000000  001a566c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e090 	.word	0x0800e090

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800e090 	.word	0x0800e090

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002d0 	.word	0x200002d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f00d fbe4 	bl	800ddb4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200002d0 	.word	0x200002d0
 800067c:	0800e0a8 	.word	0x0800e0a8
 8000680:	20000378 	.word	0x20000378
 8000684:	20000778 	.word	0x20000778
 8000688:	0800e1cc 	.word	0x0800e1cc

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f00d fb4b 	bl	800dd98 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f00d fb1d 	bl	800dd98 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002d0 	.word	0x200002d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002d0 	.word	0x200002d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002d0 	.word	0x200002d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ff46 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff25 	bl	8001880 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe8a 	bl	800176c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000b90 	.word	0x20000b90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000b90 	.word	0x20000b90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000b90 	.word	0x20000b90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000b90 	.word	0x20000b90
 8000e4c:	200002d0 	.word	0x200002d0

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000bc0 	.word	0x20000bc0

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000788 	.word	0x20000788
 8001044:	0800e0bc 	.word	0x0800e0bc
 8001048:	20000b90 	.word	0x20000b90
 800104c:	20000b88 	.word	0x20000b88
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000b90 	.word	0x20000b90

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000bc0 	.word	0x20000bc0

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000bc0 	.word	0x20000bc0

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000bc0 	.word	0x20000bc0

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fac1 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000b90 	.word	0x20000b90
 8001348:	0800e1e0 	.word	0x0800e1e0
 800134c:	20000bc0 	.word	0x20000bc0

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000bc0 	.word	0x20000bc0
 8001398:	20000b90 	.word	0x20000b90

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000bc0 	.word	0x20000bc0
 80014cc:	20000b90 	.word	0x20000b90

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000bc0 	.word	0x20000bc0
 8001694:	20000b90 	.word	0x20000b90

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000b90 	.word	0x20000b90

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000bc0 	.word	0x20000bc0

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000b90 	.word	0x20000b90
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d077      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e008      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f2      	bcc.n	800178a <SEGGER_SYSVIEW_SendModule+0x1e>
 80017a4:	e000      	b.n	80017a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80017a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d055      	beq.n	800185a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017ae:	f3ef 8311 	mrs	r3, BASEPRI
 80017b2:	f04f 0120 	mov.w	r1, #32
 80017b6:	f381 8811 	msr	BASEPRI, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <SEGGER_SYSVIEW_SendModule+0x110>)
 80017be:	f7ff f8eb 	bl	8000998 <_PreparePacket>
 80017c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	e00b      	b.n	80017ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	6279      	str	r1, [r7, #36]	; 0x24
 80017dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	09db      	lsrs	r3, r3, #7
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b7f      	cmp	r3, #127	; 0x7f
 80017ee:	d8f0      	bhi.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	627a      	str	r2, [r7, #36]	; 0x24
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e00b      	b.n	8001824 <SEGGER_SYSVIEW_SendModule+0xb8>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	61f9      	str	r1, [r7, #28]
 8001816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	09db      	lsrs	r3, r3, #7
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	d8f0      	bhi.n	800180c <SEGGER_SYSVIEW_SendModule+0xa0>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	4619      	mov	r1, r3
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff f878 	bl	8000938 <_EncodeStr>
 8001848:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800184a:	2216      	movs	r2, #22
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f7ff f990 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4798      	blx	r3
    }
  }
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000bb8 	.word	0x20000bb8
 800187c:	20000bc0 	.word	0x20000bc0

08001880 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000bb8 	.word	0x20000bb8

080018bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018c2:	f3ef 8311 	mrs	r3, BASEPRI
 80018c6:	f04f 0120 	mov.w	r1, #32
 80018ca:	f381 8811 	msr	BASEPRI, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018d2:	f7ff f861 	bl	8000998 <_PreparePacket>
 80018d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	09db      	lsrs	r3, r3, #7
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d8f0      	bhi.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001916:	221b      	movs	r2, #27
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff f92a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f383 8811 	msr	BASEPRI, r3
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000bc0 	.word	0x20000bc0
 8001934:	20000bbc 	.word	0x20000bbc

08001938 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001938:	b40f      	push	{r0, r1, r2, r3}
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f7ff fa7f 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800195c:	b004      	add	sp, #16
 800195e:	4770      	bx	lr

08001960 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <_cbSendSystemDesc+0x14>)
 8001966:	f7ff feab 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <_cbSendSystemDesc+0x18>)
 800196c:	f7ff fea8 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800e0c4 	.word	0x0800e0c4
 8001978:	0800e0f8 	.word	0x0800e0f8

0800197c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800198c:	f7ff fb1e 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001990:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001994:	f7ff fb5e 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	08001961 	.word	0x08001961
 80019a4:	0800e1ec 	.word	0x0800e1ec

080019a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e048      	b.n	8001a46 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00a fa79 	bl	800bebc <uxTaskGetStackHighWaterMark>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3310      	adds	r3, #16
 80019dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019de:	491f      	ldr	r1, [pc, #124]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4c16      	ldr	r4, [pc, #88]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4423      	add	r3, r4
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681c      	ldr	r4, [r3, #0]
 8001a12:	4d12      	ldr	r5, [pc, #72]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	442b      	add	r3, r5
 8001a20:	330c      	adds	r3, #12
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	4e0d      	ldr	r6, [pc, #52]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4433      	add	r3, r6
 8001a32:	3310      	adds	r3, #16
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462b      	mov	r3, r5
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	f000 f855 	bl	8001aea <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <_cbSendTaskList+0xb8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3b1      	bcc.n	80019b4 <_cbSendTaskList+0xc>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000ca4 	.word	0x20000ca4
 8001a60:	20000d44 	.word	0x20000d44

08001a64 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a6c:	f009 ff0e 	bl	800b88c <xTaskGetTickCountFromISR>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	469a      	mov	sl, r3
 8001a76:	4693      	mov	fp, r2
 8001a78:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f04f 0a00 	mov.w	sl, #0
 8001a88:	f04f 0b00 	mov.w	fp, #0
 8001a8c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a90:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a94:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a98:	4652      	mov	r2, sl
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	1a14      	subs	r4, r2, r0
 8001a9e:	eb63 0501 	sbc.w	r5, r3, r1
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00ab      	lsls	r3, r5, #2
 8001aac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001ab0:	00a2      	lsls	r2, r4, #2
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 0800 	adds.w	r8, r4, r0
 8001aba:	eb45 0901 	adc.w	r9, r5, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ada:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001aea <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2214      	movs	r2, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00c f957 	bl	800ddb4 <memset>
  TaskInfo.TaskID     = TaskID;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fcd6 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b32:	f000 fc90 	bl	8002456 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b36:	f7ff ff21 	bl	800197c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3a:	f000 f84f 	bl	8001bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3e:	f000 f93d 	bl	8001dbc <MX_GPIO_Init>
  MX_ETH_Init();
 8001b42:	f000 f8bd 	bl	8001cc0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b46:	f000 f909 	bl	8001d5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b4a:	f008 fa71 	bl	800a030 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <main+0x84>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <main+0x88>)
 8001b56:	f008 fbbf 	bl	800a2d8 <osTimerNew>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <main+0x8c>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <main+0x8c>)
 8001b62:	681c      	ldr	r4, [r3, #0]
 8001b64:	f009 fe82 	bl	800b86c <xTaskGetTickCount>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4620      	mov	r0, r4
 8001b76:	f00a fbe1 	bl	800c33c <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <main+0x90>)
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	2010      	movs	r0, #16
 8001b80:	f008 fc2e 	bl	800a3e0 <osMessageQueueNew>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <main+0x94>)
 8001b88:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <main+0x98>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <main+0x9c>)
 8001b90:	f008 fab8 	bl	800a104 <osThreadNew>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <main+0xa0>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <main+0xa4>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <main+0xa8>)
 8001ba0:	f008 fab0 	bl	800a104 <osThreadNew>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <main+0xac>)
 8001ba8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001baa:	f008 fa75 	bl	800a098 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <main+0x82>
 8001bb0:	0800e254 	.word	0x0800e254
 8001bb4:	08001f51 	.word	0x08001f51
 8001bb8:	20000ec4 	.word	0x20000ec4
 8001bbc:	0800e23c 	.word	0x0800e23c
 8001bc0:	20000ec0 	.word	0x20000ec0
 8001bc4:	0800e1f4 	.word	0x0800e1f4
 8001bc8:	08001f01 	.word	0x08001f01
 8001bcc:	20000eb8 	.word	0x20000eb8
 8001bd0:	0800e218 	.word	0x0800e218
 8001bd4:	08001f21 	.word	0x08001f21
 8001bd8:	20000ebc 	.word	0x20000ebc

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	2234      	movs	r2, #52	; 0x34
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00c f8e2 	bl	800ddb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c00:	f002 fd00 	bl	8004604 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fd2d 	bl	80046c4 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c70:	f000 f996 	bl	8001fa0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c74:	f002 fcd6 	bl	8004624 <HAL_PWREx_EnableOverDrive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c7e:	f000 f98f 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 ffbe 	bl	8004c20 <HAL_RCC_ClockConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001caa:	f000 f979 	bl	8001fa0 <Error_Handler>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3750      	adds	r7, #80	; 0x50
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <MX_ETH_Init+0x88>)
 8001cc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd8:	22e1      	movs	r2, #225	; 0xe1
 8001cda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cf2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cfa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <MX_ETH_Init+0x90>)
 8001d00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <MX_ETH_Init+0x94>)
 8001d06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d12:	f000 fcd3 	bl	80026bc <HAL_ETH_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 f940 	bl	8001fa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d26:	f00c f845 	bl	800ddb4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d2c:	2221      	movs	r2, #33	; 0x21
 8001d2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000d80 	.word	0x20000d80
 8001d48:	40028000 	.word	0x40028000
 8001d4c:	20000ec8 	.word	0x20000ec8
 8001d50:	20000214 	.word	0x20000214
 8001d54:	20000174 	.word	0x20000174
 8001d58:	20000d48 	.word	0x20000d48

08001d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MX_USART3_UART_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001da0:	f004 f89e 	bl	8005ee0 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001daa:	f000 f8f9 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000e30 	.word	0x20000e30
 8001db8:	40004800 	.word	0x40004800

08001dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e68:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <MX_GPIO_Init+0x138>)
 8001e6a:	f001 f8f9 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2140      	movs	r1, #64	; 0x40
 8001e72:	4821      	ldr	r0, [pc, #132]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001e74:	f001 f8f4 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481b      	ldr	r0, [pc, #108]	; (8001efc <MX_GPIO_Init+0x140>)
 8001e90:	f000 ff3a 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e94:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <MX_GPIO_Init+0x138>)
 8001eae:	f000 ff2b 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001eca:	f000 ff1d 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001ee2:	f000 ff11 	bl	8002d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40020800 	.word	0x40020800

08001f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f08:	f00b f968 	bl	800d1dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f008 f99f 	bl	800a250 <osDelay>
    CDC_Transmit_FS((uint8_t*)"test", 4);
 8001f12:	2104      	movs	r1, #4
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <StartDefaultTask+0x1c>)
 8001f16:	f00b fa2b 	bl	800d370 <CDC_Transmit_FS>
    osDelay(1);
 8001f1a:	e7f7      	b.n	8001f0c <StartDefaultTask+0xc>
 8001f1c:	0800e148 	.word	0x0800e148

08001f20 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f008 f991 	bl	800a250 <osDelay>
    uint8_t command[32];
    xQueueReceive(commandQueueHandle, command, 100);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <commandReaderEntry+0x2c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f107 0108 	add.w	r1, r7, #8
 8001f36:	2264      	movs	r2, #100	; 0x64
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f008 ff2b 	bl	800ad94 <xQueueReceive>

    SEGGER_SYSVIEW_PrintfHost((uint8_t*)command);
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fcf8 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
  {
 8001f48:	e7ee      	b.n	8001f28 <commandReaderEntry+0x8>
 8001f4a:	bf00      	nop
 8001f4c:	20000ec0 	.word	0x20000ec0

08001f50 <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  //SEGGER_SYSVIEW_PrintfHost("sender");
  uint8_t *data = "Hello World from USB CDC\n";
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <testCommandTimerEntry+0x24>)
 8001f5a:	60fb      	str	r3, [r7, #12]
  xQueueSend(commandQueueHandle, data, 100);
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <testCommandTimerEntry+0x28>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	2300      	movs	r3, #0
 8001f62:	2264      	movs	r2, #100	; 0x64
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	f008 fd6f 	bl	800aa48 <xQueueGenericSend>

  /* USER CODE END testCommandTimerEntry */
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	0800e150 	.word	0x0800e150
 8001f78:	20000ec0 	.word	0x20000ec0

08001f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f8e:	f000 fa6f 	bl	8002470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40001000 	.word	0x40001000

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <Error_Handler+0x8>
	...

08001fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	f06f 0001 	mvn.w	r0, #1
 8001fea:	f000 fb3d 	bl	8002668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_ETH_MspInit+0x158>)
 800201a:	4293      	cmp	r3, r2
 800201c:	f040 8096 	bne.w	800214c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a46      	ldr	r2, [pc, #280]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800203e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a40      	ldr	r2, [pc, #256]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a3a      	ldr	r2, [pc, #232]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	; 0x30
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	6313      	str	r3, [r2, #48]	; 0x30
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 80020b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_ETH_MspInit+0x15c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020c8:	2332      	movs	r3, #50	; 0x32
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d8:	230b      	movs	r3, #11
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	481e      	ldr	r0, [pc, #120]	; (800215c <HAL_ETH_MspInit+0x160>)
 80020e4:	f000 fe10 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020e8:	2386      	movs	r3, #134	; 0x86
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020f8:	230b      	movs	r3, #11
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	4817      	ldr	r0, [pc, #92]	; (8002160 <HAL_ETH_MspInit+0x164>)
 8002104:	f000 fe00 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800211a:	230b      	movs	r3, #11
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <HAL_ETH_MspInit+0x168>)
 8002126:	f000 fdef 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800212a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213c:	230b      	movs	r3, #11
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	4808      	ldr	r0, [pc, #32]	; (8002168 <HAL_ETH_MspInit+0x16c>)
 8002148:	f000 fdde 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40028000 	.word	0x40028000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020800 	.word	0x40020800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40021800 	.word	0x40021800

0800216c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0ae      	sub	sp, #184	; 0xb8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2290      	movs	r2, #144	; 0x90
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f00b fe11 	bl	800ddb4 <memset>
  if(huart->Instance==USART3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_UART_MspInit+0xb4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d13c      	bne.n	8002216 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800219c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 ff90 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021b6:	f7ff fef3 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_UART_MspInit+0xb8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_UART_MspInit+0xb8>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_UART_MspInit+0xb8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_UART_MspInit+0xb8>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_UART_MspInit+0xb8>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_UART_MspInit+0xb8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002204:	2307      	movs	r3, #7
 8002206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_UART_MspInit+0xbc>)
 8002212:	f000 fd79 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	37b8      	adds	r7, #184	; 0xb8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40004800 	.word	0x40004800
 8002224:	40023800 	.word	0x40023800
 8002228:	40020c00 	.word	0x40020c00

0800222c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_InitTick+0xe0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_InitTick+0xe0>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_InitTick+0xe0>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002254:	f107 0210 	add.w	r2, r7, #16
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f002 ff04 	bl	800506c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800226e:	f002 fed5 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8002272:	6378      	str	r0, [r7, #52]	; 0x34
 8002274:	e004      	b.n	8002280 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002276:	f002 fed1 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 800227a:	4603      	mov	r3, r0
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_InitTick+0xe4>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	0c9b      	lsrs	r3, r3, #18
 800228a:	3b01      	subs	r3, #1
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_InitTick+0xe8>)
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_InitTick+0xec>)
 8002292:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_InitTick+0xe8>)
 8002296:	f240 32e7 	movw	r2, #999	; 0x3e7
 800229a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_InitTick+0xe8>)
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <HAL_InitTick+0xe8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_InitTick+0xe8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_InitTick+0xe8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022b4:	4817      	ldr	r0, [pc, #92]	; (8002314 <HAL_InitTick+0xe8>)
 80022b6:	f003 fb33 	bl	8005920 <HAL_TIM_Base_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11b      	bne.n	8002300 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022c8:	4812      	ldr	r0, [pc, #72]	; (8002314 <HAL_InitTick+0xe8>)
 80022ca:	f003 fb8b 	bl	80059e4 <HAL_TIM_Base_Start_IT>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022dc:	2036      	movs	r0, #54	; 0x36
 80022de:	f000 f9df 	bl	80026a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0f      	cmp	r3, #15
 80022e6:	d808      	bhi.n	80022fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022e8:	2200      	movs	r2, #0
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	2036      	movs	r0, #54	; 0x36
 80022ee:	f000 f9bb 	bl	8002668 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_InitTick+0xf0>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e002      	b.n	8002300 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002300:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002304:	4618      	mov	r0, r3
 8002306:	3738      	adds	r7, #56	; 0x38
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	431bde83 	.word	0x431bde83
 8002314:	20000ed0 	.word	0x20000ed0
 8002318:	40001000 	.word	0x40001000
 800231c:	20000004 	.word	0x20000004

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <NMI_Handler+0x4>

08002326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <HardFault_Handler+0x4>

0800232c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <MemManage_Handler+0x4>

08002332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <BusFault_Handler+0x4>

08002338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <UsageFault_Handler+0x4>

0800233e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM6_DAC_IRQHandler+0x10>)
 8002352:	f003 fbbf 	bl	8005ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000ed0 	.word	0x20000ed0

08002360 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <OTG_FS_IRQHandler+0x10>)
 8002366:	f000 ffda 	bl	800331e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20006e0c 	.word	0x20006e0c

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f00b fcbc 	bl	800dd20 <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20080000 	.word	0x20080000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	20000f1c 	.word	0x20000f1c
 80023dc:	20007328 	.word	0x20007328

080023e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800243c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800240a:	490e      	ldr	r1, [pc, #56]	; (8002444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002420:	4c0b      	ldr	r4, [pc, #44]	; (8002450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800242e:	f7ff ffd7 	bl	80023e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f00b fc7b 	bl	800dd2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002436:	f7ff fb79 	bl	8001b2c <main>
  bx  lr    
 800243a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002448:	0800e2ec 	.word	0x0800e2ec
  ldr r2, =_sbss
 800244c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8002450:	20007324 	.word	0x20007324

08002454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC_IRQHandler>

08002456 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245a:	2003      	movs	r0, #3
 800245c:	f000 f8f9 	bl	8002652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002460:	200f      	movs	r0, #15
 8002462:	f7ff fee3 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002466:	f7ff fda1 	bl	8001fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x20>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_IncTick+0x24>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000008 	.word	0x20000008
 8002494:	20000f20 	.word	0x20000f20

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000f20 	.word	0x20000f20

080024b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff ffee 	bl	8002498 <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d005      	beq.n	80024d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_Delay+0x44>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d6:	bf00      	nop
 80024d8:	f7ff ffde 	bl	8002498 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8f7      	bhi.n	80024d8 <HAL_Delay+0x28>
  {
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <__NVIC_SetPriorityGrouping+0x40>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x40>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	05fa0000 	.word	0x05fa0000

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff4c 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267a:	f7ff ff61 	bl	8002540 <__NVIC_GetPriorityGrouping>
 800267e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f7ff ffb1 	bl	80025ec <NVIC_EncodePriority>
 800268a:	4602      	mov	r2, r0
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff80 	bl	8002598 <__NVIC_SetPriority>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff54 	bl	800255c <__NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06a      	b.n	80027a4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2223      	movs	r2, #35	; 0x23
 80026dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fc8b 	bl	8001ffc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_ETH_Init+0xf0>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a30      	ldr	r2, [pc, #192]	; (80027ac <HAL_ETH_Init+0xf0>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_ETH_Init+0xf0>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_ETH_Init+0xf4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_ETH_Init+0xf4>)
 8002704:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002708:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_ETH_Init+0xf4>)
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4927      	ldr	r1, [pc, #156]	; (80027b0 <HAL_ETH_Init+0xf4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_ETH_Init+0xf4>)
 800271a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002732:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002734:	f7ff feb0 	bl	8002498 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800273a:	e011      	b.n	8002760 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800273c:	f7ff feac 	bl	8002498 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800274a:	d909      	bls.n	8002760 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2204      	movs	r2, #4
 8002750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	22e0      	movs	r2, #224	; 0xe0
 8002758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e021      	b.n	80027a4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e4      	bne.n	800273c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f958 	bl	8002a28 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9ff 	bl	8002b7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa55 	bl	8002c2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	461a      	mov	r2, r3
 800278a:	2100      	movs	r1, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f9bd 	bl	8002b0c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2210      	movs	r2, #16
 800279e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800

080027b4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4b51      	ldr	r3, [pc, #324]	; (8002910 <ETH_SetMACConfig+0x15c>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	7c1b      	ldrb	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <ETH_SetMACConfig+0x28>
 80027d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027da:	e000      	b.n	80027de <ETH_SetMACConfig+0x2a>
 80027dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7c5b      	ldrb	r3, [r3, #17]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <ETH_SetMACConfig+0x38>
 80027e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ea:	e000      	b.n	80027ee <ETH_SetMACConfig+0x3a>
 80027ec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	7fdb      	ldrb	r3, [r3, #31]
 80027fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002802:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	7f92      	ldrb	r2, [r2, #30]
 8002808:	2a00      	cmp	r2, #0
 800280a:	d102      	bne.n	8002812 <ETH_SetMACConfig+0x5e>
 800280c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002810:	e000      	b.n	8002814 <ETH_SetMACConfig+0x60>
 8002812:	2200      	movs	r2, #0
                        macconf->Speed |
 8002814:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	7f1b      	ldrb	r3, [r3, #28]
 800281a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800281c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002822:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	791b      	ldrb	r3, [r3, #4]
 8002828:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800282a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002832:	2a00      	cmp	r2, #0
 8002834:	d102      	bne.n	800283c <ETH_SetMACConfig+0x88>
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	e000      	b.n	800283e <ETH_SetMACConfig+0x8a>
 800283c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800283e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7bdb      	ldrb	r3, [r3, #15]
 8002844:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002846:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800284c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002854:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002856:	4313      	orrs	r3, r2
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800286e:	2001      	movs	r0, #1
 8002870:	f7ff fe1e 	bl	80024b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	f64f 7341 	movw	r3, #65345	; 0xff41
 800288a:	4013      	ands	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800289a:	2a00      	cmp	r2, #0
 800289c:	d101      	bne.n	80028a2 <ETH_SetMACConfig+0xee>
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	e000      	b.n	80028a4 <ETH_SetMACConfig+0xf0>
 80028a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028b2:	2a01      	cmp	r2, #1
 80028b4:	d101      	bne.n	80028ba <ETH_SetMACConfig+0x106>
 80028b6:	2208      	movs	r2, #8
 80028b8:	e000      	b.n	80028bc <ETH_SetMACConfig+0x108>
 80028ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028c4:	2a01      	cmp	r2, #1
 80028c6:	d101      	bne.n	80028cc <ETH_SetMACConfig+0x118>
 80028c8:	2204      	movs	r2, #4
 80028ca:	e000      	b.n	80028ce <ETH_SetMACConfig+0x11a>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028d6:	2a01      	cmp	r2, #1
 80028d8:	d101      	bne.n	80028de <ETH_SetMACConfig+0x12a>
 80028da:	2202      	movs	r2, #2
 80028dc:	e000      	b.n	80028e0 <ETH_SetMACConfig+0x12c>
 80028de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f7ff fdd9 	bl	80024b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	ff20810f 	.word	0xff20810f

08002914 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <ETH_SetDMAConfig+0x110>)
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	7b1b      	ldrb	r3, [r3, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <ETH_SetDMAConfig+0x2c>
 800293a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800293e:	e000      	b.n	8002942 <ETH_SetDMAConfig+0x2e>
 8002940:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7b5b      	ldrb	r3, [r3, #13]
 8002946:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002948:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	7f52      	ldrb	r2, [r2, #29]
 800294e:	2a00      	cmp	r2, #0
 8002950:	d102      	bne.n	8002958 <ETH_SetDMAConfig+0x44>
 8002952:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002956:	e000      	b.n	800295a <ETH_SetDMAConfig+0x46>
 8002958:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800295a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	7b9b      	ldrb	r3, [r3, #14]
 8002960:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002962:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002968:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
 800296e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002970:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7f9b      	ldrb	r3, [r3, #30]
 8002976:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002978:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800297e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002986:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002988:	4313      	orrs	r3, r2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff fd80 	bl	80024b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b8:	461a      	mov	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	791b      	ldrb	r3, [r3, #4]
 80029c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7ff fd51 	bl	80024b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	f8de3f23 	.word	0xf8de3f23

08002a28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0a6      	sub	sp, #152	; 0x98
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a64:	2300      	movs	r3, #0
 8002a66:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fe86 	bl	80027b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002adc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ae2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	4619      	mov	r1, r3
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff08 	bl	8002914 <ETH_SetDMAConfig>
}
 8002b04:	bf00      	nop
 8002b06:	3798      	adds	r7, #152	; 0x98
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	3204      	adds	r2, #4
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <ETH_MACAddressConfig+0x68>)
 8002b2e:	4413      	add	r3, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3303      	adds	r3, #3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	061a      	lsls	r2, r3, #24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3302      	adds	r3, #2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4313      	orrs	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <ETH_MACAddressConfig+0x6c>)
 8002b5e:	4413      	add	r3, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40028040 	.word	0x40028040
 8002b78:	40028044 	.word	0x40028044

08002b7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e03e      	b.n	8002c08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68d9      	ldr	r1, [r3, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	3206      	adds	r2, #6
 8002bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d80c      	bhi.n	8002bec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68d9      	ldr	r1, [r3, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	e004      	b.n	8002bf6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d9bd      	bls.n	8002b8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c20:	611a      	str	r2, [r3, #16]
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e046      	b.n	8002cca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6919      	ldr	r1, [r3, #16]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2200      	movs	r2, #0
 8002c58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c80:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	3212      	adds	r2, #18
 8002c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d80c      	bhi.n	8002cba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6919      	ldr	r1, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	e004      	b.n	8002cc4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d9b5      	bls.n	8002c3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfa:	60da      	str	r2, [r3, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e175      	b.n	8003014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f040 8164 	bne.w	800300e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d005      	beq.n	8002d5e <HAL_GPIO_Init+0x56>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d130      	bne.n	8002dc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d94:	2201      	movs	r2, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 0201 	and.w	r2, r3, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d017      	beq.n	8002dfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d123      	bne.n	8002e50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3208      	adds	r2, #8
 8002e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	08da      	lsrs	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3208      	adds	r2, #8
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0203 	and.w	r2, r3, #3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80be 	beq.w	800300e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_GPIO_Init+0x324>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_GPIO_Init+0x324>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_GPIO_Init+0x324>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_GPIO_Init+0x32c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d037      	beq.n	8002f46 <HAL_GPIO_Init+0x23e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_GPIO_Init+0x23a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_GPIO_Init+0x334>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <HAL_GPIO_Init+0x236>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a55      	ldr	r2, [pc, #340]	; (8003040 <HAL_GPIO_Init+0x338>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d025      	beq.n	8002f3a <HAL_GPIO_Init+0x232>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a54      	ldr	r2, [pc, #336]	; (8003044 <HAL_GPIO_Init+0x33c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_GPIO_Init+0x22e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a53      	ldr	r2, [pc, #332]	; (8003048 <HAL_GPIO_Init+0x340>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x22a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x344>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	; (8003050 <HAL_GPIO_Init+0x348>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_GPIO_Init+0x34c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x21a>
 8002f1e:	2309      	movs	r3, #9
 8002f20:	e012      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f22:	230a      	movs	r3, #10
 8002f24:	e010      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00e      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00c      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00a      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f32:	2305      	movs	r3, #5
 8002f34:	e008      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e004      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f46:	2300      	movs	r3, #0
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f002 0203 	and.w	r2, r2, #3
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4093      	lsls	r3, r2
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f58:	4935      	ldr	r1, [pc, #212]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_GPIO_Init+0x354>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8a:	4a34      	ldr	r2, [pc, #208]	; (800305c <HAL_GPIO_Init+0x354>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f90:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_GPIO_Init+0x354>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <HAL_GPIO_Init+0x354>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	f67f ae86 	bls.w	8002d28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40013800 	.word	0x40013800
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40021400 	.word	0x40021400
 800304c:	40021800 	.word	0x40021800
 8003050:	40021c00 	.word	0x40021c00
 8003054:	40022000 	.word	0x40022000
 8003058:	40022400 	.word	0x40022400
 800305c:	40013c00 	.word	0x40013c00

08003060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
 800306c:	4613      	mov	r3, r2
 800306e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003070:	787b      	ldrb	r3, [r7, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800307c:	e003      	b.n	8003086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	041a      	lsls	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	619a      	str	r2, [r3, #24]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003094:	b08f      	sub	sp, #60	; 0x3c
 8003096:	af0a      	add	r7, sp, #40	; 0x28
 8003098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e116      	b.n	80032d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f00a fab0 	bl	800d624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fc6f 	bl	80069c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	687e      	ldr	r6, [r7, #4]
 80030f0:	466d      	mov	r5, sp
 80030f2:	f106 0410 	add.w	r4, r6, #16
 80030f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003102:	e885 0003 	stmia.w	r5, {r0, r1}
 8003106:	1d33      	adds	r3, r6, #4
 8003108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310a:	6838      	ldr	r0, [r7, #0]
 800310c:	f003 fb50 	bl	80067b0 <USB_CoreInit>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0d7      	b.n	80032d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fc5d 	bl	80069e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e04a      	b.n	80031ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	333d      	adds	r3, #61	; 0x3d
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	333c      	adds	r3, #60	; 0x3c
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	b298      	uxth	r0, r3
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3344      	adds	r3, #68	; 0x44
 8003170:	4602      	mov	r2, r0
 8003172:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3340      	adds	r3, #64	; 0x40
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3348      	adds	r3, #72	; 0x48
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	334c      	adds	r3, #76	; 0x4c
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3354      	adds	r3, #84	; 0x54
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	3301      	adds	r3, #1
 80031c8:	73fb      	strb	r3, [r7, #15]
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3af      	bcc.n	8003134 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e044      	b.n	8003264 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	3301      	adds	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3b5      	bcc.n	80031da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	687e      	ldr	r6, [r7, #4]
 8003276:	466d      	mov	r5, sp
 8003278:	f106 0410 	add.w	r4, r6, #16
 800327c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003284:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003288:	e885 0003 	stmia.w	r5, {r0, r1}
 800328c:	1d33      	adds	r3, r6, #4
 800328e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003290:	6838      	ldr	r0, [r7, #0]
 8003292:	f003 fbf5 	bl	8006a80 <USB_DevInit>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e014      	b.n	80032d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f001 f97b 	bl	80045bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 fd43 	bl	8007d56 <USB_DevDisconnect>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_Start+0x16>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e012      	b.n	8003316 <HAL_PCD_Start+0x3c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 fb51 	bl	80069a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f004 fd04 	bl	8007d14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800331e:	b590      	push	{r4, r7, lr}
 8003320:	b08d      	sub	sp, #52	; 0x34
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f004 fdc2 	bl	8007ebe <USB_GetMode>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 84b7 	bne.w	8003cb0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fd26 	bl	8007d98 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 84ad 	beq.w	8003cae <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f004 fd13 	bl	8007d98 <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d107      	bne.n	800338c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f002 0202 	and.w	r2, r2, #2
 800338a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fd01 	bl	8007d98 <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d161      	bne.n	8003464 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0210 	bic.w	r2, r2, #16
 80033ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	0c5b      	lsrs	r3, r3, #17
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d124      	bne.n	8003426 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d035      	beq.n	8003454 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6a38      	ldr	r0, [r7, #32]
 80033fc:	f004 fb38 	bl	8007a70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340c:	441a      	add	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341e:	441a      	add	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	621a      	str	r2, [r3, #32]
 8003424:	e016      	b.n	8003454 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	0c5b      	lsrs	r3, r3, #17
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	2b06      	cmp	r3, #6
 8003430:	d110      	bne.n	8003454 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003438:	2208      	movs	r2, #8
 800343a:	4619      	mov	r1, r3
 800343c:	6a38      	ldr	r0, [r7, #32]
 800343e:	f004 fb17 	bl	8007a70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800344e:	441a      	add	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0210 	orr.w	r2, r2, #16
 8003462:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f004 fc95 	bl	8007d98 <USB_ReadInterrupts>
 800346e:	4603      	mov	r3, r0
 8003470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003474:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003478:	f040 80a7 	bne.w	80035ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f004 fc9a 	bl	8007dbe <USB_ReadDevAllOutEpInterrupt>
 800348a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800348c:	e099      	b.n	80035c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 808e 	beq.w	80035b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 fcbe 	bl	8007e26 <USB_ReadDevOutEPInterrupt>
 80034aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	461a      	mov	r2, r3
 80034c4:	2301      	movs	r3, #1
 80034c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fef0 	bl	80042b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	461a      	mov	r2, r3
 80034e8:	2308      	movs	r3, #8
 80034ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ffc6 	bl	8004480 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350a:	461a      	mov	r2, r3
 800350c:	2310      	movs	r3, #16
 800350e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d030      	beq.n	800357c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d109      	bne.n	800353a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003538:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	78db      	ldrb	r3, [r3, #3]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2200      	movs	r2, #0
 800355c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f00a f991 	bl	800d88c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	461a      	mov	r2, r3
 8003578:	2302      	movs	r3, #2
 800357a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003592:	461a      	mov	r2, r3
 8003594:	2320      	movs	r3, #32
 8003596:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ae:	461a      	mov	r2, r3
 80035b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	3301      	adds	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af62 	bne.w	800348e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fbe2 	bl	8007d98 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035de:	f040 80db 	bne.w	8003798 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fc03 	bl	8007df2 <USB_ReadDevAllInEpInterrupt>
 80035ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035f2:	e0cd      	b.n	8003790 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80c2 	beq.w	8003784 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f004 fc29 	bl	8007e62 <USB_ReadDevInEPInterrupt>
 8003610:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d057      	beq.n	80036cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	69f9      	ldr	r1, [r7, #28]
 8003638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800363c:	4013      	ands	r3, r2
 800363e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	461a      	mov	r2, r3
 800364e:	2301      	movs	r3, #1
 8003650:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d132      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	334c      	adds	r3, #76	; 0x4c
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4403      	add	r3, r0
 800367a:	3348      	adds	r3, #72	; 0x48
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4419      	add	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4403      	add	r3, r0
 800368e:	334c      	adds	r3, #76	; 0x4c
 8003690:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d113      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x3a2>
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	3354      	adds	r3, #84	; 0x54
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036b8:	461a      	mov	r2, r3
 80036ba:	2101      	movs	r1, #1
 80036bc:	f004 fc32 	bl	8007f24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f00a f85b 	bl	800d782 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	461a      	mov	r2, r3
 80036e4:	2308      	movs	r3, #8
 80036e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fe:	461a      	mov	r2, r3
 8003700:	2310      	movs	r3, #16
 8003702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	461a      	mov	r2, r3
 800371c:	2340      	movs	r3, #64	; 0x40
 800371e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d023      	beq.n	8003772 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800372a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372c:	6a38      	ldr	r0, [r7, #32]
 800372e:	f003 fb05 	bl	8006d3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	3338      	adds	r3, #56	; 0x38
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	3304      	adds	r3, #4
 8003744:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	78db      	ldrb	r3, [r3, #3]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f00a f8a8 	bl	800d8b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	461a      	mov	r2, r3
 800376e:	2302      	movs	r3, #2
 8003770:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800377c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fd08 	bl	8004194 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	3301      	adds	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f af2e 	bne.w	80035f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f004 fafb 	bl	8007d98 <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ac:	d122      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d108      	bne.n	80037de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037d4:	2100      	movs	r1, #0
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f00a fa22 	bl	800dc20 <HAL_PCDEx_LPM_Callback>
 80037dc:	e002      	b.n	80037e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f00a f846 	bl	800d870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 facd 	bl	8007d98 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003808:	d112      	bne.n	8003830 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f00a f802 	bl	800d824 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800382e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f004 faaf 	bl	8007d98 <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003844:	d121      	bne.n	800388a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003854:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800387a:	2101      	movs	r1, #1
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f00a f9cf 	bl	800dc20 <HAL_PCDEx_LPM_Callback>
 8003882:	e002      	b.n	800388a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f009 ffcd 	bl	800d824 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fa82 	bl	8007d98 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	f040 80b7 	bne.w	8003a10 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2110      	movs	r1, #16
 80038bc:	4618      	mov	r0, r3
 80038be:	f003 fa3d 	bl	8006d3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c6:	e046      	b.n	8003956 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	461a      	mov	r2, r3
 80038d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800390e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	440a      	add	r2, r1
 8003926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800392a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800392e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800394e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	3301      	adds	r3, #1
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395c:	429a      	cmp	r2, r3
 800395e:	d3b3      	bcc.n	80038c8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003972:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d016      	beq.n	80039aa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800398c:	f043 030b 	orr.w	r3, r3, #11
 8003990:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a2:	f043 030b 	orr.w	r3, r3, #11
 80039a6:	6453      	str	r3, [r2, #68]	; 0x44
 80039a8:	e015      	b.n	80039d6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	4619      	mov	r1, r3
 80039ba:	f242 032b 	movw	r3, #8235	; 0x202b
 80039be:	4313      	orrs	r3, r2
 80039c0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d0:	f043 030b 	orr.w	r3, r3, #11
 80039d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039fa:	461a      	mov	r2, r3
 80039fc:	f004 fa92 	bl	8007f24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 f9bf 	bl	8007d98 <USB_ReadInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d124      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 fa56 	bl	8007edc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 f9fe 	bl	8006e36 <USB_GetDevSpeed>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681c      	ldr	r4, [r3, #0]
 8003a46:	f001 fadd 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8003a4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	4620      	mov	r0, r4
 8003a56:	f002 ff03 	bl	8006860 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f009 feb9 	bl	800d7d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 f98f 	bl	8007d98 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d10a      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f009 fe96 	bl	800d7b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 0208 	and.w	r2, r2, #8
 8003a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 f97a 	bl	8007d98 <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d122      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aba:	2301      	movs	r3, #1
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e014      	b.n	8003aea <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fb27 	bl	8004132 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3e5      	bcc.n	8003ac0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 f94d 	bl	8007d98 <USB_ReadInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b08:	d13b      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	e02b      	b.n	8003b68 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3340      	adds	r3, #64	; 0x40
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d115      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da12      	bge.n	8003b62 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	333f      	adds	r3, #63	; 0x3f
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fae8 	bl	8004132 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d3ce      	bcc.n	8003b10 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f004 f906 	bl	8007d98 <USB_ReadInterrupts>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b96:	d155      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9c:	e045      	b.n	8003c2a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d12e      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da2b      	bge.n	8003c24 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bd8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d121      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c20:	6053      	str	r3, [r2, #4]
            break;
 8003c22:	e007      	b.n	8003c34 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	3301      	adds	r3, #1
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3b4      	bcc.n	8003b9e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f004 f8a5 	bl	8007d98 <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d10a      	bne.n	8003c70 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f009 fe3a 	bl	800d8d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f004 f88f 	bl	8007d98 <USB_ReadInterrupts>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d115      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f009 fe2a 	bl	800d8f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	e000      	b.n	8003cb0 <HAL_PCD_IRQHandler+0x992>
      return;
 8003cae:	bf00      	nop
    }
  }
}
 8003cb0:	3734      	adds	r7, #52	; 0x34
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd90      	pop	{r4, r7, pc}

08003cb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_PCD_SetAddress+0x1a>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e013      	b.n	8003cf8 <HAL_PCD_SetAddress+0x42>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 ffed 	bl	8007cc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	70fb      	strb	r3, [r7, #3]
 8003d12:	460b      	mov	r3, r1
 8003d14:	803b      	strh	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da0f      	bge.n	8003d46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3338      	adds	r3, #56	; 0x38
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	705a      	strb	r2, [r3, #1]
 8003d44:	e00f      	b.n	8003d66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d72:	883a      	ldrh	r2, [r7, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	78ba      	ldrb	r2, [r7, #2]
 8003d7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d90:	78bb      	ldrb	r3, [r7, #2]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d102      	bne.n	8003d9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_PCD_EP_Open+0xaa>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e00e      	b.n	8003dc8 <HAL_PCD_EP_Open+0xc8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 f861 	bl	8006e80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da0f      	bge.n	8003e04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3338      	adds	r3, #56	; 0x38
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	705a      	strb	r2, [r3, #1]
 8003e02:	e00f      	b.n	8003e24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_EP_Close+0x6e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00e      	b.n	8003e5c <HAL_PCD_EP_Close+0x8c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 f89f 	bl	8006f90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	460b      	mov	r3, r1
 8003e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	f003 fb86 	bl	80075e8 <USB_EP0StartXfer>
 8003edc:	e008      	b.n	8003ef0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6979      	ldr	r1, [r7, #20]
 8003eec:	f003 f92c 	bl	8007148 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f1c:	681b      	ldr	r3, [r3, #0]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	460b      	mov	r3, r1
 8003f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	3338      	adds	r3, #56	; 0x38
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3304      	adds	r3, #4
 8003f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2201      	movs	r2, #1
 8003f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f84:	7afb      	ldrb	r3, [r7, #11]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6979      	ldr	r1, [r7, #20]
 8003f9c:	f003 fb24 	bl	80075e8 <USB_EP0StartXfer>
 8003fa0:	e008      	b.n	8003fb4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6979      	ldr	r1, [r7, #20]
 8003fb0:	f003 f8ca 	bl	8007148 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d901      	bls.n	8003fdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e050      	b.n	800407e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	da0f      	bge.n	8004004 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	f003 020f 	and.w	r2, r3, #15
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	3338      	adds	r3, #56	; 0x38
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	705a      	strb	r2, [r3, #1]
 8004002:	e00d      	b.n	8004020 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_PCD_EP_SetStall+0x82>
 800403c:	2302      	movs	r3, #2
 800403e:	e01e      	b.n	800407e <HAL_PCD_EP_SetStall+0xc0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fd66 	bl	8007b20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	b2d9      	uxtb	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800406e:	461a      	mov	r2, r3
 8004070:	f003 ff58 	bl	8007f24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d901      	bls.n	80040a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e042      	b.n	800412a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da0f      	bge.n	80040cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	3338      	adds	r3, #56	; 0x38
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	3304      	adds	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	705a      	strb	r2, [r3, #1]
 80040ca:	e00f      	b.n	80040ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_PCD_EP_ClrStall+0x86>
 8004108:	2302      	movs	r3, #2
 800410a:	e00e      	b.n	800412a <HAL_PCD_EP_ClrStall+0xa4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fd6e 	bl	8007bfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800413e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0c      	bge.n	8004160 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	3338      	adds	r3, #56	; 0x38
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e00c      	b.n	800417a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fb8d 	bl	80078a0 <USB_EPStopXfer>
 8004186:	4603      	mov	r3, r0
 8004188:	72fb      	strb	r3, [r7, #11]

  return ret;
 800418a:	7afb      	ldrb	r3, [r7, #11]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3338      	adds	r3, #56	; 0x38
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d901      	bls.n	80041cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e06c      	b.n	80042a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d902      	bls.n	80041e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3303      	adds	r3, #3
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f0:	e02b      	b.n	800424a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	d902      	bls.n	800420e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3303      	adds	r3, #3
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6919      	ldr	r1, [r3, #16]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004226:	b2db      	uxtb	r3, r3
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	4603      	mov	r3, r0
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f003 fbe1 	bl	80079f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	441a      	add	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	b29b      	uxth	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	429a      	cmp	r2, r3
 800425e:	d809      	bhi.n	8004274 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004268:	429a      	cmp	r2, r3
 800426a:	d203      	bcs.n	8004274 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1be      	bne.n	80041f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	429a      	cmp	r2, r3
 800427e:	d811      	bhi.n	80042a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	43db      	mvns	r3, r3
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a0:	4013      	ands	r3, r2
 80042a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	333c      	adds	r3, #60	; 0x3c
 80042c8:	3304      	adds	r3, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d17b      	bne.n	80043de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d015      	beq.n	800431c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4a61      	ldr	r2, [pc, #388]	; (8004478 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	f240 80b9 	bls.w	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80b3 	beq.w	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	e0a7      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	2320      	movs	r3, #32
 8004336:	6093      	str	r3, [r2, #8]
 8004338:	e098      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8093 	bne.w	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4a4b      	ldr	r2, [pc, #300]	; (8004478 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d90f      	bls.n	800436e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	6093      	str	r3, [r2, #8]
 800436c:	e07e      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	3304      	adds	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	0159      	lsls	r1, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	440b      	add	r3, r1
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d114      	bne.n	80043d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043b8:	461a      	mov	r2, r3
 80043ba:	2101      	movs	r1, #1
 80043bc:	f003 fdb2 	bl	8007f24 <USB_EP0_OutStart>
 80043c0:	e006      	b.n	80043d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	441a      	add	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f009 f9b8 	bl	800d74c <HAL_PCD_DataOutStageCallback>
 80043dc:	e046      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d124      	bne.n	8004430 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e032      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	2320      	movs	r3, #32
 8004420:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f009 f98f 	bl	800d74c <HAL_PCD_DataOutStageCallback>
 800442e:	e01d      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d114      	bne.n	8004460 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004458:	461a      	mov	r2, r3
 800445a:	2100      	movs	r1, #0
 800445c:	f003 fd62 	bl	8007f24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f009 f970 	bl	800d74c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	4f54300a 	.word	0x4f54300a
 800447c:	4f54310a 	.word	0x4f54310a

08004480 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	333c      	adds	r3, #60	; 0x3c
 8004498:	3304      	adds	r3, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a15      	ldr	r2, [pc, #84]	; (8004508 <PCD_EP_OutSetupPacket_int+0x88>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d90e      	bls.n	80044d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	461a      	mov	r2, r3
 80044ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f009 f927 	bl	800d728 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <PCD_EP_OutSetupPacket_int+0x88>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d90c      	bls.n	80044fc <PCD_EP_OutSetupPacket_int+0x7c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d108      	bne.n	80044fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044f4:	461a      	mov	r2, r3
 80044f6:	2101      	movs	r1, #1
 80044f8:	f003 fd14 	bl	8007f24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	4f54300a 	.word	0x4f54300a

0800450c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
 8004518:	4613      	mov	r3, r2
 800451a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800452a:	883b      	ldrh	r3, [r7, #0]
 800452c:	0419      	lsls	r1, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	430a      	orrs	r2, r1
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
 8004538:	e028      	b.n	800458c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4413      	add	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004548:	2300      	movs	r3, #0
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e00d      	b.n	800456a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	3340      	adds	r3, #64	; 0x40
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	3301      	adds	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	3b01      	subs	r3, #1
 8004570:	429a      	cmp	r2, r3
 8004572:	d3ec      	bcc.n	800454e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004574:	883b      	ldrh	r3, [r7, #0]
 8004576:	0418      	lsls	r0, r3, #16
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	3b01      	subs	r3, #1
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	4302      	orrs	r2, r0
 8004584:	3340      	adds	r3, #64	; 0x40
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_PCDEx_ActivateLPM+0x44>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	10000003 	.word	0x10000003

08004604 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40007000 	.word	0x40007000

08004624 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_PWREx_EnableOverDrive+0x98>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a22      	ldr	r2, [pc, #136]	; (80046bc <HAL_PWREx_EnableOverDrive+0x98>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_PWREx_EnableOverDrive+0x98>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004652:	f7fd ff21 	bl	8002498 <HAL_GetTick>
 8004656:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004658:	e009      	b.n	800466e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800465a:	f7fd ff1d 	bl	8002498 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004668:	d901      	bls.n	800466e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e022      	b.n	80046b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467a:	d1ee      	bne.n	800465a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004688:	f7fd ff06 	bl	8002498 <HAL_GetTick>
 800468c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800468e:	e009      	b.n	80046a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004690:	f7fd ff02 	bl	8002498 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800469e:	d901      	bls.n	80046a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e007      	b.n	80046b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b0:	d1ee      	bne.n	8004690 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40007000 	.word	0x40007000

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e29b      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8087 	beq.w	80047f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e8:	4b96      	ldr	r3, [pc, #600]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d00c      	beq.n	800470e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f4:	4b93      	ldr	r3, [pc, #588]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d112      	bne.n	8004726 <HAL_RCC_OscConfig+0x62>
 8004700:	4b90      	ldr	r3, [pc, #576]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470c:	d10b      	bne.n	8004726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470e:	4b8d      	ldr	r3, [pc, #564]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d06c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x130>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d168      	bne.n	80047f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e275      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x7a>
 8004730:	4b84      	ldr	r3, [pc, #528]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a83      	ldr	r2, [pc, #524]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e02e      	b.n	800479c <HAL_RCC_OscConfig+0xd8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x9c>
 8004746:	4b7f      	ldr	r3, [pc, #508]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7e      	ldr	r2, [pc, #504]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800474c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4b7c      	ldr	r3, [pc, #496]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7b      	ldr	r2, [pc, #492]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e01d      	b.n	800479c <HAL_RCC_OscConfig+0xd8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0xc0>
 800476a:	4b76      	ldr	r3, [pc, #472]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a75      	ldr	r2, [pc, #468]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a72      	ldr	r2, [pc, #456]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0xd8>
 8004784:	4b6f      	ldr	r3, [pc, #444]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a6e      	ldr	r2, [pc, #440]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6b      	ldr	r2, [pc, #428]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd fe78 	bl	8002498 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd fe74 	bl	8002498 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e229      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b61      	ldr	r3, [pc, #388]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0xe8>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fd fe64 	bl	8002498 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fd fe60 	bl	8002498 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e215      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	4b57      	ldr	r3, [pc, #348]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x110>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d069      	beq.n	80048d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004802:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480e:	4b4d      	ldr	r3, [pc, #308]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b08      	cmp	r3, #8
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x190>
 800481a:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x17a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1e9      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	493d      	ldr	r1, [pc, #244]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	e040      	b.n	80048d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d023      	beq.n	80048a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b39      	ldr	r3, [pc, #228]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd fe16 	bl	8002498 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004870:	f7fd fe12 	bl	8002498 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1c7      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	4b30      	ldr	r3, [pc, #192]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488e:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4929      	ldr	r1, [pc, #164]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
 80048a2:	e018      	b.n	80048d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a26      	ldr	r2, [pc, #152]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fdf2 	bl	8002498 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fd fdee 	bl	8002498 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e1a3      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d038      	beq.n	8004954 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ea:	4b16      	ldr	r3, [pc, #88]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80048ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fd fdcf 	bl	8002498 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fe:	f7fd fdcb 	bl	8002498 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e180      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x23a>
 800491c:	e01a      	b.n	8004954 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004922:	4a08      	ldr	r2, [pc, #32]	; (8004944 <HAL_RCC_OscConfig+0x280>)
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fd fdb5 	bl	8002498 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004932:	f7fd fdb1 	bl	8002498 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d903      	bls.n	8004948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e166      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
 8004944:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	4b92      	ldr	r3, [pc, #584]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 800494a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ee      	bne.n	8004932 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a4 	beq.w	8004aaa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004962:	4b8c      	ldr	r3, [pc, #560]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a88      	ldr	r2, [pc, #544]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	4b83      	ldr	r3, [pc, #524]	; (8004b98 <HAL_RCC_OscConfig+0x4d4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004996:	4b80      	ldr	r3, [pc, #512]	; (8004b98 <HAL_RCC_OscConfig+0x4d4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7f      	ldr	r2, [pc, #508]	; (8004b98 <HAL_RCC_OscConfig+0x4d4>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fd fd79 	bl	8002498 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fd fd75 	bl	8002498 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b64      	cmp	r3, #100	; 0x64
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e12a      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049bc:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCC_OscConfig+0x4d4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x31a>
 80049d0:	4b70      	ldr	r3, [pc, #448]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a6f      	ldr	r2, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e02d      	b.n	8004a3a <HAL_RCC_OscConfig+0x376>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x33c>
 80049e6:	4b6b      	ldr	r3, [pc, #428]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a6a      	ldr	r2, [pc, #424]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	4b68      	ldr	r3, [pc, #416]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a67      	ldr	r2, [pc, #412]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	e01c      	b.n	8004a3a <HAL_RCC_OscConfig+0x376>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCC_OscConfig+0x35e>
 8004a08:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a61      	ldr	r2, [pc, #388]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a5e      	ldr	r2, [pc, #376]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	e00b      	b.n	8004a3a <HAL_RCC_OscConfig+0x376>
 8004a22:	4b5c      	ldr	r3, [pc, #368]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	4a5b      	ldr	r2, [pc, #364]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2e:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a58      	ldr	r2, [pc, #352]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fd fd29 	bl	8002498 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fd fd25 	bl	8002498 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0d8      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ee      	beq.n	8004a4a <HAL_RCC_OscConfig+0x386>
 8004a6c:	e014      	b.n	8004a98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fd fd13 	bl	8002498 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fd fd0f 	bl	8002498 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e0c2      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8c:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ee      	bne.n	8004a76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80ae 	beq.w	8004c10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab4:	4b37      	ldr	r3, [pc, #220]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d06d      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d14b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fce0 	bl	8002498 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd fcdc 	bl	8002498 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e091      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	071b      	lsls	r3, r3, #28
 8004b26:	491b      	ldr	r1, [pc, #108]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fcae 	bl	8002498 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd fcaa 	bl	8002498 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e05f      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x47c>
 8004b5e:	e057      	b.n	8004c10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fd fc94 	bl	8002498 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd fc90 	bl	8002498 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e045      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <HAL_RCC_OscConfig+0x4d0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x4b0>
 8004b92:	e03d      	b.n	8004c10 <HAL_RCC_OscConfig+0x54c>
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b9c:	4b1f      	ldr	r3, [pc, #124]	; (8004c1c <HAL_RCC_OscConfig+0x558>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d030      	beq.n	8004c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d129      	bne.n	8004c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d122      	bne.n	8004c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d119      	bne.n	8004c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	3b01      	subs	r3, #1
 8004be6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d10f      	bne.n	8004c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800

08004c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0d0      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d910      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 020f 	bic.w	r2, r3, #15
 8004c4e:	4965      	ldr	r1, [pc, #404]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a58      	ldr	r2, [pc, #352]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d040      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d115      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e073      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e06b      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f023 0203 	bic.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4936      	ldr	r1, [pc, #216]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d14:	f7fd fbc0 	bl	8002498 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fd fbbc 	bl	8002498 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e053      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 020c 	and.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1eb      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d210      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 020f 	bic.w	r2, r3, #15
 8004d5a:	4922      	ldr	r1, [pc, #136]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f821 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x1cc>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1d0>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1d4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fa2a 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023c00 	.word	0x40023c00
 8004de8:	40023800 	.word	0x40023800
 8004dec:	0800e264 	.word	0x0800e264
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000004 	.word	0x20000004

08004df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dfc:	b094      	sub	sp, #80	; 0x50
 8004dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	647b      	str	r3, [r7, #68]	; 0x44
 8004e04:	2300      	movs	r3, #0
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e08:	2300      	movs	r3, #0
 8004e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e10:	4b79      	ldr	r3, [pc, #484]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d00d      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x40>
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	f200 80e1 	bhi.w	8004fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x34>
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e2a:	e0db      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b73      	ldr	r3, [pc, #460]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e30:	e0db      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e32:	4b73      	ldr	r3, [pc, #460]	; (8005000 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e36:	e0d8      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e38:	4b6f      	ldr	r3, [pc, #444]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e42:	4b6d      	ldr	r3, [pc, #436]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d063      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	2200      	movs	r2, #0
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
 8004e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	f04f 0000 	mov.w	r0, #0
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	0159      	lsls	r1, r3, #5
 8004e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e7c:	0150      	lsls	r0, r2, #5
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4621      	mov	r1, r4
 8004e84:	1a51      	subs	r1, r2, r1
 8004e86:	6139      	str	r1, [r7, #16]
 8004e88:	4629      	mov	r1, r5
 8004e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	018b      	lsls	r3, r1, #6
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	018a      	lsls	r2, r1, #6
 8004eaa:	4651      	mov	r1, sl
 8004eac:	ebb2 0801 	subs.w	r8, r2, r1
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	4690      	mov	r8, r2
 8004ecc:	4699      	mov	r9, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	eb18 0303 	adds.w	r3, r8, r3
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	eb49 0303 	adc.w	r3, r9, r3
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eea:	4629      	mov	r1, r5
 8004eec:	024b      	lsls	r3, r1, #9
 8004eee:	4621      	mov	r1, r4
 8004ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	024a      	lsls	r2, r1, #9
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	2200      	movs	r2, #0
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f08:	f7fb f9e4 	bl	80002d4 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4613      	mov	r3, r2
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f14:	e058      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f16:	4b38      	ldr	r3, [pc, #224]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	4611      	mov	r1, r2
 8004f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	0159      	lsls	r1, r3, #5
 8004f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f42:	0150      	lsls	r0, r2, #5
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f68:	ebb2 040a 	subs.w	r4, r2, sl
 8004f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	00eb      	lsls	r3, r5, #3
 8004f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7e:	00e2      	lsls	r2, r4, #3
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
 8004f84:	4643      	mov	r3, r8
 8004f86:	18e3      	adds	r3, r4, r3
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	eb45 0303 	adc.w	r3, r5, r3
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	028b      	lsls	r3, r1, #10
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fa8:	4621      	mov	r1, r4
 8004faa:	028a      	lsls	r2, r1, #10
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	61fa      	str	r2, [r7, #28]
 8004fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fbc:	f7fb f98a 	bl	80002d4 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fe2:	e002      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3750      	adds	r7, #80	; 0x50
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	007a1200 	.word	0x007a1200

08005004 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <HAL_RCC_GetHCLKFreq+0x14>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000000 	.word	0x20000000

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005020:	f7ff fff0 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0a9b      	lsrs	r3, r3, #10
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	0800e274 	.word	0x0800e274

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005048:	f7ff ffdc 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	0b5b      	lsrs	r3, r3, #13
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4903      	ldr	r1, [pc, #12]	; (8005068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40023800 	.word	0x40023800
 8005068:	0800e274 	.word	0x0800e274

0800506c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	220f      	movs	r2, #15
 800507a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0203 	and.w	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <HAL_RCC_GetClockConfig+0x60>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 020f 	and.w	r2, r3, #15
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	601a      	str	r2, [r3, #0]
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40023c00 	.word	0x40023c00

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d012      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f8:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a68      	ldr	r2, [pc, #416]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005102:	6093      	str	r3, [r2, #8]
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	4964      	ldr	r1, [pc, #400]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800512a:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	4959      	ldr	r1, [pc, #356]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005148:	d101      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005166:	4b4e      	ldr	r3, [pc, #312]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	494a      	ldr	r1, [pc, #296]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005184:	d101      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 808b 	beq.w	80052ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b4:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	6413      	str	r3, [r2, #64]	; 0x40
 80051c0:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051cc:	4b35      	ldr	r3, [pc, #212]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fd f95e 	bl	8002498 <HAL_GetTick>
 80051dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e0:	f7fd f95a 	bl	8002498 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e38f      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d035      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	429a      	cmp	r2, r3
 800521a:	d02e      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d114      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd f922 	bl	8002498 <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005256:	e00a      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005258:	f7fd f91e 	bl	8002498 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	f241 3288 	movw	r2, #5000	; 0x1388
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e351      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0ee      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005286:	d111      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005296:	400b      	ands	r3, r1
 8005298:	4901      	ldr	r1, [pc, #4]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
 800529e:	e00b      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	0ffffcff 	.word	0x0ffffcff
 80052ac:	4bac      	ldr	r3, [pc, #688]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4aab      	ldr	r2, [pc, #684]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052b6:	6093      	str	r3, [r2, #8]
 80052b8:	4ba9      	ldr	r3, [pc, #676]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	49a6      	ldr	r1, [pc, #664]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d6:	4ba2      	ldr	r3, [pc, #648]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	4aa0      	ldr	r2, [pc, #640]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052e6:	4b9e      	ldr	r3, [pc, #632]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	499b      	ldr	r1, [pc, #620]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005304:	4b96      	ldr	r3, [pc, #600]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005312:	4993      	ldr	r1, [pc, #588]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005326:	4b8e      	ldr	r3, [pc, #568]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005334:	498a      	ldr	r1, [pc, #552]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005348:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	4982      	ldr	r1, [pc, #520]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800536a:	4b7d      	ldr	r3, [pc, #500]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4979      	ldr	r1, [pc, #484]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538c:	4b74      	ldr	r3, [pc, #464]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	4971      	ldr	r1, [pc, #452]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ae:	4b6c      	ldr	r3, [pc, #432]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f023 020c 	bic.w	r2, r3, #12
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053bc:	4968      	ldr	r1, [pc, #416]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d0:	4b63      	ldr	r3, [pc, #396]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	4960      	ldr	r1, [pc, #384]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f2:	4b5b      	ldr	r3, [pc, #364]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	4957      	ldr	r1, [pc, #348]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005414:	4b52      	ldr	r3, [pc, #328]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	494f      	ldr	r1, [pc, #316]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	4946      	ldr	r1, [pc, #280]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005458:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	493e      	ldr	r1, [pc, #248]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800547a:	4b39      	ldr	r3, [pc, #228]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	4935      	ldr	r1, [pc, #212]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800549c:	4b30      	ldr	r3, [pc, #192]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054aa:	492d      	ldr	r1, [pc, #180]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054be:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	4924      	ldr	r1, [pc, #144]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	4914      	ldr	r1, [pc, #80]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	490b      	ldr	r1, [pc, #44]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00f      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	4902      	ldr	r1, [pc, #8]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800555c:	e002      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005570:	4b8a      	ldr	r3, [pc, #552]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	4986      	ldr	r1, [pc, #536]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005594:	4b81      	ldr	r3, [pc, #516]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a4:	497d      	ldr	r1, [pc, #500]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d006      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80d6 	beq.w	800576c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055c0:	4b76      	ldr	r3, [pc, #472]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a75      	ldr	r2, [pc, #468]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055cc:	f7fc ff64 	bl	8002498 <HAL_GetTick>
 80055d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055d4:	f7fc ff60 	bl	8002498 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	; 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e195      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e6:	4b6d      	ldr	r3, [pc, #436]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d021      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11d      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005606:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005614:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561a:	0e1b      	lsrs	r3, r3, #24
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	019a      	lsls	r2, r3, #6
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	4958      	ldr	r1, [pc, #352]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02e      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566c:	d129      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800566e:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800567c:	4b47      	ldr	r3, [pc, #284]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005682:	0f1b      	lsrs	r3, r3, #28
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	019a      	lsls	r2, r3, #6
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	493e      	ldr	r1, [pc, #248]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056aa:	4b3c      	ldr	r3, [pc, #240]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b0:	f023 021f 	bic.w	r2, r3, #31
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4938      	ldr	r1, [pc, #224]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01d      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ce:	4b33      	ldr	r3, [pc, #204]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d4:	0e1b      	lsrs	r3, r3, #24
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e2:	0f1b      	lsrs	r3, r3, #28
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	019a      	lsls	r2, r3, #6
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	431a      	orrs	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	071b      	lsls	r3, r3, #28
 8005702:	4926      	ldr	r1, [pc, #152]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	019a      	lsls	r2, r3, #6
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	041b      	lsls	r3, r3, #16
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	071b      	lsls	r3, r3, #28
 8005732:	491a      	ldr	r1, [pc, #104]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005746:	f7fc fea7 	bl	8002498 <HAL_GetTick>
 800574a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800574e:	f7fc fea3 	bl	8002498 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b64      	cmp	r3, #100	; 0x64
 800575a:	d901      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0d8      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b01      	cmp	r3, #1
 8005770:	f040 80ce 	bne.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005774:	4b09      	ldr	r3, [pc, #36]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a08      	ldr	r2, [pc, #32]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fc fe8a 	bl	8002498 <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005786:	e00b      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005788:	f7fc fe86 	bl	8002498 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d904      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0bb      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a0:	4b5e      	ldr	r3, [pc, #376]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ac:	d0ec      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d02e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d12a      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057d6:	4b51      	ldr	r3, [pc, #324]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057e4:	4b4d      	ldr	r3, [pc, #308]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	0f1b      	lsrs	r3, r3, #28
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	019a      	lsls	r2, r3, #6
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	061b      	lsls	r3, r3, #24
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	071b      	lsls	r3, r3, #28
 800580a:	4944      	ldr	r1, [pc, #272]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005812:	4b42      	ldr	r3, [pc, #264]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005818:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	493d      	ldr	r1, [pc, #244]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d022      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d11d      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005842:	4b36      	ldr	r3, [pc, #216]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	0e1b      	lsrs	r3, r3, #24
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005850:	4b32      	ldr	r3, [pc, #200]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	0f1b      	lsrs	r3, r3, #28
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	019a      	lsls	r2, r3, #6
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	431a      	orrs	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	4929      	ldr	r1, [pc, #164]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d028      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	019a      	lsls	r2, r3, #6
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	4917      	ldr	r1, [pc, #92]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4911      	ldr	r1, [pc, #68]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0e      	ldr	r2, [pc, #56]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e8:	f7fc fdd6 	bl	8002498 <HAL_GetTick>
 80058ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f0:	f7fc fdd2 	bl	8002498 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e007      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d1ef      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40023800 	.word	0x40023800

08005920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e049      	b.n	80059c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f841 	bl	80059ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f000 fa00 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d001      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e054      	b.n	8005aa6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a26:	d01d      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a22      	ldr	r2, [pc, #136]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a21      	ldr	r2, [pc, #132]	; (8005abc <HAL_TIM_Base_Start_IT+0xd8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x80>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_TIM_Base_Start_IT+0xe8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d115      	bne.n	8005a90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xec>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d015      	beq.n	8005aa2 <HAL_TIM_Base_Start_IT+0xbe>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d011      	beq.n	8005aa2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	e008      	b.n	8005aa2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	e000      	b.n	8005aa4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40010000 	.word	0x40010000
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40000c00 	.word	0x40000c00
 8005ac4:	40010400 	.word	0x40010400
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40001800 	.word	0x40001800
 8005ad0:	00010007 	.word	0x00010007

08005ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0202 	mvn.w	r2, #2
 8005b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f905 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8f7 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f908 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d122      	bne.n	8005b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d11b      	bne.n	8005b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0204 	mvn.w	r2, #4
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8db 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8cd 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8de 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0208 	mvn.w	r2, #8
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2204      	movs	r2, #4
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8b1 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8a3 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8b4 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d122      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d11b      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0210 	mvn.w	r2, #16
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2208      	movs	r2, #8
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f887 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f879 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f88a 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d10e      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0201 	mvn.w	r2, #1
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc f992 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d10e      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f91a 	bl	8005eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c92:	d10e      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f90d 	bl	8005ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d10e      	bne.n	8005cde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f838 	bl	8005d4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d10e      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f06f 0220 	mvn.w	r2, #32
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f8cd 	bl	8005ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <TIM_Base_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3d      	ldr	r2, [pc, #244]	; (8005e7c <TIM_Base_SetConfig+0x118>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3c      	ldr	r2, [pc, #240]	; (8005e80 <TIM_Base_SetConfig+0x11c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3b      	ldr	r2, [pc, #236]	; (8005e84 <TIM_Base_SetConfig+0x120>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3a      	ldr	r2, [pc, #232]	; (8005e88 <TIM_Base_SetConfig+0x124>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <TIM_Base_SetConfig+0x114>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d027      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2c      	ldr	r2, [pc, #176]	; (8005e7c <TIM_Base_SetConfig+0x118>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d023      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2b      	ldr	r2, [pc, #172]	; (8005e80 <TIM_Base_SetConfig+0x11c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2a      	ldr	r2, [pc, #168]	; (8005e84 <TIM_Base_SetConfig+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a29      	ldr	r2, [pc, #164]	; (8005e88 <TIM_Base_SetConfig+0x124>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d017      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a28      	ldr	r2, [pc, #160]	; (8005e8c <TIM_Base_SetConfig+0x128>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a27      	ldr	r2, [pc, #156]	; (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a26      	ldr	r2, [pc, #152]	; (8005e94 <TIM_Base_SetConfig+0x130>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <TIM_Base_SetConfig+0x134>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <TIM_Base_SetConfig+0x138>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <TIM_Base_SetConfig+0x13c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <TIM_Base_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_Base_SetConfig+0xf8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <TIM_Base_SetConfig+0x124>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d103      	bne.n	8005e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	615a      	str	r2, [r3, #20]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800
 8005e98:	40001800 	.word	0x40001800
 8005e9c:	40001c00 	.word	0x40001c00
 8005ea0:	40002000 	.word	0x40002000

08005ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e040      	b.n	8005f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fc f932 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	; 0x24
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f82c 	bl	8005f7c <UART_SetConfig>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e022      	b.n	8005f74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa84 	bl	8006444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb0b 	bl	8006588 <UART_CheckIdleState>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4ba6      	ldr	r3, [pc, #664]	; (8006240 <UART_SetConfig+0x2c4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	6979      	ldr	r1, [r7, #20]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a94      	ldr	r2, [pc, #592]	; (8006244 <UART_SetConfig+0x2c8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d120      	bne.n	800603a <UART_SetConfig+0xbe>
 8005ff8:	4b93      	ldr	r3, [pc, #588]	; (8006248 <UART_SetConfig+0x2cc>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b03      	cmp	r3, #3
 8006004:	d816      	bhi.n	8006034 <UART_SetConfig+0xb8>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x90>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006029 	.word	0x08006029
 8006014:	08006023 	.word	0x08006023
 8006018:	0800602f 	.word	0x0800602f
 800601c:	2301      	movs	r3, #1
 800601e:	77fb      	strb	r3, [r7, #31]
 8006020:	e150      	b.n	80062c4 <UART_SetConfig+0x348>
 8006022:	2302      	movs	r3, #2
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e14d      	b.n	80062c4 <UART_SetConfig+0x348>
 8006028:	2304      	movs	r3, #4
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e14a      	b.n	80062c4 <UART_SetConfig+0x348>
 800602e:	2308      	movs	r3, #8
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e147      	b.n	80062c4 <UART_SetConfig+0x348>
 8006034:	2310      	movs	r3, #16
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e144      	b.n	80062c4 <UART_SetConfig+0x348>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a83      	ldr	r2, [pc, #524]	; (800624c <UART_SetConfig+0x2d0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d132      	bne.n	80060aa <UART_SetConfig+0x12e>
 8006044:	4b80      	ldr	r3, [pc, #512]	; (8006248 <UART_SetConfig+0x2cc>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b0c      	cmp	r3, #12
 8006050:	d828      	bhi.n	80060a4 <UART_SetConfig+0x128>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0xdc>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800608d 	.word	0x0800608d
 800605c:	080060a5 	.word	0x080060a5
 8006060:	080060a5 	.word	0x080060a5
 8006064:	080060a5 	.word	0x080060a5
 8006068:	08006099 	.word	0x08006099
 800606c:	080060a5 	.word	0x080060a5
 8006070:	080060a5 	.word	0x080060a5
 8006074:	080060a5 	.word	0x080060a5
 8006078:	08006093 	.word	0x08006093
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060a5 	.word	0x080060a5
 8006088:	0800609f 	.word	0x0800609f
 800608c:	2300      	movs	r3, #0
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e118      	b.n	80062c4 <UART_SetConfig+0x348>
 8006092:	2302      	movs	r3, #2
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e115      	b.n	80062c4 <UART_SetConfig+0x348>
 8006098:	2304      	movs	r3, #4
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e112      	b.n	80062c4 <UART_SetConfig+0x348>
 800609e:	2308      	movs	r3, #8
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e10f      	b.n	80062c4 <UART_SetConfig+0x348>
 80060a4:	2310      	movs	r3, #16
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e10c      	b.n	80062c4 <UART_SetConfig+0x348>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a68      	ldr	r2, [pc, #416]	; (8006250 <UART_SetConfig+0x2d4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d120      	bne.n	80060f6 <UART_SetConfig+0x17a>
 80060b4:	4b64      	ldr	r3, [pc, #400]	; (8006248 <UART_SetConfig+0x2cc>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060be:	2b30      	cmp	r3, #48	; 0x30
 80060c0:	d013      	beq.n	80060ea <UART_SetConfig+0x16e>
 80060c2:	2b30      	cmp	r3, #48	; 0x30
 80060c4:	d814      	bhi.n	80060f0 <UART_SetConfig+0x174>
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d009      	beq.n	80060de <UART_SetConfig+0x162>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d810      	bhi.n	80060f0 <UART_SetConfig+0x174>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <UART_SetConfig+0x15c>
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d006      	beq.n	80060e4 <UART_SetConfig+0x168>
 80060d6:	e00b      	b.n	80060f0 <UART_SetConfig+0x174>
 80060d8:	2300      	movs	r3, #0
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e0f2      	b.n	80062c4 <UART_SetConfig+0x348>
 80060de:	2302      	movs	r3, #2
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e0ef      	b.n	80062c4 <UART_SetConfig+0x348>
 80060e4:	2304      	movs	r3, #4
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e0ec      	b.n	80062c4 <UART_SetConfig+0x348>
 80060ea:	2308      	movs	r3, #8
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e0e9      	b.n	80062c4 <UART_SetConfig+0x348>
 80060f0:	2310      	movs	r3, #16
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e0e6      	b.n	80062c4 <UART_SetConfig+0x348>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a56      	ldr	r2, [pc, #344]	; (8006254 <UART_SetConfig+0x2d8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d120      	bne.n	8006142 <UART_SetConfig+0x1c6>
 8006100:	4b51      	ldr	r3, [pc, #324]	; (8006248 <UART_SetConfig+0x2cc>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800610a:	2bc0      	cmp	r3, #192	; 0xc0
 800610c:	d013      	beq.n	8006136 <UART_SetConfig+0x1ba>
 800610e:	2bc0      	cmp	r3, #192	; 0xc0
 8006110:	d814      	bhi.n	800613c <UART_SetConfig+0x1c0>
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d009      	beq.n	800612a <UART_SetConfig+0x1ae>
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	d810      	bhi.n	800613c <UART_SetConfig+0x1c0>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <UART_SetConfig+0x1a8>
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d006      	beq.n	8006130 <UART_SetConfig+0x1b4>
 8006122:	e00b      	b.n	800613c <UART_SetConfig+0x1c0>
 8006124:	2300      	movs	r3, #0
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e0cc      	b.n	80062c4 <UART_SetConfig+0x348>
 800612a:	2302      	movs	r3, #2
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e0c9      	b.n	80062c4 <UART_SetConfig+0x348>
 8006130:	2304      	movs	r3, #4
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e0c6      	b.n	80062c4 <UART_SetConfig+0x348>
 8006136:	2308      	movs	r3, #8
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e0c3      	b.n	80062c4 <UART_SetConfig+0x348>
 800613c:	2310      	movs	r3, #16
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e0c0      	b.n	80062c4 <UART_SetConfig+0x348>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a44      	ldr	r2, [pc, #272]	; (8006258 <UART_SetConfig+0x2dc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d125      	bne.n	8006198 <UART_SetConfig+0x21c>
 800614c:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <UART_SetConfig+0x2cc>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d017      	beq.n	800618c <UART_SetConfig+0x210>
 800615c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006160:	d817      	bhi.n	8006192 <UART_SetConfig+0x216>
 8006162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006166:	d00b      	beq.n	8006180 <UART_SetConfig+0x204>
 8006168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616c:	d811      	bhi.n	8006192 <UART_SetConfig+0x216>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <UART_SetConfig+0x1fe>
 8006172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006176:	d006      	beq.n	8006186 <UART_SetConfig+0x20a>
 8006178:	e00b      	b.n	8006192 <UART_SetConfig+0x216>
 800617a:	2300      	movs	r3, #0
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e0a1      	b.n	80062c4 <UART_SetConfig+0x348>
 8006180:	2302      	movs	r3, #2
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e09e      	b.n	80062c4 <UART_SetConfig+0x348>
 8006186:	2304      	movs	r3, #4
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e09b      	b.n	80062c4 <UART_SetConfig+0x348>
 800618c:	2308      	movs	r3, #8
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e098      	b.n	80062c4 <UART_SetConfig+0x348>
 8006192:	2310      	movs	r3, #16
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e095      	b.n	80062c4 <UART_SetConfig+0x348>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2f      	ldr	r2, [pc, #188]	; (800625c <UART_SetConfig+0x2e0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d125      	bne.n	80061ee <UART_SetConfig+0x272>
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <UART_SetConfig+0x2cc>)
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b0:	d017      	beq.n	80061e2 <UART_SetConfig+0x266>
 80061b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b6:	d817      	bhi.n	80061e8 <UART_SetConfig+0x26c>
 80061b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061bc:	d00b      	beq.n	80061d6 <UART_SetConfig+0x25a>
 80061be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c2:	d811      	bhi.n	80061e8 <UART_SetConfig+0x26c>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <UART_SetConfig+0x254>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d006      	beq.n	80061dc <UART_SetConfig+0x260>
 80061ce:	e00b      	b.n	80061e8 <UART_SetConfig+0x26c>
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e076      	b.n	80062c4 <UART_SetConfig+0x348>
 80061d6:	2302      	movs	r3, #2
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e073      	b.n	80062c4 <UART_SetConfig+0x348>
 80061dc:	2304      	movs	r3, #4
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e070      	b.n	80062c4 <UART_SetConfig+0x348>
 80061e2:	2308      	movs	r3, #8
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e06d      	b.n	80062c4 <UART_SetConfig+0x348>
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e06a      	b.n	80062c4 <UART_SetConfig+0x348>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <UART_SetConfig+0x2e4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d138      	bne.n	800626a <UART_SetConfig+0x2ee>
 80061f8:	4b13      	ldr	r3, [pc, #76]	; (8006248 <UART_SetConfig+0x2cc>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006206:	d017      	beq.n	8006238 <UART_SetConfig+0x2bc>
 8006208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800620c:	d82a      	bhi.n	8006264 <UART_SetConfig+0x2e8>
 800620e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006212:	d00b      	beq.n	800622c <UART_SetConfig+0x2b0>
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006218:	d824      	bhi.n	8006264 <UART_SetConfig+0x2e8>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <UART_SetConfig+0x2aa>
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d006      	beq.n	8006232 <UART_SetConfig+0x2b6>
 8006224:	e01e      	b.n	8006264 <UART_SetConfig+0x2e8>
 8006226:	2300      	movs	r3, #0
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e04b      	b.n	80062c4 <UART_SetConfig+0x348>
 800622c:	2302      	movs	r3, #2
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e048      	b.n	80062c4 <UART_SetConfig+0x348>
 8006232:	2304      	movs	r3, #4
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e045      	b.n	80062c4 <UART_SetConfig+0x348>
 8006238:	2308      	movs	r3, #8
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e042      	b.n	80062c4 <UART_SetConfig+0x348>
 800623e:	bf00      	nop
 8006240:	efff69f3 	.word	0xefff69f3
 8006244:	40011000 	.word	0x40011000
 8006248:	40023800 	.word	0x40023800
 800624c:	40004400 	.word	0x40004400
 8006250:	40004800 	.word	0x40004800
 8006254:	40004c00 	.word	0x40004c00
 8006258:	40005000 	.word	0x40005000
 800625c:	40011400 	.word	0x40011400
 8006260:	40007800 	.word	0x40007800
 8006264:	2310      	movs	r3, #16
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e02c      	b.n	80062c4 <UART_SetConfig+0x348>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a72      	ldr	r2, [pc, #456]	; (8006438 <UART_SetConfig+0x4bc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d125      	bne.n	80062c0 <UART_SetConfig+0x344>
 8006274:	4b71      	ldr	r3, [pc, #452]	; (800643c <UART_SetConfig+0x4c0>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800627e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006282:	d017      	beq.n	80062b4 <UART_SetConfig+0x338>
 8006284:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006288:	d817      	bhi.n	80062ba <UART_SetConfig+0x33e>
 800628a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628e:	d00b      	beq.n	80062a8 <UART_SetConfig+0x32c>
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006294:	d811      	bhi.n	80062ba <UART_SetConfig+0x33e>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <UART_SetConfig+0x326>
 800629a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629e:	d006      	beq.n	80062ae <UART_SetConfig+0x332>
 80062a0:	e00b      	b.n	80062ba <UART_SetConfig+0x33e>
 80062a2:	2300      	movs	r3, #0
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e00d      	b.n	80062c4 <UART_SetConfig+0x348>
 80062a8:	2302      	movs	r3, #2
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e00a      	b.n	80062c4 <UART_SetConfig+0x348>
 80062ae:	2304      	movs	r3, #4
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e007      	b.n	80062c4 <UART_SetConfig+0x348>
 80062b4:	2308      	movs	r3, #8
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e004      	b.n	80062c4 <UART_SetConfig+0x348>
 80062ba:	2310      	movs	r3, #16
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e001      	b.n	80062c4 <UART_SetConfig+0x348>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062cc:	d15b      	bne.n	8006386 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d828      	bhi.n	8006326 <UART_SetConfig+0x3aa>
 80062d4:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0x360>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	08006301 	.word	0x08006301
 80062e0:	08006309 	.word	0x08006309
 80062e4:	08006311 	.word	0x08006311
 80062e8:	08006327 	.word	0x08006327
 80062ec:	08006317 	.word	0x08006317
 80062f0:	08006327 	.word	0x08006327
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006327 	.word	0x08006327
 80062fc:	0800631f 	.word	0x0800631f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006300:	f7fe fe8c 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8006304:	61b8      	str	r0, [r7, #24]
        break;
 8006306:	e013      	b.n	8006330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006308:	f7fe fe9c 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 800630c:	61b8      	str	r0, [r7, #24]
        break;
 800630e:	e00f      	b.n	8006330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006310:	4b4b      	ldr	r3, [pc, #300]	; (8006440 <UART_SetConfig+0x4c4>)
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e00c      	b.n	8006330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006316:	f7fe fd6f 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 800631a:	61b8      	str	r0, [r7, #24]
        break;
 800631c:	e008      	b.n	8006330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006322:	61bb      	str	r3, [r7, #24]
        break;
 8006324:	e004      	b.n	8006330 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	77bb      	strb	r3, [r7, #30]
        break;
 800632e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d074      	beq.n	8006420 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	005a      	lsls	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	d916      	bls.n	8006380 <UART_SetConfig+0x404>
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d212      	bcs.n	8006380 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f023 030f 	bic.w	r3, r3, #15
 8006362:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	b29a      	uxth	r2, r3
 8006370:	89fb      	ldrh	r3, [r7, #14]
 8006372:	4313      	orrs	r3, r2
 8006374:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	89fa      	ldrh	r2, [r7, #14]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	e04f      	b.n	8006420 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	77bb      	strb	r3, [r7, #30]
 8006384:	e04c      	b.n	8006420 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006386:	7ffb      	ldrb	r3, [r7, #31]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d828      	bhi.n	80063de <UART_SetConfig+0x462>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x418>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063b9 	.word	0x080063b9
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063c9 	.word	0x080063c9
 80063a0:	080063df 	.word	0x080063df
 80063a4:	080063cf 	.word	0x080063cf
 80063a8:	080063df 	.word	0x080063df
 80063ac:	080063df 	.word	0x080063df
 80063b0:	080063df 	.word	0x080063df
 80063b4:	080063d7 	.word	0x080063d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b8:	f7fe fe30 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80063bc:	61b8      	str	r0, [r7, #24]
        break;
 80063be:	e013      	b.n	80063e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c0:	f7fe fe40 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 80063c4:	61b8      	str	r0, [r7, #24]
        break;
 80063c6:	e00f      	b.n	80063e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c8:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <UART_SetConfig+0x4c4>)
 80063ca:	61bb      	str	r3, [r7, #24]
        break;
 80063cc:	e00c      	b.n	80063e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ce:	f7fe fd13 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 80063d2:	61b8      	str	r0, [r7, #24]
        break;
 80063d4:	e008      	b.n	80063e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063da:	61bb      	str	r3, [r7, #24]
        break;
 80063dc:	e004      	b.n	80063e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	77bb      	strb	r3, [r7, #30]
        break;
 80063e6:	bf00      	nop
    }

    if (pclk != 0U)
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	085a      	lsrs	r2, r3, #1
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	441a      	add	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006400:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b0f      	cmp	r3, #15
 8006406:	d909      	bls.n	800641c <UART_SetConfig+0x4a0>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d205      	bcs.n	800641c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e001      	b.n	8006420 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800642c:	7fbb      	ldrb	r3, [r7, #30]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40007c00 	.word	0x40007c00
 800643c:	40023800 	.word	0x40023800
 8006440:	00f42400 	.word	0x00f42400

08006444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01a      	beq.n	800655a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006542:	d10a      	bne.n	800655a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006598:	f7fb ff7e 	bl	8002498 <HAL_GetTick>
 800659c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d10e      	bne.n	80065ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f831 	bl	8006622 <UART_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e027      	b.n	800661a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d10e      	bne.n	80065f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f81b 	bl	8006622 <UART_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e011      	b.n	800661a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b09c      	sub	sp, #112	; 0x70
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006632:	e0a7      	b.n	8006784 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	f000 80a3 	beq.w	8006784 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7fb ff2b 	bl	8002498 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <UART_WaitOnFlagUntilTimeout+0x32>
 800664e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006650:	2b00      	cmp	r3, #0
 8006652:	d13f      	bne.n	80066d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006664:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006668:	667b      	str	r3, [r7, #100]	; 0x64
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006674:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006678:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e6      	bne.n	8006654 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	663b      	str	r3, [r7, #96]	; 0x60
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2220      	movs	r2, #32
 80066be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e068      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d050      	beq.n	8006784 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f0:	d148      	bne.n	8006784 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 800671c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	66bb      	str	r3, [r7, #104]	; 0x68
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800674e:	623a      	str	r2, [r7, #32]
 8006750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	69f9      	ldr	r1, [r7, #28]
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	61bb      	str	r3, [r7, #24]
   return(result);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e5      	bne.n	800672e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e010      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69da      	ldr	r2, [r3, #28]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4013      	ands	r3, r2
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	429a      	cmp	r2, r3
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	429a      	cmp	r2, r3
 80067a0:	f43f af48 	beq.w	8006634 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3770      	adds	r7, #112	; 0x70
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067b0:	b084      	sub	sp, #16
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	f107 001c 	add.w	r0, r7, #28
 80067be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d120      	bne.n	800680a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	4b20      	ldr	r3, [pc, #128]	; (800685c <USB_CoreInit+0xac>)
 80067da:	4013      	ands	r3, r2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d105      	bne.n	80067fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fbee 	bl	8007fe0 <USB_CoreReset>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
 8006808:	e010      	b.n	800682c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fbe2 	bl	8007fe0 <USB_CoreReset>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10b      	bne.n	800684a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f043 0206 	orr.w	r2, r3, #6
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006856:	b004      	add	sp, #16
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	ffbdffbf 	.word	0xffbdffbf

08006860 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d165      	bne.n	8006940 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4a41      	ldr	r2, [pc, #260]	; (800697c <USB_SetTurnaroundTime+0x11c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d906      	bls.n	800688a <USB_SetTurnaroundTime+0x2a>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4a40      	ldr	r2, [pc, #256]	; (8006980 <USB_SetTurnaroundTime+0x120>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d202      	bcs.n	800688a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006884:	230f      	movs	r3, #15
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e062      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4a3c      	ldr	r2, [pc, #240]	; (8006980 <USB_SetTurnaroundTime+0x120>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d306      	bcc.n	80068a0 <USB_SetTurnaroundTime+0x40>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4a3b      	ldr	r2, [pc, #236]	; (8006984 <USB_SetTurnaroundTime+0x124>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d202      	bcs.n	80068a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800689a:	230e      	movs	r3, #14
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e057      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4a38      	ldr	r2, [pc, #224]	; (8006984 <USB_SetTurnaroundTime+0x124>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d306      	bcc.n	80068b6 <USB_SetTurnaroundTime+0x56>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4a37      	ldr	r2, [pc, #220]	; (8006988 <USB_SetTurnaroundTime+0x128>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d202      	bcs.n	80068b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068b0:	230d      	movs	r3, #13
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e04c      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4a33      	ldr	r2, [pc, #204]	; (8006988 <USB_SetTurnaroundTime+0x128>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d306      	bcc.n	80068cc <USB_SetTurnaroundTime+0x6c>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4a32      	ldr	r2, [pc, #200]	; (800698c <USB_SetTurnaroundTime+0x12c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d802      	bhi.n	80068cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068c6:	230c      	movs	r3, #12
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e041      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4a2f      	ldr	r2, [pc, #188]	; (800698c <USB_SetTurnaroundTime+0x12c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d906      	bls.n	80068e2 <USB_SetTurnaroundTime+0x82>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4a2e      	ldr	r2, [pc, #184]	; (8006990 <USB_SetTurnaroundTime+0x130>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d802      	bhi.n	80068e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068dc:	230b      	movs	r3, #11
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e036      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	4a2a      	ldr	r2, [pc, #168]	; (8006990 <USB_SetTurnaroundTime+0x130>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d906      	bls.n	80068f8 <USB_SetTurnaroundTime+0x98>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4a29      	ldr	r2, [pc, #164]	; (8006994 <USB_SetTurnaroundTime+0x134>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d802      	bhi.n	80068f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068f2:	230a      	movs	r3, #10
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e02b      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4a26      	ldr	r2, [pc, #152]	; (8006994 <USB_SetTurnaroundTime+0x134>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d906      	bls.n	800690e <USB_SetTurnaroundTime+0xae>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4a25      	ldr	r2, [pc, #148]	; (8006998 <USB_SetTurnaroundTime+0x138>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d202      	bcs.n	800690e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006908:	2309      	movs	r3, #9
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	e020      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4a21      	ldr	r2, [pc, #132]	; (8006998 <USB_SetTurnaroundTime+0x138>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d306      	bcc.n	8006924 <USB_SetTurnaroundTime+0xc4>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4a20      	ldr	r2, [pc, #128]	; (800699c <USB_SetTurnaroundTime+0x13c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d802      	bhi.n	8006924 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800691e:	2308      	movs	r3, #8
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	e015      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4a1d      	ldr	r2, [pc, #116]	; (800699c <USB_SetTurnaroundTime+0x13c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d906      	bls.n	800693a <USB_SetTurnaroundTime+0xda>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <USB_SetTurnaroundTime+0x140>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d202      	bcs.n	800693a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006934:	2307      	movs	r3, #7
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e00a      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800693a:	2306      	movs	r3, #6
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e007      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006946:	2309      	movs	r3, #9
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e001      	b.n	8006950 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800694c:	2309      	movs	r3, #9
 800694e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006968:	431a      	orrs	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	00d8acbf 	.word	0x00d8acbf
 8006980:	00e4e1c0 	.word	0x00e4e1c0
 8006984:	00f42400 	.word	0x00f42400
 8006988:	01067380 	.word	0x01067380
 800698c:	011a499f 	.word	0x011a499f
 8006990:	01312cff 	.word	0x01312cff
 8006994:	014ca43f 	.word	0x014ca43f
 8006998:	016e3600 	.word	0x016e3600
 800699c:	01a6ab1f 	.word	0x01a6ab1f
 80069a0:	01e84800 	.word	0x01e84800

080069a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f043 0201 	orr.w	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f023 0201 	bic.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d115      	bne.n	8006a36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fb fd4a 	bl	80024b0 <HAL_Delay>
      ms++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fa4b 	bl	8007ebe <USB_GetMode>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d01e      	beq.n	8006a6c <USB_SetCurrentMode+0x84>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b31      	cmp	r3, #49	; 0x31
 8006a32:	d9f0      	bls.n	8006a16 <USB_SetCurrentMode+0x2e>
 8006a34:	e01a      	b.n	8006a6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d115      	bne.n	8006a68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a48:	2001      	movs	r0, #1
 8006a4a:	f7fb fd31 	bl	80024b0 <HAL_Delay>
      ms++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fa32 	bl	8007ebe <USB_GetMode>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <USB_SetCurrentMode+0x84>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b31      	cmp	r3, #49	; 0x31
 8006a64:	d9f0      	bls.n	8006a48 <USB_SetCurrentMode+0x60>
 8006a66:	e001      	b.n	8006a6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e005      	b.n	8006a78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b32      	cmp	r3, #50	; 0x32
 8006a70:	d101      	bne.n	8006a76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a80:	b084      	sub	sp, #16
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	e009      	b.n	8006ab4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3340      	adds	r3, #64	; 0x40
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b0e      	cmp	r3, #14
 8006ab8:	d9f2      	bls.n	8006aa0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d11c      	bne.n	8006afa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ace:	f043 0302 	orr.w	r3, r3, #2
 8006ad2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	e005      	b.n	8006b06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	461a      	mov	r2, r3
 8006b22:	680b      	ldr	r3, [r1, #0]
 8006b24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d10c      	bne.n	8006b46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b32:	2100      	movs	r1, #0
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f965 	bl	8006e04 <USB_SetDevSpeed>
 8006b3a:	e008      	b.n	8006b4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f960 	bl	8006e04 <USB_SetDevSpeed>
 8006b44:	e003      	b.n	8006b4e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b46:	2103      	movs	r1, #3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f95b 	bl	8006e04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b4e:	2110      	movs	r1, #16
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8f3 	bl	8006d3c <USB_FlushTxFifo>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f91f 	bl	8006da4 <USB_FlushRxFifo>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b76:	461a      	mov	r2, r3
 8006b78:	2300      	movs	r3, #0
 8006b7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b82:	461a      	mov	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	e043      	b.n	8006c22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb0:	d118      	bne.n	8006be4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e013      	b.n	8006bf6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e008      	b.n	8006bf6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	461a      	mov	r2, r3
 8006c04:	2300      	movs	r3, #0
 8006c06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	461a      	mov	r2, r3
 8006c16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d3b7      	bcc.n	8006b9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	e043      	b.n	8006cb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c46:	d118      	bne.n	8006c7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e013      	b.n	8006c8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	461a      	mov	r2, r3
 8006c72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e008      	b.n	8006c8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c86:	461a      	mov	r2, r3
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	461a      	mov	r2, r3
 8006cac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d3b7      	bcc.n	8006c30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f043 0210 	orr.w	r2, r3, #16
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699a      	ldr	r2, [r3, #24]
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <USB_DevInit+0x2b4>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f043 0208 	orr.w	r2, r3, #8
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d105      	bne.n	8006d24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <USB_DevInit+0x2b8>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d30:	b004      	add	sp, #16
 8006d32:	4770      	bx	lr
 8006d34:	803c3800 	.word	0x803c3800
 8006d38:	40000004 	.word	0x40000004

08006d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <USB_FlushTxFifo+0x64>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d901      	bls.n	8006d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e01b      	b.n	8006d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	daf2      	bge.n	8006d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	019b      	lsls	r3, r3, #6
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a08      	ldr	r2, [pc, #32]	; (8006da0 <USB_FlushTxFifo+0x64>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e006      	b.n	8006d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d0f0      	beq.n	8006d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	00030d40 	.word	0x00030d40

08006da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <USB_FlushRxFifo+0x5c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e018      	b.n	8006df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	daf2      	bge.n	8006db0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2210      	movs	r2, #16
 8006dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <USB_FlushRxFifo+0x5c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e006      	b.n	8006df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d0f0      	beq.n	8006dd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	00030d40 	.word	0x00030d40

08006e04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e24:	4313      	orrs	r3, r2
 8006e26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0306 	and.w	r3, r3, #6
 8006e4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
 8006e5a:	e00a      	b.n	8006e72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d002      	beq.n	8006e68 <USB_GetDevSpeed+0x32>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b06      	cmp	r3, #6
 8006e66:	d102      	bne.n	8006e6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	75fb      	strb	r3, [r7, #23]
 8006e6c:	e001      	b.n	8006e72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e6e:	230f      	movs	r3, #15
 8006e70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d139      	bne.n	8006f10 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	68f9      	ldr	r1, [r7, #12]
 8006eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d153      	bne.n	8006f7c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	791b      	ldrb	r3, [r3, #4]
 8006eee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ef0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	059b      	lsls	r3, r3, #22
 8006ef6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	0159      	lsls	r1, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	440b      	add	r3, r1
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	4619      	mov	r1, r3
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <USB_ActivateEndpoint+0x10c>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	600b      	str	r3, [r1, #0]
 8006f0e:	e035      	b.n	8006f7c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	2101      	movs	r1, #1
 8006f22:	fa01 f303 	lsl.w	r3, r1, r3
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d119      	bne.n	8006f7c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	791b      	ldrb	r3, [r3, #4]
 8006f62:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f64:	430b      	orrs	r3, r1
 8006f66:	431a      	orrs	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	0159      	lsls	r1, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	440b      	add	r3, r1
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	4619      	mov	r1, r3
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <USB_ActivateEndpoint+0x10c>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	10008000 	.word	0x10008000

08006f90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d161      	bne.n	8007070 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc2:	d11f      	bne.n	8007004 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fe2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	2101      	movs	r1, #1
 8007016:	fa01 f303 	lsl.w	r3, r1, r3
 800701a:	b29b      	uxth	r3, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007024:	4013      	ands	r3, r2
 8007026:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	2101      	movs	r1, #1
 800703a:	fa01 f303 	lsl.w	r3, r1, r3
 800703e:	b29b      	uxth	r3, r3
 8007040:	43db      	mvns	r3, r3
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007048:	4013      	ands	r3, r2
 800704a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	0159      	lsls	r1, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	440b      	add	r3, r1
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	4619      	mov	r1, r3
 8007068:	4b35      	ldr	r3, [pc, #212]	; (8007140 <USB_DeactivateEndpoint+0x1b0>)
 800706a:	4013      	ands	r3, r2
 800706c:	600b      	str	r3, [r1, #0]
 800706e:	e060      	b.n	8007132 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007086:	d11f      	bne.n	80070c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	2101      	movs	r1, #1
 80070da:	fa01 f303 	lsl.w	r3, r1, r3
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	43db      	mvns	r3, r3
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070e8:	4013      	ands	r3, r2
 80070ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	43db      	mvns	r3, r3
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710c:	4013      	ands	r3, r2
 800710e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	0159      	lsls	r1, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	440b      	add	r3, r1
 8007126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712a:	4619      	mov	r1, r3
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <USB_DeactivateEndpoint+0x1b4>)
 800712e:	4013      	ands	r3, r2
 8007130:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	ec337800 	.word	0xec337800
 8007144:	eff37800 	.word	0xeff37800

08007148 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 8163 	bne.w	8007430 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d132      	bne.n	80071d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	0159      	lsls	r1, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	440b      	add	r3, r1
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	4619      	mov	r1, r3
 800718e:	4ba5      	ldr	r3, [pc, #660]	; (8007424 <USB_EPStartXfer+0x2dc>)
 8007190:	4013      	ands	r3, r2
 8007192:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	0159      	lsls	r1, r3, #5
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	440b      	add	r3, r1
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	4619      	mov	r1, r3
 80071d0:	4b95      	ldr	r3, [pc, #596]	; (8007428 <USB_EPStartXfer+0x2e0>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	610b      	str	r3, [r1, #16]
 80071d6:	e074      	b.n	80072c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	0159      	lsls	r1, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f2:	4619      	mov	r1, r3
 80071f4:	4b8c      	ldr	r3, [pc, #560]	; (8007428 <USB_EPStartXfer+0x2e0>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	0159      	lsls	r1, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	440b      	add	r3, r1
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	4619      	mov	r1, r3
 8007216:	4b83      	ldr	r3, [pc, #524]	; (8007424 <USB_EPStartXfer+0x2dc>)
 8007218:	4013      	ands	r3, r2
 800721a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6999      	ldr	r1, [r3, #24]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	440b      	add	r3, r1
 8007234:	1e59      	subs	r1, r3, #1
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	fbb1 f3f3 	udiv	r3, r1, r3
 800723e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007240:	4b7a      	ldr	r3, [pc, #488]	; (800742c <USB_EPStartXfer+0x2e4>)
 8007242:	400b      	ands	r3, r1
 8007244:	69b9      	ldr	r1, [r7, #24]
 8007246:	0148      	lsls	r0, r1, #5
 8007248:	69f9      	ldr	r1, [r7, #28]
 800724a:	4401      	add	r1, r0
 800724c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007250:	4313      	orrs	r3, r2
 8007252:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726a:	69b9      	ldr	r1, [r7, #24]
 800726c:	0148      	lsls	r0, r1, #5
 800726e:	69f9      	ldr	r1, [r7, #28]
 8007270:	4401      	add	r1, r0
 8007272:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007276:	4313      	orrs	r3, r2
 8007278:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d11f      	bne.n	80072c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d14b      	bne.n	8007360 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	791b      	ldrb	r3, [r3, #4]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d128      	bne.n	800733e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d110      	bne.n	800731e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e00f      	b.n	800733e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007358:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e137      	b.n	80075d0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800737e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	791b      	ldrb	r3, [r3, #4]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d015      	beq.n	80073b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 811f 	beq.w	80075d0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	2101      	movs	r1, #1
 80073a4:	fa01 f303 	lsl.w	r3, r1, r3
 80073a8:	69f9      	ldr	r1, [r7, #28]
 80073aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ae:	4313      	orrs	r3, r2
 80073b0:	634b      	str	r3, [r1, #52]	; 0x34
 80073b2:	e10d      	b.n	80075d0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d110      	bne.n	80073e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e00f      	b.n	8007406 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007404:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6919      	ldr	r1, [r3, #16]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	b298      	uxth	r0, r3
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4603      	mov	r3, r0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 faea 	bl	80079f4 <USB_WritePacket>
 8007420:	e0d6      	b.n	80075d0 <USB_EPStartXfer+0x488>
 8007422:	bf00      	nop
 8007424:	e007ffff 	.word	0xe007ffff
 8007428:	fff80000 	.word	0xfff80000
 800742c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	0159      	lsls	r1, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	440b      	add	r3, r1
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	4619      	mov	r1, r3
 800744c:	4b63      	ldr	r3, [pc, #396]	; (80075dc <USB_EPStartXfer+0x494>)
 800744e:	4013      	ands	r3, r2
 8007450:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	0159      	lsls	r1, r3, #5
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	440b      	add	r3, r1
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	4619      	mov	r1, r3
 800746e:	4b5c      	ldr	r3, [pc, #368]	; (80075e0 <USB_EPStartXfer+0x498>)
 8007470:	4013      	ands	r3, r2
 8007472:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d123      	bne.n	80074c4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007492:	69b9      	ldr	r1, [r7, #24]
 8007494:	0148      	lsls	r0, r1, #5
 8007496:	69f9      	ldr	r1, [r7, #28]
 8007498:	4401      	add	r1, r0
 800749a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800749e:	4313      	orrs	r3, r2
 80074a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074c0:	6113      	str	r3, [r2, #16]
 80074c2:	e037      	b.n	8007534 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	1e5a      	subs	r2, r3, #1
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	fb03 f202 	mul.w	r2, r3, r2
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	8afb      	ldrh	r3, [r7, #22]
 80074f8:	04d9      	lsls	r1, r3, #19
 80074fa:	4b3a      	ldr	r3, [pc, #232]	; (80075e4 <USB_EPStartXfer+0x49c>)
 80074fc:	400b      	ands	r3, r1
 80074fe:	69b9      	ldr	r1, [r7, #24]
 8007500:	0148      	lsls	r0, r1, #5
 8007502:	69f9      	ldr	r1, [r7, #28]
 8007504:	4401      	add	r1, r0
 8007506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800750a:	4313      	orrs	r3, r2
 800750c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007524:	69b9      	ldr	r1, [r7, #24]
 8007526:	0148      	lsls	r0, r1, #5
 8007528:	69f9      	ldr	r1, [r7, #28]
 800752a:	4401      	add	r1, r0
 800752c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007530:	4313      	orrs	r3, r2
 8007532:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10d      	bne.n	8007556 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6919      	ldr	r1, [r3, #16]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	460a      	mov	r2, r1
 8007554:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d128      	bne.n	80075b0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d110      	bne.n	8007590 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e00f      	b.n	80075b0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	fff80000 	.word	0xfff80000
 80075e0:	e007ffff 	.word	0xe007ffff
 80075e4:	1ff80000 	.word	0x1ff80000

080075e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	2b01      	cmp	r3, #1
 8007606:	f040 80ce 	bne.w	80077a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d132      	bne.n	8007678 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	0159      	lsls	r1, r3, #5
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	440b      	add	r3, r1
 8007628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762c:	4619      	mov	r1, r3
 800762e:	4b9a      	ldr	r3, [pc, #616]	; (8007898 <USB_EP0StartXfer+0x2b0>)
 8007630:	4013      	ands	r3, r2
 8007632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	0159      	lsls	r1, r3, #5
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	440b      	add	r3, r1
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	4619      	mov	r1, r3
 8007670:	4b8a      	ldr	r3, [pc, #552]	; (800789c <USB_EP0StartXfer+0x2b4>)
 8007672:	4013      	ands	r3, r2
 8007674:	610b      	str	r3, [r1, #16]
 8007676:	e04e      	b.n	8007716 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	0159      	lsls	r1, r3, #5
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	440b      	add	r3, r1
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	4619      	mov	r1, r3
 8007694:	4b81      	ldr	r3, [pc, #516]	; (800789c <USB_EP0StartXfer+0x2b4>)
 8007696:	4013      	ands	r3, r2
 8007698:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	0159      	lsls	r1, r3, #5
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	440b      	add	r3, r1
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	4619      	mov	r1, r3
 80076b6:	4b78      	ldr	r3, [pc, #480]	; (8007898 <USB_EP0StartXfer+0x2b0>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d903      	bls.n	80076d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007706:	6939      	ldr	r1, [r7, #16]
 8007708:	0148      	lsls	r0, r1, #5
 800770a:	6979      	ldr	r1, [r7, #20]
 800770c:	4401      	add	r1, r0
 800770e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007712:	4313      	orrs	r3, r2
 8007714:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d11e      	bne.n	800775a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	461a      	mov	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	440a      	add	r2, r1
 800774e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	e097      	b.n	800788a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007774:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007778:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 8083 	beq.w	800788a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	2101      	movs	r1, #1
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a0:	4313      	orrs	r3, r2
 80077a2:	634b      	str	r3, [r1, #52]	; 0x34
 80077a4:	e071      	b.n	800788a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	0159      	lsls	r1, r3, #5
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	440b      	add	r3, r1
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	4619      	mov	r1, r3
 80077c2:	4b36      	ldr	r3, [pc, #216]	; (800789c <USB_EP0StartXfer+0x2b4>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	0159      	lsls	r1, r3, #5
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	440b      	add	r3, r1
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	4619      	mov	r1, r3
 80077e4:	4b2c      	ldr	r3, [pc, #176]	; (8007898 <USB_EP0StartXfer+0x2b0>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007838:	6939      	ldr	r1, [r7, #16]
 800783a:	0148      	lsls	r0, r1, #5
 800783c:	6979      	ldr	r1, [r7, #20]
 800783e:	4401      	add	r1, r0
 8007840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007844:	4313      	orrs	r3, r2
 8007846:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d10d      	bne.n	800786a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6919      	ldr	r1, [r3, #16]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007866:	460a      	mov	r2, r1
 8007868:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007888:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	e007ffff 	.word	0xe007ffff
 800789c:	fff80000 	.word	0xfff80000

080078a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d14a      	bne.n	8007954 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d6:	f040 8086 	bne.w	80079e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007920:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f242 7210 	movw	r2, #10000	; 0x2710
 800792e:	4293      	cmp	r3, r2
 8007930:	d902      	bls.n	8007938 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
          break;
 8007936:	e056      	b.n	80079e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800794c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007950:	d0e7      	beq.n	8007922 <USB_EPStopXfer+0x82>
 8007952:	e048      	b.n	80079e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796c:	d13b      	bne.n	80079e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	440a      	add	r2, r1
 8007988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007990:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f242 7210 	movw	r2, #10000	; 0x2710
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d902      	bls.n	80079cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
          break;
 80079ca:	e00c      	b.n	80079e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079e4:	d0e7      	beq.n	80079b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b089      	sub	sp, #36	; 0x24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	4611      	mov	r1, r2
 8007a00:	461a      	mov	r2, r3
 8007a02:	460b      	mov	r3, r1
 8007a04:	71fb      	strb	r3, [r7, #7]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d123      	bne.n	8007a62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a1a:	88bb      	ldrh	r3, [r7, #4]
 8007a1c:	3303      	adds	r3, #3
 8007a1e:	089b      	lsrs	r3, r3, #2
 8007a20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e018      	b.n	8007a5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	031a      	lsls	r2, r3, #12
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a34:	461a      	mov	r2, r3
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	3301      	adds	r3, #1
 8007a46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	3301      	adds	r3, #1
 8007a52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	3301      	adds	r3, #1
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d3e2      	bcc.n	8007a28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3724      	adds	r7, #36	; 0x24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b08b      	sub	sp, #44	; 0x2c
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	089b      	lsrs	r3, r3, #2
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a96:	2300      	movs	r3, #0
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	e014      	b.n	8007ac6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	3301      	adds	r3, #1
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	3301      	adds	r3, #1
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	623b      	str	r3, [r7, #32]
 8007ac6:	6a3a      	ldr	r2, [r7, #32]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d3e6      	bcc.n	8007a9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ace:	8bfb      	ldrh	r3, [r7, #30]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01e      	beq.n	8007b12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f107 0310 	add.w	r3, r7, #16
 8007ae4:	6812      	ldr	r2, [r2, #0]
 8007ae6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	701a      	strb	r2, [r3, #0]
      i++;
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	3301      	adds	r3, #1
 8007afe:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	3301      	adds	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b06:	8bfb      	ldrh	r3, [r7, #30]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b0c:	8bfb      	ldrh	r3, [r7, #30]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1ea      	bne.n	8007ae8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	372c      	adds	r7, #44	; 0x2c
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d12c      	bne.n	8007b96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	db12      	blt.n	8007b74 <USB_EPSetStall+0x54>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00f      	beq.n	8007b74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	e02b      	b.n	8007bee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	db12      	blt.n	8007bce <USB_EPSetStall+0xae>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00f      	beq.n	8007bce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	0151      	lsls	r1, r2, #5
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	440a      	add	r2, r1
 8007be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d128      	bne.n	8007c6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	791b      	ldrb	r3, [r3, #4]
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d003      	beq.n	8007c48 <USB_EPClearStall+0x4c>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	791b      	ldrb	r3, [r3, #4]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d138      	bne.n	8007cba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	0151      	lsls	r1, r2, #5
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	440a      	add	r2, r1
 8007c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	e027      	b.n	8007cba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	791b      	ldrb	r3, [r3, #4]
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d003      	beq.n	8007c9a <USB_EPClearStall+0x9e>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	791b      	ldrb	r3, [r3, #4]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d10f      	bne.n	8007cba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cfc:	68f9      	ldr	r1, [r7, #12]
 8007cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d02:	4313      	orrs	r3, r2
 8007d04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d42:	f023 0302 	bic.w	r3, r3, #2
 8007d46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d70:	f023 0303 	bic.w	r3, r3, #3
 8007d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d84:	f043 0302 	orr.w	r3, r3, #2
 8007d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4013      	ands	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007db0:	68fb      	ldr	r3, [r7, #12]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	0c1b      	lsrs	r3, r3, #16
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	b29b      	uxth	r3, r3
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4013      	ands	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e54:	68bb      	ldr	r3, [r7, #8]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b087      	sub	sp, #28
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e92:	01db      	lsls	r3, r3, #7
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4013      	ands	r3, r2
 8007eae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f003 0301 	and.w	r3, r3, #1
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <USB_ActivateSetup+0x44>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	fffff800 	.word	0xfffff800

08007f24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	333c      	adds	r3, #60	; 0x3c
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <USB_EP0_OutStart+0xb8>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d90a      	bls.n	8007f5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f58:	d101      	bne.n	8007f5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e037      	b.n	8007fce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	461a      	mov	r2, r3
 8007f66:	2300      	movs	r3, #0
 8007f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8c:	f043 0318 	orr.w	r3, r3, #24
 8007f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007fa4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d10f      	bne.n	8007fcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	4f54300a 	.word	0x4f54300a

08007fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4a13      	ldr	r2, [pc, #76]	; (8008044 <USB_CoreReset+0x64>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d901      	bls.n	8007ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e01b      	b.n	8008036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	daf2      	bge.n	8007fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f043 0201 	orr.w	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a09      	ldr	r2, [pc, #36]	; (8008044 <USB_CoreReset+0x64>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d901      	bls.n	8008028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e006      	b.n	8008036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b01      	cmp	r3, #1
 8008032:	d0f0      	beq.n	8008016 <USB_CoreReset+0x36>

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	00030d40 	.word	0x00030d40

08008048 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008054:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008058:	f005 fe8e 	bl	800dd78 <malloc>
 800805c:	4603      	mov	r3, r0
 800805e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	32b0      	adds	r2, #176	; 0xb0
 8008070:	2100      	movs	r1, #0
 8008072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008076:	2302      	movs	r3, #2
 8008078:	e0d4      	b.n	8008224 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800807a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800807e:	2100      	movs	r1, #0
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f005 fe97 	bl	800ddb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	32b0      	adds	r2, #176	; 0xb0
 8008090:	68f9      	ldr	r1, [r7, #12]
 8008092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	32b0      	adds	r2, #176	; 0xb0
 80080a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	7c1b      	ldrb	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d138      	bne.n	8008124 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080b2:	4b5e      	ldr	r3, [pc, #376]	; (800822c <USBD_CDC_Init+0x1e4>)
 80080b4:	7819      	ldrb	r1, [r3, #0]
 80080b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ba:	2202      	movs	r2, #2
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f005 fc8c 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080c2:	4b5a      	ldr	r3, [pc, #360]	; (800822c <USBD_CDC_Init+0x1e4>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	f003 020f 	and.w	r2, r3, #15
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3324      	adds	r3, #36	; 0x24
 80080d8:	2201      	movs	r2, #1
 80080da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080dc:	4b54      	ldr	r3, [pc, #336]	; (8008230 <USBD_CDC_Init+0x1e8>)
 80080de:	7819      	ldrb	r1, [r3, #0]
 80080e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e4:	2202      	movs	r2, #2
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f005 fc77 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080ec:	4b50      	ldr	r3, [pc, #320]	; (8008230 <USBD_CDC_Init+0x1e8>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008104:	2201      	movs	r2, #1
 8008106:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008108:	4b4a      	ldr	r3, [pc, #296]	; (8008234 <USBD_CDC_Init+0x1ec>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f003 020f 	and.w	r2, r3, #15
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	440b      	add	r3, r1
 800811c:	3326      	adds	r3, #38	; 0x26
 800811e:	2210      	movs	r2, #16
 8008120:	801a      	strh	r2, [r3, #0]
 8008122:	e035      	b.n	8008190 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008124:	4b41      	ldr	r3, [pc, #260]	; (800822c <USBD_CDC_Init+0x1e4>)
 8008126:	7819      	ldrb	r1, [r3, #0]
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	2202      	movs	r2, #2
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f005 fc54 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008132:	4b3e      	ldr	r3, [pc, #248]	; (800822c <USBD_CDC_Init+0x1e4>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 020f 	and.w	r2, r3, #15
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	3324      	adds	r3, #36	; 0x24
 8008148:	2201      	movs	r2, #1
 800814a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800814c:	4b38      	ldr	r3, [pc, #224]	; (8008230 <USBD_CDC_Init+0x1e8>)
 800814e:	7819      	ldrb	r1, [r3, #0]
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	2202      	movs	r2, #2
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f005 fc40 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800815a:	4b35      	ldr	r3, [pc, #212]	; (8008230 <USBD_CDC_Init+0x1e8>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 020f 	and.w	r2, r3, #15
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008172:	2201      	movs	r2, #1
 8008174:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008176:	4b2f      	ldr	r3, [pc, #188]	; (8008234 <USBD_CDC_Init+0x1ec>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	f003 020f 	and.w	r2, r3, #15
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3326      	adds	r3, #38	; 0x26
 800818c:	2210      	movs	r2, #16
 800818e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <USBD_CDC_Init+0x1ec>)
 8008192:	7819      	ldrb	r1, [r3, #0]
 8008194:	2308      	movs	r3, #8
 8008196:	2203      	movs	r2, #3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f005 fc1e 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800819e:	4b25      	ldr	r3, [pc, #148]	; (8008234 <USBD_CDC_Init+0x1ec>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 020f 	and.w	r2, r3, #15
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	2201      	movs	r2, #1
 80081b6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	33b0      	adds	r3, #176	; 0xb0
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80081ee:	2302      	movs	r3, #2
 80081f0:	e018      	b.n	8008224 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7c1b      	ldrb	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <USBD_CDC_Init+0x1e8>)
 80081fc:	7819      	ldrb	r1, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f005 fcd5 	bl	800dbb8 <USBD_LL_PrepareReceive>
 800820e:	e008      	b.n	8008222 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <USBD_CDC_Init+0x1e8>)
 8008212:	7819      	ldrb	r1, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f005 fccb 	bl	800dbb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000093 	.word	0x20000093
 8008230:	20000094 	.word	0x20000094
 8008234:	20000095 	.word	0x20000095

08008238 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008244:	4b3a      	ldr	r3, [pc, #232]	; (8008330 <USBD_CDC_DeInit+0xf8>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f005 fbeb 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008250:	4b37      	ldr	r3, [pc, #220]	; (8008330 <USBD_CDC_DeInit+0xf8>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	f003 020f 	and.w	r2, r3, #15
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3324      	adds	r3, #36	; 0x24
 8008266:	2200      	movs	r2, #0
 8008268:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800826a:	4b32      	ldr	r3, [pc, #200]	; (8008334 <USBD_CDC_DeInit+0xfc>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f005 fbd8 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <USBD_CDC_DeInit+0xfc>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	f003 020f 	and.w	r2, r3, #15
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800828e:	2200      	movs	r2, #0
 8008290:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008292:	4b29      	ldr	r3, [pc, #164]	; (8008338 <USBD_CDC_DeInit+0x100>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f005 fbc4 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <USBD_CDC_DeInit+0x100>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f003 020f 	and.w	r2, r3, #15
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	3324      	adds	r3, #36	; 0x24
 80082b4:	2200      	movs	r2, #0
 80082b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082b8:	4b1f      	ldr	r3, [pc, #124]	; (8008338 <USBD_CDC_DeInit+0x100>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 020f 	and.w	r2, r3, #15
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	3326      	adds	r3, #38	; 0x26
 80082ce:	2200      	movs	r2, #0
 80082d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	32b0      	adds	r2, #176	; 0xb0
 80082dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01f      	beq.n	8008324 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	33b0      	adds	r3, #176	; 0xb0
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32b0      	adds	r2, #176	; 0xb0
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	4618      	mov	r0, r3
 8008308:	f005 fd3e 	bl	800dd88 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32b0      	adds	r2, #176	; 0xb0
 8008316:	2100      	movs	r1, #0
 8008318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000093 	.word	0x20000093
 8008334:	20000094 	.word	0x20000094
 8008338:	20000095 	.word	0x20000095

0800833c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	32b0      	adds	r2, #176	; 0xb0
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e0bf      	b.n	80084ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008374:	2b00      	cmp	r3, #0
 8008376:	d050      	beq.n	800841a <USBD_CDC_Setup+0xde>
 8008378:	2b20      	cmp	r3, #32
 800837a:	f040 80af 	bne.w	80084dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	88db      	ldrh	r3, [r3, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d03a      	beq.n	80083fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b25b      	sxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	da1b      	bge.n	80083c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	33b0      	adds	r3, #176	; 0xb0
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80083a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	88d2      	ldrh	r2, [r2, #6]
 80083ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	88db      	ldrh	r3, [r3, #6]
 80083b2:	2b07      	cmp	r3, #7
 80083b4:	bf28      	it	cs
 80083b6:	2307      	movcs	r3, #7
 80083b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	89fa      	ldrh	r2, [r7, #14]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 fdad 	bl	8009f20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083c6:	e090      	b.n	80084ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	785a      	ldrb	r2, [r3, #1]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88db      	ldrh	r3, [r3, #6]
 80083d6:	2b3f      	cmp	r3, #63	; 0x3f
 80083d8:	d803      	bhi.n	80083e2 <USBD_CDC_Setup+0xa6>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	88db      	ldrh	r3, [r3, #6]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	e000      	b.n	80083e4 <USBD_CDC_Setup+0xa8>
 80083e2:	2240      	movs	r2, #64	; 0x40
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083ea:	6939      	ldr	r1, [r7, #16]
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80083f2:	461a      	mov	r2, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 fdbf 	bl	8009f78 <USBD_CtlPrepareRx>
      break;
 80083fa:	e076      	b.n	80084ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	33b0      	adds	r3, #176	; 0xb0
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	7850      	ldrb	r0, [r2, #1]
 8008412:	2200      	movs	r2, #0
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	4798      	blx	r3
      break;
 8008418:	e067      	b.n	80084ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b0b      	cmp	r3, #11
 8008420:	d851      	bhi.n	80084c6 <USBD_CDC_Setup+0x18a>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USBD_CDC_Setup+0xec>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008459 	.word	0x08008459
 800842c:	080084d5 	.word	0x080084d5
 8008430:	080084c7 	.word	0x080084c7
 8008434:	080084c7 	.word	0x080084c7
 8008438:	080084c7 	.word	0x080084c7
 800843c:	080084c7 	.word	0x080084c7
 8008440:	080084c7 	.word	0x080084c7
 8008444:	080084c7 	.word	0x080084c7
 8008448:	080084c7 	.word	0x080084c7
 800844c:	080084c7 	.word	0x080084c7
 8008450:	08008483 	.word	0x08008483
 8008454:	080084ad 	.word	0x080084ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b03      	cmp	r3, #3
 8008462:	d107      	bne.n	8008474 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008464:	f107 030a 	add.w	r3, r7, #10
 8008468:	2202      	movs	r2, #2
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fd57 	bl	8009f20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008472:	e032      	b.n	80084da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fce1 	bl	8009e3e <USBD_CtlError>
            ret = USBD_FAIL;
 800847c:	2303      	movs	r3, #3
 800847e:	75fb      	strb	r3, [r7, #23]
          break;
 8008480:	e02b      	b.n	80084da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d107      	bne.n	800849e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800848e:	f107 030d 	add.w	r3, r7, #13
 8008492:	2201      	movs	r2, #1
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 fd42 	bl	8009f20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800849c:	e01d      	b.n	80084da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 fccc 	bl	8009e3e <USBD_CtlError>
            ret = USBD_FAIL;
 80084a6:	2303      	movs	r3, #3
 80084a8:	75fb      	strb	r3, [r7, #23]
          break;
 80084aa:	e016      	b.n	80084da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d00f      	beq.n	80084d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fcbf 	bl	8009e3e <USBD_CtlError>
            ret = USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084c4:	e008      	b.n	80084d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 fcb8 	bl	8009e3e <USBD_CtlError>
          ret = USBD_FAIL;
 80084ce:	2303      	movs	r3, #3
 80084d0:	75fb      	strb	r3, [r7, #23]
          break;
 80084d2:	e002      	b.n	80084da <USBD_CDC_Setup+0x19e>
          break;
 80084d4:	bf00      	nop
 80084d6:	e008      	b.n	80084ea <USBD_CDC_Setup+0x1ae>
          break;
 80084d8:	bf00      	nop
      }
      break;
 80084da:	e006      	b.n	80084ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fcad 	bl	8009e3e <USBD_CtlError>
      ret = USBD_FAIL;
 80084e4:	2303      	movs	r3, #3
 80084e6:	75fb      	strb	r3, [r7, #23]
      break;
 80084e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008506:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	32b0      	adds	r2, #176	; 0xb0
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800851a:	2303      	movs	r3, #3
 800851c:	e065      	b.n	80085ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	32b0      	adds	r2, #176	; 0xb0
 8008528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	f003 020f 	and.w	r2, r3, #15
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	3318      	adds	r3, #24
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02f      	beq.n	80085a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	3318      	adds	r3, #24
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	f003 010f 	and.w	r1, r3, #15
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	460b      	mov	r3, r1
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	440b      	add	r3, r1
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4403      	add	r3, r0
 8008570:	3348      	adds	r3, #72	; 0x48
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	fbb2 f1f3 	udiv	r1, r2, r3
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800857e:	2b00      	cmp	r3, #0
 8008580:	d112      	bne.n	80085a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3318      	adds	r3, #24
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800859a:	78f9      	ldrb	r1, [r7, #3]
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f005 fae8 	bl	800db76 <USBD_LL_Transmit>
 80085a6:	e01f      	b.n	80085e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	33b0      	adds	r3, #176	; 0xb0
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d010      	beq.n	80085e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	33b0      	adds	r3, #176	; 0xb0
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	32b0      	adds	r2, #176	; 0xb0
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	32b0      	adds	r2, #176	; 0xb0
 8008618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008620:	2303      	movs	r3, #3
 8008622:	e01a      	b.n	800865a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f005 fae6 	bl	800dbfa <USBD_LL_GetRxDataSize>
 800862e:	4602      	mov	r2, r0
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	33b0      	adds	r3, #176	; 0xb0
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008654:	4611      	mov	r1, r2
 8008656:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	32b0      	adds	r2, #176	; 0xb0
 8008674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008678:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008680:	2303      	movs	r3, #3
 8008682:	e025      	b.n	80086d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	33b0      	adds	r3, #176	; 0xb0
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01a      	beq.n	80086ce <USBD_CDC_EP0_RxReady+0x6c>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800869e:	2bff      	cmp	r3, #255	; 0xff
 80086a0:	d015      	beq.n	80086ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	33b0      	adds	r3, #176	; 0xb0
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80086ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086c2:	b292      	uxth	r2, r2
 80086c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086e0:	2182      	movs	r1, #130	; 0x82
 80086e2:	4818      	ldr	r0, [pc, #96]	; (8008744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086e4:	f000 fd49 	bl	800917a <USBD_GetEpDesc>
 80086e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ea:	2101      	movs	r1, #1
 80086ec:	4815      	ldr	r0, [pc, #84]	; (8008744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086ee:	f000 fd44 	bl	800917a <USBD_GetEpDesc>
 80086f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086f4:	2181      	movs	r1, #129	; 0x81
 80086f6:	4813      	ldr	r0, [pc, #76]	; (8008744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086f8:	f000 fd3f 	bl	800917a <USBD_GetEpDesc>
 80086fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2210      	movs	r2, #16
 8008708:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2200      	movs	r2, #0
 8008714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008718:	711a      	strb	r2, [r3, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800872c:	711a      	strb	r2, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2243      	movs	r2, #67	; 0x43
 8008736:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008738:	4b02      	ldr	r3, [pc, #8]	; (8008744 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000050 	.word	0x20000050

08008748 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008750:	2182      	movs	r1, #130	; 0x82
 8008752:	4818      	ldr	r0, [pc, #96]	; (80087b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008754:	f000 fd11 	bl	800917a <USBD_GetEpDesc>
 8008758:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800875a:	2101      	movs	r1, #1
 800875c:	4815      	ldr	r0, [pc, #84]	; (80087b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800875e:	f000 fd0c 	bl	800917a <USBD_GetEpDesc>
 8008762:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008764:	2181      	movs	r1, #129	; 0x81
 8008766:	4813      	ldr	r0, [pc, #76]	; (80087b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008768:	f000 fd07 	bl	800917a <USBD_GetEpDesc>
 800876c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2210      	movs	r2, #16
 8008778:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	2200      	movs	r2, #0
 8008784:	711a      	strb	r2, [r3, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f042 0202 	orr.w	r2, r2, #2
 800878c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	711a      	strb	r2, [r3, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f042 0202 	orr.w	r2, r2, #2
 80087a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2243      	movs	r2, #67	; 0x43
 80087a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000050 	.word	0x20000050

080087b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087c0:	2182      	movs	r1, #130	; 0x82
 80087c2:	4818      	ldr	r0, [pc, #96]	; (8008824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087c4:	f000 fcd9 	bl	800917a <USBD_GetEpDesc>
 80087c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087ca:	2101      	movs	r1, #1
 80087cc:	4815      	ldr	r0, [pc, #84]	; (8008824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087ce:	f000 fcd4 	bl	800917a <USBD_GetEpDesc>
 80087d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087d4:	2181      	movs	r1, #129	; 0x81
 80087d6:	4813      	ldr	r0, [pc, #76]	; (8008824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087d8:	f000 fccf 	bl	800917a <USBD_GetEpDesc>
 80087dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2210      	movs	r2, #16
 80087e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f8:	711a      	strb	r2, [r3, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800880c:	711a      	strb	r2, [r3, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2243      	movs	r2, #67	; 0x43
 8008816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000050 	.word	0x20000050

08008828 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	220a      	movs	r2, #10
 8008834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008836:	4b03      	ldr	r3, [pc, #12]	; (8008844 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	2000000c 	.word	0x2000000c

08008848 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008858:	2303      	movs	r3, #3
 800885a:	e009      	b.n	8008870 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	33b0      	adds	r3, #176	; 0xb0
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	32b0      	adds	r2, #176	; 0xb0
 8008892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008896:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800889e:	2303      	movs	r3, #3
 80088a0:	e008      	b.n	80088b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	32b0      	adds	r2, #176	; 0xb0
 80088d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e004      	b.n	80088ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
	...

080088fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	32b0      	adds	r2, #176	; 0xb0
 800890e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008912:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	e025      	b.n	800896e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008928:	2b00      	cmp	r3, #0
 800892a:	d11f      	bne.n	800896c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2201      	movs	r2, #1
 8008930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008934:	4b10      	ldr	r3, [pc, #64]	; (8008978 <USBD_CDC_TransmitPacket+0x7c>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 020f 	and.w	r2, r3, #15
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4403      	add	r3, r0
 800894e:	3318      	adds	r3, #24
 8008950:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008952:	4b09      	ldr	r3, [pc, #36]	; (8008978 <USBD_CDC_TransmitPacket+0x7c>)
 8008954:	7819      	ldrb	r1, [r3, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f005 f907 	bl	800db76 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000093 	.word	0x20000093

0800897c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	32b0      	adds	r2, #176	; 0xb0
 800898e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008992:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	32b0      	adds	r2, #176	; 0xb0
 800899e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e018      	b.n	80089dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7c1b      	ldrb	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <USBD_CDC_ReceivePacket+0x68>)
 80089b4:	7819      	ldrb	r1, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f005 f8f9 	bl	800dbb8 <USBD_LL_PrepareReceive>
 80089c6:	e008      	b.n	80089da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <USBD_CDC_ReceivePacket+0x68>)
 80089ca:	7819      	ldrb	r1, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089d2:	2340      	movs	r3, #64	; 0x40
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f005 f8ef 	bl	800dbb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000094 	.word	0x20000094

080089e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e01f      	b.n	8008a40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	79fa      	ldrb	r2, [r7, #7]
 8008a32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f004 ff69 	bl	800d90c <USBD_LL_Init>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e025      	b.n	8008aac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	32ae      	adds	r2, #174	; 0xae
 8008a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00f      	beq.n	8008a9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	32ae      	adds	r2, #174	; 0xae
 8008a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	f107 020e 	add.w	r2, r7, #14
 8008a90:	4610      	mov	r0, r2
 8008a92:	4798      	blx	r3
 8008a94:	4602      	mov	r2, r0
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f004 ff71 	bl	800d9a4 <USBD_LL_Start>
 8008ac2:	4603      	mov	r3, r0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ad4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	4611      	mov	r1, r2
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	4798      	blx	r3
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	4611      	mov	r1, r2
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 f932 	bl	8009dca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b82:	f003 031f 	and.w	r3, r3, #31
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d01a      	beq.n	8008bc0 <USBD_LL_SetupStage+0x72>
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d822      	bhi.n	8008bd4 <USBD_LL_SetupStage+0x86>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <USBD_LL_SetupStage+0x4a>
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d00a      	beq.n	8008bac <USBD_LL_SetupStage+0x5e>
 8008b96:	e01d      	b.n	8008bd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fb5f 	bl	8009264 <USBD_StdDevReq>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8008baa:	e020      	b.n	8008bee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbc7 	bl	8009348 <USBD_StdItfReq>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbe:	e016      	b.n	8008bee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc29 	bl	8009420 <USBD_StdEPReq>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd2:	e00c      	b.n	8008bee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f004 ff3e 	bl	800da64 <USBD_LL_StallEP>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]
      break;
 8008bec:	bf00      	nop
  }

  return ret;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	460b      	mov	r3, r1
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d16e      	bne.n	8008cee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	f040 8098 	bne.w	8008d54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d913      	bls.n	8008c58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	1ad2      	subs	r2, r2, r3
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	4293      	cmp	r3, r2
 8008c48:	bf28      	it	cs
 8008c4a:	4613      	movcs	r3, r2
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f001 f9ae 	bl	8009fb2 <USBD_CtlContinueRx>
 8008c56:	e07d      	b.n	8008d54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d014      	beq.n	8008c90 <USBD_LL_DataOutStage+0x98>
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d81d      	bhi.n	8008ca6 <USBD_LL_DataOutStage+0xae>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <USBD_LL_DataOutStage+0x7c>
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d003      	beq.n	8008c7a <USBD_LL_DataOutStage+0x82>
 8008c72:	e018      	b.n	8008ca6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75bb      	strb	r3, [r7, #22]
            break;
 8008c78:	e018      	b.n	8008cac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	4619      	mov	r1, r3
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 fa5e 	bl	8009146 <USBD_CoreFindIF>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008c8e:	e00d      	b.n	8008cac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fa60 	bl	8009160 <USBD_CoreFindEP>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ca4:	e002      	b.n	8008cac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75bb      	strb	r3, [r7, #22]
            break;
 8008caa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008cac:	7dbb      	ldrb	r3, [r7, #22]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d119      	bne.n	8008ce6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d113      	bne.n	8008ce6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008cbe:	7dba      	ldrb	r2, [r7, #22]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	32ae      	adds	r2, #174	; 0xae
 8008cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008cce:	7dba      	ldrb	r2, [r7, #22]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008cd6:	7dba      	ldrb	r2, [r7, #22]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	32ae      	adds	r2, #174	; 0xae
 8008cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f001 f974 	bl	8009fd4 <USBD_CtlSendStatus>
 8008cec:	e032      	b.n	8008d54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 fa31 	bl	8009160 <USBD_CoreFindEP>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d02:	7dbb      	ldrb	r3, [r7, #22]
 8008d04:	2bff      	cmp	r3, #255	; 0xff
 8008d06:	d025      	beq.n	8008d54 <USBD_LL_DataOutStage+0x15c>
 8008d08:	7dbb      	ldrb	r3, [r7, #22]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d122      	bne.n	8008d54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d117      	bne.n	8008d4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d1a:	7dba      	ldrb	r2, [r7, #22]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	32ae      	adds	r2, #174	; 0xae
 8008d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00f      	beq.n	8008d4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d2a:	7dba      	ldrb	r2, [r7, #22]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d32:	7dba      	ldrb	r2, [r7, #22]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	32ae      	adds	r2, #174	; 0xae
 8008d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	7afa      	ldrb	r2, [r7, #11]
 8008d40:	4611      	mov	r1, r2
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	4798      	blx	r3
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	e000      	b.n	8008d56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	460b      	mov	r3, r1
 8008d68:	607a      	str	r2, [r7, #4]
 8008d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d16f      	bne.n	8008e52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3314      	adds	r3, #20
 8008d76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d15a      	bne.n	8008e38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d914      	bls.n	8008db8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f001 f8d6 	bl	8009f56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008daa:	2300      	movs	r3, #0
 8008dac:	2200      	movs	r2, #0
 8008dae:	2100      	movs	r1, #0
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f004 ff01 	bl	800dbb8 <USBD_LL_PrepareReceive>
 8008db6:	e03f      	b.n	8008e38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d11c      	bne.n	8008dfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d316      	bcc.n	8008dfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d20f      	bcs.n	8008dfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dde:	2200      	movs	r2, #0
 8008de0:	2100      	movs	r1, #0
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f001 f8b7 	bl	8009f56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008df0:	2300      	movs	r3, #0
 8008df2:	2200      	movs	r2, #0
 8008df4:	2100      	movs	r1, #0
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f004 fede 	bl	800dbb8 <USBD_LL_PrepareReceive>
 8008dfc:	e01c      	b.n	8008e38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d10f      	bne.n	8008e2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d009      	beq.n	8008e2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e2a:	2180      	movs	r1, #128	; 0x80
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f004 fe19 	bl	800da64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f001 f8e1 	bl	8009ffa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d03a      	beq.n	8008eb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff fe42 	bl	8008acc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e50:	e032      	b.n	8008eb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e52:	7afb      	ldrb	r3, [r7, #11]
 8008e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f97f 	bl	8009160 <USBD_CoreFindEP>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	2bff      	cmp	r3, #255	; 0xff
 8008e6a:	d025      	beq.n	8008eb8 <USBD_LL_DataInStage+0x15a>
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d122      	bne.n	8008eb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d11c      	bne.n	8008eb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e7e:	7dfa      	ldrb	r2, [r7, #23]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	32ae      	adds	r2, #174	; 0xae
 8008e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d014      	beq.n	8008eb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e8e:	7dfa      	ldrb	r2, [r7, #23]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e96:	7dfa      	ldrb	r2, [r7, #23]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	32ae      	adds	r2, #174	; 0xae
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	7afa      	ldrb	r2, [r7, #11]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008eae:	7dbb      	ldrb	r3, [r7, #22]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008eb4:	7dbb      	ldrb	r3, [r7, #22]
 8008eb6:	e000      	b.n	8008eba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d014      	beq.n	8008f28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6852      	ldr	r2, [r2, #4]
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	4611      	mov	r1, r2
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f004 fd53 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2240      	movs	r2, #64	; 0x40
 8008f40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f44:	2340      	movs	r3, #64	; 0x40
 8008f46:	2200      	movs	r2, #0
 8008f48:	2180      	movs	r1, #128	; 0x80
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f004 fd45 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2240      	movs	r2, #64	; 0x40
 8008f5a:	621a      	str	r2, [r3, #32]

  return ret;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2204      	movs	r2, #4
 8008fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d106      	bne.n	8008fd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d110      	bne.n	8009018 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	32ae      	adds	r2, #174	; 0xae
 8009038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009040:	2303      	movs	r3, #3
 8009042:	e01c      	b.n	800907e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b03      	cmp	r3, #3
 800904e:	d115      	bne.n	800907c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	32ae      	adds	r2, #174	; 0xae
 800905a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	32ae      	adds	r2, #174	; 0xae
 800906e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	4611      	mov	r1, r2
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32ae      	adds	r2, #174	; 0xae
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e01c      	b.n	80090e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d115      	bne.n	80090e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	32ae      	adds	r2, #174	; 0xae
 80090be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	32ae      	adds	r2, #174	; 0xae
 80090d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	4611      	mov	r1, r2
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00e      	beq.n	800913c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6852      	ldr	r2, [r2, #4]
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	4611      	mov	r1, r2
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009138:	2303      	movs	r3, #3
 800913a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009152:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800916c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	b29a      	uxth	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	429a      	cmp	r2, r3
 80091a0:	d920      	bls.n	80091e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80091aa:	e013      	b.n	80091d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80091ac:	f107 030a 	add.w	r3, r7, #10
 80091b0:	4619      	mov	r1, r3
 80091b2:	6978      	ldr	r0, [r7, #20]
 80091b4:	f000 f81b 	bl	80091ee <USBD_GetNextDesc>
 80091b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b05      	cmp	r3, #5
 80091c0:	d108      	bne.n	80091d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	789b      	ldrb	r3, [r3, #2]
 80091ca:	78fa      	ldrb	r2, [r7, #3]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d008      	beq.n	80091e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	885b      	ldrh	r3, [r3, #2]
 80091d8:	b29a      	uxth	r2, r3
 80091da:	897b      	ldrh	r3, [r7, #10]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d8e5      	bhi.n	80091ac <USBD_GetEpDesc+0x32>
 80091e0:	e000      	b.n	80091e4 <USBD_GetEpDesc+0x6a>
          break;
 80091e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80091e4:	693b      	ldr	r3, [r7, #16]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	881a      	ldrh	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	4413      	add	r3, r2
 8009208:	b29a      	uxth	r2, r3
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800921a:	68fb      	ldr	r3, [r7, #12]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	3301      	adds	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009246:	8a3b      	ldrh	r3, [r7, #16]
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	b21a      	sxth	r2, r3
 800924c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009250:	4313      	orrs	r3, r2
 8009252:	b21b      	sxth	r3, r3
 8009254:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009256:	89fb      	ldrh	r3, [r7, #14]
}
 8009258:	4618      	mov	r0, r3
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800927a:	2b40      	cmp	r3, #64	; 0x40
 800927c:	d005      	beq.n	800928a <USBD_StdDevReq+0x26>
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d857      	bhi.n	8009332 <USBD_StdDevReq+0xce>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00f      	beq.n	80092a6 <USBD_StdDevReq+0x42>
 8009286:	2b20      	cmp	r3, #32
 8009288:	d153      	bne.n	8009332 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32ae      	adds	r2, #174	; 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
      break;
 80092a4:	e04a      	b.n	800933c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	2b09      	cmp	r3, #9
 80092ac:	d83b      	bhi.n	8009326 <USBD_StdDevReq+0xc2>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <USBD_StdDevReq+0x50>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	08009309 	.word	0x08009309
 80092b8:	0800931d 	.word	0x0800931d
 80092bc:	08009327 	.word	0x08009327
 80092c0:	08009313 	.word	0x08009313
 80092c4:	08009327 	.word	0x08009327
 80092c8:	080092e7 	.word	0x080092e7
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	08009327 	.word	0x08009327
 80092d4:	080092ff 	.word	0x080092ff
 80092d8:	080092f1 	.word	0x080092f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa3c 	bl	800975c <USBD_GetDescriptor>
          break;
 80092e4:	e024      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fbcb 	bl	8009a84 <USBD_SetAddress>
          break;
 80092ee:	e01f      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fc0a 	bl	8009b0c <USBD_SetConfig>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
          break;
 80092fc:	e018      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fcad 	bl	8009c60 <USBD_GetConfig>
          break;
 8009306:	e013      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fcde 	bl	8009ccc <USBD_GetStatus>
          break;
 8009310:	e00e      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fd0d 	bl	8009d34 <USBD_SetFeature>
          break;
 800931a:	e009      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd31 	bl	8009d86 <USBD_ClrFeature>
          break;
 8009324:	e004      	b.n	8009330 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fd88 	bl	8009e3e <USBD_CtlError>
          break;
 800932e:	bf00      	nop
      }
      break;
 8009330:	e004      	b.n	800933c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fd82 	bl	8009e3e <USBD_CtlError>
      break;
 800933a:	bf00      	nop
  }

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop

08009348 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800935e:	2b40      	cmp	r3, #64	; 0x40
 8009360:	d005      	beq.n	800936e <USBD_StdItfReq+0x26>
 8009362:	2b40      	cmp	r3, #64	; 0x40
 8009364:	d852      	bhi.n	800940c <USBD_StdItfReq+0xc4>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <USBD_StdItfReq+0x26>
 800936a:	2b20      	cmp	r3, #32
 800936c:	d14e      	bne.n	800940c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009374:	b2db      	uxtb	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	2b02      	cmp	r3, #2
 800937a:	d840      	bhi.n	80093fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	889b      	ldrh	r3, [r3, #4]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b01      	cmp	r3, #1
 8009384:	d836      	bhi.n	80093f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	889b      	ldrh	r3, [r3, #4]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fed9 	bl	8009146 <USBD_CoreFindIF>
 8009394:	4603      	mov	r3, r0
 8009396:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	2bff      	cmp	r3, #255	; 0xff
 800939c:	d01d      	beq.n	80093da <USBD_StdItfReq+0x92>
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d11a      	bne.n	80093da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80093a4:	7bba      	ldrb	r2, [r7, #14]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	32ae      	adds	r2, #174	; 0xae
 80093aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80093b4:	7bba      	ldrb	r2, [r7, #14]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093bc:	7bba      	ldrb	r2, [r7, #14]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	32ae      	adds	r2, #174	; 0xae
 80093c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093d2:	e004      	b.n	80093de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093d8:	e001      	b.n	80093de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80093da:	2303      	movs	r3, #3
 80093dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	88db      	ldrh	r3, [r3, #6]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d110      	bne.n	8009408 <USBD_StdItfReq+0xc0>
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10d      	bne.n	8009408 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fdf1 	bl	8009fd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093f2:	e009      	b.n	8009408 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fd21 	bl	8009e3e <USBD_CtlError>
          break;
 80093fc:	e004      	b.n	8009408 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fd1c 	bl	8009e3e <USBD_CtlError>
          break;
 8009406:	e000      	b.n	800940a <USBD_StdItfReq+0xc2>
          break;
 8009408:	bf00      	nop
      }
      break;
 800940a:	e004      	b.n	8009416 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fd15 	bl	8009e3e <USBD_CtlError>
      break;
 8009414:	bf00      	nop
  }

  return ret;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	889b      	ldrh	r3, [r3, #4]
 8009432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d007      	beq.n	8009450 <USBD_StdEPReq+0x30>
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	f200 817f 	bhi.w	8009744 <USBD_StdEPReq+0x324>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d02a      	beq.n	80094a0 <USBD_StdEPReq+0x80>
 800944a:	2b20      	cmp	r3, #32
 800944c:	f040 817a 	bne.w	8009744 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff fe83 	bl	8009160 <USBD_CoreFindEP>
 800945a:	4603      	mov	r3, r0
 800945c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800945e:	7b7b      	ldrb	r3, [r7, #13]
 8009460:	2bff      	cmp	r3, #255	; 0xff
 8009462:	f000 8174 	beq.w	800974e <USBD_StdEPReq+0x32e>
 8009466:	7b7b      	ldrb	r3, [r7, #13]
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 8170 	bne.w	800974e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009476:	7b7a      	ldrb	r2, [r7, #13]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	32ae      	adds	r2, #174	; 0xae
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8163 	beq.w	800974e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009488:	7b7a      	ldrb	r2, [r7, #13]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	32ae      	adds	r2, #174	; 0xae
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800949e:	e156      	b.n	800974e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d008      	beq.n	80094ba <USBD_StdEPReq+0x9a>
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	f300 8145 	bgt.w	8009738 <USBD_StdEPReq+0x318>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 809b 	beq.w	80095ea <USBD_StdEPReq+0x1ca>
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d03c      	beq.n	8009532 <USBD_StdEPReq+0x112>
 80094b8:	e13e      	b.n	8009738 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d002      	beq.n	80094cc <USBD_StdEPReq+0xac>
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d016      	beq.n	80094f8 <USBD_StdEPReq+0xd8>
 80094ca:	e02c      	b.n	8009526 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00d      	beq.n	80094ee <USBD_StdEPReq+0xce>
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b80      	cmp	r3, #128	; 0x80
 80094d6:	d00a      	beq.n	80094ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f004 fac1 	bl	800da64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094e2:	2180      	movs	r1, #128	; 0x80
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f004 fabd 	bl	800da64 <USBD_LL_StallEP>
 80094ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094ec:	e020      	b.n	8009530 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fca4 	bl	8009e3e <USBD_CtlError>
              break;
 80094f6:	e01b      	b.n	8009530 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	885b      	ldrh	r3, [r3, #2]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10e      	bne.n	800951e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <USBD_StdEPReq+0xfe>
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b80      	cmp	r3, #128	; 0x80
 800950a:	d008      	beq.n	800951e <USBD_StdEPReq+0xfe>
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	88db      	ldrh	r3, [r3, #6]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f004 faa3 	bl	800da64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fd58 	bl	8009fd4 <USBD_CtlSendStatus>

              break;
 8009524:	e004      	b.n	8009530 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fc88 	bl	8009e3e <USBD_CtlError>
              break;
 800952e:	bf00      	nop
          }
          break;
 8009530:	e107      	b.n	8009742 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b02      	cmp	r3, #2
 800953c:	d002      	beq.n	8009544 <USBD_StdEPReq+0x124>
 800953e:	2b03      	cmp	r3, #3
 8009540:	d016      	beq.n	8009570 <USBD_StdEPReq+0x150>
 8009542:	e04b      	b.n	80095dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00d      	beq.n	8009566 <USBD_StdEPReq+0x146>
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	2b80      	cmp	r3, #128	; 0x80
 800954e:	d00a      	beq.n	8009566 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f004 fa85 	bl	800da64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800955a:	2180      	movs	r1, #128	; 0x80
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f004 fa81 	bl	800da64 <USBD_LL_StallEP>
 8009562:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009564:	e040      	b.n	80095e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc68 	bl	8009e3e <USBD_CtlError>
              break;
 800956e:	e03b      	b.n	80095e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	885b      	ldrh	r3, [r3, #2]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d136      	bne.n	80095e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f004 fa8b 	bl	800daa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fd21 	bl	8009fd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff fde2 	bl	8009160 <USBD_CoreFindEP>
 800959c:	4603      	mov	r3, r0
 800959e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095a0:	7b7b      	ldrb	r3, [r7, #13]
 80095a2:	2bff      	cmp	r3, #255	; 0xff
 80095a4:	d01f      	beq.n	80095e6 <USBD_StdEPReq+0x1c6>
 80095a6:	7b7b      	ldrb	r3, [r7, #13]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d11c      	bne.n	80095e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80095ac:	7b7a      	ldrb	r2, [r7, #13]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80095b4:	7b7a      	ldrb	r2, [r7, #13]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32ae      	adds	r2, #174	; 0xae
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095c4:	7b7a      	ldrb	r2, [r7, #13]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	32ae      	adds	r2, #174	; 0xae
 80095ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80095da:	e004      	b.n	80095e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fc2d 	bl	8009e3e <USBD_CtlError>
              break;
 80095e4:	e000      	b.n	80095e8 <USBD_StdEPReq+0x1c8>
              break;
 80095e6:	bf00      	nop
          }
          break;
 80095e8:	e0ab      	b.n	8009742 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d002      	beq.n	80095fc <USBD_StdEPReq+0x1dc>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d032      	beq.n	8009660 <USBD_StdEPReq+0x240>
 80095fa:	e097      	b.n	800972c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <USBD_StdEPReq+0x1f2>
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d004      	beq.n	8009612 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fc17 	bl	8009e3e <USBD_CtlError>
                break;
 8009610:	e091      	b.n	8009736 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	da0b      	bge.n	8009632 <USBD_StdEPReq+0x212>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	3310      	adds	r3, #16
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	3304      	adds	r3, #4
 8009630:	e00b      	b.n	800964a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	4413      	add	r3, r2
 8009648:	3304      	adds	r3, #4
 800964a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2202      	movs	r2, #2
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fc61 	bl	8009f20 <USBD_CtlSendData>
              break;
 800965e:	e06a      	b.n	8009736 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009664:	2b00      	cmp	r3, #0
 8009666:	da11      	bge.n	800968c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	f003 020f 	and.w	r2, r3, #15
 800966e:	6879      	ldr	r1, [r7, #4]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	3324      	adds	r3, #36	; 0x24
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d117      	bne.n	80096b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fbda 	bl	8009e3e <USBD_CtlError>
                  break;
 800968a:	e054      	b.n	8009736 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	f003 020f 	and.w	r2, r3, #15
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fbc7 	bl	8009e3e <USBD_CtlError>
                  break;
 80096b0:	e041      	b.n	8009736 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	da0b      	bge.n	80096d2 <USBD_StdEPReq+0x2b2>
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	3310      	adds	r3, #16
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	3304      	adds	r3, #4
 80096d0:	e00b      	b.n	80096ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	4413      	add	r3, r2
 80096e8:	3304      	adds	r3, #4
 80096ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <USBD_StdEPReq+0x2d8>
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	2b80      	cmp	r3, #128	; 0x80
 80096f6:	d103      	bne.n	8009700 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e00e      	b.n	800971e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f004 f9eb 	bl	800dae0 <USBD_LL_IsStallEP>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2201      	movs	r2, #1
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	e002      	b.n	800971e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2202      	movs	r2, #2
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fbfb 	bl	8009f20 <USBD_CtlSendData>
              break;
 800972a:	e004      	b.n	8009736 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fb85 	bl	8009e3e <USBD_CtlError>
              break;
 8009734:	bf00      	nop
          }
          break;
 8009736:	e004      	b.n	8009742 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fb7f 	bl	8009e3e <USBD_CtlError>
          break;
 8009740:	bf00      	nop
      }
      break;
 8009742:	e005      	b.n	8009750 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb79 	bl	8009e3e <USBD_CtlError>
      break;
 800974c:	e000      	b.n	8009750 <USBD_StdEPReq+0x330>
      break;
 800974e:	bf00      	nop
  }

  return ret;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	885b      	ldrh	r3, [r3, #2]
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	2b0e      	cmp	r3, #14
 800977e:	f200 8152 	bhi.w	8009a26 <USBD_GetDescriptor+0x2ca>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USBD_GetDescriptor+0x2c>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	080097f9 	.word	0x080097f9
 800978c:	08009811 	.word	0x08009811
 8009790:	08009851 	.word	0x08009851
 8009794:	08009a27 	.word	0x08009a27
 8009798:	08009a27 	.word	0x08009a27
 800979c:	080099c7 	.word	0x080099c7
 80097a0:	080099f3 	.word	0x080099f3
 80097a4:	08009a27 	.word	0x08009a27
 80097a8:	08009a27 	.word	0x08009a27
 80097ac:	08009a27 	.word	0x08009a27
 80097b0:	08009a27 	.word	0x08009a27
 80097b4:	08009a27 	.word	0x08009a27
 80097b8:	08009a27 	.word	0x08009a27
 80097bc:	08009a27 	.word	0x08009a27
 80097c0:	080097c5 	.word	0x080097c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	7c12      	ldrb	r2, [r2, #16]
 80097dc:	f107 0108 	add.w	r1, r7, #8
 80097e0:	4610      	mov	r0, r2
 80097e2:	4798      	blx	r3
 80097e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097e6:	e126      	b.n	8009a36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fb27 	bl	8009e3e <USBD_CtlError>
        err++;
 80097f0:	7afb      	ldrb	r3, [r7, #11]
 80097f2:	3301      	adds	r3, #1
 80097f4:	72fb      	strb	r3, [r7, #11]
      break;
 80097f6:	e11e      	b.n	8009a36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
      break;
 800980e:	e112      	b.n	8009a36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7c1b      	ldrb	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10d      	bne.n	8009834 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009820:	f107 0208 	add.w	r2, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3301      	adds	r3, #1
 800982e:	2202      	movs	r2, #2
 8009830:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009832:	e100      	b.n	8009a36 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	f107 0208 	add.w	r2, r7, #8
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	2202      	movs	r2, #2
 800984c:	701a      	strb	r2, [r3, #0]
      break;
 800984e:	e0f2      	b.n	8009a36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	885b      	ldrh	r3, [r3, #2]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b05      	cmp	r3, #5
 8009858:	f200 80ac 	bhi.w	80099b4 <USBD_GetDescriptor+0x258>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <USBD_GetDescriptor+0x108>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	0800987d 	.word	0x0800987d
 8009868:	080098b1 	.word	0x080098b1
 800986c:	080098e5 	.word	0x080098e5
 8009870:	08009919 	.word	0x08009919
 8009874:	0800994d 	.word	0x0800994d
 8009878:	08009981 	.word	0x08009981
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	7c12      	ldrb	r2, [r2, #16]
 8009894:	f107 0108 	add.w	r1, r7, #8
 8009898:	4610      	mov	r0, r2
 800989a:	4798      	blx	r3
 800989c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989e:	e091      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 facb 	bl	8009e3e <USBD_CtlError>
            err++;
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	3301      	adds	r3, #1
 80098ac:	72fb      	strb	r3, [r7, #11]
          break;
 80098ae:	e089      	b.n	80099c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	7c12      	ldrb	r2, [r2, #16]
 80098c8:	f107 0108 	add.w	r1, r7, #8
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d2:	e077      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fab1 	bl	8009e3e <USBD_CtlError>
            err++;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	3301      	adds	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
          break;
 80098e2:	e06f      	b.n	80099c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	7c12      	ldrb	r2, [r2, #16]
 80098fc:	f107 0108 	add.w	r1, r7, #8
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3
 8009904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009906:	e05d      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa97 	bl	8009e3e <USBD_CtlError>
            err++;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	3301      	adds	r3, #1
 8009914:	72fb      	strb	r3, [r7, #11]
          break;
 8009916:	e055      	b.n	80099c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	7c12      	ldrb	r2, [r2, #16]
 8009930:	f107 0108 	add.w	r1, r7, #8
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800993a:	e043      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa7d 	bl	8009e3e <USBD_CtlError>
            err++;
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	3301      	adds	r3, #1
 8009948:	72fb      	strb	r3, [r7, #11]
          break;
 800994a:	e03b      	b.n	80099c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7c12      	ldrb	r2, [r2, #16]
 8009964:	f107 0108 	add.w	r1, r7, #8
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800996e:	e029      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa63 	bl	8009e3e <USBD_CtlError>
            err++;
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	3301      	adds	r3, #1
 800997c:	72fb      	strb	r3, [r7, #11]
          break;
 800997e:	e021      	b.n	80099c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	7c12      	ldrb	r2, [r2, #16]
 8009998:	f107 0108 	add.w	r1, r7, #8
 800999c:	4610      	mov	r0, r2
 800999e:	4798      	blx	r3
 80099a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099a2:	e00f      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa49 	bl	8009e3e <USBD_CtlError>
            err++;
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	3301      	adds	r3, #1
 80099b0:	72fb      	strb	r3, [r7, #11]
          break;
 80099b2:	e007      	b.n	80099c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa41 	bl	8009e3e <USBD_CtlError>
          err++;
 80099bc:	7afb      	ldrb	r3, [r7, #11]
 80099be:	3301      	adds	r3, #1
 80099c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80099c2:	bf00      	nop
      }
      break;
 80099c4:	e037      	b.n	8009a36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	7c1b      	ldrb	r3, [r3, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d6:	f107 0208 	add.w	r2, r7, #8
 80099da:	4610      	mov	r0, r2
 80099dc:	4798      	blx	r3
 80099de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099e0:	e029      	b.n	8009a36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fa2a 	bl	8009e3e <USBD_CtlError>
        err++;
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	3301      	adds	r3, #1
 80099ee:	72fb      	strb	r3, [r7, #11]
      break;
 80099f0:	e021      	b.n	8009a36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	7c1b      	ldrb	r3, [r3, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10d      	bne.n	8009a16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a02:	f107 0208 	add.w	r2, r7, #8
 8009a06:	4610      	mov	r0, r2
 8009a08:	4798      	blx	r3
 8009a0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	2207      	movs	r2, #7
 8009a12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a14:	e00f      	b.n	8009a36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa10 	bl	8009e3e <USBD_CtlError>
        err++;
 8009a1e:	7afb      	ldrb	r3, [r7, #11]
 8009a20:	3301      	adds	r3, #1
 8009a22:	72fb      	strb	r3, [r7, #11]
      break;
 8009a24:	e007      	b.n	8009a36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fa08 	bl	8009e3e <USBD_CtlError>
      err++;
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	3301      	adds	r3, #1
 8009a32:	72fb      	strb	r3, [r7, #11]
      break;
 8009a34:	bf00      	nop
  }

  if (err != 0U)
 8009a36:	7afb      	ldrb	r3, [r7, #11]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11e      	bne.n	8009a7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	88db      	ldrh	r3, [r3, #6]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d016      	beq.n	8009a72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009a44:	893b      	ldrh	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00e      	beq.n	8009a68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	88da      	ldrh	r2, [r3, #6]
 8009a4e:	893b      	ldrh	r3, [r7, #8]
 8009a50:	4293      	cmp	r3, r2
 8009a52:	bf28      	it	cs
 8009a54:	4613      	movcs	r3, r2
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a5a:	893b      	ldrh	r3, [r7, #8]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68f9      	ldr	r1, [r7, #12]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fa5d 	bl	8009f20 <USBD_CtlSendData>
 8009a66:	e009      	b.n	8009a7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f9e7 	bl	8009e3e <USBD_CtlError>
 8009a70:	e004      	b.n	8009a7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 faae 	bl	8009fd4 <USBD_CtlSendStatus>
 8009a78:	e000      	b.n	8009a7c <USBD_GetDescriptor+0x320>
    return;
 8009a7a:	bf00      	nop
  }
}
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop

08009a84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	889b      	ldrh	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d131      	bne.n	8009afa <USBD_SetAddress+0x76>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	88db      	ldrh	r3, [r3, #6]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d12d      	bne.n	8009afa <USBD_SetAddress+0x76>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8009aa4:	d829      	bhi.n	8009afa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d104      	bne.n	8009ac8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f9bc 	bl	8009e3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac6:	e01d      	b.n	8009b04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	7bfa      	ldrb	r2, [r7, #15]
 8009acc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f004 f82f 	bl	800db38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa7a 	bl	8009fd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aee:	e009      	b.n	8009b04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009af8:	e004      	b.n	8009b04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f99e 	bl	8009e3e <USBD_CtlError>
  }
}
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	885b      	ldrh	r3, [r3, #2]
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	4b4e      	ldr	r3, [pc, #312]	; (8009c5c <USBD_SetConfig+0x150>)
 8009b22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b24:	4b4d      	ldr	r3, [pc, #308]	; (8009c5c <USBD_SetConfig+0x150>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d905      	bls.n	8009b38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f985 	bl	8009e3e <USBD_CtlError>
    return USBD_FAIL;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e08c      	b.n	8009c52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d002      	beq.n	8009b4a <USBD_SetConfig+0x3e>
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d029      	beq.n	8009b9c <USBD_SetConfig+0x90>
 8009b48:	e075      	b.n	8009c36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b4a:	4b44      	ldr	r3, [pc, #272]	; (8009c5c <USBD_SetConfig+0x150>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d020      	beq.n	8009b94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b52:	4b42      	ldr	r3, [pc, #264]	; (8009c5c <USBD_SetConfig+0x150>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b5c:	4b3f      	ldr	r3, [pc, #252]	; (8009c5c <USBD_SetConfig+0x150>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7fe ffbd 	bl	8008ae2 <USBD_SetClassConfig>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f962 	bl	8009e3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b82:	e065      	b.n	8009c50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fa25 	bl	8009fd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b92:	e05d      	b.n	8009c50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa1d 	bl	8009fd4 <USBD_CtlSendStatus>
      break;
 8009b9a:	e059      	b.n	8009c50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b9c:	4b2f      	ldr	r3, [pc, #188]	; (8009c5c <USBD_SetConfig+0x150>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d112      	bne.n	8009bca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009bac:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <USBD_SetConfig+0x150>)
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <USBD_SetConfig+0x150>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fe ffac 	bl	8008b1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa06 	bl	8009fd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009bc8:	e042      	b.n	8009c50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <USBD_SetConfig+0x150>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d02a      	beq.n	8009c2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7fe ff9a 	bl	8008b1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009be6:	4b1d      	ldr	r3, [pc, #116]	; (8009c5c <USBD_SetConfig+0x150>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <USBD_SetConfig+0x150>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7fe ff73 	bl	8008ae2 <USBD_SetClassConfig>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00f      	beq.n	8009c26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f918 	bl	8009e3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7fe ff7f 	bl	8008b1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c24:	e014      	b.n	8009c50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f9d4 	bl	8009fd4 <USBD_CtlSendStatus>
      break;
 8009c2c:	e010      	b.n	8009c50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f9d0 	bl	8009fd4 <USBD_CtlSendStatus>
      break;
 8009c34:	e00c      	b.n	8009c50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f900 	bl	8009e3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <USBD_SetConfig+0x150>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7fe ff68 	bl	8008b1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4e:	bf00      	nop
  }

  return ret;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000f24 	.word	0x20000f24

08009c60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	88db      	ldrh	r3, [r3, #6]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d004      	beq.n	8009c7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f8e2 	bl	8009e3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c7a:	e023      	b.n	8009cc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	dc02      	bgt.n	8009c8e <USBD_GetConfig+0x2e>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc03      	bgt.n	8009c94 <USBD_GetConfig+0x34>
 8009c8c:	e015      	b.n	8009cba <USBD_GetConfig+0x5a>
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d00b      	beq.n	8009caa <USBD_GetConfig+0x4a>
 8009c92:	e012      	b.n	8009cba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f93c 	bl	8009f20 <USBD_CtlSendData>
        break;
 8009ca8:	e00c      	b.n	8009cc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3304      	adds	r3, #4
 8009cae:	2201      	movs	r2, #1
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f934 	bl	8009f20 <USBD_CtlSendData>
        break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f8be 	bl	8009e3e <USBD_CtlError>
        break;
 8009cc2:	bf00      	nop
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d81e      	bhi.n	8009d22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	88db      	ldrh	r3, [r3, #6]
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d004      	beq.n	8009cf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f8a5 	bl	8009e3e <USBD_CtlError>
        break;
 8009cf4:	e01a      	b.n	8009d2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f043 0202 	orr.w	r2, r3, #2
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	330c      	adds	r3, #12
 8009d16:	2202      	movs	r2, #2
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f900 	bl	8009f20 <USBD_CtlSendData>
      break;
 8009d20:	e004      	b.n	8009d2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f88a 	bl	8009e3e <USBD_CtlError>
      break;
 8009d2a:	bf00      	nop
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	885b      	ldrh	r3, [r3, #2]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d107      	bne.n	8009d56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f940 	bl	8009fd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009d54:	e013      	b.n	8009d7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	885b      	ldrh	r3, [r3, #2]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d10b      	bne.n	8009d76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	889b      	ldrh	r3, [r3, #4]
 8009d62:	0a1b      	lsrs	r3, r3, #8
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f930 	bl	8009fd4 <USBD_CtlSendStatus>
}
 8009d74:	e003      	b.n	8009d7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f860 	bl	8009e3e <USBD_CtlError>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d80b      	bhi.n	8009db6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	885b      	ldrh	r3, [r3, #2]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d10c      	bne.n	8009dc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f910 	bl	8009fd4 <USBD_CtlSendStatus>
      }
      break;
 8009db4:	e004      	b.n	8009dc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f840 	bl	8009e3e <USBD_CtlError>
      break;
 8009dbe:	e000      	b.n	8009dc2 <USBD_ClrFeature+0x3c>
      break;
 8009dc0:	bf00      	nop
  }
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3301      	adds	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7ff fa17 	bl	8009228 <SWAPBYTE>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff fa0a 	bl	8009228 <SWAPBYTE>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3301      	adds	r3, #1
 8009e26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff f9fd 	bl	8009228 <SWAPBYTE>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	461a      	mov	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	80da      	strh	r2, [r3, #6]
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e48:	2180      	movs	r1, #128	; 0x80
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f003 fe0a 	bl	800da64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e50:	2100      	movs	r1, #0
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f003 fe06 	bl	800da64 <USBD_LL_StallEP>
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d036      	beq.n	8009ee4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f000 f836 	bl	8009eec <USBD_GetLen>
 8009e80:	4603      	mov	r3, r0
 8009e82:	3301      	adds	r3, #1
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	4413      	add	r3, r2
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7812      	ldrb	r2, [r2, #0]
 8009e98:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	2203      	movs	r2, #3
 8009ea8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	3301      	adds	r3, #1
 8009eae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009eb0:	e013      	b.n	8009eda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	613b      	str	r3, [r7, #16]
    idx++;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	4413      	add	r3, r2
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e7      	bne.n	8009eb2 <USBD_GetString+0x52>
 8009ee2:	e000      	b.n	8009ee6 <USBD_GetString+0x86>
    return;
 8009ee4:	bf00      	nop
  }
}
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009efc:	e005      	b.n	8009f0a <USBD_GetLen+0x1e>
  {
    len++;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	3301      	adds	r3, #1
 8009f02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3301      	adds	r3, #1
 8009f08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f5      	bne.n	8009efe <USBD_GetLen+0x12>
  }

  return len;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	2100      	movs	r1, #0
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f003 fe15 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	60b9      	str	r1, [r7, #8]
 8009f60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	2100      	movs	r1, #0
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f003 fe04 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2203      	movs	r2, #3
 8009f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f003 fe08 	bl	800dbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f003 fdf7 	bl	800dbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2204      	movs	r2, #4
 8009fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f003 fdc3 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2205      	movs	r2, #5
 800a006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a00a:	2300      	movs	r3, #0
 800a00c:	2200      	movs	r2, #0
 800a00e:	2100      	movs	r1, #0
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f003 fdd1 	bl	800dbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a024:	bf00      	nop
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a036:	f3ef 8305 	mrs	r3, IPSR
 800a03a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a03c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10f      	bne.n	800a062 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a042:	f3ef 8310 	mrs	r3, PRIMASK
 800a046:	607b      	str	r3, [r7, #4]
  return(result);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d105      	bne.n	800a05a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a04e:	f3ef 8311 	mrs	r3, BASEPRI
 800a052:	603b      	str	r3, [r7, #0]
  return(result);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d007      	beq.n	800a06a <osKernelInitialize+0x3a>
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <osKernelInitialize+0x64>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d103      	bne.n	800a06a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a062:	f06f 0305 	mvn.w	r3, #5
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	e00c      	b.n	800a084 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a06a:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <osKernelInitialize+0x64>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d105      	bne.n	800a07e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <osKernelInitialize+0x64>)
 800a074:	2201      	movs	r2, #1
 800a076:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	e002      	b.n	800a084 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a084:	68fb      	ldr	r3, [r7, #12]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000f28 	.word	0x20000f28

0800a098 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10f      	bne.n	800a0ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ae:	607b      	str	r3, [r7, #4]
  return(result);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d105      	bne.n	800a0c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a0ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d007      	beq.n	800a0d2 <osKernelStart+0x3a>
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	; (800a100 <osKernelStart+0x68>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d103      	bne.n	800a0d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a0ca:	f06f 0305 	mvn.w	r3, #5
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	e010      	b.n	800a0f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <osKernelStart+0x68>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d109      	bne.n	800a0ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0da:	f7ff ffa1 	bl	800a020 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <osKernelStart+0x68>)
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0e4:	f001 faa0 	bl	800b628 <vTaskStartScheduler>
      stat = osOK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	e002      	b.n	800a0f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20000f28 	.word	0x20000f28

0800a104 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a104:	b580      	push	{r7, lr}
 800a106:	b090      	sub	sp, #64	; 0x40
 800a108:	af04      	add	r7, sp, #16
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a114:	f3ef 8305 	mrs	r3, IPSR
 800a118:	61fb      	str	r3, [r7, #28]
  return(result);
 800a11a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f040 808f 	bne.w	800a240 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a122:	f3ef 8310 	mrs	r3, PRIMASK
 800a126:	61bb      	str	r3, [r7, #24]
  return(result);
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d105      	bne.n	800a13a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a12e:	f3ef 8311 	mrs	r3, BASEPRI
 800a132:	617b      	str	r3, [r7, #20]
  return(result);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <osThreadNew+0x3e>
 800a13a:	4b44      	ldr	r3, [pc, #272]	; (800a24c <osThreadNew+0x148>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d07e      	beq.n	800a240 <osThreadNew+0x13c>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d07b      	beq.n	800a240 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a148:	2380      	movs	r3, #128	; 0x80
 800a14a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a14c:	2318      	movs	r3, #24
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a150:	2300      	movs	r3, #0
 800a152:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a154:	f04f 33ff 	mov.w	r3, #4294967295
 800a158:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d045      	beq.n	800a1ec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <osThreadNew+0x6a>
        name = attr->name;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <osThreadNew+0x90>
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	2b38      	cmp	r3, #56	; 0x38
 800a186:	d805      	bhi.n	800a194 <osThreadNew+0x90>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <osThreadNew+0x94>
        return (NULL);
 800a194:	2300      	movs	r3, #0
 800a196:	e054      	b.n	800a242 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	089b      	lsrs	r3, r3, #2
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00e      	beq.n	800a1ce <osThreadNew+0xca>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	2bbb      	cmp	r3, #187	; 0xbb
 800a1b6:	d90a      	bls.n	800a1ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <osThreadNew+0xca>
        mem = 1;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	623b      	str	r3, [r7, #32]
 800a1cc:	e010      	b.n	800a1f0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10c      	bne.n	800a1f0 <osThreadNew+0xec>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d108      	bne.n	800a1f0 <osThreadNew+0xec>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d104      	bne.n	800a1f0 <osThreadNew+0xec>
          mem = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	623b      	str	r3, [r7, #32]
 800a1ea:	e001      	b.n	800a1f0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d110      	bne.n	800a218 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1fe:	9202      	str	r2, [sp, #8]
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a20a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f001 f815 	bl	800b23c <xTaskCreateStatic>
 800a212:	4603      	mov	r3, r0
 800a214:	613b      	str	r3, [r7, #16]
 800a216:	e013      	b.n	800a240 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d110      	bne.n	800a240 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	b29a      	uxth	r2, r3
 800a222:	f107 0310 	add.w	r3, r7, #16
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f001 f866 	bl	800b302 <xTaskCreate>
 800a236:	4603      	mov	r3, r0
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d001      	beq.n	800a240 <osThreadNew+0x13c>
          hTask = NULL;
 800a23c:	2300      	movs	r3, #0
 800a23e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a240:	693b      	ldr	r3, [r7, #16]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3730      	adds	r7, #48	; 0x30
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000f28 	.word	0x20000f28

0800a250 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a258:	f3ef 8305 	mrs	r3, IPSR
 800a25c:	613b      	str	r3, [r7, #16]
  return(result);
 800a25e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10f      	bne.n	800a284 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a264:	f3ef 8310 	mrs	r3, PRIMASK
 800a268:	60fb      	str	r3, [r7, #12]
  return(result);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d105      	bne.n	800a27c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a270:	f3ef 8311 	mrs	r3, BASEPRI
 800a274:	60bb      	str	r3, [r7, #8]
  return(result);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <osDelay+0x3c>
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <osDelay+0x58>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d103      	bne.n	800a28c <osDelay+0x3c>
    stat = osErrorISR;
 800a284:	f06f 0305 	mvn.w	r3, #5
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	e007      	b.n	800a29c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 f990 	bl	800b5bc <vTaskDelay>
    }
  }

  return (stat);
 800a29c:	697b      	ldr	r3, [r7, #20]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000f28 	.word	0x20000f28

0800a2ac <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f002 fb53 	bl	800c960 <pvTimerGetTimerID>
 800a2ba:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <TimerCallback+0x22>
    callb->func (callb->arg);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	6852      	ldr	r2, [r2, #4]
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4798      	blx	r3
  }
}
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08e      	sub	sp, #56	; 0x38
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ec:	f3ef 8305 	mrs	r3, IPSR
 800a2f0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a2f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d16a      	bne.n	800a3ce <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d105      	bne.n	800a310 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a304:	f3ef 8311 	mrs	r3, BASEPRI
 800a308:	613b      	str	r3, [r7, #16]
  return(result);
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <osTimerNew+0x40>
 800a310:	4b31      	ldr	r3, [pc, #196]	; (800a3d8 <osTimerNew+0x100>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d05a      	beq.n	800a3ce <osTimerNew+0xf6>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d057      	beq.n	800a3ce <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a31e:	2008      	movs	r0, #8
 800a320:	f002 fd78 	bl	800ce14 <pvPortMalloc>
 800a324:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d050      	beq.n	800a3ce <osTimerNew+0xf6>
      callb->func = func;
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a33e:	2300      	movs	r3, #0
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
 800a342:	e001      	b.n	800a348 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a344:	2301      	movs	r3, #1
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01c      	beq.n	800a392 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <osTimerNew+0x8e>
          name = attr->name;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d006      	beq.n	800a37c <osTimerNew+0xa4>
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b2b      	cmp	r3, #43	; 0x2b
 800a374:	d902      	bls.n	800a37c <osTimerNew+0xa4>
          mem = 1;
 800a376:	2301      	movs	r3, #1
 800a378:	623b      	str	r3, [r7, #32]
 800a37a:	e00c      	b.n	800a396 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d108      	bne.n	800a396 <osTimerNew+0xbe>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d104      	bne.n	800a396 <osTimerNew+0xbe>
            mem = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	623b      	str	r3, [r7, #32]
 800a390:	e001      	b.n	800a396 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d10c      	bne.n	800a3b6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <osTimerNew+0x104>)
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ae:	f001 ff46 	bl	800c23e <xTimerCreateStatic>
 800a3b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a3b4:	e00b      	b.n	800a3ce <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d108      	bne.n	800a3ce <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a3bc:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <osTimerNew+0x104>)
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3c8:	f001 ff18 	bl	800c1fc <xTimerCreate>
 800a3cc:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3730      	adds	r7, #48	; 0x30
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000f28 	.word	0x20000f28
 800a3dc:	0800a2ad 	.word	0x0800a2ad

0800a3e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08c      	sub	sp, #48	; 0x30
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f0:	f3ef 8305 	mrs	r3, IPSR
 800a3f4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d16f      	bne.n	800a4dc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a400:	617b      	str	r3, [r7, #20]
  return(result);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d105      	bne.n	800a414 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a408:	f3ef 8311 	mrs	r3, BASEPRI
 800a40c:	613b      	str	r3, [r7, #16]
  return(result);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <osMessageQueueNew+0x3c>
 800a414:	4b34      	ldr	r3, [pc, #208]	; (800a4e8 <osMessageQueueNew+0x108>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d05f      	beq.n	800a4dc <osMessageQueueNew+0xfc>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d05c      	beq.n	800a4dc <osMessageQueueNew+0xfc>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d059      	beq.n	800a4dc <osMessageQueueNew+0xfc>
    mem = -1;
 800a428:	f04f 33ff 	mov.w	r3, #4294967295
 800a42c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d029      	beq.n	800a488 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d012      	beq.n	800a462 <osMessageQueueNew+0x82>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	2b4f      	cmp	r3, #79	; 0x4f
 800a442:	d90e      	bls.n	800a462 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695a      	ldr	r2, [r3, #20]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68b9      	ldr	r1, [r7, #8]
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	429a      	cmp	r2, r3
 800a45a:	d302      	bcc.n	800a462 <osMessageQueueNew+0x82>
        mem = 1;
 800a45c:	2301      	movs	r3, #1
 800a45e:	623b      	str	r3, [r7, #32]
 800a460:	e014      	b.n	800a48c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d110      	bne.n	800a48c <osMessageQueueNew+0xac>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10c      	bne.n	800a48c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a476:	2b00      	cmp	r3, #0
 800a478:	d108      	bne.n	800a48c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d104      	bne.n	800a48c <osMessageQueueNew+0xac>
          mem = 0;
 800a482:	2300      	movs	r3, #0
 800a484:	623b      	str	r3, [r7, #32]
 800a486:	e001      	b.n	800a48c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d10b      	bne.n	800a4aa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691a      	ldr	r2, [r3, #16]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2100      	movs	r1, #0
 800a49c:	9100      	str	r1, [sp, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f9e9 	bl	800a878 <xQueueGenericCreateStatic>
 800a4a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a4a8:	e008      	b.n	800a4bc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fa61 	bl	800a97c <xQueueGenericCreate>
 800a4ba:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00c      	beq.n	800a4dc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	61fb      	str	r3, [r7, #28]
 800a4ce:	e001      	b.n	800a4d4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4d8:	f000 fe52 	bl	800b180 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3728      	adds	r7, #40	; 0x28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000f28 	.word	0x20000f28

0800a4ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	; 0x28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a500:	2300      	movs	r3, #0
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a504:	f3ef 8305 	mrs	r3, IPSR
 800a508:	61fb      	str	r3, [r7, #28]
  return(result);
 800a50a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10f      	bne.n	800a530 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a510:	f3ef 8310 	mrs	r3, PRIMASK
 800a514:	61bb      	str	r3, [r7, #24]
  return(result);
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d105      	bne.n	800a528 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a51c:	f3ef 8311 	mrs	r3, BASEPRI
 800a520:	617b      	str	r3, [r7, #20]
  return(result);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d02c      	beq.n	800a582 <osMessageQueuePut+0x96>
 800a528:	4b28      	ldr	r3, [pc, #160]	; (800a5cc <osMessageQueuePut+0xe0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d128      	bne.n	800a582 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d005      	beq.n	800a542 <osMessageQueuePut+0x56>
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <osMessageQueuePut+0x56>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a542:	f06f 0303 	mvn.w	r3, #3
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a548:	e039      	b.n	800a5be <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a54e:	f107 0210 	add.w	r2, r7, #16
 800a552:	2300      	movs	r3, #0
 800a554:	68b9      	ldr	r1, [r7, #8]
 800a556:	6a38      	ldr	r0, [r7, #32]
 800a558:	f000 fb7c 	bl	800ac54 <xQueueGenericSendFromISR>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d003      	beq.n	800a56a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a562:	f06f 0302 	mvn.w	r3, #2
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a568:	e029      	b.n	800a5be <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d026      	beq.n	800a5be <osMessageQueuePut+0xd2>
 800a570:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <osMessageQueuePut+0xe4>)
 800a572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a580:	e01d      	b.n	800a5be <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <osMessageQueuePut+0xa2>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d103      	bne.n	800a596 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a58e:	f06f 0303 	mvn.w	r3, #3
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
 800a594:	e014      	b.n	800a5c0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a596:	2300      	movs	r3, #0
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	6a38      	ldr	r0, [r7, #32]
 800a59e:	f000 fa53 	bl	800aa48 <xQueueGenericSend>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d00b      	beq.n	800a5c0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a5ae:	f06f 0301 	mvn.w	r3, #1
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b4:	e004      	b.n	800a5c0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a5b6:	f06f 0302 	mvn.w	r3, #2
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a5bc:	e000      	b.n	800a5c0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3728      	adds	r7, #40	; 0x28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000f28 	.word	0x20000f28
 800a5d0:	e000ed04 	.word	0xe000ed04

0800a5d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4a07      	ldr	r2, [pc, #28]	; (800a600 <vApplicationGetIdleTaskMemory+0x2c>)
 800a5e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4a06      	ldr	r2, [pc, #24]	; (800a604 <vApplicationGetIdleTaskMemory+0x30>)
 800a5ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2280      	movs	r2, #128	; 0x80
 800a5f0:	601a      	str	r2, [r3, #0]
}
 800a5f2:	bf00      	nop
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20000f2c 	.word	0x20000f2c
 800a604:	20000fe8 	.word	0x20000fe8

0800a608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4a07      	ldr	r2, [pc, #28]	; (800a634 <vApplicationGetTimerTaskMemory+0x2c>)
 800a618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4a06      	ldr	r2, [pc, #24]	; (800a638 <vApplicationGetTimerTaskMemory+0x30>)
 800a61e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a626:	601a      	str	r2, [r3, #0]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	200011e8 	.word	0x200011e8
 800a638:	200012a4 	.word	0x200012a4

0800a63c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f103 0208 	add.w	r2, r3, #8
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f04f 32ff 	mov.w	r2, #4294967295
 800a654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f103 0208 	add.w	r2, r3, #8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f103 0208 	add.w	r2, r3, #8
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b085      	sub	sp, #20
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d103      	bne.n	800a6fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	e00c      	b.n	800a718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3308      	adds	r3, #8
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	e002      	b.n	800a70c <vListInsert+0x2e>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	429a      	cmp	r2, r3
 800a716:	d2f6      	bcs.n	800a706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6892      	ldr	r2, [r2, #8]
 800a766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6852      	ldr	r2, [r2, #4]
 800a770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d103      	bne.n	800a784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	1e5a      	subs	r2, r3, #1
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10c      	bne.n	800a7d2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	b672      	cpsid	i
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	b662      	cpsie	i
 800a7cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a7d2:	f002 f9f3 	bl	800cbbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7de:	68f9      	ldr	r1, [r7, #12]
 800a7e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7e2:	fb01 f303 	mul.w	r3, r1, r3
 800a7e6:	441a      	add	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	3b01      	subs	r3, #1
 800a804:	68f9      	ldr	r1, [r7, #12]
 800a806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	441a      	add	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	22ff      	movs	r2, #255	; 0xff
 800a816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	22ff      	movs	r2, #255	; 0xff
 800a81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d114      	bne.n	800a852 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01a      	beq.n	800a866 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	3310      	adds	r3, #16
 800a834:	4618      	mov	r0, r3
 800a836:	f001 f9b1 	bl	800bb9c <xTaskRemoveFromEventList>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d012      	beq.n	800a866 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a840:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <xQueueGenericReset+0xd0>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	e009      	b.n	800a866 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3310      	adds	r3, #16
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff fef0 	bl	800a63c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3324      	adds	r3, #36	; 0x24
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff feeb 	bl	800a63c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a866:	f002 f9dd 	bl	800cc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a86a:	2301      	movs	r3, #1
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08e      	sub	sp, #56	; 0x38
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
 800a884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10c      	bne.n	800a8a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	b672      	cpsid	i
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	b662      	cpsie	i
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10c      	bne.n	800a8c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	b672      	cpsid	i
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	b662      	cpsie	i
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <xQueueGenericCreateStatic+0x5a>
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <xQueueGenericCreateStatic+0x5e>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <xQueueGenericCreateStatic+0x60>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10c      	bne.n	800a8f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	b672      	cpsid	i
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	b662      	cpsie	i
 800a8f0:	623b      	str	r3, [r7, #32]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <xQueueGenericCreateStatic+0x8a>
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <xQueueGenericCreateStatic+0x8e>
 800a902:	2301      	movs	r3, #1
 800a904:	e000      	b.n	800a908 <xQueueGenericCreateStatic+0x90>
 800a906:	2300      	movs	r3, #0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10c      	bne.n	800a926 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	b672      	cpsid	i
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	b662      	cpsie	i
 800a920:	61fb      	str	r3, [r7, #28]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a926:	2350      	movs	r3, #80	; 0x50
 800a928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b50      	cmp	r3, #80	; 0x50
 800a92e:	d00c      	beq.n	800a94a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	b672      	cpsid	i
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	b662      	cpsie	i
 800a944:	61bb      	str	r3, [r7, #24]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a94a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00d      	beq.n	800a972 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a95e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	4613      	mov	r3, r2
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 f847 	bl	800aa00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a974:	4618      	mov	r0, r3
 800a976:	3730      	adds	r7, #48	; 0x30
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	; 0x28
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	4613      	mov	r3, r2
 800a988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10c      	bne.n	800a9aa <xQueueGenericCreate+0x2e>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	b672      	cpsid	i
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	b662      	cpsie	i
 800a9a4:	613b      	str	r3, [r7, #16]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	61fb      	str	r3, [r7, #28]
 800a9b4:	e004      	b.n	800a9c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	fb02 f303 	mul.w	r3, r2, r3
 800a9be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3350      	adds	r3, #80	; 0x50
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f002 fa25 	bl	800ce14 <pvPortMalloc>
 800a9ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d011      	beq.n	800a9f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	3350      	adds	r3, #80	; 0x50
 800a9da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9e4:	79fa      	ldrb	r2, [r7, #7]
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 f805 	bl	800aa00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d103      	bne.n	800aa1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e002      	b.n	800aa22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa2e:	2101      	movs	r1, #1
 800aa30:	69b8      	ldr	r0, [r7, #24]
 800aa32:	f7ff feb7 	bl	800a7a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	78fa      	ldrb	r2, [r7, #3]
 800aa3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa3e:	bf00      	nop
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08e      	sub	sp, #56	; 0x38
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa56:	2300      	movs	r3, #0
 800aa58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10c      	bne.n	800aa7e <xQueueGenericSend+0x36>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	b672      	cpsid	i
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	b662      	cpsie	i
 800aa78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d103      	bne.n	800aa8c <xQueueGenericSend+0x44>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <xQueueGenericSend+0x48>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e000      	b.n	800aa92 <xQueueGenericSend+0x4a>
 800aa90:	2300      	movs	r3, #0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10c      	bne.n	800aab0 <xQueueGenericSend+0x68>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	b672      	cpsid	i
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	b662      	cpsie	i
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d103      	bne.n	800aabe <xQueueGenericSend+0x76>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <xQueueGenericSend+0x7a>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <xQueueGenericSend+0x7c>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10c      	bne.n	800aae2 <xQueueGenericSend+0x9a>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	623b      	str	r3, [r7, #32]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aae2:	f001 fa5d 	bl	800bfa0 <xTaskGetSchedulerState>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d102      	bne.n	800aaf2 <xQueueGenericSend+0xaa>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <xQueueGenericSend+0xae>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <xQueueGenericSend+0xb0>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10c      	bne.n	800ab16 <xQueueGenericSend+0xce>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	b672      	cpsid	i
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	b662      	cpsie	i
 800ab10:	61fb      	str	r3, [r7, #28]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab16:	f002 f851 	bl	800cbbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d302      	bcc.n	800ab2c <xQueueGenericSend+0xe4>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d129      	bne.n	800ab80 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab32:	f000 fa15 	bl	800af60 <prvCopyDataToQueue>
 800ab36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	3324      	adds	r3, #36	; 0x24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f001 f829 	bl	800bb9c <xTaskRemoveFromEventList>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d013      	beq.n	800ab78 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab50:	4b3f      	ldr	r3, [pc, #252]	; (800ac50 <xQueueGenericSend+0x208>)
 800ab52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	e00a      	b.n	800ab78 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d007      	beq.n	800ab78 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab68:	4b39      	ldr	r3, [pc, #228]	; (800ac50 <xQueueGenericSend+0x208>)
 800ab6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab78:	f002 f854 	bl	800cc24 <vPortExitCritical>
				return pdPASS;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e063      	b.n	800ac48 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab86:	f002 f84d 	bl	800cc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e05c      	b.n	800ac48 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d106      	bne.n	800aba2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab94:	f107 0314 	add.w	r3, r7, #20
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f001 f865 	bl	800bc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aba2:	f002 f83f 	bl	800cc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aba6:	f000 fdb3 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abaa:	f002 f807 	bl	800cbbc <vPortEnterCritical>
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abb4:	b25b      	sxtb	r3, r3
 800abb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abba:	d103      	bne.n	800abc4 <xQueueGenericSend+0x17c>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd0:	d103      	bne.n	800abda <xQueueGenericSend+0x192>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abda:	f002 f823 	bl	800cc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abde:	1d3a      	adds	r2, r7, #4
 800abe0:	f107 0314 	add.w	r3, r7, #20
 800abe4:	4611      	mov	r1, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 f854 	bl	800bc94 <xTaskCheckForTimeOut>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d124      	bne.n	800ac3c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abf4:	f000 faac 	bl	800b150 <prvIsQueueFull>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d018      	beq.n	800ac30 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	3310      	adds	r3, #16
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 ff74 	bl	800baf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac0e:	f000 fa37 	bl	800b080 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac12:	f000 fd8b 	bl	800b72c <xTaskResumeAll>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f47f af7c 	bne.w	800ab16 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <xQueueGenericSend+0x208>)
 800ac20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	e772      	b.n	800ab16 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac32:	f000 fa25 	bl	800b080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac36:	f000 fd79 	bl	800b72c <xTaskResumeAll>
 800ac3a:	e76c      	b.n	800ab16 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac3e:	f000 fa1f 	bl	800b080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac42:	f000 fd73 	bl	800b72c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3738      	adds	r7, #56	; 0x38
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08e      	sub	sp, #56	; 0x38
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10c      	bne.n	800ac86 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	b672      	cpsid	i
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	b662      	cpsie	i
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <xQueueGenericSendFromISR+0x40>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <xQueueGenericSendFromISR+0x44>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <xQueueGenericSendFromISR+0x46>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10c      	bne.n	800acb8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	b672      	cpsid	i
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	b662      	cpsie	i
 800acb2:	623b      	str	r3, [r7, #32]
}
 800acb4:	bf00      	nop
 800acb6:	e7fe      	b.n	800acb6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d103      	bne.n	800acc6 <xQueueGenericSendFromISR+0x72>
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <xQueueGenericSendFromISR+0x76>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <xQueueGenericSendFromISR+0x78>
 800acca:	2300      	movs	r3, #0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10c      	bne.n	800acea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	b672      	cpsid	i
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	b662      	cpsie	i
 800ace4:	61fb      	str	r3, [r7, #28]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acea:	f002 f84f 	bl	800cd8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acee:	f3ef 8211 	mrs	r2, BASEPRI
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	b672      	cpsid	i
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	b662      	cpsie	i
 800ad06:	61ba      	str	r2, [r7, #24]
 800ad08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d302      	bcc.n	800ad20 <xQueueGenericSendFromISR+0xcc>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d12c      	bne.n	800ad7a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad30:	f000 f916 	bl	800af60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3c:	d112      	bne.n	800ad64 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d016      	beq.n	800ad74 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	3324      	adds	r3, #36	; 0x24
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 ff26 	bl	800bb9c <xTaskRemoveFromEventList>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00e      	beq.n	800ad74 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	e007      	b.n	800ad74 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad68:	3301      	adds	r3, #1
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	b25a      	sxtb	r2, r3
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad74:	2301      	movs	r3, #1
 800ad76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ad78:	e001      	b.n	800ad7e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3738      	adds	r7, #56	; 0x38
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08c      	sub	sp, #48	; 0x30
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10c      	bne.n	800adc8 <xQueueReceive+0x34>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	b672      	cpsid	i
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	b662      	cpsie	i
 800adc2:	623b      	str	r3, [r7, #32]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <xQueueReceive+0x42>
 800adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <xQueueReceive+0x46>
 800add6:	2301      	movs	r3, #1
 800add8:	e000      	b.n	800addc <xQueueReceive+0x48>
 800adda:	2300      	movs	r3, #0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10c      	bne.n	800adfa <xQueueReceive+0x66>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	b672      	cpsid	i
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	b662      	cpsie	i
 800adf4:	61fb      	str	r3, [r7, #28]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adfa:	f001 f8d1 	bl	800bfa0 <xTaskGetSchedulerState>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <xQueueReceive+0x76>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <xQueueReceive+0x7a>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueReceive+0x7c>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10c      	bne.n	800ae2e <xQueueReceive+0x9a>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	b672      	cpsid	i
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	b662      	cpsie	i
 800ae28:	61bb      	str	r3, [r7, #24]
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae2e:	f001 fec5 	bl	800cbbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01f      	beq.n	800ae7e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae42:	f000 f8f7 	bl	800b034 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	1e5a      	subs	r2, r3, #1
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00f      	beq.n	800ae76 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	3310      	adds	r3, #16
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fe9e 	bl	800bb9c <xTaskRemoveFromEventList>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d007      	beq.n	800ae76 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae66:	4b3d      	ldr	r3, [pc, #244]	; (800af5c <xQueueReceive+0x1c8>)
 800ae68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae76:	f001 fed5 	bl	800cc24 <vPortExitCritical>
				return pdPASS;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e069      	b.n	800af52 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae84:	f001 fece 	bl	800cc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e062      	b.n	800af52 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d106      	bne.n	800aea0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae92:	f107 0310 	add.w	r3, r7, #16
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fee6 	bl	800bc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aea0:	f001 fec0 	bl	800cc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea4:	f000 fc34 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aea8:	f001 fe88 	bl	800cbbc <vPortEnterCritical>
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb8:	d103      	bne.n	800aec2 <xQueueReceive+0x12e>
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec8:	b25b      	sxtb	r3, r3
 800aeca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aece:	d103      	bne.n	800aed8 <xQueueReceive+0x144>
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed8:	f001 fea4 	bl	800cc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aedc:	1d3a      	adds	r2, r7, #4
 800aede:	f107 0310 	add.w	r3, r7, #16
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fed5 	bl	800bc94 <xTaskCheckForTimeOut>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d123      	bne.n	800af38 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef2:	f000 f917 	bl	800b124 <prvIsQueueEmpty>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d017      	beq.n	800af2c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	3324      	adds	r3, #36	; 0x24
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	4611      	mov	r1, r2
 800af04:	4618      	mov	r0, r3
 800af06:	f000 fdf5 	bl	800baf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af0c:	f000 f8b8 	bl	800b080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af10:	f000 fc0c 	bl	800b72c <xTaskResumeAll>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d189      	bne.n	800ae2e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800af1a:	4b10      	ldr	r3, [pc, #64]	; (800af5c <xQueueReceive+0x1c8>)
 800af1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	e780      	b.n	800ae2e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2e:	f000 f8a7 	bl	800b080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af32:	f000 fbfb 	bl	800b72c <xTaskResumeAll>
 800af36:	e77a      	b.n	800ae2e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3a:	f000 f8a1 	bl	800b080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af3e:	f000 fbf5 	bl	800b72c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af44:	f000 f8ee 	bl	800b124 <prvIsQueueEmpty>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f43f af6f 	beq.w	800ae2e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af52:	4618      	mov	r0, r3
 800af54:	3730      	adds	r7, #48	; 0x30
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10d      	bne.n	800af9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d14d      	bne.n	800b022 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f001 f826 	bl	800bfdc <xTaskPriorityDisinherit>
 800af90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	609a      	str	r2, [r3, #8]
 800af98:	e043      	b.n	800b022 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d119      	bne.n	800afd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6858      	ldr	r0, [r3, #4]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	461a      	mov	r2, r3
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	f002 fef4 	bl	800dd98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	441a      	add	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d32b      	bcc.n	800b022 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	605a      	str	r2, [r3, #4]
 800afd2:	e026      	b.n	800b022 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68d8      	ldr	r0, [r3, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afdc:	461a      	mov	r2, r3
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	f002 feda 	bl	800dd98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	68da      	ldr	r2, [r3, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afec:	425b      	negs	r3, r3
 800afee:	441a      	add	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	68da      	ldr	r2, [r3, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d207      	bcs.n	800b010 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b008:	425b      	negs	r3, r3
 800b00a:	441a      	add	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d105      	bne.n	800b022 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3b01      	subs	r3, #1
 800b020:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b02a:	697b      	ldr	r3, [r7, #20]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	d018      	beq.n	800b078 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	441a      	add	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68da      	ldr	r2, [r3, #12]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d303      	bcc.n	800b068 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68d9      	ldr	r1, [r3, #12]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b070:	461a      	mov	r2, r3
 800b072:	6838      	ldr	r0, [r7, #0]
 800b074:	f002 fe90 	bl	800dd98 <memcpy>
	}
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b088:	f001 fd98 	bl	800cbbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b092:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b094:	e011      	b.n	800b0ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d012      	beq.n	800b0c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	3324      	adds	r3, #36	; 0x24
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fd7a 	bl	800bb9c <xTaskRemoveFromEventList>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0ae:	f000 fe57 	bl	800bd60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	dce9      	bgt.n	800b096 <prvUnlockQueue+0x16>
 800b0c2:	e000      	b.n	800b0c6 <prvUnlockQueue+0x46>
					break;
 800b0c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	22ff      	movs	r2, #255	; 0xff
 800b0ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0ce:	f001 fda9 	bl	800cc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0d2:	f001 fd73 	bl	800cbbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0de:	e011      	b.n	800b104 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d012      	beq.n	800b10e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3310      	adds	r3, #16
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 fd55 	bl	800bb9c <xTaskRemoveFromEventList>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0f8:	f000 fe32 	bl	800bd60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	b2db      	uxtb	r3, r3
 800b102:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	dce9      	bgt.n	800b0e0 <prvUnlockQueue+0x60>
 800b10c:	e000      	b.n	800b110 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b10e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	22ff      	movs	r2, #255	; 0xff
 800b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b118:	f001 fd84 	bl	800cc24 <vPortExitCritical>
}
 800b11c:	bf00      	nop
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b12c:	f001 fd46 	bl	800cbbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e001      	b.n	800b142 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b142:	f001 fd6f 	bl	800cc24 <vPortExitCritical>

	return xReturn;
 800b146:	68fb      	ldr	r3, [r7, #12]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b158:	f001 fd30 	bl	800cbbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b164:	429a      	cmp	r2, r3
 800b166:	d102      	bne.n	800b16e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	e001      	b.n	800b172 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b172:	f001 fd57 	bl	800cc24 <vPortExitCritical>

	return xReturn;
 800b176:	68fb      	ldr	r3, [r7, #12]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e014      	b.n	800b1ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b190:	4a0f      	ldr	r2, [pc, #60]	; (800b1d0 <vQueueAddToRegistry+0x50>)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10b      	bne.n	800b1b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b19c:	490c      	ldr	r1, [pc, #48]	; (800b1d0 <vQueueAddToRegistry+0x50>)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1a6:	4a0a      	ldr	r2, [pc, #40]	; (800b1d0 <vQueueAddToRegistry+0x50>)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1b2:	e006      	b.n	800b1c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b07      	cmp	r3, #7
 800b1be:	d9e7      	bls.n	800b190 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	200016a4 	.word	0x200016a4

0800b1d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1e4:	f001 fcea 	bl	800cbbc <vPortEnterCritical>
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ee:	b25b      	sxtb	r3, r3
 800b1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f4:	d103      	bne.n	800b1fe <vQueueWaitForMessageRestricted+0x2a>
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b204:	b25b      	sxtb	r3, r3
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	d103      	bne.n	800b214 <vQueueWaitForMessageRestricted+0x40>
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b214:	f001 fd06 	bl	800cc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	3324      	adds	r3, #36	; 0x24
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	68b9      	ldr	r1, [r7, #8]
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fc89 	bl	800bb40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b22e:	6978      	ldr	r0, [r7, #20]
 800b230:	f7ff ff26 	bl	800b080 <prvUnlockQueue>
	}
 800b234:	bf00      	nop
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08e      	sub	sp, #56	; 0x38
 800b240:	af04      	add	r7, sp, #16
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10c      	bne.n	800b26a <xTaskCreateStatic+0x2e>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	b672      	cpsid	i
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	b662      	cpsie	i
 800b264:	623b      	str	r3, [r7, #32]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10c      	bne.n	800b28a <xTaskCreateStatic+0x4e>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	b672      	cpsid	i
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	b662      	cpsie	i
 800b284:	61fb      	str	r3, [r7, #28]
}
 800b286:	bf00      	nop
 800b288:	e7fe      	b.n	800b288 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b28a:	23bc      	movs	r3, #188	; 0xbc
 800b28c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2bbc      	cmp	r3, #188	; 0xbc
 800b292:	d00c      	beq.n	800b2ae <xTaskCreateStatic+0x72>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	b672      	cpsid	i
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	b662      	cpsie	i
 800b2a8:	61bb      	str	r3, [r7, #24]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01e      	beq.n	800b2f4 <xTaskCreateStatic+0xb8>
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01b      	beq.n	800b2f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	9303      	str	r3, [sp, #12]
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	9302      	str	r3, [sp, #8]
 800b2d6:	f107 0314 	add.w	r3, r7, #20
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68b9      	ldr	r1, [r7, #8]
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 f850 	bl	800b38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2ee:	f000 f8f5 	bl	800b4dc <prvAddNewTaskToReadyList>
 800b2f2:	e001      	b.n	800b2f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2f8:	697b      	ldr	r3, [r7, #20]
	}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3728      	adds	r7, #40	; 0x28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b302:	b580      	push	{r7, lr}
 800b304:	b08c      	sub	sp, #48	; 0x30
 800b306:	af04      	add	r7, sp, #16
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	60b9      	str	r1, [r7, #8]
 800b30c:	603b      	str	r3, [r7, #0]
 800b30e:	4613      	mov	r3, r2
 800b310:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b312:	88fb      	ldrh	r3, [r7, #6]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4618      	mov	r0, r3
 800b318:	f001 fd7c 	bl	800ce14 <pvPortMalloc>
 800b31c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00e      	beq.n	800b342 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b324:	20bc      	movs	r0, #188	; 0xbc
 800b326:	f001 fd75 	bl	800ce14 <pvPortMalloc>
 800b32a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	631a      	str	r2, [r3, #48]	; 0x30
 800b338:	e005      	b.n	800b346 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b33a:	6978      	ldr	r0, [r7, #20]
 800b33c:	f001 fe34 	bl	800cfa8 <vPortFree>
 800b340:	e001      	b.n	800b346 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d017      	beq.n	800b37c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b354:	88fa      	ldrh	r2, [r7, #6]
 800b356:	2300      	movs	r3, #0
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	9302      	str	r3, [sp, #8]
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68b9      	ldr	r1, [r7, #8]
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 f80e 	bl	800b38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b370:	69f8      	ldr	r0, [r7, #28]
 800b372:	f000 f8b3 	bl	800b4dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b376:	2301      	movs	r3, #1
 800b378:	61bb      	str	r3, [r7, #24]
 800b37a:	e002      	b.n	800b382 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b37c:	f04f 33ff 	mov.w	r3, #4294967295
 800b380:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b382:	69bb      	ldr	r3, [r7, #24]
	}
 800b384:	4618      	mov	r0, r3
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	21a5      	movs	r1, #165	; 0xa5
 800b3a6:	f002 fd05 	bl	800ddb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b3b4:	440b      	add	r3, r1
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	f023 0307 	bic.w	r3, r3, #7
 800b3c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00c      	beq.n	800b3e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	b672      	cpsid	i
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	b662      	cpsie	i
 800b3e2:	617b      	str	r3, [r7, #20]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d01f      	beq.n	800b42e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	61fb      	str	r3, [r7, #28]
 800b3f2:	e012      	b.n	800b41a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	7819      	ldrb	r1, [r3, #0]
 800b3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	3334      	adds	r3, #52	; 0x34
 800b404:	460a      	mov	r2, r1
 800b406:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	4413      	add	r3, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d006      	beq.n	800b422 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	3301      	adds	r3, #1
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	2b0f      	cmp	r3, #15
 800b41e:	d9e9      	bls.n	800b3f4 <prvInitialiseNewTask+0x68>
 800b420:	e000      	b.n	800b424 <prvInitialiseNewTask+0x98>
			{
				break;
 800b422:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	2200      	movs	r2, #0
 800b428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b42c:	e003      	b.n	800b436 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b438:	2b37      	cmp	r3, #55	; 0x37
 800b43a:	d901      	bls.n	800b440 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b43c:	2337      	movs	r3, #55	; 0x37
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b444:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b44a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	2200      	movs	r2, #0
 800b450:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	3304      	adds	r3, #4
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff f910 	bl	800a67c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	3318      	adds	r3, #24
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff f90b 	bl	800a67c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b47a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47e:	2200      	movs	r2, #0
 800b480:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	2200      	movs	r2, #0
 800b488:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	3354      	adds	r3, #84	; 0x54
 800b490:	2260      	movs	r2, #96	; 0x60
 800b492:	2100      	movs	r1, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f002 fc8d 	bl	800ddb4 <memset>
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	4a0c      	ldr	r2, [pc, #48]	; (800b4d0 <prvInitialiseNewTask+0x144>)
 800b49e:	659a      	str	r2, [r3, #88]	; 0x58
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	4a0c      	ldr	r2, [pc, #48]	; (800b4d4 <prvInitialiseNewTask+0x148>)
 800b4a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	4a0b      	ldr	r2, [pc, #44]	; (800b4d8 <prvInitialiseNewTask+0x14c>)
 800b4aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	68f9      	ldr	r1, [r7, #12]
 800b4b0:	69b8      	ldr	r0, [r7, #24]
 800b4b2:	f001 fa77 	bl	800c9a4 <pxPortInitialiseStack>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c8:	bf00      	nop
 800b4ca:	3720      	adds	r7, #32
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	0800e29c 	.word	0x0800e29c
 800b4d4:	0800e2bc 	.word	0x0800e2bc
 800b4d8:	0800e27c 	.word	0x0800e27c

0800b4dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4e4:	f001 fb6a 	bl	800cbbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4e8:	4b2d      	ldr	r3, [pc, #180]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	4a2c      	ldr	r2, [pc, #176]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b4f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4f2:	4b2c      	ldr	r3, [pc, #176]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4fa:	4a2a      	ldr	r2, [pc, #168]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b500:	4b27      	ldr	r3, [pc, #156]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d110      	bne.n	800b52a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b508:	f000 fc4e 	bl	800bda8 <prvInitialiseTaskLists>
 800b50c:	e00d      	b.n	800b52a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b50e:	4b26      	ldr	r3, [pc, #152]	; (800b5a8 <prvAddNewTaskToReadyList+0xcc>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b516:	4b23      	ldr	r3, [pc, #140]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	429a      	cmp	r2, r3
 800b522:	d802      	bhi.n	800b52a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b524:	4a1f      	ldr	r2, [pc, #124]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b52a:	4b20      	ldr	r3, [pc, #128]	; (800b5ac <prvAddNewTaskToReadyList+0xd0>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	4a1e      	ldr	r2, [pc, #120]	; (800b5ac <prvAddNewTaskToReadyList+0xd0>)
 800b532:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b534:	4b1d      	ldr	r3, [pc, #116]	; (800b5ac <prvAddNewTaskToReadyList+0xd0>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b540:	4b1b      	ldr	r3, [pc, #108]	; (800b5b0 <prvAddNewTaskToReadyList+0xd4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d903      	bls.n	800b550 <prvAddNewTaskToReadyList+0x74>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	4a18      	ldr	r2, [pc, #96]	; (800b5b0 <prvAddNewTaskToReadyList+0xd4>)
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b554:	4613      	mov	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4413      	add	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4a15      	ldr	r2, [pc, #84]	; (800b5b4 <prvAddNewTaskToReadyList+0xd8>)
 800b55e:	441a      	add	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3304      	adds	r3, #4
 800b564:	4619      	mov	r1, r3
 800b566:	4610      	mov	r0, r2
 800b568:	f7ff f895 	bl	800a696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b56c:	f001 fb5a 	bl	800cc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b570:	4b0d      	ldr	r3, [pc, #52]	; (800b5a8 <prvAddNewTaskToReadyList+0xcc>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00e      	beq.n	800b596 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	429a      	cmp	r2, r3
 800b584:	d207      	bcs.n	800b596 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <prvAddNewTaskToReadyList+0xdc>)
 800b588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b596:	bf00      	nop
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20001bb8 	.word	0x20001bb8
 800b5a4:	200016e4 	.word	0x200016e4
 800b5a8:	20001bc4 	.word	0x20001bc4
 800b5ac:	20001bd4 	.word	0x20001bd4
 800b5b0:	20001bc0 	.word	0x20001bc0
 800b5b4:	200016e8 	.word	0x200016e8
 800b5b8:	e000ed04 	.word	0xe000ed04

0800b5bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d019      	beq.n	800b602 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5ce:	4b14      	ldr	r3, [pc, #80]	; (800b620 <vTaskDelay+0x64>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00c      	beq.n	800b5f0 <vTaskDelay+0x34>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5da:	b672      	cpsid	i
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	b662      	cpsie	i
 800b5ea:	60bb      	str	r3, [r7, #8]
}
 800b5ec:	bf00      	nop
 800b5ee:	e7fe      	b.n	800b5ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b5f0:	f000 f88e 	bl	800b710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fd62 	bl	800c0c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5fc:	f000 f896 	bl	800b72c <xTaskResumeAll>
 800b600:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d107      	bne.n	800b618 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b608:	4b06      	ldr	r3, [pc, #24]	; (800b624 <vTaskDelay+0x68>)
 800b60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b618:	bf00      	nop
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20001be0 	.word	0x20001be0
 800b624:	e000ed04 	.word	0xe000ed04

0800b628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b08a      	sub	sp, #40	; 0x28
 800b62c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b636:	463a      	mov	r2, r7
 800b638:	1d39      	adds	r1, r7, #4
 800b63a:	f107 0308 	add.w	r3, r7, #8
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe ffc8 	bl	800a5d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	9202      	str	r2, [sp, #8]
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	2300      	movs	r3, #0
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	2300      	movs	r3, #0
 800b654:	460a      	mov	r2, r1
 800b656:	4926      	ldr	r1, [pc, #152]	; (800b6f0 <vTaskStartScheduler+0xc8>)
 800b658:	4826      	ldr	r0, [pc, #152]	; (800b6f4 <vTaskStartScheduler+0xcc>)
 800b65a:	f7ff fdef 	bl	800b23c <xTaskCreateStatic>
 800b65e:	4603      	mov	r3, r0
 800b660:	4a25      	ldr	r2, [pc, #148]	; (800b6f8 <vTaskStartScheduler+0xd0>)
 800b662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b664:	4b24      	ldr	r3, [pc, #144]	; (800b6f8 <vTaskStartScheduler+0xd0>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b66c:	2301      	movs	r3, #1
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	e001      	b.n	800b676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d102      	bne.n	800b682 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b67c:	f000 fd74 	bl	800c168 <xTimerCreateTimerTask>
 800b680:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d11d      	bne.n	800b6c4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	b672      	cpsid	i
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	b662      	cpsie	i
 800b69c:	613b      	str	r3, [r7, #16]
}
 800b69e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6a0:	4b16      	ldr	r3, [pc, #88]	; (800b6fc <vTaskStartScheduler+0xd4>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3354      	adds	r3, #84	; 0x54
 800b6a6:	4a16      	ldr	r2, [pc, #88]	; (800b700 <vTaskStartScheduler+0xd8>)
 800b6a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6aa:	4b16      	ldr	r3, [pc, #88]	; (800b704 <vTaskStartScheduler+0xdc>)
 800b6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6b2:	4b15      	ldr	r3, [pc, #84]	; (800b708 <vTaskStartScheduler+0xe0>)
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6b8:	4b14      	ldr	r3, [pc, #80]	; (800b70c <vTaskStartScheduler+0xe4>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6be:	f001 f9ff 	bl	800cac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6c2:	e010      	b.n	800b6e6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ca:	d10c      	bne.n	800b6e6 <vTaskStartScheduler+0xbe>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	b672      	cpsid	i
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	b662      	cpsie	i
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <vTaskStartScheduler+0xbc>
}
 800b6e6:	bf00      	nop
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800e16c 	.word	0x0800e16c
 800b6f4:	0800bd79 	.word	0x0800bd79
 800b6f8:	20001bdc 	.word	0x20001bdc
 800b6fc:	200016e4 	.word	0x200016e4
 800b700:	20000110 	.word	0x20000110
 800b704:	20001bd8 	.word	0x20001bd8
 800b708:	20001bc4 	.word	0x20001bc4
 800b70c:	20001bbc 	.word	0x20001bbc

0800b710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b714:	4b04      	ldr	r3, [pc, #16]	; (800b728 <vTaskSuspendAll+0x18>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a03      	ldr	r2, [pc, #12]	; (800b728 <vTaskSuspendAll+0x18>)
 800b71c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b71e:	bf00      	nop
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	20001be0 	.word	0x20001be0

0800b72c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b736:	2300      	movs	r3, #0
 800b738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b73a:	4b43      	ldr	r3, [pc, #268]	; (800b848 <xTaskResumeAll+0x11c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10c      	bne.n	800b75c <xTaskResumeAll+0x30>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	b672      	cpsid	i
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	b662      	cpsie	i
 800b756:	603b      	str	r3, [r7, #0]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b75c:	f001 fa2e 	bl	800cbbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b760:	4b39      	ldr	r3, [pc, #228]	; (800b848 <xTaskResumeAll+0x11c>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3b01      	subs	r3, #1
 800b766:	4a38      	ldr	r2, [pc, #224]	; (800b848 <xTaskResumeAll+0x11c>)
 800b768:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b76a:	4b37      	ldr	r3, [pc, #220]	; (800b848 <xTaskResumeAll+0x11c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d162      	bne.n	800b838 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b772:	4b36      	ldr	r3, [pc, #216]	; (800b84c <xTaskResumeAll+0x120>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d05e      	beq.n	800b838 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b77a:	e02f      	b.n	800b7dc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b77c:	4b34      	ldr	r3, [pc, #208]	; (800b850 <xTaskResumeAll+0x124>)
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3318      	adds	r3, #24
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fe ffe1 	bl	800a750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3304      	adds	r3, #4
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe ffdc 	bl	800a750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79c:	4b2d      	ldr	r3, [pc, #180]	; (800b854 <xTaskResumeAll+0x128>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d903      	bls.n	800b7ac <xTaskResumeAll+0x80>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a8:	4a2a      	ldr	r2, [pc, #168]	; (800b854 <xTaskResumeAll+0x128>)
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4a27      	ldr	r2, [pc, #156]	; (800b858 <xTaskResumeAll+0x12c>)
 800b7ba:	441a      	add	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f7fe ff67 	bl	800a696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	4b23      	ldr	r3, [pc, #140]	; (800b85c <xTaskResumeAll+0x130>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d302      	bcc.n	800b7dc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b7d6:	4b22      	ldr	r3, [pc, #136]	; (800b860 <xTaskResumeAll+0x134>)
 800b7d8:	2201      	movs	r2, #1
 800b7da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7dc:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <xTaskResumeAll+0x124>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1cb      	bne.n	800b77c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7ea:	f000 fbb9 	bl	800bf60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b7ee:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <xTaskResumeAll+0x138>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d010      	beq.n	800b81c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7fa:	f000 f859 	bl	800b8b0 <xTaskIncrementTick>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b804:	4b16      	ldr	r3, [pc, #88]	; (800b860 <xTaskResumeAll+0x134>)
 800b806:	2201      	movs	r2, #1
 800b808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1f1      	bne.n	800b7fa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <xTaskResumeAll+0x138>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b81c:	4b10      	ldr	r3, [pc, #64]	; (800b860 <xTaskResumeAll+0x134>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d009      	beq.n	800b838 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTaskResumeAll+0x13c>)
 800b82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b838:	f001 f9f4 	bl	800cc24 <vPortExitCritical>

	return xAlreadyYielded;
 800b83c:	68bb      	ldr	r3, [r7, #8]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20001be0 	.word	0x20001be0
 800b84c:	20001bb8 	.word	0x20001bb8
 800b850:	20001b78 	.word	0x20001b78
 800b854:	20001bc0 	.word	0x20001bc0
 800b858:	200016e8 	.word	0x200016e8
 800b85c:	200016e4 	.word	0x200016e4
 800b860:	20001bcc 	.word	0x20001bcc
 800b864:	20001bc8 	.word	0x20001bc8
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b872:	4b05      	ldr	r3, [pc, #20]	; (800b888 <xTaskGetTickCount+0x1c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b878:	687b      	ldr	r3, [r7, #4]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	20001bbc 	.word	0x20001bbc

0800b88c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b892:	f001 fa7b 	bl	800cd8c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b896:	2300      	movs	r3, #0
 800b898:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <xTaskGetTickCountFromISR+0x20>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8a0:	683b      	ldr	r3, [r7, #0]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20001bbc 	.word	0x20001bbc

0800b8b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ba:	4b50      	ldr	r3, [pc, #320]	; (800b9fc <xTaskIncrementTick+0x14c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f040 808b 	bne.w	800b9da <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8c4:	4b4e      	ldr	r3, [pc, #312]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8cc:	4a4c      	ldr	r2, [pc, #304]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d122      	bne.n	800b91e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8d8:	4b4a      	ldr	r3, [pc, #296]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00c      	beq.n	800b8fc <xTaskIncrementTick+0x4c>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	b672      	cpsid	i
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	b662      	cpsie	i
 800b8f6:	603b      	str	r3, [r7, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	e7fe      	b.n	800b8fa <xTaskIncrementTick+0x4a>
 800b8fc:	4b41      	ldr	r3, [pc, #260]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	4b41      	ldr	r3, [pc, #260]	; (800ba08 <xTaskIncrementTick+0x158>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a3f      	ldr	r2, [pc, #252]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	4a3f      	ldr	r2, [pc, #252]	; (800ba08 <xTaskIncrementTick+0x158>)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	4b3e      	ldr	r3, [pc, #248]	; (800ba0c <xTaskIncrementTick+0x15c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	4a3d      	ldr	r2, [pc, #244]	; (800ba0c <xTaskIncrementTick+0x15c>)
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	f000 fb21 	bl	800bf60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b91e:	4b3c      	ldr	r3, [pc, #240]	; (800ba10 <xTaskIncrementTick+0x160>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	429a      	cmp	r2, r3
 800b926:	d349      	bcc.n	800b9bc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b928:	4b36      	ldr	r3, [pc, #216]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d104      	bne.n	800b93c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b932:	4b37      	ldr	r3, [pc, #220]	; (800ba10 <xTaskIncrementTick+0x160>)
 800b934:	f04f 32ff 	mov.w	r2, #4294967295
 800b938:	601a      	str	r2, [r3, #0]
					break;
 800b93a:	e03f      	b.n	800b9bc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b93c:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	429a      	cmp	r2, r3
 800b952:	d203      	bcs.n	800b95c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b954:	4a2e      	ldr	r2, [pc, #184]	; (800ba10 <xTaskIncrementTick+0x160>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b95a:	e02f      	b.n	800b9bc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	3304      	adds	r3, #4
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe fef5 	bl	800a750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	3318      	adds	r3, #24
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe feec 	bl	800a750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	4b25      	ldr	r3, [pc, #148]	; (800ba14 <xTaskIncrementTick+0x164>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d903      	bls.n	800b98c <xTaskIncrementTick+0xdc>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	4a22      	ldr	r2, [pc, #136]	; (800ba14 <xTaskIncrementTick+0x164>)
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4a1f      	ldr	r2, [pc, #124]	; (800ba18 <xTaskIncrementTick+0x168>)
 800b99a:	441a      	add	r2, r3
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f7fe fe77 	bl	800a696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ba1c <xTaskIncrementTick+0x16c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d3b8      	bcc.n	800b928 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ba:	e7b5      	b.n	800b928 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9bc:	4b17      	ldr	r3, [pc, #92]	; (800ba1c <xTaskIncrementTick+0x16c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c2:	4915      	ldr	r1, [pc, #84]	; (800ba18 <xTaskIncrementTick+0x168>)
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	440b      	add	r3, r1
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d907      	bls.n	800b9e4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	617b      	str	r3, [r7, #20]
 800b9d8:	e004      	b.n	800b9e4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9da:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <xTaskIncrementTick+0x170>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	4a0f      	ldr	r2, [pc, #60]	; (800ba20 <xTaskIncrementTick+0x170>)
 800b9e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <xTaskIncrementTick+0x174>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b9f0:	697b      	ldr	r3, [r7, #20]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20001be0 	.word	0x20001be0
 800ba00:	20001bbc 	.word	0x20001bbc
 800ba04:	20001b70 	.word	0x20001b70
 800ba08:	20001b74 	.word	0x20001b74
 800ba0c:	20001bd0 	.word	0x20001bd0
 800ba10:	20001bd8 	.word	0x20001bd8
 800ba14:	20001bc0 	.word	0x20001bc0
 800ba18:	200016e8 	.word	0x200016e8
 800ba1c:	200016e4 	.word	0x200016e4
 800ba20:	20001bc8 	.word	0x20001bc8
 800ba24:	20001bcc 	.word	0x20001bcc

0800ba28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba2e:	4b2b      	ldr	r3, [pc, #172]	; (800badc <vTaskSwitchContext+0xb4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba36:	4b2a      	ldr	r3, [pc, #168]	; (800bae0 <vTaskSwitchContext+0xb8>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba3c:	e048      	b.n	800bad0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ba3e:	4b28      	ldr	r3, [pc, #160]	; (800bae0 <vTaskSwitchContext+0xb8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba44:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <vTaskSwitchContext+0xbc>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	60fb      	str	r3, [r7, #12]
 800ba4a:	e012      	b.n	800ba72 <vTaskSwitchContext+0x4a>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10c      	bne.n	800ba6c <vTaskSwitchContext+0x44>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	b672      	cpsid	i
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	b662      	cpsie	i
 800ba66:	607b      	str	r3, [r7, #4]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <vTaskSwitchContext+0x42>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	491d      	ldr	r1, [pc, #116]	; (800bae8 <vTaskSwitchContext+0xc0>)
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4613      	mov	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	440b      	add	r3, r1
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0e2      	beq.n	800ba4c <vTaskSwitchContext+0x24>
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <vTaskSwitchContext+0xc0>)
 800ba92:	4413      	add	r3, r2
 800ba94:	60bb      	str	r3, [r7, #8]
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	605a      	str	r2, [r3, #4]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	3308      	adds	r3, #8
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d104      	bne.n	800bab6 <vTaskSwitchContext+0x8e>
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	605a      	str	r2, [r3, #4]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	4a0b      	ldr	r2, [pc, #44]	; (800baec <vTaskSwitchContext+0xc4>)
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <vTaskSwitchContext+0xbc>)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bac6:	4b09      	ldr	r3, [pc, #36]	; (800baec <vTaskSwitchContext+0xc4>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3354      	adds	r3, #84	; 0x54
 800bacc:	4a08      	ldr	r2, [pc, #32]	; (800baf0 <vTaskSwitchContext+0xc8>)
 800bace:	6013      	str	r3, [r2, #0]
}
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	20001be0 	.word	0x20001be0
 800bae0:	20001bcc 	.word	0x20001bcc
 800bae4:	20001bc0 	.word	0x20001bc0
 800bae8:	200016e8 	.word	0x200016e8
 800baec:	200016e4 	.word	0x200016e4
 800baf0:	20000110 	.word	0x20000110

0800baf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10c      	bne.n	800bb1e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	b672      	cpsid	i
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	b662      	cpsie	i
 800bb18:	60fb      	str	r3, [r7, #12]
}
 800bb1a:	bf00      	nop
 800bb1c:	e7fe      	b.n	800bb1c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb1e:	4b07      	ldr	r3, [pc, #28]	; (800bb3c <vTaskPlaceOnEventList+0x48>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3318      	adds	r3, #24
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fe fdd9 	bl	800a6de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	6838      	ldr	r0, [r7, #0]
 800bb30:	f000 fac6 	bl	800c0c0 <prvAddCurrentTaskToDelayedList>
}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200016e4 	.word	0x200016e4

0800bb40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10c      	bne.n	800bb6c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	b672      	cpsid	i
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	b662      	cpsie	i
 800bb66:	617b      	str	r3, [r7, #20]
}
 800bb68:	bf00      	nop
 800bb6a:	e7fe      	b.n	800bb6a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb6c:	4b0a      	ldr	r3, [pc, #40]	; (800bb98 <vTaskPlaceOnEventListRestricted+0x58>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3318      	adds	r3, #24
 800bb72:	4619      	mov	r1, r3
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7fe fd8e 	bl	800a696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	68b8      	ldr	r0, [r7, #8]
 800bb8a:	f000 fa99 	bl	800c0c0 <prvAddCurrentTaskToDelayedList>
	}
 800bb8e:	bf00      	nop
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	200016e4 	.word	0x200016e4

0800bb9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10c      	bne.n	800bbcc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	b672      	cpsid	i
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	b662      	cpsie	i
 800bbc6:	60fb      	str	r3, [r7, #12]
}
 800bbc8:	bf00      	nop
 800bbca:	e7fe      	b.n	800bbca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	3318      	adds	r3, #24
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fe fdbd 	bl	800a750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd6:	4b1e      	ldr	r3, [pc, #120]	; (800bc50 <xTaskRemoveFromEventList+0xb4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d11d      	bne.n	800bc1a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fdb4 	bl	800a750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbec:	4b19      	ldr	r3, [pc, #100]	; (800bc54 <xTaskRemoveFromEventList+0xb8>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d903      	bls.n	800bbfc <xTaskRemoveFromEventList+0x60>
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	4a16      	ldr	r2, [pc, #88]	; (800bc54 <xTaskRemoveFromEventList+0xb8>)
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4a13      	ldr	r2, [pc, #76]	; (800bc58 <xTaskRemoveFromEventList+0xbc>)
 800bc0a:	441a      	add	r2, r3
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7fe fd3f 	bl	800a696 <vListInsertEnd>
 800bc18:	e005      	b.n	800bc26 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	4619      	mov	r1, r3
 800bc20:	480e      	ldr	r0, [pc, #56]	; (800bc5c <xTaskRemoveFromEventList+0xc0>)
 800bc22:	f7fe fd38 	bl	800a696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2a:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <xTaskRemoveFromEventList+0xc4>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d905      	bls.n	800bc40 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc34:	2301      	movs	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc38:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <xTaskRemoveFromEventList+0xc8>)
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	e001      	b.n	800bc44 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bc40:	2300      	movs	r3, #0
 800bc42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc44:	697b      	ldr	r3, [r7, #20]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20001be0 	.word	0x20001be0
 800bc54:	20001bc0 	.word	0x20001bc0
 800bc58:	200016e8 	.word	0x200016e8
 800bc5c:	20001b78 	.word	0x20001b78
 800bc60:	200016e4 	.word	0x200016e4
 800bc64:	20001bcc 	.word	0x20001bcc

0800bc68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc70:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <vTaskInternalSetTimeOutState+0x24>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc78:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <vTaskInternalSetTimeOutState+0x28>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	605a      	str	r2, [r3, #4]
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20001bd0 	.word	0x20001bd0
 800bc90:	20001bbc 	.word	0x20001bbc

0800bc94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10c      	bne.n	800bcbe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	b672      	cpsid	i
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	b662      	cpsie	i
 800bcb8:	613b      	str	r3, [r7, #16]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10c      	bne.n	800bcde <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	b672      	cpsid	i
 800bcca:	f383 8811 	msr	BASEPRI, r3
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	b662      	cpsie	i
 800bcd8:	60fb      	str	r3, [r7, #12]
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bcde:	f000 ff6d 	bl	800cbbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bce2:	4b1d      	ldr	r3, [pc, #116]	; (800bd58 <xTaskCheckForTimeOut+0xc4>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	69ba      	ldr	r2, [r7, #24]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d102      	bne.n	800bd02 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	e023      	b.n	800bd4a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	4b15      	ldr	r3, [pc, #84]	; (800bd5c <xTaskCheckForTimeOut+0xc8>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d007      	beq.n	800bd1e <xTaskCheckForTimeOut+0x8a>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	69ba      	ldr	r2, [r7, #24]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d302      	bcc.n	800bd1e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	61fb      	str	r3, [r7, #28]
 800bd1c:	e015      	b.n	800bd4a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d20b      	bcs.n	800bd40 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff ff97 	bl	800bc68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	e004      	b.n	800bd4a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd46:	2301      	movs	r3, #1
 800bd48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd4a:	f000 ff6b 	bl	800cc24 <vPortExitCritical>

	return xReturn;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20001bbc 	.word	0x20001bbc
 800bd5c:	20001bd0 	.word	0x20001bd0

0800bd60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd64:	4b03      	ldr	r3, [pc, #12]	; (800bd74 <vTaskMissedYield+0x14>)
 800bd66:	2201      	movs	r2, #1
 800bd68:	601a      	str	r2, [r3, #0]
}
 800bd6a:	bf00      	nop
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	20001bcc 	.word	0x20001bcc

0800bd78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd80:	f000 f852 	bl	800be28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd84:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <prvIdleTask+0x28>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d9f9      	bls.n	800bd80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd8c:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <prvIdleTask+0x2c>)
 800bd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd9c:	e7f0      	b.n	800bd80 <prvIdleTask+0x8>
 800bd9e:	bf00      	nop
 800bda0:	200016e8 	.word	0x200016e8
 800bda4:	e000ed04 	.word	0xe000ed04

0800bda8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdae:	2300      	movs	r3, #0
 800bdb0:	607b      	str	r3, [r7, #4]
 800bdb2:	e00c      	b.n	800bdce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4a12      	ldr	r2, [pc, #72]	; (800be08 <prvInitialiseTaskLists+0x60>)
 800bdc0:	4413      	add	r3, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe fc3a 	bl	800a63c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	607b      	str	r3, [r7, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b37      	cmp	r3, #55	; 0x37
 800bdd2:	d9ef      	bls.n	800bdb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdd4:	480d      	ldr	r0, [pc, #52]	; (800be0c <prvInitialiseTaskLists+0x64>)
 800bdd6:	f7fe fc31 	bl	800a63c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdda:	480d      	ldr	r0, [pc, #52]	; (800be10 <prvInitialiseTaskLists+0x68>)
 800bddc:	f7fe fc2e 	bl	800a63c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bde0:	480c      	ldr	r0, [pc, #48]	; (800be14 <prvInitialiseTaskLists+0x6c>)
 800bde2:	f7fe fc2b 	bl	800a63c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bde6:	480c      	ldr	r0, [pc, #48]	; (800be18 <prvInitialiseTaskLists+0x70>)
 800bde8:	f7fe fc28 	bl	800a63c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdec:	480b      	ldr	r0, [pc, #44]	; (800be1c <prvInitialiseTaskLists+0x74>)
 800bdee:	f7fe fc25 	bl	800a63c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdf2:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <prvInitialiseTaskLists+0x78>)
 800bdf4:	4a05      	ldr	r2, [pc, #20]	; (800be0c <prvInitialiseTaskLists+0x64>)
 800bdf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <prvInitialiseTaskLists+0x7c>)
 800bdfa:	4a05      	ldr	r2, [pc, #20]	; (800be10 <prvInitialiseTaskLists+0x68>)
 800bdfc:	601a      	str	r2, [r3, #0]
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	200016e8 	.word	0x200016e8
 800be0c:	20001b48 	.word	0x20001b48
 800be10:	20001b5c 	.word	0x20001b5c
 800be14:	20001b78 	.word	0x20001b78
 800be18:	20001b8c 	.word	0x20001b8c
 800be1c:	20001ba4 	.word	0x20001ba4
 800be20:	20001b70 	.word	0x20001b70
 800be24:	20001b74 	.word	0x20001b74

0800be28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be2e:	e019      	b.n	800be64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be30:	f000 fec4 	bl	800cbbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be34:	4b10      	ldr	r3, [pc, #64]	; (800be78 <prvCheckTasksWaitingTermination+0x50>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe fc85 	bl	800a750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be46:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <prvCheckTasksWaitingTermination+0x54>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	4a0b      	ldr	r2, [pc, #44]	; (800be7c <prvCheckTasksWaitingTermination+0x54>)
 800be4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <prvCheckTasksWaitingTermination+0x58>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3b01      	subs	r3, #1
 800be56:	4a0a      	ldr	r2, [pc, #40]	; (800be80 <prvCheckTasksWaitingTermination+0x58>)
 800be58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be5a:	f000 fee3 	bl	800cc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f848 	bl	800bef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be64:	4b06      	ldr	r3, [pc, #24]	; (800be80 <prvCheckTasksWaitingTermination+0x58>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1e1      	bne.n	800be30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be6c:	bf00      	nop
 800be6e:	bf00      	nop
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20001b8c 	.word	0x20001b8c
 800be7c:	20001bb8 	.word	0x20001bb8
 800be80:	20001ba0 	.word	0x20001ba0

0800be84 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800be90:	e005      	b.n	800be9e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3301      	adds	r3, #1
 800be96:	607b      	str	r3, [r7, #4]
			ulCount++;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3301      	adds	r3, #1
 800be9c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2ba5      	cmp	r3, #165	; 0xa5
 800bea4:	d0f5      	beq.n	800be92 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	089b      	lsrs	r3, r3, #2
 800beaa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	b29b      	uxth	r3, r3
	}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <uxTaskGetStackHighWaterMark+0x14>
 800beca:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <uxTaskGetStackHighWaterMark+0x34>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	e000      	b.n	800bed2 <uxTaskGetStackHighWaterMark+0x16>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800beda:	6938      	ldr	r0, [r7, #16]
 800bedc:	f7ff ffd2 	bl	800be84 <prvTaskCheckFreeStackSpace>
 800bee0:	4603      	mov	r3, r0
 800bee2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bee4:	68fb      	ldr	r3, [r7, #12]
	}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	200016e4 	.word	0x200016e4

0800bef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3354      	adds	r3, #84	; 0x54
 800bf00:	4618      	mov	r0, r3
 800bf02:	f002 f84d 	bl	800dfa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d108      	bne.n	800bf22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 f847 	bl	800cfa8 <vPortFree>
				vPortFree( pxTCB );
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 f844 	bl	800cfa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf20:	e01a      	b.n	800bf58 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d103      	bne.n	800bf34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 f83b 	bl	800cfa8 <vPortFree>
	}
 800bf32:	e011      	b.n	800bf58 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d00c      	beq.n	800bf58 <prvDeleteTCB+0x64>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	b672      	cpsid	i
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	b662      	cpsie	i
 800bf52:	60fb      	str	r3, [r7, #12]
}
 800bf54:	bf00      	nop
 800bf56:	e7fe      	b.n	800bf56 <prvDeleteTCB+0x62>
	}
 800bf58:	bf00      	nop
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf66:	4b0c      	ldr	r3, [pc, #48]	; (800bf98 <prvResetNextTaskUnblockTime+0x38>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d104      	bne.n	800bf7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf70:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <prvResetNextTaskUnblockTime+0x3c>)
 800bf72:	f04f 32ff 	mov.w	r2, #4294967295
 800bf76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf78:	e008      	b.n	800bf8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7a:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <prvResetNextTaskUnblockTime+0x38>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	4a04      	ldr	r2, [pc, #16]	; (800bf9c <prvResetNextTaskUnblockTime+0x3c>)
 800bf8a:	6013      	str	r3, [r2, #0]
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	20001b70 	.word	0x20001b70
 800bf9c:	20001bd8 	.word	0x20001bd8

0800bfa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	; (800bfd4 <xTaskGetSchedulerState+0x34>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d102      	bne.n	800bfb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	e008      	b.n	800bfc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfb4:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <xTaskGetSchedulerState+0x38>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	607b      	str	r3, [r7, #4]
 800bfc0:	e001      	b.n	800bfc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfc6:	687b      	ldr	r3, [r7, #4]
	}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	20001bc4 	.word	0x20001bc4
 800bfd8:	20001be0 	.word	0x20001be0

0800bfdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d05a      	beq.n	800c0a8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bff2:	4b30      	ldr	r3, [pc, #192]	; (800c0b4 <xTaskPriorityDisinherit+0xd8>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d00c      	beq.n	800c016 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	b672      	cpsid	i
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	b662      	cpsie	i
 800c010:	60fb      	str	r3, [r7, #12]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10c      	bne.n	800c038 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	b672      	cpsid	i
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	b662      	cpsie	i
 800c032:	60bb      	str	r3, [r7, #8]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c03c:	1e5a      	subs	r2, r3, #1
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d02c      	beq.n	800c0a8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c052:	2b00      	cmp	r3, #0
 800c054:	d128      	bne.n	800c0a8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3304      	adds	r3, #4
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe fb78 	bl	800a750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <xTaskPriorityDisinherit+0xdc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d903      	bls.n	800c088 <xTaskPriorityDisinherit+0xac>
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c084:	4a0c      	ldr	r2, [pc, #48]	; (800c0b8 <xTaskPriorityDisinherit+0xdc>)
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4a09      	ldr	r2, [pc, #36]	; (800c0bc <xTaskPriorityDisinherit+0xe0>)
 800c096:	441a      	add	r2, r3
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	3304      	adds	r3, #4
 800c09c:	4619      	mov	r1, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f7fe faf9 	bl	800a696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0a8:	697b      	ldr	r3, [r7, #20]
	}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	200016e4 	.word	0x200016e4
 800c0b8:	20001bc0 	.word	0x20001bc0
 800c0bc:	200016e8 	.word	0x200016e8

0800c0c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0ca:	4b21      	ldr	r3, [pc, #132]	; (800c150 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0d0:	4b20      	ldr	r3, [pc, #128]	; (800c154 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fb3a 	bl	800a750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e2:	d10a      	bne.n	800c0fa <prvAddCurrentTaskToDelayedList+0x3a>
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d007      	beq.n	800c0fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0ea:	4b1a      	ldr	r3, [pc, #104]	; (800c154 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4819      	ldr	r0, [pc, #100]	; (800c158 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0f4:	f7fe facf 	bl	800a696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0f8:	e026      	b.n	800c148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4413      	add	r3, r2
 800c100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c102:	4b14      	ldr	r3, [pc, #80]	; (800c154 <prvAddCurrentTaskToDelayedList+0x94>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d209      	bcs.n	800c126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c112:	4b12      	ldr	r3, [pc, #72]	; (800c15c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <prvAddCurrentTaskToDelayedList+0x94>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3304      	adds	r3, #4
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f7fe fadd 	bl	800a6de <vListInsert>
}
 800c124:	e010      	b.n	800c148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c126:	4b0e      	ldr	r3, [pc, #56]	; (800c160 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <prvAddCurrentTaskToDelayedList+0x94>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3304      	adds	r3, #4
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f7fe fad3 	bl	800a6de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d202      	bcs.n	800c148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c142:	4a08      	ldr	r2, [pc, #32]	; (800c164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	6013      	str	r3, [r2, #0]
}
 800c148:	bf00      	nop
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20001bbc 	.word	0x20001bbc
 800c154:	200016e4 	.word	0x200016e4
 800c158:	20001ba4 	.word	0x20001ba4
 800c15c:	20001b74 	.word	0x20001b74
 800c160:	20001b70 	.word	0x20001b70
 800c164:	20001bd8 	.word	0x20001bd8

0800c168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c16e:	2300      	movs	r3, #0
 800c170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c172:	f000 fbb5 	bl	800c8e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c176:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <xTimerCreateTimerTask+0x84>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d021      	beq.n	800c1c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c186:	1d3a      	adds	r2, r7, #4
 800c188:	f107 0108 	add.w	r1, r7, #8
 800c18c:	f107 030c 	add.w	r3, r7, #12
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe fa39 	bl	800a608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	9202      	str	r2, [sp, #8]
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	460a      	mov	r2, r1
 800c1a8:	4911      	ldr	r1, [pc, #68]	; (800c1f0 <xTimerCreateTimerTask+0x88>)
 800c1aa:	4812      	ldr	r0, [pc, #72]	; (800c1f4 <xTimerCreateTimerTask+0x8c>)
 800c1ac:	f7ff f846 	bl	800b23c <xTaskCreateStatic>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	4a11      	ldr	r2, [pc, #68]	; (800c1f8 <xTimerCreateTimerTask+0x90>)
 800c1b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c1b6:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <xTimerCreateTimerTask+0x90>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10c      	bne.n	800c1e2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	b672      	cpsid	i
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	b662      	cpsie	i
 800c1dc:	613b      	str	r3, [r7, #16]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c1e2:	697b      	ldr	r3, [r7, #20]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	20001c14 	.word	0x20001c14
 800c1f0:	0800e174 	.word	0x0800e174
 800c1f4:	0800c479 	.word	0x0800c479
 800c1f8:	20001c18 	.word	0x20001c18

0800c1fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af02      	add	r7, sp, #8
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c20a:	202c      	movs	r0, #44	; 0x2c
 800c20c:	f000 fe02 	bl	800ce14 <pvPortMalloc>
 800c210:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00d      	beq.n	800c234 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 f847 	bl	800c2c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c234:	697b      	ldr	r3, [r7, #20]
	}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b08a      	sub	sp, #40	; 0x28
 800c242:	af02      	add	r7, sp, #8
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	60b9      	str	r1, [r7, #8]
 800c248:	607a      	str	r2, [r7, #4]
 800c24a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c24c:	232c      	movs	r3, #44	; 0x2c
 800c24e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	2b2c      	cmp	r3, #44	; 0x2c
 800c254:	d00c      	beq.n	800c270 <xTimerCreateStatic+0x32>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	b672      	cpsid	i
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	b662      	cpsie	i
 800c26a:	61bb      	str	r3, [r7, #24]
}
 800c26c:	bf00      	nop
 800c26e:	e7fe      	b.n	800c26e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c270:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10c      	bne.n	800c292 <xTimerCreateStatic+0x54>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	b672      	cpsid	i
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	b662      	cpsie	i
 800c28c:	617b      	str	r3, [r7, #20]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00d      	beq.n	800c2b8 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f000 f805 	bl	800c2c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
	}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b086      	sub	sp, #24
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	60f8      	str	r0, [r7, #12]
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10c      	bne.n	800c2f0 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	b672      	cpsid	i
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	b662      	cpsie	i
 800c2ea:	617b      	str	r3, [r7, #20]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d01e      	beq.n	800c334 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c2f6:	f000 faf3 	bl	800c8e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	6a3a      	ldr	r2, [r7, #32]
 800c310:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c314:	3304      	adds	r3, #4
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe f9b0 	bl	800a67c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d008      	beq.n	800c334 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c328:	f043 0304 	orr.w	r3, r3, #4
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c334:	bf00      	nop
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08a      	sub	sp, #40	; 0x28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c34a:	2300      	movs	r3, #0
 800c34c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10c      	bne.n	800c36e <xTimerGenericCommand+0x32>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	b672      	cpsid	i
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	b662      	cpsie	i
 800c368:	623b      	str	r3, [r7, #32]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c36e:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <xTimerGenericCommand+0x9c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d02a      	beq.n	800c3cc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b05      	cmp	r3, #5
 800c386:	dc18      	bgt.n	800c3ba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c388:	f7ff fe0a 	bl	800bfa0 <xTaskGetSchedulerState>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d109      	bne.n	800c3a6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c392:	4b11      	ldr	r3, [pc, #68]	; (800c3d8 <xTimerGenericCommand+0x9c>)
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	f107 0110 	add.w	r1, r7, #16
 800c39a:	2300      	movs	r3, #0
 800c39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c39e:	f7fe fb53 	bl	800aa48 <xQueueGenericSend>
 800c3a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c3a4:	e012      	b.n	800c3cc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <xTimerGenericCommand+0x9c>)
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	f107 0110 	add.w	r1, r7, #16
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f7fe fb49 	bl	800aa48 <xQueueGenericSend>
 800c3b6:	6278      	str	r0, [r7, #36]	; 0x24
 800c3b8:	e008      	b.n	800c3cc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3ba:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <xTimerGenericCommand+0x9c>)
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f107 0110 	add.w	r1, r7, #16
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	f7fe fc45 	bl	800ac54 <xQueueGenericSendFromISR>
 800c3ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3728      	adds	r7, #40	; 0x28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20001c14 	.word	0x20001c14

0800c3dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e6:	4b23      	ldr	r3, [pc, #140]	; (800c474 <prvProcessExpiredTimer+0x98>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fe f9ab 	bl	800a750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d024      	beq.n	800c452 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	699a      	ldr	r2, [r3, #24]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	18d1      	adds	r1, r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	6978      	ldr	r0, [r7, #20]
 800c416:	f000 f8d3 	bl	800c5c0 <prvInsertTimerInActiveList>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d021      	beq.n	800c464 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c420:	2300      	movs	r3, #0
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	2300      	movs	r3, #0
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	2100      	movs	r1, #0
 800c42a:	6978      	ldr	r0, [r7, #20]
 800c42c:	f7ff ff86 	bl	800c33c <xTimerGenericCommand>
 800c430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d115      	bne.n	800c464 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	b672      	cpsid	i
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	b662      	cpsie	i
 800c44c:	60fb      	str	r3, [r7, #12]
}
 800c44e:	bf00      	nop
 800c450:	e7fe      	b.n	800c450 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c458:	f023 0301 	bic.w	r3, r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	6a1b      	ldr	r3, [r3, #32]
 800c468:	6978      	ldr	r0, [r7, #20]
 800c46a:	4798      	blx	r3
}
 800c46c:	bf00      	nop
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20001c0c 	.word	0x20001c0c

0800c478 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c480:	f107 0308 	add.w	r3, r7, #8
 800c484:	4618      	mov	r0, r3
 800c486:	f000 f857 	bl	800c538 <prvGetNextExpireTime>
 800c48a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4619      	mov	r1, r3
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 f803 	bl	800c49c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c496:	f000 f8d5 	bl	800c644 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c49a:	e7f1      	b.n	800c480 <prvTimerTask+0x8>

0800c49c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4a6:	f7ff f933 	bl	800b710 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4aa:	f107 0308 	add.w	r3, r7, #8
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 f866 	bl	800c580 <prvSampleTimeNow>
 800c4b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d130      	bne.n	800c51e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10a      	bne.n	800c4d8 <prvProcessTimerOrBlockTask+0x3c>
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d806      	bhi.n	800c4d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4ca:	f7ff f92f 	bl	800b72c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4ce:	68f9      	ldr	r1, [r7, #12]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff ff83 	bl	800c3dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4d6:	e024      	b.n	800c522 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d008      	beq.n	800c4f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4de:	4b13      	ldr	r3, [pc, #76]	; (800c52c <prvProcessTimerOrBlockTask+0x90>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <prvProcessTimerOrBlockTask+0x50>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e000      	b.n	800c4ee <prvProcessTimerOrBlockTask+0x52>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4f0:	4b0f      	ldr	r3, [pc, #60]	; (800c530 <prvProcessTimerOrBlockTask+0x94>)
 800c4f2:	6818      	ldr	r0, [r3, #0]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	f7fe fe69 	bl	800b1d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c502:	f7ff f913 	bl	800b72c <xTaskResumeAll>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c50c:	4b09      	ldr	r3, [pc, #36]	; (800c534 <prvProcessTimerOrBlockTask+0x98>)
 800c50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	f3bf 8f6f 	isb	sy
}
 800c51c:	e001      	b.n	800c522 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c51e:	f7ff f905 	bl	800b72c <xTaskResumeAll>
}
 800c522:	bf00      	nop
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20001c10 	.word	0x20001c10
 800c530:	20001c14 	.word	0x20001c14
 800c534:	e000ed04 	.word	0xe000ed04

0800c538 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c540:	4b0e      	ldr	r3, [pc, #56]	; (800c57c <prvGetNextExpireTime+0x44>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <prvGetNextExpireTime+0x16>
 800c54a:	2201      	movs	r2, #1
 800c54c:	e000      	b.n	800c550 <prvGetNextExpireTime+0x18>
 800c54e:	2200      	movs	r2, #0
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d105      	bne.n	800c568 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c55c:	4b07      	ldr	r3, [pc, #28]	; (800c57c <prvGetNextExpireTime+0x44>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e001      	b.n	800c56c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c56c:	68fb      	ldr	r3, [r7, #12]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	20001c0c 	.word	0x20001c0c

0800c580 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c588:	f7ff f970 	bl	800b86c <xTaskGetTickCount>
 800c58c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c58e:	4b0b      	ldr	r3, [pc, #44]	; (800c5bc <prvSampleTimeNow+0x3c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	429a      	cmp	r2, r3
 800c596:	d205      	bcs.n	800c5a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c598:	f000 f93c 	bl	800c814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e002      	b.n	800c5aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5aa:	4a04      	ldr	r2, [pc, #16]	; (800c5bc <prvSampleTimeNow+0x3c>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20001c1c 	.word	0x20001c1c

0800c5c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d812      	bhi.n	800c60c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	1ad2      	subs	r2, r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d302      	bcc.n	800c5fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	617b      	str	r3, [r7, #20]
 800c5f8:	e01b      	b.n	800c632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5fa:	4b10      	ldr	r3, [pc, #64]	; (800c63c <prvInsertTimerInActiveList+0x7c>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3304      	adds	r3, #4
 800c602:	4619      	mov	r1, r3
 800c604:	4610      	mov	r0, r2
 800c606:	f7fe f86a 	bl	800a6de <vListInsert>
 800c60a:	e012      	b.n	800c632 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d206      	bcs.n	800c622 <prvInsertTimerInActiveList+0x62>
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d302      	bcc.n	800c622 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c61c:	2301      	movs	r3, #1
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	e007      	b.n	800c632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c622:	4b07      	ldr	r3, [pc, #28]	; (800c640 <prvInsertTimerInActiveList+0x80>)
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3304      	adds	r3, #4
 800c62a:	4619      	mov	r1, r3
 800c62c:	4610      	mov	r0, r2
 800c62e:	f7fe f856 	bl	800a6de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c632:	697b      	ldr	r3, [r7, #20]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20001c10 	.word	0x20001c10
 800c640:	20001c0c 	.word	0x20001c0c

0800c644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08e      	sub	sp, #56	; 0x38
 800c648:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c64a:	e0d0      	b.n	800c7ee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	da1a      	bge.n	800c688 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c652:	1d3b      	adds	r3, r7, #4
 800c654:	3304      	adds	r3, #4
 800c656:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10c      	bne.n	800c678 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	b672      	cpsid	i
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	b662      	cpsie	i
 800c672:	61fb      	str	r3, [r7, #28]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67e:	6850      	ldr	r0, [r2, #4]
 800c680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c682:	6892      	ldr	r2, [r2, #8]
 800c684:	4611      	mov	r1, r2
 800c686:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f2c0 80ae 	blt.w	800c7ec <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d004      	beq.n	800c6a6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe f855 	bl	800a750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6a6:	463b      	mov	r3, r7
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff ff69 	bl	800c580 <prvSampleTimeNow>
 800c6ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b09      	cmp	r3, #9
 800c6b4:	f200 809b 	bhi.w	800c7ee <prvProcessReceivedCommands+0x1aa>
 800c6b8:	a201      	add	r2, pc, #4	; (adr r2, 800c6c0 <prvProcessReceivedCommands+0x7c>)
 800c6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6be:	bf00      	nop
 800c6c0:	0800c6e9 	.word	0x0800c6e9
 800c6c4:	0800c6e9 	.word	0x0800c6e9
 800c6c8:	0800c6e9 	.word	0x0800c6e9
 800c6cc:	0800c761 	.word	0x0800c761
 800c6d0:	0800c775 	.word	0x0800c775
 800c6d4:	0800c7c3 	.word	0x0800c7c3
 800c6d8:	0800c6e9 	.word	0x0800c6e9
 800c6dc:	0800c6e9 	.word	0x0800c6e9
 800c6e0:	0800c761 	.word	0x0800c761
 800c6e4:	0800c775 	.word	0x0800c775
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ee:	f043 0301 	orr.w	r3, r3, #1
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	18d1      	adds	r1, r2, r3
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c708:	f7ff ff5a 	bl	800c5c0 <prvInsertTimerInActiveList>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d06d      	beq.n	800c7ee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	6a1b      	ldr	r3, [r3, #32]
 800c716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b00      	cmp	r3, #0
 800c726:	d062      	beq.n	800c7ee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	441a      	add	r2, r3
 800c730:	2300      	movs	r3, #0
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	2300      	movs	r3, #0
 800c736:	2100      	movs	r1, #0
 800c738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c73a:	f7ff fdff 	bl	800c33c <xTimerGenericCommand>
 800c73e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d153      	bne.n	800c7ee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	b672      	cpsid	i
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	b662      	cpsie	i
 800c75a:	61bb      	str	r3, [r7, #24]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c766:	f023 0301 	bic.w	r3, r3, #1
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c772:	e03c      	b.n	800c7ee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c77a:	f043 0301 	orr.w	r3, r3, #1
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10c      	bne.n	800c7ae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	b672      	cpsid	i
 800c79a:	f383 8811 	msr	BASEPRI, r3
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	b662      	cpsie	i
 800c7a8:	617b      	str	r3, [r7, #20]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	699a      	ldr	r2, [r3, #24]
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	18d1      	adds	r1, r2, r3
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7bc:	f7ff ff00 	bl	800c5c0 <prvInsertTimerInActiveList>
					break;
 800c7c0:	e015      	b.n	800c7ee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d2:	f000 fbe9 	bl	800cfa8 <vPortFree>
 800c7d6:	e00a      	b.n	800c7ee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7de:	f023 0301 	bic.w	r3, r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7ea:	e000      	b.n	800c7ee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ee:	4b08      	ldr	r3, [pc, #32]	; (800c810 <prvProcessReceivedCommands+0x1cc>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	1d39      	adds	r1, r7, #4
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe facc 	bl	800ad94 <xQueueReceive>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f47f af24 	bne.w	800c64c <prvProcessReceivedCommands+0x8>
	}
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	3730      	adds	r7, #48	; 0x30
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20001c14 	.word	0x20001c14

0800c814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c81a:	e04a      	b.n	800c8b2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c81c:	4b2e      	ldr	r3, [pc, #184]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c826:	4b2c      	ldr	r3, [pc, #176]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd ff8b 	bl	800a750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c848:	f003 0304 	and.w	r3, r3, #4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d030      	beq.n	800c8b2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	4413      	add	r3, r2
 800c858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d90e      	bls.n	800c880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c86e:	4b1a      	ldr	r3, [pc, #104]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3304      	adds	r3, #4
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f7fd ff30 	bl	800a6de <vListInsert>
 800c87e:	e018      	b.n	800c8b2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c880:	2300      	movs	r3, #0
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	2100      	movs	r1, #0
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7ff fd56 	bl	800c33c <xTimerGenericCommand>
 800c890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10c      	bne.n	800c8b2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	b672      	cpsid	i
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	b662      	cpsie	i
 800c8ac:	603b      	str	r3, [r7, #0]
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8b2:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1af      	bne.n	800c81c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8bc:	4b06      	ldr	r3, [pc, #24]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8c2:	4b06      	ldr	r3, [pc, #24]	; (800c8dc <prvSwitchTimerLists+0xc8>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a04      	ldr	r2, [pc, #16]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c8c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8ca:	4a04      	ldr	r2, [pc, #16]	; (800c8dc <prvSwitchTimerLists+0xc8>)
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	6013      	str	r3, [r2, #0]
}
 800c8d0:	bf00      	nop
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20001c0c 	.word	0x20001c0c
 800c8dc:	20001c10 	.word	0x20001c10

0800c8e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8e6:	f000 f969 	bl	800cbbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ea:	4b15      	ldr	r3, [pc, #84]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d120      	bne.n	800c934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8f2:	4814      	ldr	r0, [pc, #80]	; (800c944 <prvCheckForValidListAndQueue+0x64>)
 800c8f4:	f7fd fea2 	bl	800a63c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8f8:	4813      	ldr	r0, [pc, #76]	; (800c948 <prvCheckForValidListAndQueue+0x68>)
 800c8fa:	f7fd fe9f 	bl	800a63c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <prvCheckForValidListAndQueue+0x6c>)
 800c900:	4a10      	ldr	r2, [pc, #64]	; (800c944 <prvCheckForValidListAndQueue+0x64>)
 800c902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c904:	4b12      	ldr	r3, [pc, #72]	; (800c950 <prvCheckForValidListAndQueue+0x70>)
 800c906:	4a10      	ldr	r2, [pc, #64]	; (800c948 <prvCheckForValidListAndQueue+0x68>)
 800c908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c90a:	2300      	movs	r3, #0
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4b11      	ldr	r3, [pc, #68]	; (800c954 <prvCheckForValidListAndQueue+0x74>)
 800c910:	4a11      	ldr	r2, [pc, #68]	; (800c958 <prvCheckForValidListAndQueue+0x78>)
 800c912:	2110      	movs	r1, #16
 800c914:	200a      	movs	r0, #10
 800c916:	f7fd ffaf 	bl	800a878 <xQueueGenericCreateStatic>
 800c91a:	4603      	mov	r3, r0
 800c91c:	4a08      	ldr	r2, [pc, #32]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c91e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c920:	4b07      	ldr	r3, [pc, #28]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d005      	beq.n	800c934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c928:	4b05      	ldr	r3, [pc, #20]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	490b      	ldr	r1, [pc, #44]	; (800c95c <prvCheckForValidListAndQueue+0x7c>)
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fc26 	bl	800b180 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c934:	f000 f976 	bl	800cc24 <vPortExitCritical>
}
 800c938:	bf00      	nop
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20001c14 	.word	0x20001c14
 800c944:	20001be4 	.word	0x20001be4
 800c948:	20001bf8 	.word	0x20001bf8
 800c94c:	20001c0c 	.word	0x20001c0c
 800c950:	20001c10 	.word	0x20001c10
 800c954:	20001cc0 	.word	0x20001cc0
 800c958:	20001c20 	.word	0x20001c20
 800c95c:	0800e17c 	.word	0x0800e17c

0800c960 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10c      	bne.n	800c98c <pvTimerGetTimerID+0x2c>
	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	b672      	cpsid	i
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	b662      	cpsie	i
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	e7fe      	b.n	800c98a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800c98c:	f000 f916 	bl	800cbbc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c996:	f000 f945 	bl	800cc24 <vPortExitCritical>

	return pvReturn;
 800c99a:	693b      	ldr	r3, [r7, #16]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3b04      	subs	r3, #4
 800c9b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3b04      	subs	r3, #4
 800c9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f023 0201 	bic.w	r2, r3, #1
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3b04      	subs	r3, #4
 800c9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9d4:	4a0c      	ldr	r2, [pc, #48]	; (800ca08 <pxPortInitialiseStack+0x64>)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3b14      	subs	r3, #20
 800c9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3b04      	subs	r3, #4
 800c9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f06f 0202 	mvn.w	r2, #2
 800c9f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3b20      	subs	r3, #32
 800c9f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	0800ca0d 	.word	0x0800ca0d

0800ca0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca16:	4b14      	ldr	r3, [pc, #80]	; (800ca68 <prvTaskExitError+0x5c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1e:	d00c      	beq.n	800ca3a <prvTaskExitError+0x2e>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	b672      	cpsid	i
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	b662      	cpsie	i
 800ca34:	60fb      	str	r3, [r7, #12]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <prvTaskExitError+0x2c>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	b672      	cpsid	i
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	b662      	cpsie	i
 800ca4e:	60bb      	str	r3, [r7, #8]
}
 800ca50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca52:	bf00      	nop
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0fc      	beq.n	800ca54 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	20000098 	.word	0x20000098
 800ca6c:	00000000 	.word	0x00000000

0800ca70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <pxCurrentTCBConst2>)
 800ca72:	6819      	ldr	r1, [r3, #0]
 800ca74:	6808      	ldr	r0, [r1, #0]
 800ca76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	f380 8809 	msr	PSP, r0
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f04f 0000 	mov.w	r0, #0
 800ca86:	f380 8811 	msr	BASEPRI, r0
 800ca8a:	4770      	bx	lr
 800ca8c:	f3af 8000 	nop.w

0800ca90 <pxCurrentTCBConst2>:
 800ca90:	200016e4 	.word	0x200016e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop

0800ca98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca98:	4808      	ldr	r0, [pc, #32]	; (800cabc <prvPortStartFirstTask+0x24>)
 800ca9a:	6800      	ldr	r0, [r0, #0]
 800ca9c:	6800      	ldr	r0, [r0, #0]
 800ca9e:	f380 8808 	msr	MSP, r0
 800caa2:	f04f 0000 	mov.w	r0, #0
 800caa6:	f380 8814 	msr	CONTROL, r0
 800caaa:	b662      	cpsie	i
 800caac:	b661      	cpsie	f
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	df00      	svc	0
 800cab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800caba:	bf00      	nop
 800cabc:	e000ed08 	.word	0xe000ed08

0800cac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cac6:	4b37      	ldr	r3, [pc, #220]	; (800cba4 <xPortStartScheduler+0xe4>)
 800cac8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	22ff      	movs	r2, #255	; 0xff
 800cad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	4b2f      	ldr	r3, [pc, #188]	; (800cba8 <xPortStartScheduler+0xe8>)
 800caec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800caee:	4b2f      	ldr	r3, [pc, #188]	; (800cbac <xPortStartScheduler+0xec>)
 800caf0:	2207      	movs	r2, #7
 800caf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caf4:	e009      	b.n	800cb0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800caf6:	4b2d      	ldr	r3, [pc, #180]	; (800cbac <xPortStartScheduler+0xec>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	3b01      	subs	r3, #1
 800cafc:	4a2b      	ldr	r2, [pc, #172]	; (800cbac <xPortStartScheduler+0xec>)
 800cafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb0a:	78fb      	ldrb	r3, [r7, #3]
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb12:	2b80      	cmp	r3, #128	; 0x80
 800cb14:	d0ef      	beq.n	800caf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb16:	4b25      	ldr	r3, [pc, #148]	; (800cbac <xPortStartScheduler+0xec>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f1c3 0307 	rsb	r3, r3, #7
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d00c      	beq.n	800cb3c <xPortStartScheduler+0x7c>
	__asm volatile
 800cb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb26:	b672      	cpsid	i
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	b662      	cpsie	i
 800cb36:	60bb      	str	r3, [r7, #8]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb3c:	4b1b      	ldr	r3, [pc, #108]	; (800cbac <xPortStartScheduler+0xec>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	021b      	lsls	r3, r3, #8
 800cb42:	4a1a      	ldr	r2, [pc, #104]	; (800cbac <xPortStartScheduler+0xec>)
 800cb44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb46:	4b19      	ldr	r3, [pc, #100]	; (800cbac <xPortStartScheduler+0xec>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb4e:	4a17      	ldr	r2, [pc, #92]	; (800cbac <xPortStartScheduler+0xec>)
 800cb50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb5a:	4b15      	ldr	r3, [pc, #84]	; (800cbb0 <xPortStartScheduler+0xf0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a14      	ldr	r2, [pc, #80]	; (800cbb0 <xPortStartScheduler+0xf0>)
 800cb60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb66:	4b12      	ldr	r3, [pc, #72]	; (800cbb0 <xPortStartScheduler+0xf0>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a11      	ldr	r2, [pc, #68]	; (800cbb0 <xPortStartScheduler+0xf0>)
 800cb6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb72:	f000 f8dd 	bl	800cd30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb76:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <xPortStartScheduler+0xf4>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb7c:	f000 f8fc 	bl	800cd78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb80:	4b0d      	ldr	r3, [pc, #52]	; (800cbb8 <xPortStartScheduler+0xf8>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a0c      	ldr	r2, [pc, #48]	; (800cbb8 <xPortStartScheduler+0xf8>)
 800cb86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb8c:	f7ff ff84 	bl	800ca98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb90:	f7fe ff4a 	bl	800ba28 <vTaskSwitchContext>
	prvTaskExitError();
 800cb94:	f7ff ff3a 	bl	800ca0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	e000e400 	.word	0xe000e400
 800cba8:	20001d10 	.word	0x20001d10
 800cbac:	20001d14 	.word	0x20001d14
 800cbb0:	e000ed20 	.word	0xe000ed20
 800cbb4:	20000098 	.word	0x20000098
 800cbb8:	e000ef34 	.word	0xe000ef34

0800cbbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	b672      	cpsid	i
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	b662      	cpsie	i
 800cbd6:	607b      	str	r3, [r7, #4]
}
 800cbd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbda:	4b10      	ldr	r3, [pc, #64]	; (800cc1c <vPortEnterCritical+0x60>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	4a0e      	ldr	r2, [pc, #56]	; (800cc1c <vPortEnterCritical+0x60>)
 800cbe2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cbe4:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <vPortEnterCritical+0x60>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d111      	bne.n	800cc10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbec:	4b0c      	ldr	r3, [pc, #48]	; (800cc20 <vPortEnterCritical+0x64>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00c      	beq.n	800cc10 <vPortEnterCritical+0x54>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	b672      	cpsid	i
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	b662      	cpsie	i
 800cc0a:	603b      	str	r3, [r7, #0]
}
 800cc0c:	bf00      	nop
 800cc0e:	e7fe      	b.n	800cc0e <vPortEnterCritical+0x52>
	}
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	20000098 	.word	0x20000098
 800cc20:	e000ed04 	.word	0xe000ed04

0800cc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc2a:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <vPortExitCritical+0x54>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10c      	bne.n	800cc4c <vPortExitCritical+0x28>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	b672      	cpsid	i
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	b662      	cpsie	i
 800cc46:	607b      	str	r3, [r7, #4]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <vPortExitCritical+0x54>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	4a09      	ldr	r2, [pc, #36]	; (800cc78 <vPortExitCritical+0x54>)
 800cc54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc56:	4b08      	ldr	r3, [pc, #32]	; (800cc78 <vPortExitCritical+0x54>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d105      	bne.n	800cc6a <vPortExitCritical+0x46>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	f383 8811 	msr	BASEPRI, r3
}
 800cc68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc6a:	bf00      	nop
 800cc6c:	370c      	adds	r7, #12
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	20000098 	.word	0x20000098
 800cc7c:	00000000 	.word	0x00000000

0800cc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc80:	f3ef 8009 	mrs	r0, PSP
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	4b15      	ldr	r3, [pc, #84]	; (800cce0 <pxCurrentTCBConst>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	f01e 0f10 	tst.w	lr, #16
 800cc90:	bf08      	it	eq
 800cc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9a:	6010      	str	r0, [r2, #0]
 800cc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cca4:	b672      	cpsid	i
 800cca6:	f380 8811 	msr	BASEPRI, r0
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	b662      	cpsie	i
 800ccb4:	f7fe feb8 	bl	800ba28 <vTaskSwitchContext>
 800ccb8:	f04f 0000 	mov.w	r0, #0
 800ccbc:	f380 8811 	msr	BASEPRI, r0
 800ccc0:	bc09      	pop	{r0, r3}
 800ccc2:	6819      	ldr	r1, [r3, #0]
 800ccc4:	6808      	ldr	r0, [r1, #0]
 800ccc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	f01e 0f10 	tst.w	lr, #16
 800ccce:	bf08      	it	eq
 800ccd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ccd4:	f380 8809 	msr	PSP, r0
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop

0800cce0 <pxCurrentTCBConst>:
 800cce0:	200016e4 	.word	0x200016e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop

0800cce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	b672      	cpsid	i
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	b662      	cpsie	i
 800cd02:	607b      	str	r3, [r7, #4]
}
 800cd04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd06:	f7fe fdd3 	bl	800b8b0 <xTaskIncrementTick>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd10:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <SysTick_Handler+0x44>)
 800cd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	2300      	movs	r3, #0
 800cd1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	f383 8811 	msr	BASEPRI, r3
}
 800cd22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	e000ed04 	.word	0xe000ed04

0800cd30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd34:	4b0b      	ldr	r3, [pc, #44]	; (800cd64 <vPortSetupTimerInterrupt+0x34>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd3a:	4b0b      	ldr	r3, [pc, #44]	; (800cd68 <vPortSetupTimerInterrupt+0x38>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd40:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <vPortSetupTimerInterrupt+0x3c>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a0a      	ldr	r2, [pc, #40]	; (800cd70 <vPortSetupTimerInterrupt+0x40>)
 800cd46:	fba2 2303 	umull	r2, r3, r2, r3
 800cd4a:	099b      	lsrs	r3, r3, #6
 800cd4c:	4a09      	ldr	r2, [pc, #36]	; (800cd74 <vPortSetupTimerInterrupt+0x44>)
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd52:	4b04      	ldr	r3, [pc, #16]	; (800cd64 <vPortSetupTimerInterrupt+0x34>)
 800cd54:	2207      	movs	r2, #7
 800cd56:	601a      	str	r2, [r3, #0]
}
 800cd58:	bf00      	nop
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	e000e010 	.word	0xe000e010
 800cd68:	e000e018 	.word	0xe000e018
 800cd6c:	20000000 	.word	0x20000000
 800cd70:	10624dd3 	.word	0x10624dd3
 800cd74:	e000e014 	.word	0xe000e014

0800cd78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd88 <vPortEnableVFP+0x10>
 800cd7c:	6801      	ldr	r1, [r0, #0]
 800cd7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd82:	6001      	str	r1, [r0, #0]
 800cd84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd86:	bf00      	nop
 800cd88:	e000ed88 	.word	0xe000ed88

0800cd8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd92:	f3ef 8305 	mrs	r3, IPSR
 800cd96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b0f      	cmp	r3, #15
 800cd9c:	d916      	bls.n	800cdcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd9e:	4a19      	ldr	r2, [pc, #100]	; (800ce04 <vPortValidateInterruptPriority+0x78>)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	4413      	add	r3, r2
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cda8:	4b17      	ldr	r3, [pc, #92]	; (800ce08 <vPortValidateInterruptPriority+0x7c>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	7afa      	ldrb	r2, [r7, #11]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d20c      	bcs.n	800cdcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	b672      	cpsid	i
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	b662      	cpsie	i
 800cdc6:	607b      	str	r3, [r7, #4]
}
 800cdc8:	bf00      	nop
 800cdca:	e7fe      	b.n	800cdca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdcc:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <vPortValidateInterruptPriority+0x80>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdd4:	4b0e      	ldr	r3, [pc, #56]	; (800ce10 <vPortValidateInterruptPriority+0x84>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d90c      	bls.n	800cdf6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	b672      	cpsid	i
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	b662      	cpsie	i
 800cdf0:	603b      	str	r3, [r7, #0]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <vPortValidateInterruptPriority+0x68>
	}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	e000e3f0 	.word	0xe000e3f0
 800ce08:	20001d10 	.word	0x20001d10
 800ce0c:	e000ed0c 	.word	0xe000ed0c
 800ce10:	20001d14 	.word	0x20001d14

0800ce14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b08a      	sub	sp, #40	; 0x28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce20:	f7fe fc76 	bl	800b710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce24:	4b5b      	ldr	r3, [pc, #364]	; (800cf94 <pvPortMalloc+0x180>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce2c:	f000 f91a 	bl	800d064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce30:	4b59      	ldr	r3, [pc, #356]	; (800cf98 <pvPortMalloc+0x184>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4013      	ands	r3, r2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f040 8092 	bne.w	800cf62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d01f      	beq.n	800ce84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ce44:	2208      	movs	r2, #8
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4413      	add	r3, r2
 800ce4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f003 0307 	and.w	r3, r3, #7
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d016      	beq.n	800ce84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f023 0307 	bic.w	r3, r3, #7
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f003 0307 	and.w	r3, r3, #7
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00c      	beq.n	800ce84 <pvPortMalloc+0x70>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	b672      	cpsid	i
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	b662      	cpsie	i
 800ce7e:	617b      	str	r3, [r7, #20]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d06b      	beq.n	800cf62 <pvPortMalloc+0x14e>
 800ce8a:	4b44      	ldr	r3, [pc, #272]	; (800cf9c <pvPortMalloc+0x188>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d866      	bhi.n	800cf62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce94:	4b42      	ldr	r3, [pc, #264]	; (800cfa0 <pvPortMalloc+0x18c>)
 800ce96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce98:	4b41      	ldr	r3, [pc, #260]	; (800cfa0 <pvPortMalloc+0x18c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce9e:	e004      	b.n	800ceaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d903      	bls.n	800cebc <pvPortMalloc+0xa8>
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1f1      	bne.n	800cea0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cebc:	4b35      	ldr	r3, [pc, #212]	; (800cf94 <pvPortMalloc+0x180>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d04d      	beq.n	800cf62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2208      	movs	r2, #8
 800cecc:	4413      	add	r3, r2
 800cece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	1ad2      	subs	r2, r2, r3
 800cee0:	2308      	movs	r3, #8
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d921      	bls.n	800cf2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4413      	add	r3, r2
 800ceee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00c      	beq.n	800cf14 <pvPortMalloc+0x100>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	b672      	cpsid	i
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	b662      	cpsie	i
 800cf0e:	613b      	str	r3, [r7, #16]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	1ad2      	subs	r2, r2, r3
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf26:	69b8      	ldr	r0, [r7, #24]
 800cf28:	f000 f8fe 	bl	800d128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf2c:	4b1b      	ldr	r3, [pc, #108]	; (800cf9c <pvPortMalloc+0x188>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	4a19      	ldr	r2, [pc, #100]	; (800cf9c <pvPortMalloc+0x188>)
 800cf38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf3a:	4b18      	ldr	r3, [pc, #96]	; (800cf9c <pvPortMalloc+0x188>)
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	4b19      	ldr	r3, [pc, #100]	; (800cfa4 <pvPortMalloc+0x190>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d203      	bcs.n	800cf4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf46:	4b15      	ldr	r3, [pc, #84]	; (800cf9c <pvPortMalloc+0x188>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a16      	ldr	r2, [pc, #88]	; (800cfa4 <pvPortMalloc+0x190>)
 800cf4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	4b11      	ldr	r3, [pc, #68]	; (800cf98 <pvPortMalloc+0x184>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	431a      	orrs	r2, r3
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf62:	f7fe fbe3 	bl	800b72c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	f003 0307 	and.w	r3, r3, #7
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00c      	beq.n	800cf8a <pvPortMalloc+0x176>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	b672      	cpsid	i
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	b662      	cpsie	i
 800cf84:	60fb      	str	r3, [r7, #12]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <pvPortMalloc+0x174>
	return pvReturn;
 800cf8a:	69fb      	ldr	r3, [r7, #28]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3728      	adds	r7, #40	; 0x28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	20005920 	.word	0x20005920
 800cf98:	2000592c 	.word	0x2000592c
 800cf9c:	20005924 	.word	0x20005924
 800cfa0:	20005918 	.word	0x20005918
 800cfa4:	20005928 	.word	0x20005928

0800cfa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d04c      	beq.n	800d054 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfba:	2308      	movs	r3, #8
 800cfbc:	425b      	negs	r3, r3
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	4b23      	ldr	r3, [pc, #140]	; (800d05c <vPortFree+0xb4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10c      	bne.n	800cff0 <vPortFree+0x48>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfda:	b672      	cpsid	i
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	b662      	cpsie	i
 800cfea:	60fb      	str	r3, [r7, #12]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00c      	beq.n	800d012 <vPortFree+0x6a>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	b672      	cpsid	i
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	b662      	cpsie	i
 800d00c:	60bb      	str	r3, [r7, #8]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	4b11      	ldr	r3, [pc, #68]	; (800d05c <vPortFree+0xb4>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d019      	beq.n	800d054 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d115      	bne.n	800d054 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <vPortFree+0xb4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	43db      	mvns	r3, r3
 800d032:	401a      	ands	r2, r3
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d038:	f7fe fb6a 	bl	800b710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	4b07      	ldr	r3, [pc, #28]	; (800d060 <vPortFree+0xb8>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4413      	add	r3, r2
 800d046:	4a06      	ldr	r2, [pc, #24]	; (800d060 <vPortFree+0xb8>)
 800d048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d04a:	6938      	ldr	r0, [r7, #16]
 800d04c:	f000 f86c 	bl	800d128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d050:	f7fe fb6c 	bl	800b72c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d054:	bf00      	nop
 800d056:	3718      	adds	r7, #24
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	2000592c 	.word	0x2000592c
 800d060:	20005924 	.word	0x20005924

0800d064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d070:	4b27      	ldr	r3, [pc, #156]	; (800d110 <prvHeapInit+0xac>)
 800d072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f003 0307 	and.w	r3, r3, #7
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00c      	beq.n	800d098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	3307      	adds	r3, #7
 800d082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f023 0307 	bic.w	r3, r3, #7
 800d08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	4a1f      	ldr	r2, [pc, #124]	; (800d110 <prvHeapInit+0xac>)
 800d094:	4413      	add	r3, r2
 800d096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d09c:	4a1d      	ldr	r2, [pc, #116]	; (800d114 <prvHeapInit+0xb0>)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0a2:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <prvHeapInit+0xb0>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0b0:	2208      	movs	r2, #8
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f023 0307 	bic.w	r3, r3, #7
 800d0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4a15      	ldr	r2, [pc, #84]	; (800d118 <prvHeapInit+0xb4>)
 800d0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0c6:	4b14      	ldr	r3, [pc, #80]	; (800d118 <prvHeapInit+0xb4>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0ce:	4b12      	ldr	r3, [pc, #72]	; (800d118 <prvHeapInit+0xb4>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	; (800d118 <prvHeapInit+0xb4>)
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	4a0a      	ldr	r2, [pc, #40]	; (800d11c <prvHeapInit+0xb8>)
 800d0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	4a09      	ldr	r2, [pc, #36]	; (800d120 <prvHeapInit+0xbc>)
 800d0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0fc:	4b09      	ldr	r3, [pc, #36]	; (800d124 <prvHeapInit+0xc0>)
 800d0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d102:	601a      	str	r2, [r3, #0]
}
 800d104:	bf00      	nop
 800d106:	3714      	adds	r7, #20
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	20001d18 	.word	0x20001d18
 800d114:	20005918 	.word	0x20005918
 800d118:	20005920 	.word	0x20005920
 800d11c:	20005928 	.word	0x20005928
 800d120:	20005924 	.word	0x20005924
 800d124:	2000592c 	.word	0x2000592c

0800d128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d130:	4b28      	ldr	r3, [pc, #160]	; (800d1d4 <prvInsertBlockIntoFreeList+0xac>)
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	e002      	b.n	800d13c <prvInsertBlockIntoFreeList+0x14>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	429a      	cmp	r2, r3
 800d144:	d8f7      	bhi.n	800d136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	4413      	add	r3, r2
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	429a      	cmp	r2, r3
 800d156:	d108      	bne.n	800d16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	441a      	add	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	441a      	add	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d118      	bne.n	800d1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	4b15      	ldr	r3, [pc, #84]	; (800d1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	429a      	cmp	r2, r3
 800d188:	d00d      	beq.n	800d1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	441a      	add	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e008      	b.n	800d1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1a6:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	e003      	b.n	800d1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d002      	beq.n	800d1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1c6:	bf00      	nop
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	20005918 	.word	0x20005918
 800d1d8:	20005920 	.word	0x20005920

0800d1dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4912      	ldr	r1, [pc, #72]	; (800d22c <MX_USB_DEVICE_Init+0x50>)
 800d1e4:	4812      	ldr	r0, [pc, #72]	; (800d230 <MX_USB_DEVICE_Init+0x54>)
 800d1e6:	f7fb fbff 	bl	80089e8 <USBD_Init>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1f0:	f7f4 fed6 	bl	8001fa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d1f4:	490f      	ldr	r1, [pc, #60]	; (800d234 <MX_USB_DEVICE_Init+0x58>)
 800d1f6:	480e      	ldr	r0, [pc, #56]	; (800d230 <MX_USB_DEVICE_Init+0x54>)
 800d1f8:	f7fb fc26 	bl	8008a48 <USBD_RegisterClass>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d001      	beq.n	800d206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d202:	f7f4 fecd 	bl	8001fa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d206:	490c      	ldr	r1, [pc, #48]	; (800d238 <MX_USB_DEVICE_Init+0x5c>)
 800d208:	4809      	ldr	r0, [pc, #36]	; (800d230 <MX_USB_DEVICE_Init+0x54>)
 800d20a:	f7fb fb1d 	bl	8008848 <USBD_CDC_RegisterInterface>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d214:	f7f4 fec4 	bl	8001fa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d218:	4805      	ldr	r0, [pc, #20]	; (800d230 <MX_USB_DEVICE_Init+0x54>)
 800d21a:	f7fb fc4b 	bl	8008ab4 <USBD_Start>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d224:	f7f4 febc 	bl	8001fa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d228:	bf00      	nop
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	200000b0 	.word	0x200000b0
 800d230:	20005930 	.word	0x20005930
 800d234:	20000018 	.word	0x20000018
 800d238:	2000009c 	.word	0x2000009c

0800d23c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d240:	2200      	movs	r2, #0
 800d242:	4905      	ldr	r1, [pc, #20]	; (800d258 <CDC_Init_FS+0x1c>)
 800d244:	4805      	ldr	r0, [pc, #20]	; (800d25c <CDC_Init_FS+0x20>)
 800d246:	f7fb fb19 	bl	800887c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d24a:	4905      	ldr	r1, [pc, #20]	; (800d260 <CDC_Init_FS+0x24>)
 800d24c:	4803      	ldr	r0, [pc, #12]	; (800d25c <CDC_Init_FS+0x20>)
 800d24e:	f7fb fb37 	bl	80088c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d254:	4618      	mov	r0, r3
 800d256:	bd80      	pop	{r7, pc}
 800d258:	2000640c 	.word	0x2000640c
 800d25c:	20005930 	.word	0x20005930
 800d260:	20005c0c 	.word	0x20005c0c

0800d264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d264:	b480      	push	{r7}
 800d266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	4603      	mov	r3, r0
 800d27c:	6039      	str	r1, [r7, #0]
 800d27e:	71fb      	strb	r3, [r7, #7]
 800d280:	4613      	mov	r3, r2
 800d282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	2b23      	cmp	r3, #35	; 0x23
 800d288:	d84a      	bhi.n	800d320 <CDC_Control_FS+0xac>
 800d28a:	a201      	add	r2, pc, #4	; (adr r2, 800d290 <CDC_Control_FS+0x1c>)
 800d28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d290:	0800d321 	.word	0x0800d321
 800d294:	0800d321 	.word	0x0800d321
 800d298:	0800d321 	.word	0x0800d321
 800d29c:	0800d321 	.word	0x0800d321
 800d2a0:	0800d321 	.word	0x0800d321
 800d2a4:	0800d321 	.word	0x0800d321
 800d2a8:	0800d321 	.word	0x0800d321
 800d2ac:	0800d321 	.word	0x0800d321
 800d2b0:	0800d321 	.word	0x0800d321
 800d2b4:	0800d321 	.word	0x0800d321
 800d2b8:	0800d321 	.word	0x0800d321
 800d2bc:	0800d321 	.word	0x0800d321
 800d2c0:	0800d321 	.word	0x0800d321
 800d2c4:	0800d321 	.word	0x0800d321
 800d2c8:	0800d321 	.word	0x0800d321
 800d2cc:	0800d321 	.word	0x0800d321
 800d2d0:	0800d321 	.word	0x0800d321
 800d2d4:	0800d321 	.word	0x0800d321
 800d2d8:	0800d321 	.word	0x0800d321
 800d2dc:	0800d321 	.word	0x0800d321
 800d2e0:	0800d321 	.word	0x0800d321
 800d2e4:	0800d321 	.word	0x0800d321
 800d2e8:	0800d321 	.word	0x0800d321
 800d2ec:	0800d321 	.word	0x0800d321
 800d2f0:	0800d321 	.word	0x0800d321
 800d2f4:	0800d321 	.word	0x0800d321
 800d2f8:	0800d321 	.word	0x0800d321
 800d2fc:	0800d321 	.word	0x0800d321
 800d300:	0800d321 	.word	0x0800d321
 800d304:	0800d321 	.word	0x0800d321
 800d308:	0800d321 	.word	0x0800d321
 800d30c:	0800d321 	.word	0x0800d321
 800d310:	0800d321 	.word	0x0800d321
 800d314:	0800d321 	.word	0x0800d321
 800d318:	0800d321 	.word	0x0800d321
 800d31c:	0800d321 	.word	0x0800d321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d320:	bf00      	nop
  }

  return (USBD_OK);
 800d322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d33a:	6879      	ldr	r1, [r7, #4]
 800d33c:	480a      	ldr	r0, [pc, #40]	; (800d368 <CDC_Receive_FS+0x38>)
 800d33e:	f7fb fabf 	bl	80088c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d342:	4809      	ldr	r0, [pc, #36]	; (800d368 <CDC_Receive_FS+0x38>)
 800d344:	f7fb fb1a 	bl	800897c <USBD_CDC_ReceivePacket>
  uint8_t* command = 'hi';
 800d348:	f646 0369 	movw	r3, #26729	; 0x6869
 800d34c:	60fb      	str	r3, [r7, #12]

  osMessageQueuePut(commandQueueHandle, command, 1, 200);
 800d34e:	4b07      	ldr	r3, [pc, #28]	; (800d36c <CDC_Receive_FS+0x3c>)
 800d350:	6818      	ldr	r0, [r3, #0]
 800d352:	23c8      	movs	r3, #200	; 0xc8
 800d354:	2201      	movs	r2, #1
 800d356:	68f9      	ldr	r1, [r7, #12]
 800d358:	f7fd f8c8 	bl	800a4ec <osMessageQueuePut>
  //mine


  return (USBD_OK);
 800d35c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	20005930 	.word	0x20005930
 800d36c:	20000ec0 	.word	0x20000ec0

0800d370 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	460b      	mov	r3, r1
 800d37a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d380:	4b0d      	ldr	r3, [pc, #52]	; (800d3b8 <CDC_Transmit_FS+0x48>)
 800d382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d386:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d001      	beq.n	800d396 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d392:	2301      	movs	r3, #1
 800d394:	e00b      	b.n	800d3ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d396:	887b      	ldrh	r3, [r7, #2]
 800d398:	461a      	mov	r2, r3
 800d39a:	6879      	ldr	r1, [r7, #4]
 800d39c:	4806      	ldr	r0, [pc, #24]	; (800d3b8 <CDC_Transmit_FS+0x48>)
 800d39e:	f7fb fa6d 	bl	800887c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3a2:	4805      	ldr	r0, [pc, #20]	; (800d3b8 <CDC_Transmit_FS+0x48>)
 800d3a4:	f7fb faaa 	bl	80088fc <USBD_CDC_TransmitPacket>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20005930 	.word	0x20005930

0800d3bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b087      	sub	sp, #28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d3ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	371c      	adds	r7, #28
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
	...

0800d3e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	6039      	str	r1, [r7, #0]
 800d3ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	2212      	movs	r2, #18
 800d3f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d3f2:	4b03      	ldr	r3, [pc, #12]	; (800d400 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	200000d0 	.word	0x200000d0

0800d404 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	6039      	str	r1, [r7, #0]
 800d40e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2204      	movs	r2, #4
 800d414:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d416:	4b03      	ldr	r3, [pc, #12]	; (800d424 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d418:	4618      	mov	r0, r3
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr
 800d424:	200000f0 	.word	0x200000f0

0800d428 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	4603      	mov	r3, r0
 800d430:	6039      	str	r1, [r7, #0]
 800d432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d434:	79fb      	ldrb	r3, [r7, #7]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d105      	bne.n	800d446 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	4907      	ldr	r1, [pc, #28]	; (800d45c <USBD_FS_ProductStrDescriptor+0x34>)
 800d43e:	4808      	ldr	r0, [pc, #32]	; (800d460 <USBD_FS_ProductStrDescriptor+0x38>)
 800d440:	f7fc fd0e 	bl	8009e60 <USBD_GetString>
 800d444:	e004      	b.n	800d450 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	4904      	ldr	r1, [pc, #16]	; (800d45c <USBD_FS_ProductStrDescriptor+0x34>)
 800d44a:	4805      	ldr	r0, [pc, #20]	; (800d460 <USBD_FS_ProductStrDescriptor+0x38>)
 800d44c:	f7fc fd08 	bl	8009e60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d450:	4b02      	ldr	r3, [pc, #8]	; (800d45c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20006c0c 	.word	0x20006c0c
 800d460:	0800e184 	.word	0x0800e184

0800d464 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	6039      	str	r1, [r7, #0]
 800d46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	4904      	ldr	r1, [pc, #16]	; (800d484 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d474:	4804      	ldr	r0, [pc, #16]	; (800d488 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d476:	f7fc fcf3 	bl	8009e60 <USBD_GetString>
  return USBD_StrDesc;
 800d47a:	4b02      	ldr	r3, [pc, #8]	; (800d484 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20006c0c 	.word	0x20006c0c
 800d488:	0800e19c 	.word	0x0800e19c

0800d48c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	6039      	str	r1, [r7, #0]
 800d496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	221a      	movs	r2, #26
 800d49c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d49e:	f000 f855 	bl	800d54c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4a2:	4b02      	ldr	r3, [pc, #8]	; (800d4ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	200000f4 	.word	0x200000f4

0800d4b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	6039      	str	r1, [r7, #0]
 800d4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4bc:	79fb      	ldrb	r3, [r7, #7]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d105      	bne.n	800d4ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	4907      	ldr	r1, [pc, #28]	; (800d4e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4c6:	4808      	ldr	r0, [pc, #32]	; (800d4e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4c8:	f7fc fcca 	bl	8009e60 <USBD_GetString>
 800d4cc:	e004      	b.n	800d4d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	4904      	ldr	r1, [pc, #16]	; (800d4e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4d2:	4805      	ldr	r0, [pc, #20]	; (800d4e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4d4:	f7fc fcc4 	bl	8009e60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4d8:	4b02      	ldr	r3, [pc, #8]	; (800d4e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20006c0c 	.word	0x20006c0c
 800d4e8:	0800e1b0 	.word	0x0800e1b0

0800d4ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	6039      	str	r1, [r7, #0]
 800d4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4f8:	79fb      	ldrb	r3, [r7, #7]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d105      	bne.n	800d50a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	4907      	ldr	r1, [pc, #28]	; (800d520 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d502:	4808      	ldr	r0, [pc, #32]	; (800d524 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d504:	f7fc fcac 	bl	8009e60 <USBD_GetString>
 800d508:	e004      	b.n	800d514 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	4904      	ldr	r1, [pc, #16]	; (800d520 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d50e:	4805      	ldr	r0, [pc, #20]	; (800d524 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d510:	f7fc fca6 	bl	8009e60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d514:	4b02      	ldr	r3, [pc, #8]	; (800d520 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d516:	4618      	mov	r0, r3
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	20006c0c 	.word	0x20006c0c
 800d524:	0800e1bc 	.word	0x0800e1bc

0800d528 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	220c      	movs	r2, #12
 800d538:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d53a:	4b03      	ldr	r3, [pc, #12]	; (800d548 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	200000e4 	.word	0x200000e4

0800d54c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d552:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <Get_SerialNum+0x44>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d558:	4b0e      	ldr	r3, [pc, #56]	; (800d594 <Get_SerialNum+0x48>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d55e:	4b0e      	ldr	r3, [pc, #56]	; (800d598 <Get_SerialNum+0x4c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4413      	add	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d572:	2208      	movs	r2, #8
 800d574:	4909      	ldr	r1, [pc, #36]	; (800d59c <Get_SerialNum+0x50>)
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f000 f814 	bl	800d5a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d57c:	2204      	movs	r2, #4
 800d57e:	4908      	ldr	r1, [pc, #32]	; (800d5a0 <Get_SerialNum+0x54>)
 800d580:	68b8      	ldr	r0, [r7, #8]
 800d582:	f000 f80f 	bl	800d5a4 <IntToUnicode>
  }
}
 800d586:	bf00      	nop
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	1ff0f420 	.word	0x1ff0f420
 800d594:	1ff0f424 	.word	0x1ff0f424
 800d598:	1ff0f428 	.word	0x1ff0f428
 800d59c:	200000f6 	.word	0x200000f6
 800d5a0:	20000106 	.word	0x20000106

0800d5a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	75fb      	strb	r3, [r7, #23]
 800d5ba:	e027      	b.n	800d60c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	0f1b      	lsrs	r3, r3, #28
 800d5c0:	2b09      	cmp	r3, #9
 800d5c2:	d80b      	bhi.n	800d5dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	0f1b      	lsrs	r3, r3, #28
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	7dfb      	ldrb	r3, [r7, #23]
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	440b      	add	r3, r1
 800d5d4:	3230      	adds	r2, #48	; 0x30
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	e00a      	b.n	800d5f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	0f1b      	lsrs	r3, r3, #28
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	440b      	add	r3, r1
 800d5ec:	3237      	adds	r2, #55	; 0x37
 800d5ee:	b2d2      	uxtb	r2, r2
 800d5f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	011b      	lsls	r3, r3, #4
 800d5f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	4413      	add	r3, r2
 800d602:	2200      	movs	r2, #0
 800d604:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d606:	7dfb      	ldrb	r3, [r7, #23]
 800d608:	3301      	adds	r3, #1
 800d60a:	75fb      	strb	r3, [r7, #23]
 800d60c:	7dfa      	ldrb	r2, [r7, #23]
 800d60e:	79fb      	ldrb	r3, [r7, #7]
 800d610:	429a      	cmp	r2, r3
 800d612:	d3d3      	bcc.n	800d5bc <IntToUnicode+0x18>
  }
}
 800d614:	bf00      	nop
 800d616:	bf00      	nop
 800d618:	371c      	adds	r7, #28
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
	...

0800d624 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b0ae      	sub	sp, #184	; 0xb8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d62c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	605a      	str	r2, [r3, #4]
 800d636:	609a      	str	r2, [r3, #8]
 800d638:	60da      	str	r2, [r3, #12]
 800d63a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d63c:	f107 0314 	add.w	r3, r7, #20
 800d640:	2290      	movs	r2, #144	; 0x90
 800d642:	2100      	movs	r1, #0
 800d644:	4618      	mov	r0, r3
 800d646:	f000 fbb5 	bl	800ddb4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d652:	d161      	bne.n	800d718 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d658:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d660:	f107 0314 	add.w	r3, r7, #20
 800d664:	4618      	mov	r0, r3
 800d666:	f7f7 fd33 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d670:	f7f4 fc96 	bl	8001fa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d674:	4b2a      	ldr	r3, [pc, #168]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d678:	4a29      	ldr	r2, [pc, #164]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d67a:	f043 0301 	orr.w	r3, r3, #1
 800d67e:	6313      	str	r3, [r2, #48]	; 0x30
 800d680:	4b27      	ldr	r3, [pc, #156]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	613b      	str	r3, [r7, #16]
 800d68a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d68c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d694:	2302      	movs	r3, #2
 800d696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6a6:	230a      	movs	r3, #10
 800d6a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	481c      	ldr	r0, [pc, #112]	; (800d724 <HAL_PCD_MspInit+0x100>)
 800d6b4:	f7f5 fb28 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d6b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d6cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	4814      	ldr	r0, [pc, #80]	; (800d724 <HAL_PCD_MspInit+0x100>)
 800d6d4:	f7f5 fb18 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d6d8:	4b11      	ldr	r3, [pc, #68]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	4a10      	ldr	r2, [pc, #64]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e2:	6353      	str	r3, [r2, #52]	; 0x34
 800d6e4:	4b0e      	ldr	r3, [pc, #56]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ec:	60fb      	str	r3, [r7, #12]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f4:	4a0a      	ldr	r2, [pc, #40]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d6f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6fa:	6453      	str	r3, [r2, #68]	; 0x44
 800d6fc:	4b08      	ldr	r3, [pc, #32]	; (800d720 <HAL_PCD_MspInit+0xfc>)
 800d6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d704:	60bb      	str	r3, [r7, #8]
 800d706:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d708:	2200      	movs	r2, #0
 800d70a:	2105      	movs	r1, #5
 800d70c:	2043      	movs	r0, #67	; 0x43
 800d70e:	f7f4 ffab 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d712:	2043      	movs	r0, #67	; 0x43
 800d714:	f7f4 ffc4 	bl	80026a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d718:	bf00      	nop
 800d71a:	37b8      	adds	r7, #184	; 0xb8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	40023800 	.word	0x40023800
 800d724:	40020000 	.word	0x40020000

0800d728 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d73c:	4619      	mov	r1, r3
 800d73e:	4610      	mov	r0, r2
 800d740:	f7fb fa05 	bl	8008b4e <USBD_LL_SetupStage>
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d75e:	78fa      	ldrb	r2, [r7, #3]
 800d760:	6879      	ldr	r1, [r7, #4]
 800d762:	4613      	mov	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	4413      	add	r3, r2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	440b      	add	r3, r1
 800d76c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	78fb      	ldrb	r3, [r7, #3]
 800d774:	4619      	mov	r1, r3
 800d776:	f7fb fa3f 	bl	8008bf8 <USBD_LL_DataOutStage>
}
 800d77a:	bf00      	nop
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b082      	sub	sp, #8
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	460b      	mov	r3, r1
 800d78c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d794:	78fa      	ldrb	r2, [r7, #3]
 800d796:	6879      	ldr	r1, [r7, #4]
 800d798:	4613      	mov	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	440b      	add	r3, r1
 800d7a2:	334c      	adds	r3, #76	; 0x4c
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	78fb      	ldrb	r3, [r7, #3]
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	f7fb fad8 	bl	8008d5e <USBD_LL_DataInStage>
}
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fb fc0c 	bl	8008fe2 <USBD_LL_SOF>
}
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	73fb      	strb	r3, [r7, #15]
 800d7ea:	e008      	b.n	800d7fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d102      	bne.n	800d7fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	73fb      	strb	r3, [r7, #15]
 800d7f8:	e001      	b.n	800d7fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d7fa:	f7f4 fbd1 	bl	8001fa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d804:	7bfa      	ldrb	r2, [r7, #15]
 800d806:	4611      	mov	r1, r2
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fb fbac 	bl	8008f66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d814:	4618      	mov	r0, r3
 800d816:	f7fb fb54 	bl	8008ec2 <USBD_LL_Reset>
}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d832:	4618      	mov	r0, r3
 800d834:	f7fb fba7 	bl	8008f86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	6812      	ldr	r2, [r2, #0]
 800d846:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d84a:	f043 0301 	orr.w	r3, r3, #1
 800d84e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a1b      	ldr	r3, [r3, #32]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d858:	4b04      	ldr	r3, [pc, #16]	; (800d86c <HAL_PCD_SuspendCallback+0x48>)
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	4a03      	ldr	r2, [pc, #12]	; (800d86c <HAL_PCD_SuspendCallback+0x48>)
 800d85e:	f043 0306 	orr.w	r3, r3, #6
 800d862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	e000ed00 	.word	0xe000ed00

0800d870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fb fb97 	bl	8008fb2 <USBD_LL_Resume>
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d89e:	78fa      	ldrb	r2, [r7, #3]
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fb fbef 	bl	8009086 <USBD_LL_IsoOUTIncomplete>
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d8c2:	78fa      	ldrb	r2, [r7, #3]
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fb fbab 	bl	8009022 <USBD_LL_IsoINIncomplete>
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fb fc01 	bl	80090ea <USBD_LL_DevConnected>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fb fbfe 	bl	8009100 <USBD_LL_DevDisconnected>
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d13c      	bne.n	800d996 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d91c:	4a20      	ldr	r2, [pc, #128]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a1e      	ldr	r2, [pc, #120]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d928:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d92c:	4b1c      	ldr	r3, [pc, #112]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d92e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d934:	4b1a      	ldr	r3, [pc, #104]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d936:	2206      	movs	r2, #6
 800d938:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d93a:	4b19      	ldr	r3, [pc, #100]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d93c:	2202      	movs	r2, #2
 800d93e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d940:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d942:	2200      	movs	r2, #0
 800d944:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d946:	4b16      	ldr	r3, [pc, #88]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d948:	2202      	movs	r2, #2
 800d94a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d94c:	4b14      	ldr	r3, [pc, #80]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d94e:	2201      	movs	r2, #1
 800d950:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d952:	4b13      	ldr	r3, [pc, #76]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d954:	2200      	movs	r2, #0
 800d956:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d958:	4b11      	ldr	r3, [pc, #68]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d95e:	4b10      	ldr	r3, [pc, #64]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d960:	2201      	movs	r2, #1
 800d962:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d966:	2200      	movs	r2, #0
 800d968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d96a:	480d      	ldr	r0, [pc, #52]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d96c:	f7f5 fb91 	bl	8003092 <HAL_PCD_Init>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d976:	f7f4 fb13 	bl	8001fa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d97a:	2180      	movs	r1, #128	; 0x80
 800d97c:	4808      	ldr	r0, [pc, #32]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d97e:	f7f6 fe0c 	bl	800459a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d982:	2240      	movs	r2, #64	; 0x40
 800d984:	2100      	movs	r1, #0
 800d986:	4806      	ldr	r0, [pc, #24]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d988:	f7f6 fdc0 	bl	800450c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d98c:	2280      	movs	r2, #128	; 0x80
 800d98e:	2101      	movs	r1, #1
 800d990:	4803      	ldr	r0, [pc, #12]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d992:	f7f6 fdbb 	bl	800450c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20006e0c 	.word	0x20006e0c

0800d9a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f5 fc8d 	bl	80032da <HAL_PCD_Start>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 f97e 	bl	800dcc8 <USBD_Get_USB_Status>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	70fb      	strb	r3, [r7, #3]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70bb      	strb	r3, [r7, #2]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da02:	78bb      	ldrb	r3, [r7, #2]
 800da04:	883a      	ldrh	r2, [r7, #0]
 800da06:	78f9      	ldrb	r1, [r7, #3]
 800da08:	f7f6 f97a 	bl	8003d00 <HAL_PCD_EP_Open>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f958 	bl	800dcc8 <USBD_Get_USB_Status>
 800da18:	4603      	mov	r3, r0
 800da1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	460b      	mov	r3, r1
 800da30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da40:	78fa      	ldrb	r2, [r7, #3]
 800da42:	4611      	mov	r1, r2
 800da44:	4618      	mov	r0, r3
 800da46:	f7f6 f9c3 	bl	8003dd0 <HAL_PCD_EP_Close>
 800da4a:	4603      	mov	r3, r0
 800da4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f939 	bl	800dcc8 <USBD_Get_USB_Status>
 800da56:	4603      	mov	r3, r0
 800da58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da7e:	78fa      	ldrb	r2, [r7, #3]
 800da80:	4611      	mov	r1, r2
 800da82:	4618      	mov	r0, r3
 800da84:	f7f6 fa9b 	bl	8003fbe <HAL_PCD_EP_SetStall>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 f91a 	bl	800dcc8 <USBD_Get_USB_Status>
 800da94:	4603      	mov	r3, r0
 800da96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da98:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dabc:	78fa      	ldrb	r2, [r7, #3]
 800dabe:	4611      	mov	r1, r2
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f6 fae0 	bl	8004086 <HAL_PCD_EP_ClrStall>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 f8fb 	bl	800dcc8 <USBD_Get_USB_Status>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3710      	adds	r7, #16
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800daf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800daf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da0b      	bge.n	800db14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db02:	68f9      	ldr	r1, [r7, #12]
 800db04:	4613      	mov	r3, r2
 800db06:	00db      	lsls	r3, r3, #3
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	333e      	adds	r3, #62	; 0x3e
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	e00b      	b.n	800db2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db14:	78fb      	ldrb	r3, [r7, #3]
 800db16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db1a:	68f9      	ldr	r1, [r7, #12]
 800db1c:	4613      	mov	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	4413      	add	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	440b      	add	r3, r1
 800db26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800db2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db52:	78fa      	ldrb	r2, [r7, #3]
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f7f6 f8ad 	bl	8003cb6 <HAL_PCD_SetAddress>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f8b0 	bl	800dcc8 <USBD_Get_USB_Status>
 800db68:	4603      	mov	r3, r0
 800db6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
 800db82:	460b      	mov	r3, r1
 800db84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db94:	7af9      	ldrb	r1, [r7, #11]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f7f6 f9c6 	bl	8003f2a <HAL_PCD_EP_Transmit>
 800db9e:	4603      	mov	r3, r0
 800dba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f88f 	bl	800dcc8 <USBD_Get_USB_Status>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbae:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	607a      	str	r2, [r7, #4]
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dbd6:	7af9      	ldrb	r1, [r7, #11]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	f7f6 f942 	bl	8003e64 <HAL_PCD_EP_Receive>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f86e 	bl	800dcc8 <USBD_Get_USB_Status>
 800dbec:	4603      	mov	r3, r0
 800dbee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b082      	sub	sp, #8
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc0c:	78fa      	ldrb	r2, [r7, #3]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f6 f972 	bl	8003efa <HAL_PCD_EP_GetRxCount>
 800dc16:	4603      	mov	r3, r0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <HAL_PCDEx_LPM_Callback+0x18>
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d01f      	beq.n	800dc76 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dc36:	e03b      	b.n	800dcb0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a1b      	ldr	r3, [r3, #32]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dc40:	f000 f83c 	bl	800dcbc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc44:	4b1c      	ldr	r3, [pc, #112]	; (800dcb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	4a1b      	ldr	r2, [pc, #108]	; (800dcb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc4a:	f023 0306 	bic.w	r3, r3, #6
 800dc4e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	6812      	ldr	r2, [r2, #0]
 800dc5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc62:	f023 0301 	bic.w	r3, r3, #1
 800dc66:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fb f99f 	bl	8008fb2 <USBD_LL_Resume>
    break;
 800dc74:	e01c      	b.n	800dcb0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	6812      	ldr	r2, [r2, #0]
 800dc84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc88:	f043 0301 	orr.w	r3, r3, #1
 800dc8c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fb f976 	bl	8008f86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a1b      	ldr	r3, [r3, #32]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d005      	beq.n	800dcae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dca2:	4b05      	ldr	r3, [pc, #20]	; (800dcb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	4a04      	ldr	r2, [pc, #16]	; (800dcb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dca8:	f043 0306 	orr.w	r3, r3, #6
 800dcac:	6113      	str	r3, [r2, #16]
    break;
 800dcae:	bf00      	nop
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	e000ed00 	.word	0xe000ed00

0800dcbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dcc0:	f7f3 ff8c 	bl	8001bdc <SystemClock_Config>
}
 800dcc4:	bf00      	nop
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d817      	bhi.n	800dd0c <USBD_Get_USB_Status+0x44>
 800dcdc:	a201      	add	r2, pc, #4	; (adr r2, 800dce4 <USBD_Get_USB_Status+0x1c>)
 800dcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce2:	bf00      	nop
 800dce4:	0800dcf5 	.word	0x0800dcf5
 800dce8:	0800dcfb 	.word	0x0800dcfb
 800dcec:	0800dd01 	.word	0x0800dd01
 800dcf0:	0800dd07 	.word	0x0800dd07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf8:	e00b      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfe:	e008      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd00:	2301      	movs	r3, #1
 800dd02:	73fb      	strb	r3, [r7, #15]
    break;
 800dd04:	e005      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd06:	2303      	movs	r3, #3
 800dd08:	73fb      	strb	r3, [r7, #15]
    break;
 800dd0a:	e002      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd10:	bf00      	nop
  }
  return usb_status;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <__errno>:
 800dd20:	4b01      	ldr	r3, [pc, #4]	; (800dd28 <__errno+0x8>)
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	20000110 	.word	0x20000110

0800dd2c <__libc_init_array>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	4d0d      	ldr	r5, [pc, #52]	; (800dd64 <__libc_init_array+0x38>)
 800dd30:	4c0d      	ldr	r4, [pc, #52]	; (800dd68 <__libc_init_array+0x3c>)
 800dd32:	1b64      	subs	r4, r4, r5
 800dd34:	10a4      	asrs	r4, r4, #2
 800dd36:	2600      	movs	r6, #0
 800dd38:	42a6      	cmp	r6, r4
 800dd3a:	d109      	bne.n	800dd50 <__libc_init_array+0x24>
 800dd3c:	4d0b      	ldr	r5, [pc, #44]	; (800dd6c <__libc_init_array+0x40>)
 800dd3e:	4c0c      	ldr	r4, [pc, #48]	; (800dd70 <__libc_init_array+0x44>)
 800dd40:	f000 f9a6 	bl	800e090 <_init>
 800dd44:	1b64      	subs	r4, r4, r5
 800dd46:	10a4      	asrs	r4, r4, #2
 800dd48:	2600      	movs	r6, #0
 800dd4a:	42a6      	cmp	r6, r4
 800dd4c:	d105      	bne.n	800dd5a <__libc_init_array+0x2e>
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd54:	4798      	blx	r3
 800dd56:	3601      	adds	r6, #1
 800dd58:	e7ee      	b.n	800dd38 <__libc_init_array+0xc>
 800dd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd5e:	4798      	blx	r3
 800dd60:	3601      	adds	r6, #1
 800dd62:	e7f2      	b.n	800dd4a <__libc_init_array+0x1e>
 800dd64:	0800e2e4 	.word	0x0800e2e4
 800dd68:	0800e2e4 	.word	0x0800e2e4
 800dd6c:	0800e2e4 	.word	0x0800e2e4
 800dd70:	0800e2e8 	.word	0x0800e2e8

0800dd74 <__retarget_lock_acquire_recursive>:
 800dd74:	4770      	bx	lr

0800dd76 <__retarget_lock_release_recursive>:
 800dd76:	4770      	bx	lr

0800dd78 <malloc>:
 800dd78:	4b02      	ldr	r3, [pc, #8]	; (800dd84 <malloc+0xc>)
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	f000 b88d 	b.w	800de9c <_malloc_r>
 800dd82:	bf00      	nop
 800dd84:	20000110 	.word	0x20000110

0800dd88 <free>:
 800dd88:	4b02      	ldr	r3, [pc, #8]	; (800dd94 <free+0xc>)
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	6818      	ldr	r0, [r3, #0]
 800dd8e:	f000 b819 	b.w	800ddc4 <_free_r>
 800dd92:	bf00      	nop
 800dd94:	20000110 	.word	0x20000110

0800dd98 <memcpy>:
 800dd98:	440a      	add	r2, r1
 800dd9a:	4291      	cmp	r1, r2
 800dd9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dda0:	d100      	bne.n	800dda4 <memcpy+0xc>
 800dda2:	4770      	bx	lr
 800dda4:	b510      	push	{r4, lr}
 800dda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddae:	4291      	cmp	r1, r2
 800ddb0:	d1f9      	bne.n	800dda6 <memcpy+0xe>
 800ddb2:	bd10      	pop	{r4, pc}

0800ddb4 <memset>:
 800ddb4:	4402      	add	r2, r0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d100      	bne.n	800ddbe <memset+0xa>
 800ddbc:	4770      	bx	lr
 800ddbe:	f803 1b01 	strb.w	r1, [r3], #1
 800ddc2:	e7f9      	b.n	800ddb8 <memset+0x4>

0800ddc4 <_free_r>:
 800ddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d044      	beq.n	800de54 <_free_r+0x90>
 800ddca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddce:	9001      	str	r0, [sp, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f1a1 0404 	sub.w	r4, r1, #4
 800ddd6:	bfb8      	it	lt
 800ddd8:	18e4      	addlt	r4, r4, r3
 800ddda:	f000 f94d 	bl	800e078 <__malloc_lock>
 800ddde:	4a1e      	ldr	r2, [pc, #120]	; (800de58 <_free_r+0x94>)
 800dde0:	9801      	ldr	r0, [sp, #4]
 800dde2:	6813      	ldr	r3, [r2, #0]
 800dde4:	b933      	cbnz	r3, 800ddf4 <_free_r+0x30>
 800dde6:	6063      	str	r3, [r4, #4]
 800dde8:	6014      	str	r4, [r2, #0]
 800ddea:	b003      	add	sp, #12
 800ddec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddf0:	f000 b948 	b.w	800e084 <__malloc_unlock>
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	d908      	bls.n	800de0a <_free_r+0x46>
 800ddf8:	6825      	ldr	r5, [r4, #0]
 800ddfa:	1961      	adds	r1, r4, r5
 800ddfc:	428b      	cmp	r3, r1
 800ddfe:	bf01      	itttt	eq
 800de00:	6819      	ldreq	r1, [r3, #0]
 800de02:	685b      	ldreq	r3, [r3, #4]
 800de04:	1949      	addeq	r1, r1, r5
 800de06:	6021      	streq	r1, [r4, #0]
 800de08:	e7ed      	b.n	800dde6 <_free_r+0x22>
 800de0a:	461a      	mov	r2, r3
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	b10b      	cbz	r3, 800de14 <_free_r+0x50>
 800de10:	42a3      	cmp	r3, r4
 800de12:	d9fa      	bls.n	800de0a <_free_r+0x46>
 800de14:	6811      	ldr	r1, [r2, #0]
 800de16:	1855      	adds	r5, r2, r1
 800de18:	42a5      	cmp	r5, r4
 800de1a:	d10b      	bne.n	800de34 <_free_r+0x70>
 800de1c:	6824      	ldr	r4, [r4, #0]
 800de1e:	4421      	add	r1, r4
 800de20:	1854      	adds	r4, r2, r1
 800de22:	42a3      	cmp	r3, r4
 800de24:	6011      	str	r1, [r2, #0]
 800de26:	d1e0      	bne.n	800ddea <_free_r+0x26>
 800de28:	681c      	ldr	r4, [r3, #0]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	6053      	str	r3, [r2, #4]
 800de2e:	4421      	add	r1, r4
 800de30:	6011      	str	r1, [r2, #0]
 800de32:	e7da      	b.n	800ddea <_free_r+0x26>
 800de34:	d902      	bls.n	800de3c <_free_r+0x78>
 800de36:	230c      	movs	r3, #12
 800de38:	6003      	str	r3, [r0, #0]
 800de3a:	e7d6      	b.n	800ddea <_free_r+0x26>
 800de3c:	6825      	ldr	r5, [r4, #0]
 800de3e:	1961      	adds	r1, r4, r5
 800de40:	428b      	cmp	r3, r1
 800de42:	bf04      	itt	eq
 800de44:	6819      	ldreq	r1, [r3, #0]
 800de46:	685b      	ldreq	r3, [r3, #4]
 800de48:	6063      	str	r3, [r4, #4]
 800de4a:	bf04      	itt	eq
 800de4c:	1949      	addeq	r1, r1, r5
 800de4e:	6021      	streq	r1, [r4, #0]
 800de50:	6054      	str	r4, [r2, #4]
 800de52:	e7ca      	b.n	800ddea <_free_r+0x26>
 800de54:	b003      	add	sp, #12
 800de56:	bd30      	pop	{r4, r5, pc}
 800de58:	20007318 	.word	0x20007318

0800de5c <sbrk_aligned>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4e0e      	ldr	r6, [pc, #56]	; (800de98 <sbrk_aligned+0x3c>)
 800de60:	460c      	mov	r4, r1
 800de62:	6831      	ldr	r1, [r6, #0]
 800de64:	4605      	mov	r5, r0
 800de66:	b911      	cbnz	r1, 800de6e <sbrk_aligned+0x12>
 800de68:	f000 f8f6 	bl	800e058 <_sbrk_r>
 800de6c:	6030      	str	r0, [r6, #0]
 800de6e:	4621      	mov	r1, r4
 800de70:	4628      	mov	r0, r5
 800de72:	f000 f8f1 	bl	800e058 <_sbrk_r>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d00a      	beq.n	800de90 <sbrk_aligned+0x34>
 800de7a:	1cc4      	adds	r4, r0, #3
 800de7c:	f024 0403 	bic.w	r4, r4, #3
 800de80:	42a0      	cmp	r0, r4
 800de82:	d007      	beq.n	800de94 <sbrk_aligned+0x38>
 800de84:	1a21      	subs	r1, r4, r0
 800de86:	4628      	mov	r0, r5
 800de88:	f000 f8e6 	bl	800e058 <_sbrk_r>
 800de8c:	3001      	adds	r0, #1
 800de8e:	d101      	bne.n	800de94 <sbrk_aligned+0x38>
 800de90:	f04f 34ff 	mov.w	r4, #4294967295
 800de94:	4620      	mov	r0, r4
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	2000731c 	.word	0x2000731c

0800de9c <_malloc_r>:
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	1ccd      	adds	r5, r1, #3
 800dea2:	f025 0503 	bic.w	r5, r5, #3
 800dea6:	3508      	adds	r5, #8
 800dea8:	2d0c      	cmp	r5, #12
 800deaa:	bf38      	it	cc
 800deac:	250c      	movcc	r5, #12
 800deae:	2d00      	cmp	r5, #0
 800deb0:	4607      	mov	r7, r0
 800deb2:	db01      	blt.n	800deb8 <_malloc_r+0x1c>
 800deb4:	42a9      	cmp	r1, r5
 800deb6:	d905      	bls.n	800dec4 <_malloc_r+0x28>
 800deb8:	230c      	movs	r3, #12
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	2600      	movs	r6, #0
 800debe:	4630      	mov	r0, r6
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	4e2e      	ldr	r6, [pc, #184]	; (800df80 <_malloc_r+0xe4>)
 800dec6:	f000 f8d7 	bl	800e078 <__malloc_lock>
 800deca:	6833      	ldr	r3, [r6, #0]
 800decc:	461c      	mov	r4, r3
 800dece:	bb34      	cbnz	r4, 800df1e <_malloc_r+0x82>
 800ded0:	4629      	mov	r1, r5
 800ded2:	4638      	mov	r0, r7
 800ded4:	f7ff ffc2 	bl	800de5c <sbrk_aligned>
 800ded8:	1c43      	adds	r3, r0, #1
 800deda:	4604      	mov	r4, r0
 800dedc:	d14d      	bne.n	800df7a <_malloc_r+0xde>
 800dede:	6834      	ldr	r4, [r6, #0]
 800dee0:	4626      	mov	r6, r4
 800dee2:	2e00      	cmp	r6, #0
 800dee4:	d140      	bne.n	800df68 <_malloc_r+0xcc>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	4631      	mov	r1, r6
 800deea:	4638      	mov	r0, r7
 800deec:	eb04 0803 	add.w	r8, r4, r3
 800def0:	f000 f8b2 	bl	800e058 <_sbrk_r>
 800def4:	4580      	cmp	r8, r0
 800def6:	d13a      	bne.n	800df6e <_malloc_r+0xd2>
 800def8:	6821      	ldr	r1, [r4, #0]
 800defa:	3503      	adds	r5, #3
 800defc:	1a6d      	subs	r5, r5, r1
 800defe:	f025 0503 	bic.w	r5, r5, #3
 800df02:	3508      	adds	r5, #8
 800df04:	2d0c      	cmp	r5, #12
 800df06:	bf38      	it	cc
 800df08:	250c      	movcc	r5, #12
 800df0a:	4629      	mov	r1, r5
 800df0c:	4638      	mov	r0, r7
 800df0e:	f7ff ffa5 	bl	800de5c <sbrk_aligned>
 800df12:	3001      	adds	r0, #1
 800df14:	d02b      	beq.n	800df6e <_malloc_r+0xd2>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	442b      	add	r3, r5
 800df1a:	6023      	str	r3, [r4, #0]
 800df1c:	e00e      	b.n	800df3c <_malloc_r+0xa0>
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	1b52      	subs	r2, r2, r5
 800df22:	d41e      	bmi.n	800df62 <_malloc_r+0xc6>
 800df24:	2a0b      	cmp	r2, #11
 800df26:	d916      	bls.n	800df56 <_malloc_r+0xba>
 800df28:	1961      	adds	r1, r4, r5
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	6025      	str	r5, [r4, #0]
 800df2e:	bf18      	it	ne
 800df30:	6059      	strne	r1, [r3, #4]
 800df32:	6863      	ldr	r3, [r4, #4]
 800df34:	bf08      	it	eq
 800df36:	6031      	streq	r1, [r6, #0]
 800df38:	5162      	str	r2, [r4, r5]
 800df3a:	604b      	str	r3, [r1, #4]
 800df3c:	4638      	mov	r0, r7
 800df3e:	f104 060b 	add.w	r6, r4, #11
 800df42:	f000 f89f 	bl	800e084 <__malloc_unlock>
 800df46:	f026 0607 	bic.w	r6, r6, #7
 800df4a:	1d23      	adds	r3, r4, #4
 800df4c:	1af2      	subs	r2, r6, r3
 800df4e:	d0b6      	beq.n	800debe <_malloc_r+0x22>
 800df50:	1b9b      	subs	r3, r3, r6
 800df52:	50a3      	str	r3, [r4, r2]
 800df54:	e7b3      	b.n	800debe <_malloc_r+0x22>
 800df56:	6862      	ldr	r2, [r4, #4]
 800df58:	42a3      	cmp	r3, r4
 800df5a:	bf0c      	ite	eq
 800df5c:	6032      	streq	r2, [r6, #0]
 800df5e:	605a      	strne	r2, [r3, #4]
 800df60:	e7ec      	b.n	800df3c <_malloc_r+0xa0>
 800df62:	4623      	mov	r3, r4
 800df64:	6864      	ldr	r4, [r4, #4]
 800df66:	e7b2      	b.n	800dece <_malloc_r+0x32>
 800df68:	4634      	mov	r4, r6
 800df6a:	6876      	ldr	r6, [r6, #4]
 800df6c:	e7b9      	b.n	800dee2 <_malloc_r+0x46>
 800df6e:	230c      	movs	r3, #12
 800df70:	603b      	str	r3, [r7, #0]
 800df72:	4638      	mov	r0, r7
 800df74:	f000 f886 	bl	800e084 <__malloc_unlock>
 800df78:	e7a1      	b.n	800debe <_malloc_r+0x22>
 800df7a:	6025      	str	r5, [r4, #0]
 800df7c:	e7de      	b.n	800df3c <_malloc_r+0xa0>
 800df7e:	bf00      	nop
 800df80:	20007318 	.word	0x20007318

0800df84 <cleanup_glue>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	460c      	mov	r4, r1
 800df88:	6809      	ldr	r1, [r1, #0]
 800df8a:	4605      	mov	r5, r0
 800df8c:	b109      	cbz	r1, 800df92 <cleanup_glue+0xe>
 800df8e:	f7ff fff9 	bl	800df84 <cleanup_glue>
 800df92:	4621      	mov	r1, r4
 800df94:	4628      	mov	r0, r5
 800df96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df9a:	f7ff bf13 	b.w	800ddc4 <_free_r>
	...

0800dfa0 <_reclaim_reent>:
 800dfa0:	4b2c      	ldr	r3, [pc, #176]	; (800e054 <_reclaim_reent+0xb4>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4283      	cmp	r3, r0
 800dfa6:	b570      	push	{r4, r5, r6, lr}
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	d051      	beq.n	800e050 <_reclaim_reent+0xb0>
 800dfac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dfae:	b143      	cbz	r3, 800dfc2 <_reclaim_reent+0x22>
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d14a      	bne.n	800e04c <_reclaim_reent+0xac>
 800dfb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb8:	6819      	ldr	r1, [r3, #0]
 800dfba:	b111      	cbz	r1, 800dfc2 <_reclaim_reent+0x22>
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7ff ff01 	bl	800ddc4 <_free_r>
 800dfc2:	6961      	ldr	r1, [r4, #20]
 800dfc4:	b111      	cbz	r1, 800dfcc <_reclaim_reent+0x2c>
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f7ff fefc 	bl	800ddc4 <_free_r>
 800dfcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dfce:	b111      	cbz	r1, 800dfd6 <_reclaim_reent+0x36>
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff fef7 	bl	800ddc4 <_free_r>
 800dfd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dfd8:	b111      	cbz	r1, 800dfe0 <_reclaim_reent+0x40>
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff fef2 	bl	800ddc4 <_free_r>
 800dfe0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dfe2:	b111      	cbz	r1, 800dfea <_reclaim_reent+0x4a>
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7ff feed 	bl	800ddc4 <_free_r>
 800dfea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dfec:	b111      	cbz	r1, 800dff4 <_reclaim_reent+0x54>
 800dfee:	4620      	mov	r0, r4
 800dff0:	f7ff fee8 	bl	800ddc4 <_free_r>
 800dff4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dff6:	b111      	cbz	r1, 800dffe <_reclaim_reent+0x5e>
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7ff fee3 	bl	800ddc4 <_free_r>
 800dffe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e000:	b111      	cbz	r1, 800e008 <_reclaim_reent+0x68>
 800e002:	4620      	mov	r0, r4
 800e004:	f7ff fede 	bl	800ddc4 <_free_r>
 800e008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e00a:	b111      	cbz	r1, 800e012 <_reclaim_reent+0x72>
 800e00c:	4620      	mov	r0, r4
 800e00e:	f7ff fed9 	bl	800ddc4 <_free_r>
 800e012:	69a3      	ldr	r3, [r4, #24]
 800e014:	b1e3      	cbz	r3, 800e050 <_reclaim_reent+0xb0>
 800e016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e018:	4620      	mov	r0, r4
 800e01a:	4798      	blx	r3
 800e01c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e01e:	b1b9      	cbz	r1, 800e050 <_reclaim_reent+0xb0>
 800e020:	4620      	mov	r0, r4
 800e022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e026:	f7ff bfad 	b.w	800df84 <cleanup_glue>
 800e02a:	5949      	ldr	r1, [r1, r5]
 800e02c:	b941      	cbnz	r1, 800e040 <_reclaim_reent+0xa0>
 800e02e:	3504      	adds	r5, #4
 800e030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e032:	2d80      	cmp	r5, #128	; 0x80
 800e034:	68d9      	ldr	r1, [r3, #12]
 800e036:	d1f8      	bne.n	800e02a <_reclaim_reent+0x8a>
 800e038:	4620      	mov	r0, r4
 800e03a:	f7ff fec3 	bl	800ddc4 <_free_r>
 800e03e:	e7ba      	b.n	800dfb6 <_reclaim_reent+0x16>
 800e040:	680e      	ldr	r6, [r1, #0]
 800e042:	4620      	mov	r0, r4
 800e044:	f7ff febe 	bl	800ddc4 <_free_r>
 800e048:	4631      	mov	r1, r6
 800e04a:	e7ef      	b.n	800e02c <_reclaim_reent+0x8c>
 800e04c:	2500      	movs	r5, #0
 800e04e:	e7ef      	b.n	800e030 <_reclaim_reent+0x90>
 800e050:	bd70      	pop	{r4, r5, r6, pc}
 800e052:	bf00      	nop
 800e054:	20000110 	.word	0x20000110

0800e058 <_sbrk_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4d06      	ldr	r5, [pc, #24]	; (800e074 <_sbrk_r+0x1c>)
 800e05c:	2300      	movs	r3, #0
 800e05e:	4604      	mov	r4, r0
 800e060:	4608      	mov	r0, r1
 800e062:	602b      	str	r3, [r5, #0]
 800e064:	f7f4 f986 	bl	8002374 <_sbrk>
 800e068:	1c43      	adds	r3, r0, #1
 800e06a:	d102      	bne.n	800e072 <_sbrk_r+0x1a>
 800e06c:	682b      	ldr	r3, [r5, #0]
 800e06e:	b103      	cbz	r3, 800e072 <_sbrk_r+0x1a>
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	bd38      	pop	{r3, r4, r5, pc}
 800e074:	20007320 	.word	0x20007320

0800e078 <__malloc_lock>:
 800e078:	4801      	ldr	r0, [pc, #4]	; (800e080 <__malloc_lock+0x8>)
 800e07a:	f7ff be7b 	b.w	800dd74 <__retarget_lock_acquire_recursive>
 800e07e:	bf00      	nop
 800e080:	20007314 	.word	0x20007314

0800e084 <__malloc_unlock>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__malloc_unlock+0x8>)
 800e086:	f7ff be76 	b.w	800dd76 <__retarget_lock_release_recursive>
 800e08a:	bf00      	nop
 800e08c:	20007314 	.word	0x20007314

0800e090 <_init>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	bf00      	nop
 800e094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e096:	bc08      	pop	{r3}
 800e098:	469e      	mov	lr, r3
 800e09a:	4770      	bx	lr

0800e09c <_fini>:
 800e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09e:	bf00      	nop
 800e0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0a2:	bc08      	pop	{r3}
 800e0a4:	469e      	mov	lr, r3
 800e0a6:	4770      	bx	lr
