
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800f7e0  0800f7e0  0001f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800feec  0800feec  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800feec  0800feec  0001feec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fef4  0800fef4  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fef4  0800fef4  0001fef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fef8  0800fef8  0001fef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800fefc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  0801005c  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  080100fc  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000071cc  200002a0  0801019c  000202a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000746c  0801019c  0002746c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002e64d  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e50  00000000  00000000  0004e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002348  00000000  00000000  000547f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b38  00000000  00000000  00056b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000a8fb  00000000  00000000  00058678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a6af  00000000  00000000  00062f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00117b79  00000000  00000000  0008d622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000099fc  00000000  00000000  001a519c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  001aeb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f7c8 	.word	0x0800f7c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800f7c8 	.word	0x0800f7c8

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002bc 	.word	0x200002bc
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <_DoInit+0xa0>)
 8000684:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000686:	22a8      	movs	r2, #168	; 0xa8
 8000688:	2100      	movs	r1, #0
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f00e fc6e 	bl	800ef6c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2203      	movs	r2, #3
 8000694:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2203      	movs	r2, #3
 800069a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <_DoInit+0xa4>)
 80006a0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <_DoInit+0xa8>)
 80006a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <_DoInit+0xa4>)
 80006c6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <_DoInit+0xac>)
 80006cc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2210      	movs	r2, #16
 80006d2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006e6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e00c      	b.n	800070a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f1c3 030f 	rsb	r3, r3, #15
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <_DoInit+0xb0>)
 80006f8:	5cd1      	ldrb	r1, [r2, r3]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	460a      	mov	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3301      	adds	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d9ef      	bls.n	80006f0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000710:	f3bf 8f5f 	dmb	sy
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002bc 	.word	0x200002bc
 8000720:	0800f7e0 	.word	0x0800f7e0
 8000724:	20000364 	.word	0x20000364
 8000728:	20000764 	.word	0x20000764
 800072c:	0800f908 	.word	0x0800f908

08000730 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <SEGGER_RTT_ReadNoLock+0x108>)
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d101      	bne.n	800074e <SEGGER_RTT_ReadNoLock+0x1e>
 800074a:	f7ff ff97 	bl	800067c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	3360      	adds	r3, #96	; 0x60
 800075a:	4a37      	ldr	r2, [pc, #220]	; (8000838 <SEGGER_RTT_ReadNoLock+0x108>)
 800075c:	4413      	add	r3, r2
 800075e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	429a      	cmp	r2, r3
 800077a:	d92b      	bls.n	80007d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf28      	it	cs
 800078e:	4613      	movcs	r3, r2
 8000790:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	4413      	add	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	6939      	ldr	r1, [r7, #16]
 80007a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007a2:	f00e fc7d 	bl	800f0a0 <memcpy>
    NumBytesRead += NumBytesRem;
 80007a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80007ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	4413      	add	r3, r2
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80007be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	bf28      	it	cs
 80007e4:	4613      	movcs	r3, r2
 80007e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d019      	beq.n	8000822 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f4:	4413      	add	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	6939      	ldr	r1, [r7, #16]
 80007fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007fe:	f00e fc4f 	bl	800f0a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8000802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	4413      	add	r3, r2
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800080a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	4413      	add	r3, r2
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800081a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800082c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000830:	4618      	mov	r0, r3
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002bc 	.word	0x200002bc

0800083c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800084a:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <SEGGER_RTT_AllocUpBuffer+0x20>
 8000858:	f7ff ff10 	bl	800067c <_DoInit>
  SEGGER_RTT_LOCK();
 800085c:	f3ef 8311 	mrs	r3, BASEPRI
 8000860:	f04f 0120 	mov.w	r1, #32
 8000864:	f381 8811 	msr	BASEPRI, r1
 8000868:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800086c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	440b      	add	r3, r1
 8000882:	3304      	adds	r3, #4
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d008      	beq.n	800089c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3301      	adds	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbeb      	blt.n	8000872 <SEGGER_RTT_AllocUpBuffer+0x36>
 800089a:	e000      	b.n	800089e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800089c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	da3f      	bge.n	8000928 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80008a8:	6939      	ldr	r1, [r7, #16]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	4613      	mov	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	440b      	add	r3, r1
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80008bc:	6939      	ldr	r1, [r7, #16]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	3304      	adds	r3, #4
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80008d2:	6939      	ldr	r1, [r7, #16]
 80008d4:	69fa      	ldr	r2, [r7, #28]
 80008d6:	4613      	mov	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4413      	add	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	440b      	add	r3, r1
 80008e0:	3320      	adds	r3, #32
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80008e6:	6939      	ldr	r1, [r7, #16]
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	440b      	add	r3, r1
 80008f4:	3328      	adds	r3, #40	; 0x28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80008fa:	6939      	ldr	r1, [r7, #16]
 80008fc:	69fa      	ldr	r2, [r7, #28]
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	440b      	add	r3, r1
 8000908:	3324      	adds	r3, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800090e:	6939      	ldr	r1, [r7, #16]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	440b      	add	r3, r1
 800091c:	332c      	adds	r3, #44	; 0x2c
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000922:	f3bf 8f5f 	dmb	sy
 8000926:	e002      	b.n	800092e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000934:	69fb      	ldr	r3, [r7, #28]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200002bc 	.word	0x200002bc

08000944 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8000960:	f7ff fe8c 	bl	800067c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000966:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d82c      	bhi.n	80009c8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800096e:	f3ef 8311 	mrs	r3, BASEPRI
 8000972:	f04f 0120 	mov.w	r1, #32
 8000976:	f381 8811 	msr	BASEPRI, r1
 800097a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	3360      	adds	r3, #96	; 0x60
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	4413      	add	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00e      	beq.n	80009b2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009b6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80009b8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	e002      	b.n	80009ce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200002bc 	.word	0x200002bc

080009dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60fa      	str	r2, [r7, #12]
 80009f2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b80      	cmp	r3, #128	; 0x80
 80009f8:	d90a      	bls.n	8000a10 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80009fe:	e007      	b.n	8000a10 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	1c53      	adds	r3, r2, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1c59      	adds	r1, r3, #1
 8000a0a:	60f9      	str	r1, [r7, #12]
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <_EncodeStr+0x46>
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1ee      	bne.n	8000a00 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3307      	adds	r3, #7
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe63 	bl	8000730 <SEGGER_RTT_ReadNoLock>
 8000a6a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d057      	beq.n	8000b22 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	2b80      	cmp	r3, #128	; 0x80
 8000a76:	d031      	beq.n	8000adc <_HandleIncomingPacket+0x88>
 8000a78:	2b80      	cmp	r3, #128	; 0x80
 8000a7a:	dc40      	bgt.n	8000afe <_HandleIncomingPacket+0xaa>
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	dc15      	bgt.n	8000aac <_HandleIncomingPacket+0x58>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dd3c      	ble.n	8000afe <_HandleIncomingPacket+0xaa>
 8000a84:	3b01      	subs	r3, #1
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d839      	bhi.n	8000afe <_HandleIncomingPacket+0xaa>
 8000a8a:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <_HandleIncomingPacket+0x3c>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000ab3 	.word	0x08000ab3
 8000a94:	08000ab9 	.word	0x08000ab9
 8000a98:	08000abf 	.word	0x08000abf
 8000a9c:	08000ac5 	.word	0x08000ac5
 8000aa0:	08000acb 	.word	0x08000acb
 8000aa4:	08000ad1 	.word	0x08000ad1
 8000aa8:	08000ad7 	.word	0x08000ad7
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d033      	beq.n	8000b18 <_HandleIncomingPacket+0xc4>
 8000ab0:	e025      	b.n	8000afe <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000ab2:	f000 fbe3 	bl	800127c <SEGGER_SYSVIEW_Start>
      break;
 8000ab6:	e034      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000ab8:	f000 fc9a 	bl	80013f0 <SEGGER_SYSVIEW_Stop>
      break;
 8000abc:	e031      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000abe:	f000 fe73 	bl	80017a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000ac2:	e02e      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000ac4:	f000 fe38 	bl	8001738 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000ac8:	e02b      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000aca:	f000 fcb7 	bl	800143c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000ace:	e028      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000ad0:	f000 ff44 	bl	800195c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000ad4:	e025      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000ad6:	f000 ff23 	bl	8001920 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000ada:	e022      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_HandleIncomingPacket+0xd8>)
 8000ade:	7e1b      	ldrb	r3, [r3, #24]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	1cfb      	adds	r3, r7, #3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f7ff fe22 	bl	8000730 <SEGGER_RTT_ReadNoLock>
 8000aec:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d013      	beq.n	8000b1c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fe88 	bl	800180c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000afc:	e00e      	b.n	8000b1c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da0c      	bge.n	8000b20 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <_HandleIncomingPacket+0xd8>)
 8000b08:	7e1b      	ldrb	r3, [r3, #24]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	1cfb      	adds	r3, r7, #3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fe0d 	bl	8000730 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000b16:	e003      	b.n	8000b20 <_HandleIncomingPacket+0xcc>
      break;
 8000b18:	bf00      	nop
 8000b1a:	e002      	b.n	8000b22 <_HandleIncomingPacket+0xce>
      break;
 8000b1c:	bf00      	nop
 8000b1e:	e000      	b.n	8000b22 <_HandleIncomingPacket+0xce>
      break;
 8000b20:	bf00      	nop
    }
  }
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000b7c 	.word	0x20000b7c

08000b30 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000b36:	2301      	movs	r3, #1
 8000b38:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b4a:	e00b      	b.n	8000b64 <_TrySendOverflowPacket+0x34>
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	1c59      	adds	r1, r3, #1
 8000b54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	09db      	lsrs	r3, r3, #7
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	2b7f      	cmp	r3, #127	; 0x7f
 8000b68:	d8f0      	bhi.n	8000b4c <_TrySendOverflowPacket+0x1c>
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <_TrySendOverflowPacket+0xe0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	e00b      	b.n	8000bac <_TrySendOverflowPacket+0x7c>
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	6279      	str	r1, [r7, #36]	; 0x24
 8000b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	09db      	lsrs	r3, r3, #7
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb0:	d8f0      	bhi.n	8000b94 <_TrySendOverflowPacket+0x64>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8000bb8:	6a3a      	ldr	r2, [r7, #32]
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f7ff fb34 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d009      	beq.n	8000bf6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e004      	b.n	8000c00 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bfe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000c00:	693b      	ldr	r3, [r7, #16]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3730      	adds	r7, #48	; 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000b7c 	.word	0x20000b7c
 8000c10:	e0001004 	.word	0xe0001004

08000c14 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000c20:	4b98      	ldr	r3, [pc, #608]	; (8000e84 <_SendPacket+0x270>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d010      	beq.n	8000c4a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000c28:	4b96      	ldr	r3, [pc, #600]	; (8000e84 <_SendPacket+0x270>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 812d 	beq.w	8000e8c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000c32:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <_SendPacket+0x270>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d109      	bne.n	8000c4e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000c3a:	f7ff ff79 	bl	8000b30 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000c3e:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <_SendPacket+0x270>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	f040 8124 	bne.w	8000e90 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000c48:	e001      	b.n	8000c4e <_SendPacket+0x3a>
    goto Send;
 8000c4a:	bf00      	nop
 8000c4c:	e000      	b.n	8000c50 <_SendPacket+0x3c>
Send:
 8000c4e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b1f      	cmp	r3, #31
 8000c54:	d809      	bhi.n	8000c6a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000c56:	4b8b      	ldr	r3, [pc, #556]	; (8000e84 <_SendPacket+0x270>)
 8000c58:	69da      	ldr	r2, [r3, #28]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8115 	bne.w	8000e94 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b17      	cmp	r3, #23
 8000c6e:	d807      	bhi.n	8000c80 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e0c4      	b.n	8000e0a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8c:	d912      	bls.n	8000cb4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	09da      	lsrs	r2, r3, #7
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	3a01      	subs	r2, #1
 8000ca6:	60fa      	str	r2, [r7, #12]
 8000ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e006      	b.n	8000cc2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b7e      	cmp	r3, #126	; 0x7e
 8000cc6:	d807      	bhi.n	8000cd8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e098      	b.n	8000e0a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cde:	d212      	bcs.n	8000d06 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	09da      	lsrs	r2, r3, #7
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	60fa      	str	r2, [r7, #12]
 8000cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e081      	b.n	8000e0a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d0c:	d21d      	bcs.n	8000d4a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0b9a      	lsrs	r2, r3, #14
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	09db      	lsrs	r3, r3, #7
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	60fa      	str	r2, [r7, #12]
 8000d3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e05f      	b.n	8000e0a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d50:	d228      	bcs.n	8000da4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0d5a      	lsrs	r2, r3, #21
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0b9b      	lsrs	r3, r3, #14
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	60fa      	str	r2, [r7, #12]
 8000d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	09db      	lsrs	r3, r3, #7
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	60fa      	str	r2, [r7, #12]
 8000d84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	3a01      	subs	r2, #1
 8000d96:	60fa      	str	r2, [r7, #12]
 8000d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e032      	b.n	8000e0a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	0f1a      	lsrs	r2, r3, #28
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0d5b      	lsrs	r3, r3, #21
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	60fa      	str	r2, [r7, #12]
 8000dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0b9b      	lsrs	r3, r3, #14
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	60fa      	str	r2, [r7, #12]
 8000dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	09db      	lsrs	r3, r3, #7
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	3a01      	subs	r2, #1
 8000dea:	60fa      	str	r2, [r7, #12]
 8000dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	60fa      	str	r2, [r7, #12]
 8000e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <_SendPacket+0x274>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <_SendPacket+0x270>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	623b      	str	r3, [r7, #32]
 8000e22:	e00b      	b.n	8000e3c <_SendPacket+0x228>
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	1c59      	adds	r1, r3, #1
 8000e2c:	6279      	str	r1, [r7, #36]	; 0x24
 8000e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	09db      	lsrs	r3, r3, #7
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e40:	d8f0      	bhi.n	8000e24 <_SendPacket+0x210>
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	627a      	str	r2, [r7, #36]	; 0x24
 8000e48:	6a3a      	ldr	r2, [r7, #32]
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <_SendPacket+0x270>)
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	4618      	mov	r0, r3
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	f7ff f9ed 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000e66:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_SendPacket+0x270>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	60d3      	str	r3, [r2, #12]
 8000e74:	e00f      	b.n	8000e96 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <_SendPacket+0x270>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <_SendPacket+0x270>)
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e008      	b.n	8000e96 <_SendPacket+0x282>
 8000e84:	20000b7c 	.word	0x20000b7c
 8000e88:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000e8c:	bf00      	nop
 8000e8e:	e002      	b.n	8000e96 <_SendPacket+0x282>
      goto SendDone;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <_SendPacket+0x282>
      goto SendDone;
 8000e94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <_SendPacket+0x2d4>)
 8000e98:	7e1b      	ldrb	r3, [r3, #24]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <_SendPacket+0x2d8>)
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	440b      	add	r3, r1
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	336c      	adds	r3, #108	; 0x6c
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <_SendPacket+0x2d4>)
 8000eae:	7e1b      	ldrb	r3, [r3, #24]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <_SendPacket+0x2d8>)
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4403      	add	r3, r0
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3370      	adds	r3, #112	; 0x70
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d00b      	beq.n	8000ede <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_SendPacket+0x2d4>)
 8000ec8:	789b      	ldrb	r3, [r3, #2]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <_SendPacket+0x2d4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000ed4:	f7ff fdbe 	bl	8000a54 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <_SendPacket+0x2d4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000b7c 	.word	0x20000b7c
 8000eec:	200002bc 	.word	0x200002bc

08000ef0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0a2      	sub	sp, #136	; 0x88
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d01d      	beq.n	8000f56 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f1e:	2b25      	cmp	r3, #37	; 0x25
 8000f20:	d1f1      	bne.n	8000f06 <_VPrintHost+0x16>
      c = *p;
 8000f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1d19      	adds	r1, r3, #4
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6011      	str	r1, [r2, #0]
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f40:	460a      	mov	r2, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3388      	adds	r3, #136	; 0x88
 8000f46:	443b      	add	r3, r7
 8000f48:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d002      	beq.n	8000f5a <_VPrintHost+0x6a>
    c = *p++;
 8000f54:	e7d7      	b.n	8000f06 <_VPrintHost+0x16>
      break;
 8000f56:	bf00      	nop
 8000f58:	e000      	b.n	8000f5c <_VPrintHost+0x6c>
        break;
 8000f5a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8000f60:	f04f 0120 	mov.w	r1, #32
 8000f64:	f381 8811 	msr	BASEPRI, r1
 8000f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f6a:	483f      	ldr	r0, [pc, #252]	; (8001068 <_VPrintHost+0x178>)
 8000f6c:	f7ff fd66 	bl	8000a3c <_PreparePacket>
 8000f70:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	68f9      	ldr	r1, [r7, #12]
 8000f76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000f78:	f7ff fd30 	bl	80009dc <_EncodeStr>
 8000f7c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f80:	677b      	str	r3, [r7, #116]	; 0x74
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	673b      	str	r3, [r7, #112]	; 0x70
 8000f86:	e00b      	b.n	8000fa0 <_VPrintHost+0xb0>
 8000f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f8e:	1c59      	adds	r1, r3, #1
 8000f90:	6779      	str	r1, [r7, #116]	; 0x74
 8000f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f9c:	09db      	lsrs	r3, r3, #7
 8000f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8000fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa4:	d8f0      	bhi.n	8000f88 <_VPrintHost+0x98>
 8000fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	677a      	str	r2, [r7, #116]	; 0x74
 8000fac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fc0:	e00b      	b.n	8000fda <_VPrintHost+0xea>
 8000fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fd6:	09db      	lsrs	r3, r3, #7
 8000fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000fde:	d8f0      	bhi.n	8000fc2 <_VPrintHost+0xd2>
 8000fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fee:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000ff8:	e022      	b.n	8001040 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8000ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
 8001006:	e00b      	b.n	8001020 <_VPrintHost+0x130>
 8001008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800100a:	b2da      	uxtb	r2, r3
 800100c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800100e:	1c59      	adds	r1, r3, #1
 8001010:	6679      	str	r1, [r7, #100]	; 0x64
 8001012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800101c:	09db      	lsrs	r3, r3, #7
 800101e:	663b      	str	r3, [r7, #96]	; 0x60
 8001020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001022:	2b7f      	cmp	r3, #127	; 0x7f
 8001024:	d8f0      	bhi.n	8001008 <_VPrintHost+0x118>
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	667a      	str	r2, [r7, #100]	; 0x64
 800102c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001034:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8001036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800103a:	3304      	adds	r3, #4
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8001040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1d5      	bne.n	8000ffa <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800104e:	221a      	movs	r2, #26
 8001050:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001052:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001054:	f7ff fdde 	bl	8000c14 <_SendPacket>
    RECORD_END();
 8001058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800105a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3788      	adds	r7, #136	; 0x88
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000bac 	.word	0x20000bac

0800106c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800107a:	2300      	movs	r3, #0
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <SEGGER_SYSVIEW_Init+0x74>)
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <SEGGER_SYSVIEW_Init+0x78>)
 8001084:	f7ff fbda 	bl	800083c <SEGGER_RTT_AllocUpBuffer>
 8001088:	4603      	mov	r3, r0
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800108e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001092:	785a      	ldrb	r2, [r3, #1]
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001096:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800109a:	7e1b      	ldrb	r3, [r3, #24]
 800109c:	4618      	mov	r0, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2308      	movs	r3, #8
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <SEGGER_SYSVIEW_Init+0x80>)
 80010a6:	490f      	ldr	r1, [pc, #60]	; (80010e4 <SEGGER_SYSVIEW_Init+0x78>)
 80010a8:	f7ff fc4c 	bl	8000944 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <SEGGER_SYSVIEW_Init+0x84>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000774 	.word	0x20000774
 80010e4:	0800f7f4 	.word	0x0800f7f4
 80010e8:	20000b7c 	.word	0x20000b7c
 80010ec:	20000b74 	.word	0x20000b74
 80010f0:	e0001004 	.word	0xe0001004

080010f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6113      	str	r3, [r2, #16]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000b7c 	.word	0x20000b7c

08001114 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800111c:	f3ef 8311 	mrs	r3, BASEPRI
 8001120:	f04f 0120 	mov.w	r1, #32
 8001124:	f381 8811 	msr	BASEPRI, r1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800112c:	f7ff fc86 	bl	8000a3c <_PreparePacket>
 8001130:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f7ff fd6c 	bl	8000c14 <_SendPacket>
  RECORD_END();
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f383 8811 	msr	BASEPRI, r3
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000bac 	.word	0x20000bac

08001150 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800115a:	f3ef 8311 	mrs	r3, BASEPRI
 800115e:	f04f 0120 	mov.w	r1, #32
 8001162:	f381 8811 	msr	BASEPRI, r1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800116a:	f7ff fc67 	bl	8000a3c <_PreparePacket>
 800116e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	e00b      	b.n	8001196 <SEGGER_SYSVIEW_RecordU32+0x46>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	61f9      	str	r1, [r7, #28]
 8001188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	09db      	lsrs	r3, r3, #7
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b7f      	cmp	r3, #127	; 0x7f
 800119a:	d8f0      	bhi.n	800117e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	61fa      	str	r2, [r7, #28]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	6938      	ldr	r0, [r7, #16]
 80011b2:	f7ff fd2f 	bl	8000c14 <_SendPacket>
  RECORD_END();
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f383 8811 	msr	BASEPRI, r3
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000bac 	.word	0x20000bac

080011c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80011d4:	f3ef 8311 	mrs	r3, BASEPRI
 80011d8:	f04f 0120 	mov.w	r1, #32
 80011dc:	f381 8811 	msr	BASEPRI, r1
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	4825      	ldr	r0, [pc, #148]	; (8001278 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80011e4:	f7ff fc2a 	bl	8000a3c <_PreparePacket>
 80011e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f6:	e00b      	b.n	8001210 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80011f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	09db      	lsrs	r3, r3, #7
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	2b7f      	cmp	r3, #127	; 0x7f
 8001214:	d8f0      	bhi.n	80011f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800121c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	e00b      	b.n	8001248 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	6279      	str	r1, [r7, #36]	; 0x24
 800123a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	09db      	lsrs	r3, r3, #7
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2b7f      	cmp	r3, #127	; 0x7f
 800124c:	d8f0      	bhi.n	8001230 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	627a      	str	r2, [r7, #36]	; 0x24
 8001254:	6a3a      	ldr	r2, [r7, #32]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	6979      	ldr	r1, [r7, #20]
 8001262:	69b8      	ldr	r0, [r7, #24]
 8001264:	f7ff fcd6 	bl	8000c14 <_SendPacket>
  RECORD_END();
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f383 8811 	msr	BASEPRI, r3
}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000bac 	.word	0x20000bac

0800127c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001288:	f3ef 8311 	mrs	r3, BASEPRI
 800128c:	f04f 0120 	mov.w	r1, #32
 8001290:	f381 8811 	msr	BASEPRI, r1
 8001294:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	220a      	movs	r2, #10
 800129c:	4952      	ldr	r1, [pc, #328]	; (80013e8 <SEGGER_SYSVIEW_Start+0x16c>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ffce 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff ff32 	bl	8001114 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80012b0:	f3ef 8311 	mrs	r3, BASEPRI
 80012b4:	f04f 0120 	mov.w	r1, #32
 80012b8:	f381 8811 	msr	BASEPRI, r1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <SEGGER_SYSVIEW_Start+0x170>)
 80012c0:	f7ff fbbc 	bl	8000a3c <_PreparePacket>
 80012c4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x72>
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x5a>
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	e00b      	b.n	8001328 <SEGGER_SYSVIEW_Start+0xac>
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	1c59      	adds	r1, r3, #1
 8001318:	6279      	str	r1, [r7, #36]	; 0x24
 800131a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	09db      	lsrs	r3, r3, #7
 8001326:	623b      	str	r3, [r7, #32]
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b7f      	cmp	r3, #127	; 0x7f
 800132c:	d8f0      	bhi.n	8001310 <SEGGER_SYSVIEW_Start+0x94>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	627a      	str	r2, [r7, #36]	; 0x24
 8001334:	6a3a      	ldr	r2, [r7, #32]
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	e00b      	b.n	8001362 <SEGGER_SYSVIEW_Start+0xe6>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	1c59      	adds	r1, r3, #1
 8001352:	61f9      	str	r1, [r7, #28]
 8001354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	09db      	lsrs	r3, r3, #7
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b7f      	cmp	r3, #127	; 0x7f
 8001366:	d8f0      	bhi.n	800134a <SEGGER_SYSVIEW_Start+0xce>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	61fa      	str	r2, [r7, #28]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e00b      	b.n	800139a <SEGGER_SYSVIEW_Start+0x11e>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	1c59      	adds	r1, r3, #1
 800138a:	6179      	str	r1, [r7, #20]
 800138c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	09db      	lsrs	r3, r3, #7
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b7f      	cmp	r3, #127	; 0x7f
 800139e:	d8f0      	bhi.n	8001382 <SEGGER_SYSVIEW_Start+0x106>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	617a      	str	r2, [r7, #20]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80013b0:	2218      	movs	r2, #24
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fc2d 	bl	8000c14 <_SendPacket>
      RECORD_END();
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80013ce:	f000 f9eb 	bl	80017a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80013d2:	f000 f9b1 	bl	8001738 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80013d6:	f000 fac1 	bl	800195c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000b7c 	.word	0x20000b7c
 80013e8:	0800f91c 	.word	0x0800f91c
 80013ec:	20000bac 	.word	0x20000bac

080013f0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80013f6:	f3ef 8311 	mrs	r3, BASEPRI
 80013fa:	f04f 0120 	mov.w	r1, #32
 80013fe:	f381 8811 	msr	BASEPRI, r1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <SEGGER_SYSVIEW_Stop+0x44>)
 8001406:	f7ff fb19 	bl	8000a3c <_PreparePacket>
 800140a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <SEGGER_SYSVIEW_Stop+0x48>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001414:	220b      	movs	r2, #11
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f7ff fbfb 	bl	8000c14 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SEGGER_SYSVIEW_Stop+0x48>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f383 8811 	msr	BASEPRI, r3
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000bac 	.word	0x20000bac
 8001438:	20000b7c 	.word	0x20000b7c

0800143c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001442:	f3ef 8311 	mrs	r3, BASEPRI
 8001446:	f04f 0120 	mov.w	r1, #32
 800144a:	f381 8811 	msr	BASEPRI, r1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4845      	ldr	r0, [pc, #276]	; (8001568 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001452:	f7ff faf3 	bl	8000a3c <_PreparePacket>
 8001456:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	b2da      	uxtb	r2, r3
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800148c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	e00b      	b.n	80014ba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	6279      	str	r1, [r7, #36]	; 0x24
 80014ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b7f      	cmp	r3, #127	; 0x7f
 80014be:	d8f0      	bhi.n	80014a2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	627a      	str	r2, [r7, #36]	; 0x24
 80014c6:	6a3a      	ldr	r2, [r7, #32]
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	e00b      	b.n	80014f4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	61f9      	str	r1, [r7, #28]
 80014e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	09db      	lsrs	r3, r3, #7
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b7f      	cmp	r3, #127	; 0x7f
 80014f8:	d8f0      	bhi.n	80014dc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	61fa      	str	r2, [r7, #28]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e00b      	b.n	800152c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1c59      	adds	r1, r3, #1
 800151c:	6179      	str	r1, [r7, #20]
 800151e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	09db      	lsrs	r3, r3, #7
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b7f      	cmp	r3, #127	; 0x7f
 8001530:	d8f0      	bhi.n	8001514 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	617a      	str	r2, [r7, #20]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001542:	2218      	movs	r2, #24
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	68b8      	ldr	r0, [r7, #8]
 8001548:	f7ff fb64 	bl	8000c14 <_SendPacket>
  RECORD_END();
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	4798      	blx	r3
  }
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000bac 	.word	0x20000bac
 800156c:	20000b7c 	.word	0x20000b7c

08001570 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b092      	sub	sp, #72	; 0x48
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8001578:	f3ef 8311 	mrs	r3, BASEPRI
 800157c:	f04f 0120 	mov.w	r1, #32
 8001580:	f381 8811 	msr	BASEPRI, r1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	486a      	ldr	r0, [pc, #424]	; (8001730 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8001588:	f7ff fa58 	bl	8000a3c <_PreparePacket>
 800158c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
 80015a2:	e00b      	b.n	80015bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80015a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	6479      	str	r1, [r7, #68]	; 0x44
 80015ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	09db      	lsrs	r3, r3, #7
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
 80015bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015be:	2b7f      	cmp	r3, #127	; 0x7f
 80015c0:	d8f0      	bhi.n	80015a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80015c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	647a      	str	r2, [r7, #68]	; 0x44
 80015c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
 80015dc:	e00b      	b.n	80015f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80015de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80015e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f2:	09db      	lsrs	r3, r3, #7
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f8:	2b7f      	cmp	r3, #127	; 0x7f
 80015fa:	d8f0      	bhi.n	80015de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80015fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	4619      	mov	r1, r3
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff f9e1 	bl	80009dc <_EncodeStr>
 800161a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800161c:	2209      	movs	r2, #9
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	6938      	ldr	r0, [r7, #16]
 8001622:	f7ff faf7 	bl	8000c14 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	b2da      	uxtb	r2, r3
 8001640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	6379      	str	r1, [r7, #52]	; 0x34
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	637a      	str	r2, [r7, #52]	; 0x34
 8001660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
 8001674:	e00b      	b.n	800168e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001678:	b2da      	uxtb	r2, r3
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	1c59      	adds	r1, r3, #1
 800167e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	09db      	lsrs	r3, r3, #7
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	2b7f      	cmp	r3, #127	; 0x7f
 8001692:	d8f0      	bhi.n	8001676 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800169a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	e00b      	b.n	80016c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	1c59      	adds	r1, r3, #1
 80016b8:	6279      	str	r1, [r7, #36]	; 0x24
 80016ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	2b7f      	cmp	r3, #127	; 0x7f
 80016cc:	d8f0      	bhi.n	80016b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	627a      	str	r2, [r7, #36]	; 0x24
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	e00b      	b.n	8001700 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	61f9      	str	r1, [r7, #28]
 80016f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	09db      	lsrs	r3, r3, #7
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b7f      	cmp	r3, #127	; 0x7f
 8001704:	d8f0      	bhi.n	80016e8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	61fa      	str	r2, [r7, #28]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001716:	2215      	movs	r2, #21
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	6938      	ldr	r0, [r7, #16]
 800171c:	f7ff fa7a 	bl	8000c14 <_SendPacket>
  RECORD_END();
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f383 8811 	msr	BASEPRI, r3
}
 8001726:	bf00      	nop
 8001728:	3748      	adds	r7, #72	; 0x48
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000bac 	.word	0x20000bac
 8001734:	20000b7c 	.word	0x20000b7c

08001738 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4798      	blx	r3
  }
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000b7c 	.word	0x20000b7c

08001760 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001768:	f3ef 8311 	mrs	r3, BASEPRI
 800176c:	f04f 0120 	mov.w	r1, #32
 8001770:	f381 8811 	msr	BASEPRI, r1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8001778:	f7ff f960 	bl	8000a3c <_PreparePacket>
 800177c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	6938      	ldr	r0, [r7, #16]
 8001784:	f7ff f92a 	bl	80009dc <_EncodeStr>
 8001788:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800178a:	220e      	movs	r2, #14
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6938      	ldr	r0, [r7, #16]
 8001790:	f7ff fa40 	bl	8000c14 <_SendPacket>
  RECORD_END();
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f383 8811 	msr	BASEPRI, r3
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000bac 	.word	0x20000bac

080017a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01a      	beq.n	80017ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d015      	beq.n	80017ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4798      	blx	r3
 80017c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80017cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80017ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	000a      	movs	r2, r1
 80017dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80017de:	4613      	mov	r3, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4621      	mov	r1, r4
 80017e4:	200d      	movs	r0, #13
 80017e6:	f7ff fcef 	bl	80011c8 <SEGGER_SYSVIEW_RecordU32x2>
 80017ea:	e006      	b.n	80017fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	200c      	movs	r0, #12
 80017f4:	f7ff fcac 	bl	8001150 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000b7c 	.word	0x20000b7c
 8001808:	e0001004 	.word	0xe0001004

0800180c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d077      	beq.n	800190e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	e008      	b.n	800183c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	3301      	adds	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001840:	429a      	cmp	r2, r3
 8001842:	d3f2      	bcc.n	800182a <SEGGER_SYSVIEW_SendModule+0x1e>
 8001844:	e000      	b.n	8001848 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001846:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184a:	2b00      	cmp	r3, #0
 800184c:	d055      	beq.n	80018fa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800184e:	f3ef 8311 	mrs	r3, BASEPRI
 8001852:	f04f 0120 	mov.w	r1, #32
 8001856:	f381 8811 	msr	BASEPRI, r1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <SEGGER_SYSVIEW_SendModule+0x110>)
 800185e:	f7ff f8ed 	bl	8000a3c <_PreparePacket>
 8001862:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	e00b      	b.n	800188a <SEGGER_SYSVIEW_SendModule+0x7e>
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	6279      	str	r1, [r7, #36]	; 0x24
 800187c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	09db      	lsrs	r3, r3, #7
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	2b7f      	cmp	r3, #127	; 0x7f
 800188e:	d8f0      	bhi.n	8001872 <SEGGER_SYSVIEW_SendModule+0x66>
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	627a      	str	r2, [r7, #36]	; 0x24
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	e00b      	b.n	80018c4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	61f9      	str	r1, [r7, #28]
 80018b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	09db      	lsrs	r3, r3, #7
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b7f      	cmp	r3, #127	; 0x7f
 80018c8:	d8f0      	bhi.n	80018ac <SEGGER_SYSVIEW_SendModule+0xa0>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	61fa      	str	r2, [r7, #28]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	4619      	mov	r1, r3
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff f87a 	bl	80009dc <_EncodeStr>
 80018e8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80018ea:	2216      	movs	r2, #22
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	6938      	ldr	r0, [r7, #16]
 80018f0:	f7ff f990 	bl	8000c14 <_SendPacket>
      RECORD_END();
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <SEGGER_SYSVIEW_SendModule+0x102>
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4798      	blx	r3
    }
  }
}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	; 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000ba4 	.word	0x20000ba4
 800191c:	20000bac 	.word	0x20000bac

08001920 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f2      	bne.n	8001934 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000ba4 	.word	0x20000ba4

0800195c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001962:	f3ef 8311 	mrs	r3, BASEPRI
 8001966:	f04f 0120 	mov.w	r1, #32
 800196a:	f381 8811 	msr	BASEPRI, r1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001972:	f7ff f863 	bl	8000a3c <_PreparePacket>
 8001976:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e00b      	b.n	80019a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	6179      	str	r1, [r7, #20]
 8001992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	09db      	lsrs	r3, r3, #7
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b7f      	cmp	r3, #127	; 0x7f
 80019a4:	d8f0      	bhi.n	8001988 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	617a      	str	r2, [r7, #20]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019b6:	221b      	movs	r2, #27
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f7ff f92a 	bl	8000c14 <_SendPacket>
  RECORD_END();
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f383 8811 	msr	BASEPRI, r3
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000bac 	.word	0x20000bac
 80019d4:	20000ba8 	.word	0x20000ba8

080019d8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019d8:	b40f      	push	{r0, r1, r2, r3}
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	461a      	mov	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	6938      	ldr	r0, [r7, #16]
 80019ee:	f7ff fa7f 	bl	8000ef0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fc:	b004      	add	sp, #16
 80019fe:	4770      	bx	lr

08001a00 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <_cbSendSystemDesc+0x14>)
 8001a06:	f7ff feab 	bl	8001760 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <_cbSendSystemDesc+0x18>)
 8001a0c:	f7ff fea8 	bl	8001760 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	0800f7fc 	.word	0x0800f7fc
 8001a18:	0800f830 	.word	0x0800f830

08001a1c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SEGGER_SYSVIEW_Conf+0x20>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SEGGER_SYSVIEW_Conf+0x20>)
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SEGGER_SYSVIEW_Conf+0x24>)
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <SEGGER_SYSVIEW_Conf+0x28>)
 8001a2c:	f7ff fb1e 	bl	800106c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a34:	f7ff fb5e 	bl	80010f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	08001a01 	.word	0x08001a01
 8001a44:	0800f928 	.word	0x0800f928

08001a48 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	e048      	b.n	8001ae6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001a54:	4929      	ldr	r1, [pc, #164]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00b fa1b 	bl	800cea0 <uxTaskGetStackHighWaterMark>
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	4823      	ldr	r0, [pc, #140]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4403      	add	r3, r0
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a7e:	491f      	ldr	r1, [pc, #124]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	4c16      	ldr	r4, [pc, #88]	; (8001afc <_cbSendTaskList+0xb4>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4423      	add	r3, r4
 8001aae:	3308      	adds	r3, #8
 8001ab0:	681c      	ldr	r4, [r3, #0]
 8001ab2:	4d12      	ldr	r5, [pc, #72]	; (8001afc <_cbSendTaskList+0xb4>)
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	442b      	add	r3, r5
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	681d      	ldr	r5, [r3, #0]
 8001ac4:	4e0d      	ldr	r6, [pc, #52]	; (8001afc <_cbSendTaskList+0xb4>)
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4433      	add	r3, r6
 8001ad2:	3310      	adds	r3, #16
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	462b      	mov	r3, r5
 8001ada:	4622      	mov	r2, r4
 8001adc:	f000 f855 	bl	8001b8a <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <_cbSendTaskList+0xb8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3b1      	bcc.n	8001a54 <_cbSendTaskList+0xc>
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000c90 	.word	0x20000c90
 8001b00:	20000d30 	.word	0x20000d30

08001b04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001b0c:	f00a feb0 	bl	800c870 <xTaskGetTickCountFromISR>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2200      	movs	r2, #0
 8001b14:	469a      	mov	sl, r3
 8001b16:	4693      	mov	fp, r2
 8001b18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	f04f 0a00 	mov.w	sl, #0
 8001b28:	f04f 0b00 	mov.w	fp, #0
 8001b2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001b34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001b38:	4652      	mov	r2, sl
 8001b3a:	465b      	mov	r3, fp
 8001b3c:	1a14      	subs	r4, r2, r0
 8001b3e:	eb63 0501 	sbc.w	r5, r3, r1
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	00ab      	lsls	r3, r5, #2
 8001b4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b50:	00a2      	lsls	r2, r4, #2
 8001b52:	4614      	mov	r4, r2
 8001b54:	461d      	mov	r5, r3
 8001b56:	eb14 0800 	adds.w	r8, r4, r0
 8001b5a:	eb45 0901 	adc.w	r9, r5, r1
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b72:	4690      	mov	r8, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b8a <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b08a      	sub	sp, #40	; 0x28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2214      	movs	r2, #20
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d f9e3 	bl	800ef6c <memset>
  TaskInfo.TaskID     = TaskID;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fcd6 	bl	8001570 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <crc32>:
 * CRC32 code derived from work by Gary S. Brown.
 * https://web.mit.edu/freebsd/head/sys/libkern/crc32.c
 *
 */
uint32_t crc32(const void *buf, size_t size)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	60bb      	str	r3, [r7, #8]
	while (size--)
 8001be0:	e00e      	b.n	8001c00 <crc32+0x34>
		crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4053      	eors	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <crc32+0x50>)
 8001bf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	4053      	eors	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
	while (size--)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	603a      	str	r2, [r7, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1eb      	bne.n	8001be2 <crc32+0x16>
	return crc ^ ~0U;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	43db      	mvns	r3, r3
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	0800f930 	.word	0x0800f930

08001c20 <CheckCRC>:

bool CheckCRC(const uint8_t *Buff, const uint32_t Len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	//make sure args and crc32 return are not NULL
	if(!Buff || !Len){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <CheckCRC+0x16>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <CheckCRC+0x1a>
		return false;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e039      	b.n	8001cae <CheckCRC+0x8e>
	}

	uint32_t result = crc32(Buff, 4);
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffc5 	bl	8001bcc <crc32>
 8001c42:	6138      	str	r0, [r7, #16]

	if(!result){
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <CheckCRC+0x2e>
		return false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e02f      	b.n	8001cae <CheckCRC+0x8e>
	}
	//for each byte of crc32 in packet, ensure equality with crc32 calculated on packet contents
	for (int i = 0; i < 4; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e028      	b.n	8001ca6 <CheckCRC+0x86>
	{
		uint32_t hashresult = result & (0x000000FF << (8 * i));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	22ff      	movs	r2, #255	; 0xff
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
		char hex[3];
		//first 2 digits of each hash result is used; all other digits are significant but always 0
		sprintf(hex, "%02x", hashresult >> (8 * i));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	40da      	lsrs	r2, r3
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4911      	ldr	r1, [pc, #68]	; (8001cb8 <CheckCRC+0x98>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00d f959 	bl	800ef2c <siprintf>

		uint8_t uint8_value = strtoul(hex, NULL, 16);
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2210      	movs	r2, #16
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00d f948 	bl	800ef18 <strtoul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	72fb      	strb	r3, [r7, #11]

		if (uint8_value != Buff[i + 5])
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3305      	adds	r3, #5
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	7afa      	ldrb	r2, [r7, #11]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <CheckCRC+0x80>
		{
			return false;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e006      	b.n	8001cae <CheckCRC+0x8e>
	for (int i = 0; i < 4; i++)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	ddd3      	ble.n	8001c54 <CheckCRC+0x34>
		}
	}

	return true;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	0800f840 	.word	0x0800f840

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 fd92 	bl	80027ea <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001cc6:	f7ff fea9 	bl	8001a1c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f857 	bl	8001d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f000 f9bd 	bl	800204c <MX_GPIO_Init>
  MX_ETH_Init();
 8001cd2:	f000 f8c5 	bl	8001e60 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001cd6:	f000 f989 	bl	8001fec <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001cda:	f000 f90f 	bl	8001efc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001cde:	2104      	movs	r1, #4
 8001ce0:	481a      	ldr	r0, [pc, #104]	; (8001d4c <main+0x90>)
 8001ce2:	f004 f919 	bl	8005f18 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ce6:	f009 fa09 	bl	800b0fc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <main+0x94>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4818      	ldr	r0, [pc, #96]	; (8001d54 <main+0x98>)
 8001cf2:	f009 fb57 	bl	800b3a4 <osTimerNew>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <main+0x9c>)
 8001cfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <main+0x9c>)
 8001cfe:	681c      	ldr	r4, [r3, #0]
 8001d00:	f00a fda6 	bl	800c850 <xTaskGetTickCount>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4620      	mov	r0, r4
 8001d12:	f00b fb05 	bl	800d320 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <main+0xa0>)
 8001d18:	2120      	movs	r1, #32
 8001d1a:	2010      	movs	r0, #16
 8001d1c:	f009 fbc6 	bl	800b4ac <osMessageQueueNew>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <main+0xa4>)
 8001d24:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <main+0xa8>)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480f      	ldr	r0, [pc, #60]	; (8001d68 <main+0xac>)
 8001d2c:	f009 fa50 	bl	800b1d0 <osThreadNew>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <main+0xb0>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001d36:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <main+0xb4>)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	480e      	ldr	r0, [pc, #56]	; (8001d74 <main+0xb8>)
 8001d3c:	f009 fa48 	bl	800b1d0 <osThreadNew>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <main+0xbc>)
 8001d44:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d46:	f009 fa0d 	bl	800b164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <main+0x8e>
 8001d4c:	20000e1c 	.word	0x20000e1c
 8001d50:	0800fd90 	.word	0x0800fd90
 8001d54:	08002249 	.word	0x08002249
 8001d58:	20000efc 	.word	0x20000efc
 8001d5c:	0800fd78 	.word	0x0800fd78
 8001d60:	20000ef8 	.word	0x20000ef8
 8001d64:	0800fd30 	.word	0x0800fd30
 8001d68:	08002191 	.word	0x08002191
 8001d6c:	20000ef0 	.word	0x20000ef0
 8001d70:	0800fd54 	.word	0x0800fd54
 8001d74:	080021a5 	.word	0x080021a5
 8001d78:	20000ef4 	.word	0x20000ef4

08001d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b094      	sub	sp, #80	; 0x50
 8001d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	2234      	movs	r2, #52	; 0x34
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00d f8ee 	bl	800ef6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001da0:	f002 fdfa 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <SystemClock_Config+0xdc>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <SystemClock_Config+0xdc>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <SystemClock_Config+0xdc>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <SystemClock_Config+0xe0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <SystemClock_Config+0xe0>)
 8001dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <SystemClock_Config+0xe0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ddc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001de0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de2:	2302      	movs	r3, #2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fe27 	bl	8004a58 <HAL_RCC_OscConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e10:	f000 fa38 	bl	8002284 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e14:	f002 fdd0 	bl	80049b8 <HAL_PWREx_EnableOverDrive>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e1e:	f000 fa31 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e22:	230f      	movs	r3, #15
 8001e24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2302      	movs	r3, #2
 8001e28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f8b8 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e4a:	f000 fa1b 	bl	8002284 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	; 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001e66:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <MX_ETH_Init+0x88>)
 8001e68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e78:	22e1      	movs	r2, #225	; 0xe1
 8001e7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001e90:	4a16      	ldr	r2, [pc, #88]	; (8001eec <MX_ETH_Init+0x8c>)
 8001e92:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001e96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e9a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <MX_ETH_Init+0x90>)
 8001ea0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <MX_ETH_Init+0x94>)
 8001ea6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001eaa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001eae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <MX_ETH_Init+0x84>)
 8001eb2:	f000 fdcd 	bl	8002a50 <HAL_ETH_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001ebc:	f000 f9e2 	bl	8002284 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ec0:	2238      	movs	r2, #56	; 0x38
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <MX_ETH_Init+0x98>)
 8001ec6:	f00d f851 	bl	800ef6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <MX_ETH_Init+0x98>)
 8001ecc:	2221      	movs	r2, #33	; 0x21
 8001ece:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_ETH_Init+0x98>)
 8001ed2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001ed6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_ETH_Init+0x98>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000d6c 	.word	0x20000d6c
 8001ee8:	40028000 	.word	0x40028000
 8001eec:	20000f00 	.word	0x20000f00
 8001ef0:	20000200 	.word	0x20000200
 8001ef4:	20000160 	.word	0x20000160
 8001ef8:	20000d34 	.word	0x20000d34

08001efc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	; 0x38
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	615a      	str	r2, [r3, #20]
 8001f2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f30:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <MX_TIM4_Init+0xec>)
 8001f32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f54:	4823      	ldr	r0, [pc, #140]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f56:	f003 fead 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f60:	f000 f990 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481c      	ldr	r0, [pc, #112]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f72:	f004 faff 	bl	8006574 <HAL_TIM_ConfigClockSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f7c:	f000 f982 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f80:	4818      	ldr	r0, [pc, #96]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001f82:	f003 ff67 	bl	8005e54 <HAL_TIM_PWM_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f8c:	f000 f97a 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001fa0:	f004 ff98 	bl	8006ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001faa:	f000 f96b 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fae:	2360      	movs	r3, #96	; 0x60
 8001fb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001fc6:	f004 f9c1 	bl	800634c <HAL_TIM_PWM_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001fd0:	f000 f958 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <MX_TIM4_Init+0xe8>)
 8001fd6:	f000 fa5b 	bl	8002490 <HAL_TIM_MspPostInit>

}
 8001fda:	bf00      	nop
 8001fdc:	3738      	adds	r7, #56	; 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000e1c 	.word	0x20000e1c
 8001fe8:	40000800 	.word	0x40000800

08001fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8001ff2:	4a15      	ldr	r2, [pc, #84]	; (8002048 <MX_USART3_UART_Init+0x5c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_USART3_UART_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_USART3_UART_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_USART3_UART_Init+0x58>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_USART3_UART_Init+0x58>)
 8002030:	f004 fffc 	bl	800702c <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800203a:	f000 f923 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000e68 	.word	0x20000e68
 8002048:	40004800 	.word	0x40004800

0800204c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <MX_GPIO_Init+0x134>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a46      	ldr	r2, [pc, #280]	; (8002180 <MX_GPIO_Init+0x134>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <MX_GPIO_Init+0x134>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <MX_GPIO_Init+0x134>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a40      	ldr	r2, [pc, #256]	; (8002180 <MX_GPIO_Init+0x134>)
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <MX_GPIO_Init+0x134>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <MX_GPIO_Init+0x134>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <MX_GPIO_Init+0x134>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <MX_GPIO_Init+0x134>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <MX_GPIO_Init+0x134>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a34      	ldr	r2, [pc, #208]	; (8002180 <MX_GPIO_Init+0x134>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <MX_GPIO_Init+0x134>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <MX_GPIO_Init+0x134>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <MX_GPIO_Init+0x134>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <MX_GPIO_Init+0x134>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <MX_GPIO_Init+0x134>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <MX_GPIO_Init+0x134>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <MX_GPIO_Init+0x134>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	f244 0101 	movw	r1, #16385	; 0x4001
 80020f8:	4822      	ldr	r0, [pc, #136]	; (8002184 <MX_GPIO_Init+0x138>)
 80020fa:	f001 f97b 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	4821      	ldr	r0, [pc, #132]	; (8002188 <MX_GPIO_Init+0x13c>)
 8002104:	f001 f976 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	481b      	ldr	r0, [pc, #108]	; (800218c <MX_GPIO_Init+0x140>)
 8002120:	f000 ffbc 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002124:	f244 0301 	movw	r3, #16385	; 0x4001
 8002128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4811      	ldr	r0, [pc, #68]	; (8002184 <MX_GPIO_Init+0x138>)
 800213e:	f000 ffad 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	480b      	ldr	r0, [pc, #44]	; (8002188 <MX_GPIO_Init+0x13c>)
 800215a:	f000 ff9f 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_GPIO_Init+0x13c>)
 8002172:	f000 ff93 	bl	800309c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002176:	bf00      	nop
 8002178:	3730      	adds	r7, #48	; 0x30
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40020400 	.word	0x40020400
 8002188:	40021800 	.word	0x40021800
 800218c:	40020800 	.word	0x40020800

08002190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002198:	f00c f810 	bl	800e1bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
    osDelay(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f009 f8bd 	bl	800b31c <osDelay>
 80021a2:	e7fb      	b.n	800219c <StartDefaultTask+0xc>

080021a4 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	; 0x38
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  bool crccheck;
  int32_t TIM4_CH2_BLUE = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  for(;;)
  {
    osDelay(1);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f009 f8b3 	bl	800b31c <osDelay>
    uint8_t command[32];
    if (xQueueReceive(commandQueueHandle, &command, 100) == pdPASS){
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <commandReaderEntry+0x8c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f107 010c 	add.w	r1, r7, #12
 80021be:	2264      	movs	r2, #100	; 0x64
 80021c0:	4618      	mov	r0, r3
 80021c2:	f009 fdd9 	bl	800bd78 <xQueueReceive>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d1f1      	bne.n	80021b0 <commandReaderEntry+0xc>
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", command[1]);
    	//SEGGER_SYSVIEW_PrintfHost("%p \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%u \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%x \n", (void*)command);

    	SEGGER_SYSVIEW_PrintfHost("begin:");
 80021cc:	4819      	ldr	r0, [pc, #100]	; (8002234 <commandReaderEntry+0x90>)
 80021ce:	f7ff fc03 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 80021d2:	2300      	movs	r3, #0
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
 80021d6:	e00b      	b.n	80021f0 <commandReaderEntry+0x4c>
    		SEGGER_SYSVIEW_PrintfHost("%d \n", command[i]);
 80021d8:	f107 020c 	add.w	r2, r7, #12
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4814      	ldr	r0, [pc, #80]	; (8002238 <commandReaderEntry+0x94>)
 80021e6:	f7ff fbf7 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	3301      	adds	r3, #1
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	2b09      	cmp	r3, #9
 80021f4:	ddf0      	ble.n	80021d8 <commandReaderEntry+0x34>
    	}
    	SEGGER_SYSVIEW_PrintfHost("end");
 80021f6:	4811      	ldr	r0, [pc, #68]	; (800223c <commandReaderEntry+0x98>)
 80021f8:	f7ff fbee 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	crccheck = CheckCRC(command, 9);
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	2109      	movs	r1, #9
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd0c 	bl	8001c20 <CheckCRC>
 8002208:	4603      	mov	r3, r0
 800220a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", crccheck);
    	SEGGER_SYSVIEW_PrintfHost("%u \n", command[2]);
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	4619      	mov	r1, r3
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <commandReaderEntry+0x9c>)
 8002214:	f7ff fbe0 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	TIM4_CH2_BLUE = (command[2] * 256);
 8002218:	7bbb      	ldrb	r3, [r7, #14]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
    	SEGGER_SYSVIEW_PrintfHost("%d \n", TIM4_CH2_BLUE);
 800221e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <commandReaderEntry+0x94>)
 8002222:	f7ff fbd9 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	TIM4->CCR2 = TIM4_CH2_BLUE;
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <commandReaderEntry+0xa0>)
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	6393      	str	r3, [r2, #56]	; 0x38
  {
 800222c:	e7c0      	b.n	80021b0 <commandReaderEntry+0xc>
 800222e:	bf00      	nop
 8002230:	20000ef8 	.word	0x20000ef8
 8002234:	0800f888 	.word	0x0800f888
 8002238:	0800f890 	.word	0x0800f890
 800223c:	0800f898 	.word	0x0800f898
 8002240:	0800f89c 	.word	0x0800f89c
 8002244:	40000800 	.word	0x40000800

08002248 <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  //SEGGER_SYSVIEW_PrintfHost("sender");
  osDelay(1);
 8002250:	2001      	movs	r0, #1
 8002252:	f009 f863 	bl	800b31c <osDelay>
  //uint8_t *data = "Hello World from USB CDC\n";
  //xQueueSend(commandQueueHandle, data, 100);

  /* USER CODE END testCommandTimerEntry */
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002272:	f000 fac7 	bl	8002804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40001000 	.word	0x40001000

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	e7fe      	b.n	800228c <Error_Handler+0x8>
	...

08002290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_MspInit+0x4c>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_MspInit+0x4c>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_MspInit+0x4c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	210f      	movs	r1, #15
 80022ca:	f06f 0001 	mvn.w	r0, #1
 80022ce:	f000 fb95 	bl	80029fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08e      	sub	sp, #56	; 0x38
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_ETH_MspInit+0x158>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	f040 8096 	bne.w	8002430 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002304:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800230a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800230e:	6313      	str	r3, [r2, #48]	; 0x30
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a46      	ldr	r2, [pc, #280]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b44      	ldr	r3, [pc, #272]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	4a40      	ldr	r2, [pc, #256]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800233a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800233e:	6313      	str	r3, [r2, #48]	; 0x30
 8002340:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6313      	str	r3, [r2, #48]	; 0x30
 8002358:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a34      	ldr	r2, [pc, #208]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6313      	str	r3, [r2, #48]	; 0x30
 8002370:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002394:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_ETH_MspInit+0x15c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_ETH_MspInit+0x15c>)
 800239a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_ETH_MspInit+0x15c>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023ac:	2332      	movs	r3, #50	; 0x32
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023bc:	230b      	movs	r3, #11
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	481e      	ldr	r0, [pc, #120]	; (8002440 <HAL_ETH_MspInit+0x160>)
 80023c8:	f000 fe68 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023cc:	2386      	movs	r3, #134	; 0x86
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023dc:	230b      	movs	r3, #11
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <HAL_ETH_MspInit+0x164>)
 80023e8:	f000 fe58 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80023ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023fe:	230b      	movs	r3, #11
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	480f      	ldr	r0, [pc, #60]	; (8002448 <HAL_ETH_MspInit+0x168>)
 800240a:	f000 fe47 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800240e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002420:	230b      	movs	r3, #11
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <HAL_ETH_MspInit+0x16c>)
 800242c:	f000 fe36 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002430:	bf00      	nop
 8002432:	3738      	adds	r7, #56	; 0x38
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40028000 	.word	0x40028000
 800243c:	40023800 	.word	0x40023800
 8002440:	40020800 	.word	0x40020800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40021800 	.word	0x40021800

08002450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_TIM_Base_MspInit+0x38>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10b      	bne.n	800247a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40000800 	.word	0x40000800
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_TIM_MspPostInit+0x64>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11b      	bne.n	80024ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_TIM_MspPostInit+0x68>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_TIM_MspPostInit+0x68>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_TIM_MspPostInit+0x68>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024da:	2302      	movs	r3, #2
 80024dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_TIM_MspPostInit+0x6c>)
 80024e6:	f000 fdd9 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80024ea:	bf00      	nop
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40000800 	.word	0x40000800
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020400 	.word	0x40020400

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0ae      	sub	sp, #184	; 0xb8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2290      	movs	r2, #144	; 0x90
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f00c fd23 	bl	800ef6c <memset>
  if(huart->Instance==USART3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_UART_MspInit+0xb4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d13c      	bne.n	80025aa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002534:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002536:	2300      	movs	r3, #0
 8002538:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4618      	mov	r0, r3
 8002540:	f002 ff90 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800254a:	f7ff fe9b 	bl	8002284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_UART_MspInit+0xb8>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_UART_MspInit+0xb8>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_UART_MspInit+0xb8>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_UART_MspInit+0xb8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_UART_MspInit+0xb8>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_UART_MspInit+0xb8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800257e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002598:	2307      	movs	r3, #7
 800259a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_UART_MspInit+0xbc>)
 80025a6:	f000 fd79 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	37b8      	adds	r7, #184	; 0xb8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004800 	.word	0x40004800
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020c00 	.word	0x40020c00

080025c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_InitTick+0xe0>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <HAL_InitTick+0xe0>)
 80025d6:	f043 0310 	orr.w	r3, r3, #16
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_InitTick+0xe0>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025e8:	f107 0210 	add.w	r2, r7, #16
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 ff04 	bl	8005400 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002602:	f002 fed5 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 8002606:	6378      	str	r0, [r7, #52]	; 0x34
 8002608:	e004      	b.n	8002614 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800260a:	f002 fed1 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 800260e:	4603      	mov	r3, r0
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_InitTick+0xe4>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	3b01      	subs	r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_InitTick+0xe8>)
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <HAL_InitTick+0xec>)
 8002626:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_InitTick+0xe8>)
 800262a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800262e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_InitTick+0xe8>)
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_InitTick+0xe8>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_InitTick+0xe8>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_InitTick+0xe8>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002648:	4817      	ldr	r0, [pc, #92]	; (80026a8 <HAL_InitTick+0xe8>)
 800264a:	f003 fb33 	bl	8005cb4 <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002658:	2b00      	cmp	r3, #0
 800265a:	d11b      	bne.n	8002694 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <HAL_InitTick+0xe8>)
 800265e:	f003 fb81 	bl	8005d64 <HAL_TIM_Base_Start_IT>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002670:	2036      	movs	r0, #54	; 0x36
 8002672:	f000 f9df 	bl	8002a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d808      	bhi.n	800268e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	2036      	movs	r0, #54	; 0x36
 8002682:	f000 f9bb 	bl	80029fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_InitTick+0xf0>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e002      	b.n	8002694 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002698:	4618      	mov	r0, r3
 800269a:	3738      	adds	r7, #56	; 0x38
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	20000f08 	.word	0x20000f08
 80026ac:	40001000 	.word	0x40001000
 80026b0:	20000004 	.word	0x20000004

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM6_DAC_IRQHandler+0x10>)
 80026e6:	f003 fd11 	bl	800610c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000f08 	.word	0x20000f08

080026f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <OTG_FS_IRQHandler+0x10>)
 80026fa:	f000 ffda 	bl	80036b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20006e1c 	.word	0x20006e1c

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f00c fc86 	bl	800f048 <__errno>
 800273c:	4603      	mov	r3, r0
 800273e:	220c      	movs	r2, #12
 8002740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20080000 	.word	0x20080000
 8002768:	00000400 	.word	0x00000400
 800276c:	20000f54 	.word	0x20000f54
 8002770:	20007470 	.word	0x20007470

08002774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c2:	f7ff ffd7 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f00c fc45 	bl	800f054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7ff fa77 	bl	8001cbc <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80027dc:	0800fefc 	.word	0x0800fefc
  ldr r2, =_sbss
 80027e0:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80027e4:	2000746c 	.word	0x2000746c

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>

080027ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ee:	2003      	movs	r0, #3
 80027f0:	f000 f8f9 	bl	80029e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f4:	200f      	movs	r0, #15
 80027f6:	f7ff fee3 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fa:	f7ff fd49 	bl	8002290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x20>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x24>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_IncTick+0x24>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000008 	.word	0x20000008
 8002828:	20000f58 	.word	0x20000f58

0800282c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_GetTick+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000f58 	.word	0x20000f58

08002844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff ffee 	bl	800282c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d005      	beq.n	800286a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_Delay+0x44>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800286a:	bf00      	nop
 800286c:	f7ff ffde 	bl	800282c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	429a      	cmp	r2, r3
 800287a:	d8f7      	bhi.n	800286c <HAL_Delay+0x28>
  {
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000008 	.word	0x20000008

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <__NVIC_SetPriorityGrouping+0x40>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ba:	4a04      	ldr	r2, [pc, #16]	; (80028cc <__NVIC_SetPriorityGrouping+0x40>)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	60d3      	str	r3, [r2, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00
 80028d0:	05fa0000 	.word	0x05fa0000

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ff4c 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0e:	f7ff ff61 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	6978      	ldr	r0, [r7, #20]
 8002a1a:	f7ff ffb1 	bl	8002980 <NVIC_EncodePriority>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff80 	bl	800292c <__NVIC_SetPriority>
}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff54 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06a      	b.n	8002b38 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2223      	movs	r2, #35	; 0x23
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff fc33 	bl	80022e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_ETH_Init+0xf0>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a30      	ldr	r2, [pc, #192]	; (8002b40 <HAL_ETH_Init+0xf0>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_ETH_Init+0xf0>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_ETH_Init+0xf4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <HAL_ETH_Init+0xf4>)
 8002a98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_ETH_Init+0xf4>)
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4927      	ldr	r1, [pc, #156]	; (8002b44 <HAL_ETH_Init+0xf4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_ETH_Init+0xf4>)
 8002aae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac8:	f7ff feb0 	bl	800282c <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ace:	e011      	b.n	8002af4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ad0:	f7ff feac 	bl	800282c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ade:	d909      	bls.n	8002af4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	22e0      	movs	r2, #224	; 0xe0
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e021      	b.n	8002b38 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e4      	bne.n	8002ad0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f958 	bl	8002dbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f9ff 	bl	8002f10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa55 	bl	8002fc2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f9bd 	bl	8002ea0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2210      	movs	r2, #16
 8002b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800

08002b48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <ETH_SetMACConfig+0x15c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	7c1b      	ldrb	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <ETH_SetMACConfig+0x28>
 8002b6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b6e:	e000      	b.n	8002b72 <ETH_SetMACConfig+0x2a>
 8002b70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	7c5b      	ldrb	r3, [r3, #17]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <ETH_SetMACConfig+0x38>
 8002b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b7e:	e000      	b.n	8002b82 <ETH_SetMACConfig+0x3a>
 8002b80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	7fdb      	ldrb	r3, [r3, #31]
 8002b8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002b90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	7f92      	ldrb	r2, [r2, #30]
 8002b9c:	2a00      	cmp	r2, #0
 8002b9e:	d102      	bne.n	8002ba6 <ETH_SetMACConfig+0x5e>
 8002ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba4:	e000      	b.n	8002ba8 <ETH_SetMACConfig+0x60>
 8002ba6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ba8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	7f1b      	ldrb	r3, [r3, #28]
 8002bae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bb0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002bbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002bc6:	2a00      	cmp	r2, #0
 8002bc8:	d102      	bne.n	8002bd0 <ETH_SetMACConfig+0x88>
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	e000      	b.n	8002bd2 <ETH_SetMACConfig+0x8a>
 8002bd0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bd2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	7bdb      	ldrb	r3, [r3, #15]
 8002bd8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002be0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002be8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bea:	4313      	orrs	r3, r2
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff fe1e 	bl	8002844 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c2e:	2a00      	cmp	r2, #0
 8002c30:	d101      	bne.n	8002c36 <ETH_SetMACConfig+0xee>
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	e000      	b.n	8002c38 <ETH_SetMACConfig+0xf0>
 8002c36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c46:	2a01      	cmp	r2, #1
 8002c48:	d101      	bne.n	8002c4e <ETH_SetMACConfig+0x106>
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	e000      	b.n	8002c50 <ETH_SetMACConfig+0x108>
 8002c4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002c58:	2a01      	cmp	r2, #1
 8002c5a:	d101      	bne.n	8002c60 <ETH_SetMACConfig+0x118>
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	e000      	b.n	8002c62 <ETH_SetMACConfig+0x11a>
 8002c60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002c6a:	2a01      	cmp	r2, #1
 8002c6c:	d101      	bne.n	8002c72 <ETH_SetMACConfig+0x12a>
 8002c6e:	2202      	movs	r2, #2
 8002c70:	e000      	b.n	8002c74 <ETH_SetMACConfig+0x12c>
 8002c72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c74:	4313      	orrs	r3, r2
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7ff fdd9 	bl	8002844 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	ff20810f 	.word	0xff20810f

08002ca8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <ETH_SetDMAConfig+0x110>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	7b1b      	ldrb	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <ETH_SetDMAConfig+0x2c>
 8002cce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cd2:	e000      	b.n	8002cd6 <ETH_SetDMAConfig+0x2e>
 8002cd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	7b5b      	ldrb	r3, [r3, #13]
 8002cda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	7f52      	ldrb	r2, [r2, #29]
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d102      	bne.n	8002cec <ETH_SetDMAConfig+0x44>
 8002ce6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cea:	e000      	b.n	8002cee <ETH_SetDMAConfig+0x46>
 8002cec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	7b9b      	ldrb	r3, [r3, #14]
 8002cf4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cf6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002cfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	7f1b      	ldrb	r3, [r3, #28]
 8002d02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	7f9b      	ldrb	r3, [r3, #30]
 8002d0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7ff fd80 	bl	8002844 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	791b      	ldrb	r3, [r3, #4]
 8002d56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002d72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff fd51 	bl	8002844 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	f8de3f23 	.word	0xf8de3f23

08002dbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b0a6      	sub	sp, #152	; 0x98
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fe86 	bl	8002b48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff08 	bl	8002ca8 <ETH_SetDMAConfig>
}
 8002e98:	bf00      	nop
 8002e9a:	3798      	adds	r7, #152	; 0x98
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3305      	adds	r3, #5
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	3204      	adds	r2, #4
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <ETH_MACAddressConfig+0x68>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3303      	adds	r3, #3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	061a      	lsls	r2, r3, #24
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <ETH_MACAddressConfig+0x6c>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	6013      	str	r3, [r2, #0]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40028040 	.word	0x40028040
 8002f0c:	40028044 	.word	0x40028044

08002f10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e03e      	b.n	8002f9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	3206      	adds	r2, #6
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d80c      	bhi.n	8002f80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	e004      	b.n	8002f8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d9bd      	bls.n	8002f1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb4:	611a      	str	r2, [r3, #16]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e046      	b.n	800305e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6919      	ldr	r1, [r3, #16]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800300c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003014:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	3212      	adds	r2, #18
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d80c      	bhi.n	800304e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6919      	ldr	r1, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	60da      	str	r2, [r3, #12]
 800304c:	e004      	b.n	8003058 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d9b5      	bls.n	8002fd0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308e:	60da      	str	r2, [r3, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e175      	b.n	80033a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030bc:	2201      	movs	r2, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f040 8164 	bne.w	80033a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_GPIO_Init+0x56>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d130      	bne.n	8003154 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b03      	cmp	r3, #3
 800315e:	d017      	beq.n	8003190 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d123      	bne.n	80031e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80be 	beq.w	80033a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_GPIO_Init+0x324>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a65      	ldr	r2, [pc, #404]	; (80033c0 <HAL_GPIO_Init+0x324>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_GPIO_Init+0x324>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800323e:	4a61      	ldr	r2, [pc, #388]	; (80033c4 <HAL_GPIO_Init+0x328>)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_GPIO_Init+0x32c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d037      	beq.n	80032da <HAL_GPIO_Init+0x23e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <HAL_GPIO_Init+0x330>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d031      	beq.n	80032d6 <HAL_GPIO_Init+0x23a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <HAL_GPIO_Init+0x236>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a55      	ldr	r2, [pc, #340]	; (80033d4 <HAL_GPIO_Init+0x338>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d025      	beq.n	80032ce <HAL_GPIO_Init+0x232>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_GPIO_Init+0x33c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <HAL_GPIO_Init+0x22e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a53      	ldr	r2, [pc, #332]	; (80033dc <HAL_GPIO_Init+0x340>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x22a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_GPIO_Init+0x344>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x226>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a51      	ldr	r2, [pc, #324]	; (80033e4 <HAL_GPIO_Init+0x348>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x222>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <HAL_GPIO_Init+0x34c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x21e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	; (80033ec <HAL_GPIO_Init+0x350>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x21a>
 80032b2:	2309      	movs	r3, #9
 80032b4:	e012      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032b6:	230a      	movs	r3, #10
 80032b8:	e010      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032ba:	2308      	movs	r3, #8
 80032bc:	e00e      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032be:	2307      	movs	r3, #7
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_GPIO_Init+0x328>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_GPIO_Init+0x354>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331e:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_GPIO_Init+0x354>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_GPIO_Init+0x354>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <HAL_GPIO_Init+0x354>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f ae86 	bls.w	80030bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40022400 	.word	0x40022400
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003428:	b08f      	sub	sp, #60	; 0x3c
 800342a:	af0a      	add	r7, sp, #40	; 0x28
 800342c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e116      	b.n	8003666 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f00b f8b4 	bl	800e5c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f004 fb4b 	bl	8007b12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	687e      	ldr	r6, [r7, #4]
 8003484:	466d      	mov	r5, sp
 8003486:	f106 0410 	add.w	r4, r6, #16
 800348a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003496:	e885 0003 	stmia.w	r5, {r0, r1}
 800349a:	1d33      	adds	r3, r6, #4
 800349c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349e:	6838      	ldr	r0, [r7, #0]
 80034a0:	f004 fa2c 	bl	80078fc <USB_CoreInit>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0d7      	b.n	8003666 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fb39 	bl	8007b34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e04a      	b.n	800355e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	333d      	adds	r3, #61	; 0x3d
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	333c      	adds	r3, #60	; 0x3c
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	b298      	uxth	r0, r3
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3344      	adds	r3, #68	; 0x44
 8003504:	4602      	mov	r2, r0
 8003506:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3340      	adds	r3, #64	; 0x40
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3348      	adds	r3, #72	; 0x48
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334c      	adds	r3, #76	; 0x4c
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3354      	adds	r3, #84	; 0x54
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	3301      	adds	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3af      	bcc.n	80034c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e044      	b.n	80035f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3b5      	bcc.n	800356e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	687e      	ldr	r6, [r7, #4]
 800360a:	466d      	mov	r5, sp
 800360c:	f106 0410 	add.w	r4, r6, #16
 8003610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003618:	e894 0003 	ldmia.w	r4, {r0, r1}
 800361c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003620:	1d33      	adds	r3, r6, #4
 8003622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f004 fad1 	bl	8007bcc <USB_DevInit>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e014      	b.n	8003666 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 f97b 	bl	8004950 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f005 fc1f 	bl	8008ea2 <USB_DevDisconnect>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800366e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_PCD_Start+0x16>
 8003680:	2302      	movs	r3, #2
 8003682:	e012      	b.n	80036aa <HAL_PCD_Start+0x3c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 fa2d 	bl	8007af0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f005 fbe0 	bl	8008e60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036b2:	b590      	push	{r4, r7, lr}
 80036b4:	b08d      	sub	sp, #52	; 0x34
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 fc9e 	bl	800900a <USB_GetMode>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 84b7 	bne.w	8004044 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fc02 	bl	8008ee4 <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 84ad 	beq.w	8004042 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f005 fbef 	bl	8008ee4 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d107      	bne.n	8003720 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f002 0202 	and.w	r2, r2, #2
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f005 fbdd 	bl	8008ee4 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d161      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	0c5b      	lsrs	r3, r3, #17
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	2b02      	cmp	r3, #2
 800376e:	d124      	bne.n	80037ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d035      	beq.n	80037e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	6a38      	ldr	r0, [r7, #32]
 8003790:	f005 fa14 	bl	8008bbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a0:	441a      	add	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b2:	441a      	add	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
 80037b8:	e016      	b.n	80037e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	0c5b      	lsrs	r3, r3, #17
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d110      	bne.n	80037e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037cc:	2208      	movs	r2, #8
 80037ce:	4619      	mov	r1, r3
 80037d0:	6a38      	ldr	r0, [r7, #32]
 80037d2:	f005 f9f3 	bl	8008bbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e2:	441a      	add	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0210 	orr.w	r2, r2, #16
 80037f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f005 fb71 	bl	8008ee4 <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800380c:	f040 80a7 	bne.w	800395e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f005 fb76 	bl	8008f0a <USB_ReadDevAllOutEpInterrupt>
 800381e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003820:	e099      	b.n	8003956 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 808e 	beq.w	800394a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f005 fb9a 	bl	8008f72 <USB_ReadDevOutEPInterrupt>
 800383e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2301      	movs	r3, #1
 800385a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800385c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fef0 	bl	8004644 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	2308      	movs	r3, #8
 800387e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ffc6 	bl	8004814 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	461a      	mov	r2, r3
 80038a0:	2310      	movs	r3, #16
 80038a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d030      	beq.n	8003910 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d109      	bne.n	80038ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	3304      	adds	r3, #4
 80038e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	78db      	ldrb	r3, [r3, #3]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f00a ff95 	bl	800e828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2302      	movs	r3, #2
 800390e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003926:	461a      	mov	r2, r3
 8003928:	2320      	movs	r3, #32
 800392a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003948:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	3301      	adds	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af62 	bne.w	8003822 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f005 fabe 	bl	8008ee4 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003972:	f040 80db 	bne.w	8003b2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f005 fadf 	bl	8008f3e <USB_ReadDevAllInEpInterrupt>
 8003980:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003986:	e0cd      	b.n	8003b24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80c2 	beq.w	8003b18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f005 fb05 	bl	8008fae <USB_ReadDevInEPInterrupt>
 80039a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d057      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4013      	ands	r3, r2
 80039d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2301      	movs	r3, #1
 80039e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d132      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334c      	adds	r3, #76	; 0x4c
 80039fe:	6819      	ldr	r1, [r3, #0]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4419      	add	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4403      	add	r3, r0
 8003a22:	334c      	adds	r3, #76	; 0x4c
 8003a24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d113      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x3a2>
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3354      	adds	r3, #84	; 0x54
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2101      	movs	r1, #1
 8003a50:	f005 fb0e 	bl	8009070 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f00a fe5f 	bl	800e71e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	2308      	movs	r3, #8
 8003a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	2310      	movs	r3, #16
 8003a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2340      	movs	r3, #64	; 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d023      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac0:	6a38      	ldr	r0, [r7, #32]
 8003ac2:	f004 f9e1 	bl	8007e88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3338      	adds	r3, #56	; 0x38
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	78db      	ldrb	r3, [r3, #3]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f00a feac 	bl	800e84c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	2302      	movs	r3, #2
 8003b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fd08 	bl	8004528 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f af2e 	bne.w	8003988 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f005 f9d7 	bl	8008ee4 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b40:	d122      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d108      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f00b f826 	bl	800ebbc <HAL_PCDEx_LPM_Callback>
 8003b70:	e002      	b.n	8003b78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f00a fe4a 	bl	800e80c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f005 f9a9 	bl	8008ee4 <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9c:	d112      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f00a fe06 	bl	800e7c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f005 f98b 	bl	8008ee4 <USB_ReadInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd8:	d121      	bne.n	8003c1e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003be8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d111      	bne.n	8003c18 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	f003 020f 	and.w	r2, r3, #15
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c0e:	2101      	movs	r1, #1
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f00a ffd3 	bl	800ebbc <HAL_PCDEx_LPM_Callback>
 8003c16:	e002      	b.n	8003c1e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f00a fdd1 	bl	800e7c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f005 f95e 	bl	8008ee4 <USB_ReadInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c32:	f040 80b7 	bne.w	8003da4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2110      	movs	r1, #16
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 f919 	bl	8007e88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5a:	e046      	b.n	8003cea <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ce2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d3b3      	bcc.n	8003c5c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d016      	beq.n	8003d3e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f043 030b 	orr.w	r3, r3, #11
 8003d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d36:	f043 030b 	orr.w	r3, r3, #11
 8003d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3c:	e015      	b.n	8003d6a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003d52:	4313      	orrs	r3, r2
 8003d54:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d64:	f043 030b 	orr.w	r3, r3, #11
 8003d68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f005 f96e 	bl	8009070 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f005 f89b 	bl	8008ee4 <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db8:	d124      	bne.n	8003e04 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f005 f932 	bl	8009028 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f004 f8da 	bl	8007f82 <USB_GetDevSpeed>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681c      	ldr	r4, [r3, #0]
 8003dda:	f001 fadd 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 8003dde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	4620      	mov	r0, r4
 8003dea:	f003 fddf 	bl	80079ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f00a fcbd 	bl	800e76e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f005 f86b 	bl	8008ee4 <USB_ReadInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d10a      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f00a fc9a 	bl	800e752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f002 0208 	and.w	r2, r2, #8
 8003e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f005 f856 	bl	8008ee4 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d122      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e4e:	2301      	movs	r3, #1
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e014      	b.n	8003e7e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fb27 	bl	80044c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d3e5      	bcc.n	8003e54 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f005 f829 	bl	8008ee4 <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9c:	d13b      	bne.n	8003f16 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e02b      	b.n	8003efc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3340      	adds	r3, #64	; 0x40
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d115      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003eca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da12      	bge.n	8003ef6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	333f      	adds	r3, #63	; 0x3f
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fae8 	bl	80044c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3ce      	bcc.n	8003ea4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f004 ffe2 	bl	8008ee4 <USB_ReadInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f2a:	d155      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f30:	e045      	b.n	8003fbe <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d12e      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da2b      	bge.n	8003fb8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d121      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb4:	6053      	str	r3, [r2, #4]
            break;
 8003fb6:	e007      	b.n	8003fc8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	3301      	adds	r3, #1
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3b4      	bcc.n	8003f32 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f004 ff81 	bl	8008ee4 <USB_ReadInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d10a      	bne.n	8004004 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f00a fc3e 	bl	800e870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f004 ff6b 	bl	8008ee4 <USB_ReadInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d115      	bne.n	8004044 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f00a fc2e 	bl	800e88c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e000      	b.n	8004044 <HAL_PCD_IRQHandler+0x992>
      return;
 8004042:	bf00      	nop
    }
  }
}
 8004044:	3734      	adds	r7, #52	; 0x34
 8004046:	46bd      	mov	sp, r7
 8004048:	bd90      	pop	{r4, r7, pc}

0800404a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_PCD_SetAddress+0x1a>
 8004060:	2302      	movs	r3, #2
 8004062:	e013      	b.n	800408c <HAL_PCD_SetAddress+0x42>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f004 fec9 	bl	8008e14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	4608      	mov	r0, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	70fb      	strb	r3, [r7, #3]
 80040a6:	460b      	mov	r3, r1
 80040a8:	803b      	strh	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da0f      	bge.n	80040da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	3338      	adds	r3, #56	; 0x38
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	705a      	strb	r2, [r3, #1]
 80040d8:	e00f      	b.n	80040fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	3304      	adds	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004106:	883a      	ldrh	r2, [r7, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	78ba      	ldrb	r2, [r7, #2]
 8004110:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004124:	78bb      	ldrb	r3, [r7, #2]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d102      	bne.n	8004130 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_PCD_EP_Open+0xaa>
 800413a:	2302      	movs	r3, #2
 800413c:	e00e      	b.n	800415c <HAL_PCD_EP_Open+0xc8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	4618      	mov	r0, r3
 800414e:	f003 ff3d 	bl	8007fcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800415a:	7afb      	ldrb	r3, [r7, #11]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004174:	2b00      	cmp	r3, #0
 8004176:	da0f      	bge.n	8004198 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	3338      	adds	r3, #56	; 0x38
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	705a      	strb	r2, [r3, #1]
 8004196:	e00f      	b.n	80041b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_PCD_EP_Close+0x6e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e00e      	b.n	80041f0 <HAL_PCD_EP_Close+0x8c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 ff7b 	bl	80080dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	460b      	mov	r3, r1
 8004206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004208:	7afb      	ldrb	r3, [r7, #11]
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	3304      	adds	r3, #4
 8004220:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	6979      	ldr	r1, [r7, #20]
 800426c:	f004 fa62 	bl	8008734 <USB_EP0StartXfer>
 8004270:	e008      	b.n	8004284 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	f004 f808 	bl	8008294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042b0:	681b      	ldr	r3, [r3, #0]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b086      	sub	sp, #24
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	460b      	mov	r3, r1
 80042cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	3338      	adds	r3, #56	; 0x38
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	3304      	adds	r3, #4
 80042e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2201      	movs	r2, #1
 80042fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042fe:	7afb      	ldrb	r3, [r7, #11]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	b2da      	uxtb	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004318:	7afb      	ldrb	r3, [r7, #11]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	f004 fa00 	bl	8008734 <USB_EP0StartXfer>
 8004334:	e008      	b.n	8004348 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6979      	ldr	r1, [r7, #20]
 8004344:	f003 ffa6 	bl	8008294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	f003 020f 	and.w	r2, r3, #15
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d901      	bls.n	8004370 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e050      	b.n	8004412 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004374:	2b00      	cmp	r3, #0
 8004376:	da0f      	bge.n	8004398 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3338      	adds	r3, #56	; 0x38
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	705a      	strb	r2, [r3, #1]
 8004396:	e00d      	b.n	80043b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_PCD_EP_SetStall+0x82>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e01e      	b.n	8004412 <HAL_PCD_EP_SetStall+0xc0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f004 fc42 	bl	8008c6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	b2d9      	uxtb	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004402:	461a      	mov	r2, r3
 8004404:	f004 fe34 	bl	8009070 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d901      	bls.n	8004438 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e042      	b.n	80044be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800443c:	2b00      	cmp	r3, #0
 800443e:	da0f      	bge.n	8004460 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	3338      	adds	r3, #56	; 0x38
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	705a      	strb	r2, [r3, #1]
 800445e:	e00f      	b.n	8004480 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_PCD_EP_ClrStall+0x86>
 800449c:	2302      	movs	r3, #2
 800449e:	e00e      	b.n	80044be <HAL_PCD_EP_ClrStall+0xa4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f004 fc4a 	bl	8008d48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	da0c      	bge.n	80044f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	3338      	adds	r3, #56	; 0x38
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	3304      	adds	r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e00c      	b.n	800450e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	3304      	adds	r3, #4
 800450c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68f9      	ldr	r1, [r7, #12]
 8004514:	4618      	mov	r0, r3
 8004516:	f004 fa69 	bl	80089ec <USB_EPStopXfer>
 800451a:	4603      	mov	r3, r0
 800451c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800451e:	7afb      	ldrb	r3, [r7, #11]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	3338      	adds	r3, #56	; 0x38
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4413      	add	r3, r2
 800454c:	3304      	adds	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	429a      	cmp	r2, r3
 800455a:	d901      	bls.n	8004560 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e06c      	b.n	800463a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	429a      	cmp	r2, r3
 8004574:	d902      	bls.n	800457c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3303      	adds	r3, #3
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004584:	e02b      	b.n	80045de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3303      	adds	r3, #3
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6919      	ldr	r1, [r3, #16]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4603      	mov	r3, r0
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f004 fabd 	bl	8008b40 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1a      	ldr	r2, [r3, #32]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d809      	bhi.n	8004608 <PCD_WriteEmptyTxFifo+0xe0>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1a      	ldr	r2, [r3, #32]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d203      	bcs.n	8004608 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1be      	bne.n	8004586 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	429a      	cmp	r2, r3
 8004612:	d811      	bhi.n	8004638 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	43db      	mvns	r3, r3
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004634:	4013      	ands	r3, r2
 8004636:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	333c      	adds	r3, #60	; 0x3c
 800465c:	3304      	adds	r3, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d17b      	bne.n	8004772 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4a61      	ldr	r2, [pc, #388]	; (800480c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	f240 80b9 	bls.w	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80b3 	beq.w	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ac:	6093      	str	r3, [r2, #8]
 80046ae:	e0a7      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	2320      	movs	r3, #32
 80046ca:	6093      	str	r3, [r2, #8]
 80046cc:	e098      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 8093 	bne.w	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4a4b      	ldr	r2, [pc, #300]	; (800480c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d90f      	bls.n	8004702 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fe:	6093      	str	r3, [r2, #8]
 8004700:	e07e      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3304      	adds	r3, #4
 8004716:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	0159      	lsls	r1, r3, #5
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	440b      	add	r3, r1
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d114      	bne.n	8004764 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800474c:	461a      	mov	r2, r3
 800474e:	2101      	movs	r1, #1
 8004750:	f004 fc8e 	bl	8009070 <USB_EP0_OutStart>
 8004754:	e006      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	441a      	add	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f009 ffbc 	bl	800e6e8 <HAL_PCD_DataOutStageCallback>
 8004770:	e046      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d124      	bne.n	80047c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	461a      	mov	r2, r3
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	6093      	str	r3, [r2, #8]
 8004798:	e032      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	461a      	mov	r2, r3
 80047b2:	2320      	movs	r3, #32
 80047b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f009 ff93 	bl	800e6e8 <HAL_PCD_DataOutStageCallback>
 80047c2:	e01d      	b.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d114      	bne.n	80047f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047ec:	461a      	mov	r2, r3
 80047ee:	2100      	movs	r1, #0
 80047f0:	f004 fc3e 	bl	8009070 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f009 ff74 	bl	800e6e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	4f54300a 	.word	0x4f54300a
 8004810:	4f54310a 	.word	0x4f54310a

08004814 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	333c      	adds	r3, #60	; 0x3c
 800482c:	3304      	adds	r3, #4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a15      	ldr	r2, [pc, #84]	; (800489c <PCD_EP_OutSetupPacket_int+0x88>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d90e      	bls.n	8004868 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004850:	2b00      	cmp	r3, #0
 8004852:	d009      	beq.n	8004868 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	461a      	mov	r2, r3
 8004862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004866:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f009 ff2b 	bl	800e6c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <PCD_EP_OutSetupPacket_int+0x88>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d90c      	bls.n	8004890 <PCD_EP_OutSetupPacket_int+0x7c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d108      	bne.n	8004890 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004888:	461a      	mov	r2, r3
 800488a:	2101      	movs	r1, #1
 800488c:	f004 fbf0 	bl	8009070 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	4f54300a 	.word	0x4f54300a

080048a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
 80048ac:	4613      	mov	r3, r2
 80048ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048be:	883b      	ldrh	r3, [r7, #0]
 80048c0:	0419      	lsls	r1, r3, #16
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
 80048cc:	e028      	b.n	8004920 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048dc:	2300      	movs	r3, #0
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	e00d      	b.n	80048fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	3340      	adds	r3, #64	; 0x40
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	3301      	adds	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	3b01      	subs	r3, #1
 8004904:	429a      	cmp	r2, r3
 8004906:	d3ec      	bcc.n	80048e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004908:	883b      	ldrh	r3, [r7, #0]
 800490a:	0418      	lsls	r0, r3, #16
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	3b01      	subs	r3, #1
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	4302      	orrs	r2, r0
 8004918:	3340      	adds	r3, #64	; 0x40
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_PCDEx_ActivateLPM+0x44>)
 8004980:	4313      	orrs	r3, r2
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	10000003 	.word	0x10000003

08004998 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40007000 	.word	0x40007000

080049b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049e6:	f7fd ff21 	bl	800282c <HAL_GetTick>
 80049ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049ec:	e009      	b.n	8004a02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049ee:	f7fd ff1d 	bl	800282c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049fc:	d901      	bls.n	8004a02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e022      	b.n	8004a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0e:	d1ee      	bne.n	80049ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0f      	ldr	r2, [pc, #60]	; (8004a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a1c:	f7fd ff06 	bl	800282c <HAL_GetTick>
 8004a20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a22:	e009      	b.n	8004a38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a24:	f7fd ff02 	bl	800282c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a32:	d901      	bls.n	8004a38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e007      	b.n	8004a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a44:	d1ee      	bne.n	8004a24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40007000 	.word	0x40007000

08004a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a60:	2300      	movs	r3, #0
 8004a62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e29b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8087 	beq.w	8004b8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7c:	4b96      	ldr	r3, [pc, #600]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d00c      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a88:	4b93      	ldr	r3, [pc, #588]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d112      	bne.n	8004aba <HAL_RCC_OscConfig+0x62>
 8004a94:	4b90      	ldr	r3, [pc, #576]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa0:	d10b      	bne.n	8004aba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa2:	4b8d      	ldr	r3, [pc, #564]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x130>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d168      	bne.n	8004b88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e275      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x7a>
 8004ac4:	4b84      	ldr	r3, [pc, #528]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a83      	ldr	r2, [pc, #524]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e02e      	b.n	8004b30 <HAL_RCC_OscConfig+0xd8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x9c>
 8004ada:	4b7f      	ldr	r3, [pc, #508]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7e      	ldr	r2, [pc, #504]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b7c      	ldr	r3, [pc, #496]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7b      	ldr	r2, [pc, #492]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e01d      	b.n	8004b30 <HAL_RCC_OscConfig+0xd8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0xc0>
 8004afe:	4b76      	ldr	r3, [pc, #472]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a75      	ldr	r2, [pc, #468]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a72      	ldr	r2, [pc, #456]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0xd8>
 8004b18:	4b6f      	ldr	r3, [pc, #444]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6e      	ldr	r2, [pc, #440]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a6b      	ldr	r2, [pc, #428]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fe78 	bl	800282c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fd fe74 	bl	800282c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e229      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b61      	ldr	r3, [pc, #388]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0xe8>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fe64 	bl	800282c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fd fe60 	bl	800282c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e215      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x110>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d069      	beq.n	8004c6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b96:	4b50      	ldr	r3, [pc, #320]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba2:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d11c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x190>
 8004bae:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d116      	bne.n	8004be8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x17a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e1e9      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	493d      	ldr	r1, [pc, #244]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	e040      	b.n	8004c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d023      	beq.n	8004c38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fe16 	bl	800282c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7fd fe12 	bl	800282c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1c7      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c22:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4929      	ldr	r1, [pc, #164]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
 8004c36:	e018      	b.n	8004c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c38:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fd fdf2 	bl	800282c <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fd fdee 	bl	800282c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1a3      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d038      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d019      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8a:	f7fd fdcf 	bl	800282c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c92:	f7fd fdcb 	bl	800282c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e180      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x23a>
 8004cb0:	e01a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb6:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbe:	f7fd fdb5 	bl	800282c <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc6:	f7fd fdb1 	bl	800282c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d903      	bls.n	8004cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e166      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
 8004cd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ee      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a4 	beq.w	8004e3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf6:	4b8c      	ldr	r3, [pc, #560]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	4b89      	ldr	r3, [pc, #548]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a88      	ldr	r2, [pc, #544]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0e:	4b86      	ldr	r3, [pc, #536]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d1e:	4b83      	ldr	r3, [pc, #524]	; (8004f2c <HAL_RCC_OscConfig+0x4d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d2a:	4b80      	ldr	r3, [pc, #512]	; (8004f2c <HAL_RCC_OscConfig+0x4d4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a7f      	ldr	r2, [pc, #508]	; (8004f2c <HAL_RCC_OscConfig+0x4d4>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fd fd79 	bl	800282c <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fd fd75 	bl	800282c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e12a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d50:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <HAL_RCC_OscConfig+0x4d4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <HAL_RCC_OscConfig+0x31a>
 8004d64:	4b70      	ldr	r3, [pc, #448]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a6f      	ldr	r2, [pc, #444]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d70:	e02d      	b.n	8004dce <HAL_RCC_OscConfig+0x376>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x33c>
 8004d7a:	4b6b      	ldr	r3, [pc, #428]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	4a6a      	ldr	r2, [pc, #424]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
 8004d86:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70
 8004d92:	e01c      	b.n	8004dce <HAL_RCC_OscConfig+0x376>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b05      	cmp	r3, #5
 8004d9a:	d10c      	bne.n	8004db6 <HAL_RCC_OscConfig+0x35e>
 8004d9c:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	4a61      	ldr	r2, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	6713      	str	r3, [r2, #112]	; 0x70
 8004da8:	4b5f      	ldr	r3, [pc, #380]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a5e      	ldr	r2, [pc, #376]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e00b      	b.n	8004dce <HAL_RCC_OscConfig+0x376>
 8004db6:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a5b      	ldr	r2, [pc, #364]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a58      	ldr	r2, [pc, #352]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d015      	beq.n	8004e02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fd fd29 	bl	800282c <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fd fd25 	bl	800282c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0d8      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ee      	beq.n	8004dde <HAL_RCC_OscConfig+0x386>
 8004e00:	e014      	b.n	8004e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fd fd13 	bl	800282c <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fd fd0f 	bl	800282c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0c2      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ee      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	4a3c      	ldr	r2, [pc, #240]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80ae 	beq.w	8004fa4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e48:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d06d      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d14b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a31      	ldr	r2, [pc, #196]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fce0 	bl	800282c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fcdc 	bl	800282c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e091      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	071b      	lsls	r3, r3, #28
 8004eba:	491b      	ldr	r1, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fcae 	bl	800282c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed4:	f7fd fcaa 	bl	800282c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e05f      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x47c>
 8004ef2:	e057      	b.n	8004fa4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fd fc94 	bl	800282c <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fd fc90 	bl	800282c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e045      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_RCC_OscConfig+0x4d0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x4b0>
 8004f26:	e03d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x54c>
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f30:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <HAL_RCC_OscConfig+0x558>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d030      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d129      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d122      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d119      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d10f      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800

08004fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0d0      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b6a      	ldr	r3, [pc, #424]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d910      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 020f 	bic.w	r2, r3, #15
 8004fe2:	4965      	ldr	r1, [pc, #404]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0b8      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a58      	ldr	r2, [pc, #352]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800501e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800502c:	4b53      	ldr	r3, [pc, #332]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4a52      	ldr	r2, [pc, #328]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005036:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	494d      	ldr	r1, [pc, #308]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d040      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b47      	ldr	r3, [pc, #284]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d115      	bne.n	8005096 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e07f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e073      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e06b      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b39      	ldr	r3, [pc, #228]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4936      	ldr	r1, [pc, #216]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fd fbc0 	bl	800282c <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fd fbbc 	bl	800282c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e053      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b2d      	ldr	r3, [pc, #180]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d210      	bcs.n	8005108 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 020f 	bic.w	r2, r3, #15
 80050ee:	4922      	ldr	r1, [pc, #136]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e032      	b.n	800516e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4916      	ldr	r1, [pc, #88]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	490e      	ldr	r1, [pc, #56]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005146:	f000 f821 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800514a:	4602      	mov	r2, r0
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	490a      	ldr	r1, [pc, #40]	; (8005180 <HAL_RCC_ClockConfig+0x1cc>)
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	fa22 f303 	lsr.w	r3, r2, r3
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <HAL_RCC_ClockConfig+0x1d0>)
 8005160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_ClockConfig+0x1d4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd fa2a 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023c00 	.word	0x40023c00
 800517c:	40023800 	.word	0x40023800
 8005180:	0800fda0 	.word	0x0800fda0
 8005184:	20000000 	.word	0x20000000
 8005188:	20000004 	.word	0x20000004

0800518c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800518c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005190:	b094      	sub	sp, #80	; 0x50
 8005192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	647b      	str	r3, [r7, #68]	; 0x44
 8005198:	2300      	movs	r3, #0
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	2300      	movs	r3, #0
 800519e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a4:	4b79      	ldr	r3, [pc, #484]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d00d      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x40>
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	f200 80e1 	bhi.w	8005378 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d003      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051be:	e0db      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b73      	ldr	r3, [pc, #460]	; (8005390 <HAL_RCC_GetSysClockFreq+0x204>)
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051c4:	e0db      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c6:	4b73      	ldr	r3, [pc, #460]	; (8005394 <HAL_RCC_GetSysClockFreq+0x208>)
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ca:	e0d8      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051cc:	4b6f      	ldr	r3, [pc, #444]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051d6:	4b6d      	ldr	r3, [pc, #436]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d063      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	4b6a      	ldr	r3, [pc, #424]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	2200      	movs	r2, #0
 80051ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
 80051fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051fe:	4622      	mov	r2, r4
 8005200:	462b      	mov	r3, r5
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	0159      	lsls	r1, r3, #5
 800520c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005210:	0150      	lsls	r0, r2, #5
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4621      	mov	r1, r4
 8005218:	1a51      	subs	r1, r2, r1
 800521a:	6139      	str	r1, [r7, #16]
 800521c:	4629      	mov	r1, r5
 800521e:	eb63 0301 	sbc.w	r3, r3, r1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005230:	4659      	mov	r1, fp
 8005232:	018b      	lsls	r3, r1, #6
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800523a:	4651      	mov	r1, sl
 800523c:	018a      	lsls	r2, r1, #6
 800523e:	4651      	mov	r1, sl
 8005240:	ebb2 0801 	subs.w	r8, r2, r1
 8005244:	4659      	mov	r1, fp
 8005246:	eb63 0901 	sbc.w	r9, r3, r1
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800525a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525e:	4690      	mov	r8, r2
 8005260:	4699      	mov	r9, r3
 8005262:	4623      	mov	r3, r4
 8005264:	eb18 0303 	adds.w	r3, r8, r3
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	462b      	mov	r3, r5
 800526c:	eb49 0303 	adc.w	r3, r9, r3
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800527e:	4629      	mov	r1, r5
 8005280:	024b      	lsls	r3, r1, #9
 8005282:	4621      	mov	r1, r4
 8005284:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005288:	4621      	mov	r1, r4
 800528a:	024a      	lsls	r2, r1, #9
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005292:	2200      	movs	r2, #0
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
 8005296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800529c:	f7fb f870 	bl	8000380 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a8:	e058      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052aa:	4b38      	ldr	r3, [pc, #224]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	099b      	lsrs	r3, r3, #6
 80052b0:	2200      	movs	r2, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	4611      	mov	r1, r2
 80052b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	2300      	movs	r3, #0
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	f04f 0000 	mov.w	r0, #0
 80052cc:	f04f 0100 	mov.w	r1, #0
 80052d0:	0159      	lsls	r1, r3, #5
 80052d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d6:	0150      	lsls	r0, r2, #5
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4641      	mov	r1, r8
 80052de:	ebb2 0a01 	subs.w	sl, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005300:	eb63 050b 	sbc.w	r5, r3, fp
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	00eb      	lsls	r3, r5, #3
 800530e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005312:	00e2      	lsls	r2, r4, #3
 8005314:	4614      	mov	r4, r2
 8005316:	461d      	mov	r5, r3
 8005318:	4643      	mov	r3, r8
 800531a:	18e3      	adds	r3, r4, r3
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	464b      	mov	r3, r9
 8005320:	eb45 0303 	adc.w	r3, r5, r3
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005332:	4629      	mov	r1, r5
 8005334:	028b      	lsls	r3, r1, #10
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800533c:	4621      	mov	r1, r4
 800533e:	028a      	lsls	r2, r1, #10
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005346:	2200      	movs	r2, #0
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	61fa      	str	r2, [r7, #28]
 800534c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005350:	f7fb f816 	bl	8000380 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	3301      	adds	r3, #1
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800536c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005376:	e002      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_RCC_GetSysClockFreq+0x204>)
 800537a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800537c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005380:	4618      	mov	r0, r3
 8005382:	3750      	adds	r7, #80	; 0x50
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	00f42400 	.word	0x00f42400
 8005394:	007a1200 	.word	0x007a1200

08005398 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_RCC_GetHCLKFreq+0x14>)
 800539e:	681b      	ldr	r3, [r3, #0]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000000 	.word	0x20000000

080053b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053b4:	f7ff fff0 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	0a9b      	lsrs	r3, r3, #10
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4903      	ldr	r1, [pc, #12]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023800 	.word	0x40023800
 80053d4:	0800fdb0 	.word	0x0800fdb0

080053d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053dc:	f7ff ffdc 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0b5b      	lsrs	r3, r3, #13
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800fdb0 	.word	0x0800fdb0

08005400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	220f      	movs	r2, #15
 800540e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0203 	and.w	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	08db      	lsrs	r3, r3, #3
 800543a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005442:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_RCC_GetClockConfig+0x60>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	40023c00 	.word	0x40023c00

08005464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d012      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800548c:	4b69      	ldr	r3, [pc, #420]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4a68      	ldr	r2, [pc, #416]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005492:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005496:	6093      	str	r3, [r2, #8]
 8005498:	4b66      	ldr	r3, [pc, #408]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	4964      	ldr	r1, [pc, #400]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d017      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054be:	4b5d      	ldr	r3, [pc, #372]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	4959      	ldr	r1, [pc, #356]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054fa:	4b4e      	ldr	r3, [pc, #312]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005500:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	494a      	ldr	r1, [pc, #296]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005518:	d101      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800551a:	2301      	movs	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005536:	2301      	movs	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 808b 	beq.w	800565e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005548:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	4a39      	ldr	r2, [pc, #228]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005552:	6413      	str	r3, [r2, #64]	; 0x40
 8005554:	4b37      	ldr	r3, [pc, #220]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005560:	4b35      	ldr	r3, [pc, #212]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a34      	ldr	r2, [pc, #208]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556c:	f7fd f95e 	bl	800282c <HAL_GetTick>
 8005570:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005574:	f7fd f95a 	bl	800282c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e38f      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005586:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005592:	4b28      	ldr	r3, [pc, #160]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d035      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d02e      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055b0:	4b20      	ldr	r3, [pc, #128]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ba:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055c6:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055d2:	4a18      	ldr	r2, [pc, #96]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055d8:	4b16      	ldr	r3, [pc, #88]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d114      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fd f922 	bl	800282c <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ea:	e00a      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fd f91e 	bl	800282c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e351      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0ee      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561a:	d111      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800562a:	400b      	ands	r3, r1
 800562c:	4901      	ldr	r1, [pc, #4]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
 8005632:	e00b      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005634:	40023800 	.word	0x40023800
 8005638:	40007000 	.word	0x40007000
 800563c:	0ffffcff 	.word	0x0ffffcff
 8005640:	4bac      	ldr	r3, [pc, #688]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4aab      	ldr	r2, [pc, #684]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005646:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800564a:	6093      	str	r3, [r2, #8]
 800564c:	4ba9      	ldr	r3, [pc, #676]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005658:	49a6      	ldr	r1, [pc, #664]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565a:	4313      	orrs	r3, r2
 800565c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800566a:	4ba2      	ldr	r3, [pc, #648]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005670:	4aa0      	ldr	r2, [pc, #640]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005676:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800567a:	4b9e      	ldr	r3, [pc, #632]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	499b      	ldr	r1, [pc, #620]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005698:	4b96      	ldr	r3, [pc, #600]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a6:	4993      	ldr	r1, [pc, #588]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ba:	4b8e      	ldr	r3, [pc, #568]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c8:	498a      	ldr	r1, [pc, #552]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056dc:	4b85      	ldr	r3, [pc, #532]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ea:	4982      	ldr	r1, [pc, #520]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056fe:	4b7d      	ldr	r3, [pc, #500]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4979      	ldr	r1, [pc, #484]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005720:	4b74      	ldr	r3, [pc, #464]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f023 0203 	bic.w	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	4971      	ldr	r1, [pc, #452]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005742:	4b6c      	ldr	r3, [pc, #432]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	f023 020c 	bic.w	r2, r3, #12
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005750:	4968      	ldr	r1, [pc, #416]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005764:	4b63      	ldr	r3, [pc, #396]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	4960      	ldr	r1, [pc, #384]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005786:	4b5b      	ldr	r3, [pc, #364]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005794:	4957      	ldr	r1, [pc, #348]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057a8:	4b52      	ldr	r3, [pc, #328]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	494f      	ldr	r1, [pc, #316]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057ca:	4b4a      	ldr	r3, [pc, #296]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	4946      	ldr	r1, [pc, #280]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057ec:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fa:	493e      	ldr	r1, [pc, #248]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800580e:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	4935      	ldr	r1, [pc, #212]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005830:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583e:	492d      	ldr	r1, [pc, #180]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d011      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005852:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005860:	4924      	ldr	r1, [pc, #144]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005870:	d101      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005882:	2301      	movs	r3, #1
 8005884:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a0:	4914      	ldr	r1, [pc, #80]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c4:	490b      	ldr	r1, [pc, #44]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e8:	4902      	ldr	r1, [pc, #8]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058f0:	e002      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005904:	4b8a      	ldr	r3, [pc, #552]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800590a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	4986      	ldr	r1, [pc, #536]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005928:	4b81      	ldr	r3, [pc, #516]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005938:	497d      	ldr	r1, [pc, #500]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d006      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80d6 	beq.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005954:	4b76      	ldr	r3, [pc, #472]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a75      	ldr	r2, [pc, #468]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800595e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fc ff64 	bl	800282c <HAL_GetTick>
 8005964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005968:	f7fc ff60 	bl	800282c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e195      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800597a:	4b6d      	ldr	r3, [pc, #436]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d021      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11d      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800599a:	4b65      	ldr	r3, [pc, #404]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059a8:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ae:	0e1b      	lsrs	r3, r3, #24
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	019a      	lsls	r2, r3, #6
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	041b      	lsls	r3, r3, #16
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	071b      	lsls	r3, r3, #28
 80059ce:	4958      	ldr	r1, [pc, #352]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d02e      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a00:	d129      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a02:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a10:	4b47      	ldr	r3, [pc, #284]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a16:	0f1b      	lsrs	r3, r3, #28
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	019a      	lsls	r2, r3, #6
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	431a      	orrs	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	071b      	lsls	r3, r3, #28
 8005a36:	493e      	ldr	r1, [pc, #248]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a3e:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a44:	f023 021f 	bic.w	r2, r3, #31
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	4938      	ldr	r1, [pc, #224]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01d      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a62:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a68:	0e1b      	lsrs	r3, r3, #24
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a70:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a76:	0f1b      	lsrs	r3, r3, #28
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	019a      	lsls	r2, r3, #6
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	071b      	lsls	r3, r3, #28
 8005a96:	4926      	ldr	r1, [pc, #152]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d011      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	019a      	lsls	r2, r3, #6
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	061b      	lsls	r3, r3, #24
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	071b      	lsls	r3, r3, #28
 8005ac6:	491a      	ldr	r1, [pc, #104]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ace:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ada:	f7fc fea7 	bl	800282c <HAL_GetTick>
 8005ade:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ae2:	f7fc fea3 	bl	800282c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b64      	cmp	r3, #100	; 0x64
 8005aee:	d901      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e0d8      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f0      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	f040 80ce 	bne.w	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b14:	f7fc fe8a 	bl	800282c <HAL_GetTick>
 8005b18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b1c:	f7fc fe86 	bl	800282c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d904      	bls.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0bb      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b34:	4b5e      	ldr	r3, [pc, #376]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b40:	d0ec      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02e      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d12a      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b6a:	4b51      	ldr	r3, [pc, #324]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b78:	4b4d      	ldr	r3, [pc, #308]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	0f1b      	lsrs	r3, r3, #28
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	019a      	lsls	r2, r3, #6
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	071b      	lsls	r3, r3, #28
 8005b9e:	4944      	ldr	r1, [pc, #272]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ba6:	4b42      	ldr	r3, [pc, #264]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	493d      	ldr	r1, [pc, #244]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d022      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd4:	d11d      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	0e1b      	lsrs	r3, r3, #24
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	0f1b      	lsrs	r3, r3, #28
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	019a      	lsls	r2, r3, #6
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	071b      	lsls	r3, r3, #28
 8005c0a:	4929      	ldr	r1, [pc, #164]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d028      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	0e1b      	lsrs	r3, r3, #24
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c2c:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	019a      	lsls	r2, r3, #6
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	431a      	orrs	r2, r3
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	4917      	ldr	r1, [pc, #92]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4911      	ldr	r1, [pc, #68]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7c:	f7fc fdd6 	bl	800282c <HAL_GetTick>
 8005c80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c84:	f7fc fdd2 	bl	800282c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	; 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e007      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca2:	d1ef      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3720      	adds	r7, #32
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800

08005cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e049      	b.n	8005d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fbb8 	bl	8002450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f000 fd30 	bl	8006758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d001      	beq.n	8005d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e054      	b.n	8005e26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d022      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d01d      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d018      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00e      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <HAL_TIM_Base_Start_IT+0xe0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x80>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <HAL_TIM_Base_Start_IT+0xe8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d115      	bne.n	8005e10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <HAL_TIM_Base_Start_IT+0xec>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b06      	cmp	r3, #6
 8005df4:	d015      	beq.n	8005e22 <HAL_TIM_Base_Start_IT+0xbe>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d011      	beq.n	8005e22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	e008      	b.n	8005e22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e000      	b.n	8005e24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40010400 	.word	0x40010400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40001800 	.word	0x40001800
 8005e50:	00010007 	.word	0x00010007

08005e54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e049      	b.n	8005efa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f841 	bl	8005f02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f000 fc60 	bl	8006758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <HAL_TIM_PWM_Start+0x24>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e03c      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x9e>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d109      	bne.n	8005f56 <HAL_TIM_PWM_Start+0x3e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	e02f      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x9e>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d109      	bne.n	8005f70 <HAL_TIM_PWM_Start+0x58>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e022      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x9e>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d109      	bne.n	8005f8a <HAL_TIM_PWM_Start+0x72>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	e015      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x9e>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d109      	bne.n	8005fa4 <HAL_TIM_PWM_Start+0x8c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	e008      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x9e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e092      	b.n	80060e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_PWM_Start+0xb6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	e023      	b.n	8006016 <HAL_TIM_PWM_Start+0xfe>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_PWM_Start+0xc6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fdc:	e01b      	b.n	8006016 <HAL_TIM_PWM_Start+0xfe>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0xd6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fec:	e013      	b.n	8006016 <HAL_TIM_PWM_Start+0xfe>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_PWM_Start+0xe6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ffc:	e00b      	b.n	8006016 <HAL_TIM_PWM_Start+0xfe>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b10      	cmp	r3, #16
 8006002:	d104      	bne.n	800600e <HAL_TIM_PWM_Start+0xf6>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800600c:	e003      	b.n	8006016 <HAL_TIM_PWM_Start+0xfe>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 ff32 	bl	8006e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a30      	ldr	r2, [pc, #192]	; (80060ec <HAL_TIM_PWM_Start+0x1d4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIM_PWM_Start+0x120>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_TIM_PWM_Start+0x1d8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_TIM_PWM_Start+0x124>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <HAL_TIM_PWM_Start+0x126>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a25      	ldr	r2, [pc, #148]	; (80060ec <HAL_TIM_PWM_Start+0x1d4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d01d      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a22      	ldr	r2, [pc, #136]	; (80060f4 <HAL_TIM_PWM_Start+0x1dc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d018      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <HAL_TIM_PWM_Start+0x1e0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_TIM_PWM_Start+0x1e4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <HAL_TIM_PWM_Start+0x1d8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_TIM_PWM_Start+0x1e8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x18a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a19      	ldr	r2, [pc, #100]	; (8006104 <HAL_TIM_PWM_Start+0x1ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d115      	bne.n	80060ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	4b17      	ldr	r3, [pc, #92]	; (8006108 <HAL_TIM_PWM_Start+0x1f0>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d015      	beq.n	80060e0 <HAL_TIM_PWM_Start+0x1c8>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ba:	d011      	beq.n	80060e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060cc:	e008      	b.n	80060e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e000      	b.n	80060e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40014000 	.word	0x40014000
 8006104:	40001800 	.word	0x40001800
 8006108:	00010007 	.word	0x00010007

0800610c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	d122      	bne.n	8006168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b02      	cmp	r3, #2
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0202 	mvn.w	r2, #2
 8006138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fae4 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fad6 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fae7 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0204 	mvn.w	r2, #4
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2202      	movs	r2, #2
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 faba 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 faac 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fabd 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0208 	mvn.w	r2, #8
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2204      	movs	r2, #4
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa90 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa82 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fa93 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b10      	cmp	r3, #16
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b10      	cmp	r3, #16
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0210 	mvn.w	r2, #16
 8006234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2208      	movs	r2, #8
 800623a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fa66 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa58 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa69 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0201 	mvn.w	r2, #1
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fb ffe8 	bl	8002260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d10e      	bne.n	80062bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d107      	bne.n	80062bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fea4 	bl	8007004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ca:	d10e      	bne.n	80062ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fe97 	bl	8007018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d10e      	bne.n	8006316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d107      	bne.n	8006316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800630e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fa17 	bl	8006744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b20      	cmp	r3, #32
 8006322:	d10e      	bne.n	8006342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d107      	bne.n	8006342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f06f 0220 	mvn.w	r2, #32
 800633a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fe57 	bl	8006ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006366:	2302      	movs	r3, #2
 8006368:	e0ff      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b14      	cmp	r3, #20
 8006376:	f200 80f0 	bhi.w	800655a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	080063d5 	.word	0x080063d5
 8006384:	0800655b 	.word	0x0800655b
 8006388:	0800655b 	.word	0x0800655b
 800638c:	0800655b 	.word	0x0800655b
 8006390:	08006415 	.word	0x08006415
 8006394:	0800655b 	.word	0x0800655b
 8006398:	0800655b 	.word	0x0800655b
 800639c:	0800655b 	.word	0x0800655b
 80063a0:	08006457 	.word	0x08006457
 80063a4:	0800655b 	.word	0x0800655b
 80063a8:	0800655b 	.word	0x0800655b
 80063ac:	0800655b 	.word	0x0800655b
 80063b0:	08006497 	.word	0x08006497
 80063b4:	0800655b 	.word	0x0800655b
 80063b8:	0800655b 	.word	0x0800655b
 80063bc:	0800655b 	.word	0x0800655b
 80063c0:	080064d9 	.word	0x080064d9
 80063c4:	0800655b 	.word	0x0800655b
 80063c8:	0800655b 	.word	0x0800655b
 80063cc:	0800655b 	.word	0x0800655b
 80063d0:	08006519 	.word	0x08006519
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fa5c 	bl	8006898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0208 	orr.w	r2, r2, #8
 80063ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0204 	bic.w	r2, r2, #4
 80063fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6999      	ldr	r1, [r3, #24]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	619a      	str	r2, [r3, #24]
      break;
 8006412:	e0a5      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 faae 	bl	800697c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800642e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6999      	ldr	r1, [r3, #24]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	021a      	lsls	r2, r3, #8
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	619a      	str	r2, [r3, #24]
      break;
 8006454:	e084      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fb05 	bl	8006a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0208 	orr.w	r2, r2, #8
 8006470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0204 	bic.w	r2, r2, #4
 8006480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69d9      	ldr	r1, [r3, #28]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	61da      	str	r2, [r3, #28]
      break;
 8006494:	e064      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fb5b 	bl	8006b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69d9      	ldr	r1, [r3, #28]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	021a      	lsls	r2, r3, #8
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	61da      	str	r2, [r3, #28]
      break;
 80064d6:	e043      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fb92 	bl	8006c08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0208 	orr.w	r2, r2, #8
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006516:	e023      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fbc4 	bl	8006cac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006558:	e002      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop

08006574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_TIM_ConfigClockSource+0x1c>
 800658c:	2302      	movs	r3, #2
 800658e:	e0b4      	b.n	80066fa <HAL_TIM_ConfigClockSource+0x186>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4b56      	ldr	r3, [pc, #344]	; (8006704 <HAL_TIM_ConfigClockSource+0x190>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c8:	d03e      	beq.n	8006648 <HAL_TIM_ConfigClockSource+0xd4>
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ce:	f200 8087 	bhi.w	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	f000 8086 	beq.w	80066e6 <HAL_TIM_ConfigClockSource+0x172>
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	d87f      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b70      	cmp	r3, #112	; 0x70
 80065e2:	d01a      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xa6>
 80065e4:	2b70      	cmp	r3, #112	; 0x70
 80065e6:	d87b      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b60      	cmp	r3, #96	; 0x60
 80065ea:	d050      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x11a>
 80065ec:	2b60      	cmp	r3, #96	; 0x60
 80065ee:	d877      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b50      	cmp	r3, #80	; 0x50
 80065f2:	d03c      	beq.n	800666e <HAL_TIM_ConfigClockSource+0xfa>
 80065f4:	2b50      	cmp	r3, #80	; 0x50
 80065f6:	d873      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d058      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x13a>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d86f      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b30      	cmp	r3, #48	; 0x30
 8006602:	d064      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	2b30      	cmp	r3, #48	; 0x30
 8006606:	d86b      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b20      	cmp	r3, #32
 800660a:	d060      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x15a>
 800660c:	2b20      	cmp	r3, #32
 800660e:	d867      	bhi.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x15a>
 8006614:	2b10      	cmp	r3, #16
 8006616:	d05a      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x15a>
 8006618:	e062      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	f000 fc0d 	bl	8006e48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800663c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	609a      	str	r2, [r3, #8]
      break;
 8006646:	e04f      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	f000 fbf6 	bl	8006e48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666a:	609a      	str	r2, [r3, #8]
      break;
 800666c:	e03c      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800667a:	461a      	mov	r2, r3
 800667c:	f000 fb6a 	bl	8006d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2150      	movs	r1, #80	; 0x50
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fbc3 	bl	8006e12 <TIM_ITRx_SetConfig>
      break;
 800668c:	e02c      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800669a:	461a      	mov	r2, r3
 800669c:	f000 fb89 	bl	8006db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2160      	movs	r1, #96	; 0x60
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fbb3 	bl	8006e12 <TIM_ITRx_SetConfig>
      break;
 80066ac:	e01c      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fb4a 	bl	8006d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fba3 	bl	8006e12 <TIM_ITRx_SetConfig>
      break;
 80066cc:	e00c      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f000 fb9a 	bl	8006e12 <TIM_ITRx_SetConfig>
      break;
 80066de:	e003      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e000      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	fffeff88 	.word	0xfffeff88

08006708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a40      	ldr	r2, [pc, #256]	; (800686c <TIM_Base_SetConfig+0x114>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <TIM_Base_SetConfig+0x40>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006776:	d00f      	beq.n	8006798 <TIM_Base_SetConfig+0x40>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a3d      	ldr	r2, [pc, #244]	; (8006870 <TIM_Base_SetConfig+0x118>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00b      	beq.n	8006798 <TIM_Base_SetConfig+0x40>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a3c      	ldr	r2, [pc, #240]	; (8006874 <TIM_Base_SetConfig+0x11c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3b      	ldr	r2, [pc, #236]	; (8006878 <TIM_Base_SetConfig+0x120>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a3a      	ldr	r2, [pc, #232]	; (800687c <TIM_Base_SetConfig+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d108      	bne.n	80067aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a2f      	ldr	r2, [pc, #188]	; (800686c <TIM_Base_SetConfig+0x114>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d02b      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d027      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a2c      	ldr	r2, [pc, #176]	; (8006870 <TIM_Base_SetConfig+0x118>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d023      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2b      	ldr	r2, [pc, #172]	; (8006874 <TIM_Base_SetConfig+0x11c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01f      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2a      	ldr	r2, [pc, #168]	; (8006878 <TIM_Base_SetConfig+0x120>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01b      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a29      	ldr	r2, [pc, #164]	; (800687c <TIM_Base_SetConfig+0x124>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d017      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a28      	ldr	r2, [pc, #160]	; (8006880 <TIM_Base_SetConfig+0x128>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d013      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a27      	ldr	r2, [pc, #156]	; (8006884 <TIM_Base_SetConfig+0x12c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00f      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a26      	ldr	r2, [pc, #152]	; (8006888 <TIM_Base_SetConfig+0x130>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00b      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a25      	ldr	r2, [pc, #148]	; (800688c <TIM_Base_SetConfig+0x134>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d007      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a24      	ldr	r2, [pc, #144]	; (8006890 <TIM_Base_SetConfig+0x138>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a23      	ldr	r2, [pc, #140]	; (8006894 <TIM_Base_SetConfig+0x13c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d108      	bne.n	800681c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a0a      	ldr	r2, [pc, #40]	; (800686c <TIM_Base_SetConfig+0x114>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_Base_SetConfig+0xf8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a0c      	ldr	r2, [pc, #48]	; (800687c <TIM_Base_SetConfig+0x124>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d103      	bne.n	8006858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	615a      	str	r2, [r3, #20]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40010000 	.word	0x40010000
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40000c00 	.word	0x40000c00
 800687c:	40010400 	.word	0x40010400
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800
 800688c:	40001800 	.word	0x40001800
 8006890:	40001c00 	.word	0x40001c00
 8006894:	40002000 	.word	0x40002000

08006898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f023 0201 	bic.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <TIM_OC1_SetConfig+0xd8>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 0302 	bic.w	r3, r3, #2
 80068e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a21      	ldr	r2, [pc, #132]	; (8006974 <TIM_OC1_SetConfig+0xdc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <TIM_OC1_SetConfig+0x64>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a20      	ldr	r2, [pc, #128]	; (8006978 <TIM_OC1_SetConfig+0xe0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d10c      	bne.n	8006916 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 0308 	bic.w	r3, r3, #8
 8006902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <TIM_OC1_SetConfig+0xdc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_OC1_SetConfig+0x8e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <TIM_OC1_SetConfig+0xe0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d111      	bne.n	800694a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800692c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	621a      	str	r2, [r3, #32]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	fffeff8f 	.word	0xfffeff8f
 8006974:	40010000 	.word	0x40010000
 8006978:	40010400 	.word	0x40010400

0800697c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0210 	bic.w	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4b2e      	ldr	r3, [pc, #184]	; (8006a60 <TIM_OC2_SetConfig+0xe4>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0320 	bic.w	r3, r3, #32
 80069c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <TIM_OC2_SetConfig+0xe8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC2_SetConfig+0x68>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <TIM_OC2_SetConfig+0xec>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d10d      	bne.n	8006a00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <TIM_OC2_SetConfig+0xe8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC2_SetConfig+0x94>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <TIM_OC2_SetConfig+0xec>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d113      	bne.n	8006a38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	feff8fff 	.word	0xfeff8fff
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400

08006a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4b2d      	ldr	r3, [pc, #180]	; (8006b4c <TIM_OC3_SetConfig+0xe0>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <TIM_OC3_SetConfig+0xe4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC3_SetConfig+0x66>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <TIM_OC3_SetConfig+0xe8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10d      	bne.n	8006aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <TIM_OC3_SetConfig+0xe4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC3_SetConfig+0x92>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <TIM_OC3_SetConfig+0xe8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d113      	bne.n	8006b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	621a      	str	r2, [r3, #32]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	fffeff8f 	.word	0xfffeff8f
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40010400 	.word	0x40010400

08006b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <TIM_OC4_SetConfig+0xa4>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	031b      	lsls	r3, r3, #12
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a13      	ldr	r2, [pc, #76]	; (8006c00 <TIM_OC4_SetConfig+0xa8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_OC4_SetConfig+0x68>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <TIM_OC4_SetConfig+0xac>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	019b      	lsls	r3, r3, #6
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	feff8fff 	.word	0xfeff8fff
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40010400 	.word	0x40010400

08006c08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <TIM_OC5_SetConfig+0x98>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <TIM_OC5_SetConfig+0x9c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_OC5_SetConfig+0x5e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <TIM_OC5_SetConfig+0xa0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d109      	bne.n	8006c7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	621a      	str	r2, [r3, #32]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	fffeff8f 	.word	0xfffeff8f
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400

08006cac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <TIM_OC6_SetConfig+0x9c>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	051b      	lsls	r3, r3, #20
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <TIM_OC6_SetConfig+0xa0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC6_SetConfig+0x60>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <TIM_OC6_SetConfig+0xa4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d109      	bne.n	8006d20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	feff8fff 	.word	0xfeff8fff
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40010400 	.word	0x40010400

08006d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f023 0201 	bic.w	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f023 030a 	bic.w	r3, r3, #10
 8006d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f023 0210 	bic.w	r2, r3, #16
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	031b      	lsls	r3, r3, #12
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f043 0307 	orr.w	r3, r3, #7
 8006e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	609a      	str	r2, [r3, #8]
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	021a      	lsls	r2, r3, #8
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	609a      	str	r2, [r3, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	401a      	ands	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e06d      	b.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a30      	ldr	r2, [pc, #192]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d004      	beq.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d108      	bne.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d022      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5e:	d01d      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d018      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00e      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a15      	ldr	r2, [pc, #84]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d10c      	bne.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40010400 	.word	0x40010400
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40001800 	.word	0x40001800

08006ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e040      	b.n	80070c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fb fa56 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f82c 	bl	80070c8 <UART_SetConfig>
 8007070:	4603      	mov	r3, r0
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e022      	b.n	80070c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa84 	bl	8007590 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb0b 	bl	80076d4 <UART_CheckIdleState>
 80070be:	4603      	mov	r3, r0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4ba6      	ldr	r3, [pc, #664]	; (800738c <UART_SetConfig+0x2c4>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	430b      	orrs	r3, r1
 80070fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	430a      	orrs	r2, r1
 8007138:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a94      	ldr	r2, [pc, #592]	; (8007390 <UART_SetConfig+0x2c8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d120      	bne.n	8007186 <UART_SetConfig+0xbe>
 8007144:	4b93      	ldr	r3, [pc, #588]	; (8007394 <UART_SetConfig+0x2cc>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d816      	bhi.n	8007180 <UART_SetConfig+0xb8>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x90>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	08007169 	.word	0x08007169
 800715c:	08007175 	.word	0x08007175
 8007160:	0800716f 	.word	0x0800716f
 8007164:	0800717b 	.word	0x0800717b
 8007168:	2301      	movs	r3, #1
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e150      	b.n	8007410 <UART_SetConfig+0x348>
 800716e:	2302      	movs	r3, #2
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e14d      	b.n	8007410 <UART_SetConfig+0x348>
 8007174:	2304      	movs	r3, #4
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e14a      	b.n	8007410 <UART_SetConfig+0x348>
 800717a:	2308      	movs	r3, #8
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e147      	b.n	8007410 <UART_SetConfig+0x348>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e144      	b.n	8007410 <UART_SetConfig+0x348>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a83      	ldr	r2, [pc, #524]	; (8007398 <UART_SetConfig+0x2d0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d132      	bne.n	80071f6 <UART_SetConfig+0x12e>
 8007190:	4b80      	ldr	r3, [pc, #512]	; (8007394 <UART_SetConfig+0x2cc>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f003 030c 	and.w	r3, r3, #12
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d828      	bhi.n	80071f0 <UART_SetConfig+0x128>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <UART_SetConfig+0xdc>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071f1 	.word	0x080071f1
 80071ac:	080071f1 	.word	0x080071f1
 80071b0:	080071f1 	.word	0x080071f1
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	080071f1 	.word	0x080071f1
 80071c0:	080071f1 	.word	0x080071f1
 80071c4:	080071df 	.word	0x080071df
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071eb 	.word	0x080071eb
 80071d8:	2300      	movs	r3, #0
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e118      	b.n	8007410 <UART_SetConfig+0x348>
 80071de:	2302      	movs	r3, #2
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e115      	b.n	8007410 <UART_SetConfig+0x348>
 80071e4:	2304      	movs	r3, #4
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e112      	b.n	8007410 <UART_SetConfig+0x348>
 80071ea:	2308      	movs	r3, #8
 80071ec:	77fb      	strb	r3, [r7, #31]
 80071ee:	e10f      	b.n	8007410 <UART_SetConfig+0x348>
 80071f0:	2310      	movs	r3, #16
 80071f2:	77fb      	strb	r3, [r7, #31]
 80071f4:	e10c      	b.n	8007410 <UART_SetConfig+0x348>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a68      	ldr	r2, [pc, #416]	; (800739c <UART_SetConfig+0x2d4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d120      	bne.n	8007242 <UART_SetConfig+0x17a>
 8007200:	4b64      	ldr	r3, [pc, #400]	; (8007394 <UART_SetConfig+0x2cc>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d013      	beq.n	8007236 <UART_SetConfig+0x16e>
 800720e:	2b30      	cmp	r3, #48	; 0x30
 8007210:	d814      	bhi.n	800723c <UART_SetConfig+0x174>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d009      	beq.n	800722a <UART_SetConfig+0x162>
 8007216:	2b20      	cmp	r3, #32
 8007218:	d810      	bhi.n	800723c <UART_SetConfig+0x174>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <UART_SetConfig+0x15c>
 800721e:	2b10      	cmp	r3, #16
 8007220:	d006      	beq.n	8007230 <UART_SetConfig+0x168>
 8007222:	e00b      	b.n	800723c <UART_SetConfig+0x174>
 8007224:	2300      	movs	r3, #0
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e0f2      	b.n	8007410 <UART_SetConfig+0x348>
 800722a:	2302      	movs	r3, #2
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e0ef      	b.n	8007410 <UART_SetConfig+0x348>
 8007230:	2304      	movs	r3, #4
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e0ec      	b.n	8007410 <UART_SetConfig+0x348>
 8007236:	2308      	movs	r3, #8
 8007238:	77fb      	strb	r3, [r7, #31]
 800723a:	e0e9      	b.n	8007410 <UART_SetConfig+0x348>
 800723c:	2310      	movs	r3, #16
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e0e6      	b.n	8007410 <UART_SetConfig+0x348>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a56      	ldr	r2, [pc, #344]	; (80073a0 <UART_SetConfig+0x2d8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d120      	bne.n	800728e <UART_SetConfig+0x1c6>
 800724c:	4b51      	ldr	r3, [pc, #324]	; (8007394 <UART_SetConfig+0x2cc>)
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007256:	2bc0      	cmp	r3, #192	; 0xc0
 8007258:	d013      	beq.n	8007282 <UART_SetConfig+0x1ba>
 800725a:	2bc0      	cmp	r3, #192	; 0xc0
 800725c:	d814      	bhi.n	8007288 <UART_SetConfig+0x1c0>
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d009      	beq.n	8007276 <UART_SetConfig+0x1ae>
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d810      	bhi.n	8007288 <UART_SetConfig+0x1c0>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <UART_SetConfig+0x1a8>
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d006      	beq.n	800727c <UART_SetConfig+0x1b4>
 800726e:	e00b      	b.n	8007288 <UART_SetConfig+0x1c0>
 8007270:	2300      	movs	r3, #0
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e0cc      	b.n	8007410 <UART_SetConfig+0x348>
 8007276:	2302      	movs	r3, #2
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e0c9      	b.n	8007410 <UART_SetConfig+0x348>
 800727c:	2304      	movs	r3, #4
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e0c6      	b.n	8007410 <UART_SetConfig+0x348>
 8007282:	2308      	movs	r3, #8
 8007284:	77fb      	strb	r3, [r7, #31]
 8007286:	e0c3      	b.n	8007410 <UART_SetConfig+0x348>
 8007288:	2310      	movs	r3, #16
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e0c0      	b.n	8007410 <UART_SetConfig+0x348>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a44      	ldr	r2, [pc, #272]	; (80073a4 <UART_SetConfig+0x2dc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d125      	bne.n	80072e4 <UART_SetConfig+0x21c>
 8007298:	4b3e      	ldr	r3, [pc, #248]	; (8007394 <UART_SetConfig+0x2cc>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a6:	d017      	beq.n	80072d8 <UART_SetConfig+0x210>
 80072a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ac:	d817      	bhi.n	80072de <UART_SetConfig+0x216>
 80072ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b2:	d00b      	beq.n	80072cc <UART_SetConfig+0x204>
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b8:	d811      	bhi.n	80072de <UART_SetConfig+0x216>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <UART_SetConfig+0x1fe>
 80072be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c2:	d006      	beq.n	80072d2 <UART_SetConfig+0x20a>
 80072c4:	e00b      	b.n	80072de <UART_SetConfig+0x216>
 80072c6:	2300      	movs	r3, #0
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e0a1      	b.n	8007410 <UART_SetConfig+0x348>
 80072cc:	2302      	movs	r3, #2
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e09e      	b.n	8007410 <UART_SetConfig+0x348>
 80072d2:	2304      	movs	r3, #4
 80072d4:	77fb      	strb	r3, [r7, #31]
 80072d6:	e09b      	b.n	8007410 <UART_SetConfig+0x348>
 80072d8:	2308      	movs	r3, #8
 80072da:	77fb      	strb	r3, [r7, #31]
 80072dc:	e098      	b.n	8007410 <UART_SetConfig+0x348>
 80072de:	2310      	movs	r3, #16
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e095      	b.n	8007410 <UART_SetConfig+0x348>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2f      	ldr	r2, [pc, #188]	; (80073a8 <UART_SetConfig+0x2e0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d125      	bne.n	800733a <UART_SetConfig+0x272>
 80072ee:	4b29      	ldr	r3, [pc, #164]	; (8007394 <UART_SetConfig+0x2cc>)
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fc:	d017      	beq.n	800732e <UART_SetConfig+0x266>
 80072fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007302:	d817      	bhi.n	8007334 <UART_SetConfig+0x26c>
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d00b      	beq.n	8007322 <UART_SetConfig+0x25a>
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d811      	bhi.n	8007334 <UART_SetConfig+0x26c>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <UART_SetConfig+0x254>
 8007314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007318:	d006      	beq.n	8007328 <UART_SetConfig+0x260>
 800731a:	e00b      	b.n	8007334 <UART_SetConfig+0x26c>
 800731c:	2301      	movs	r3, #1
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e076      	b.n	8007410 <UART_SetConfig+0x348>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e073      	b.n	8007410 <UART_SetConfig+0x348>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e070      	b.n	8007410 <UART_SetConfig+0x348>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e06d      	b.n	8007410 <UART_SetConfig+0x348>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e06a      	b.n	8007410 <UART_SetConfig+0x348>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1b      	ldr	r2, [pc, #108]	; (80073ac <UART_SetConfig+0x2e4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d138      	bne.n	80073b6 <UART_SetConfig+0x2ee>
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <UART_SetConfig+0x2cc>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800734e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007352:	d017      	beq.n	8007384 <UART_SetConfig+0x2bc>
 8007354:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007358:	d82a      	bhi.n	80073b0 <UART_SetConfig+0x2e8>
 800735a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735e:	d00b      	beq.n	8007378 <UART_SetConfig+0x2b0>
 8007360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007364:	d824      	bhi.n	80073b0 <UART_SetConfig+0x2e8>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <UART_SetConfig+0x2aa>
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d006      	beq.n	800737e <UART_SetConfig+0x2b6>
 8007370:	e01e      	b.n	80073b0 <UART_SetConfig+0x2e8>
 8007372:	2300      	movs	r3, #0
 8007374:	77fb      	strb	r3, [r7, #31]
 8007376:	e04b      	b.n	8007410 <UART_SetConfig+0x348>
 8007378:	2302      	movs	r3, #2
 800737a:	77fb      	strb	r3, [r7, #31]
 800737c:	e048      	b.n	8007410 <UART_SetConfig+0x348>
 800737e:	2304      	movs	r3, #4
 8007380:	77fb      	strb	r3, [r7, #31]
 8007382:	e045      	b.n	8007410 <UART_SetConfig+0x348>
 8007384:	2308      	movs	r3, #8
 8007386:	77fb      	strb	r3, [r7, #31]
 8007388:	e042      	b.n	8007410 <UART_SetConfig+0x348>
 800738a:	bf00      	nop
 800738c:	efff69f3 	.word	0xefff69f3
 8007390:	40011000 	.word	0x40011000
 8007394:	40023800 	.word	0x40023800
 8007398:	40004400 	.word	0x40004400
 800739c:	40004800 	.word	0x40004800
 80073a0:	40004c00 	.word	0x40004c00
 80073a4:	40005000 	.word	0x40005000
 80073a8:	40011400 	.word	0x40011400
 80073ac:	40007800 	.word	0x40007800
 80073b0:	2310      	movs	r3, #16
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e02c      	b.n	8007410 <UART_SetConfig+0x348>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a72      	ldr	r2, [pc, #456]	; (8007584 <UART_SetConfig+0x4bc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d125      	bne.n	800740c <UART_SetConfig+0x344>
 80073c0:	4b71      	ldr	r3, [pc, #452]	; (8007588 <UART_SetConfig+0x4c0>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073ce:	d017      	beq.n	8007400 <UART_SetConfig+0x338>
 80073d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073d4:	d817      	bhi.n	8007406 <UART_SetConfig+0x33e>
 80073d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073da:	d00b      	beq.n	80073f4 <UART_SetConfig+0x32c>
 80073dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e0:	d811      	bhi.n	8007406 <UART_SetConfig+0x33e>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <UART_SetConfig+0x326>
 80073e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ea:	d006      	beq.n	80073fa <UART_SetConfig+0x332>
 80073ec:	e00b      	b.n	8007406 <UART_SetConfig+0x33e>
 80073ee:	2300      	movs	r3, #0
 80073f0:	77fb      	strb	r3, [r7, #31]
 80073f2:	e00d      	b.n	8007410 <UART_SetConfig+0x348>
 80073f4:	2302      	movs	r3, #2
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e00a      	b.n	8007410 <UART_SetConfig+0x348>
 80073fa:	2304      	movs	r3, #4
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e007      	b.n	8007410 <UART_SetConfig+0x348>
 8007400:	2308      	movs	r3, #8
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e004      	b.n	8007410 <UART_SetConfig+0x348>
 8007406:	2310      	movs	r3, #16
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e001      	b.n	8007410 <UART_SetConfig+0x348>
 800740c:	2310      	movs	r3, #16
 800740e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007418:	d15b      	bne.n	80074d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800741a:	7ffb      	ldrb	r3, [r7, #31]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d828      	bhi.n	8007472 <UART_SetConfig+0x3aa>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0x360>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	08007473 	.word	0x08007473
 8007438:	08007463 	.word	0x08007463
 800743c:	08007473 	.word	0x08007473
 8007440:	08007473 	.word	0x08007473
 8007444:	08007473 	.word	0x08007473
 8007448:	0800746b 	.word	0x0800746b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800744c:	f7fd ffb0 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 8007450:	61b8      	str	r0, [r7, #24]
        break;
 8007452:	e013      	b.n	800747c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007454:	f7fd ffc0 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 8007458:	61b8      	str	r0, [r7, #24]
        break;
 800745a:	e00f      	b.n	800747c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800745c:	4b4b      	ldr	r3, [pc, #300]	; (800758c <UART_SetConfig+0x4c4>)
 800745e:	61bb      	str	r3, [r7, #24]
        break;
 8007460:	e00c      	b.n	800747c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007462:	f7fd fe93 	bl	800518c <HAL_RCC_GetSysClockFreq>
 8007466:	61b8      	str	r0, [r7, #24]
        break;
 8007468:	e008      	b.n	800747c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746e:	61bb      	str	r3, [r7, #24]
        break;
 8007470:	e004      	b.n	800747c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	77bb      	strb	r3, [r7, #30]
        break;
 800747a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d074      	beq.n	800756c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	005a      	lsls	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	441a      	add	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b0f      	cmp	r3, #15
 800749c:	d916      	bls.n	80074cc <UART_SetConfig+0x404>
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a4:	d212      	bcs.n	80074cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f023 030f 	bic.w	r3, r3, #15
 80074ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	89fb      	ldrh	r3, [r7, #14]
 80074be:	4313      	orrs	r3, r2
 80074c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	89fa      	ldrh	r2, [r7, #14]
 80074c8:	60da      	str	r2, [r3, #12]
 80074ca:	e04f      	b.n	800756c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77bb      	strb	r3, [r7, #30]
 80074d0:	e04c      	b.n	800756c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074d2:	7ffb      	ldrb	r3, [r7, #31]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d828      	bhi.n	800752a <UART_SetConfig+0x462>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0x418>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	0800752b 	.word	0x0800752b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
 8007500:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fd ff54 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 8007508:	61b8      	str	r0, [r7, #24]
        break;
 800750a:	e013      	b.n	8007534 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fd ff64 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 8007510:	61b8      	str	r0, [r7, #24]
        break;
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b1d      	ldr	r3, [pc, #116]	; (800758c <UART_SetConfig+0x4c4>)
 8007516:	61bb      	str	r3, [r7, #24]
        break;
 8007518:	e00c      	b.n	8007534 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fd fe37 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800751e:	61b8      	str	r0, [r7, #24]
        break;
 8007520:	e008      	b.n	8007534 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	61bb      	str	r3, [r7, #24]
        break;
 8007528:	e004      	b.n	8007534 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	77bb      	strb	r3, [r7, #30]
        break;
 8007532:	bf00      	nop
    }

    if (pclk != 0U)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d018      	beq.n	800756c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	085a      	lsrs	r2, r3, #1
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	441a      	add	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b0f      	cmp	r3, #15
 8007552:	d909      	bls.n	8007568 <UART_SetConfig+0x4a0>
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755a:	d205      	bcs.n	8007568 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e001      	b.n	800756c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007578:	7fbb      	ldrb	r3, [r7, #30]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3720      	adds	r7, #32
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40007c00 	.word	0x40007c00
 8007588:	40023800 	.word	0x40023800
 800758c:	00f42400 	.word	0x00f42400

08007590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01a      	beq.n	80076a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768e:	d10a      	bne.n	80076a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  }
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af02      	add	r7, sp, #8
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e4:	f7fb f8a2 	bl	800282c <HAL_GetTick>
 80076e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0308 	and.w	r3, r3, #8
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d10e      	bne.n	8007716 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f831 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e027      	b.n	8007766 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b04      	cmp	r3, #4
 8007722:	d10e      	bne.n	8007742 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f81b 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e011      	b.n	8007766 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b09c      	sub	sp, #112	; 0x70
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777e:	e0a7      	b.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	f000 80a3 	beq.w	80078d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778a:	f7fb f84f 	bl	800282c <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007796:	429a      	cmp	r2, r3
 8007798:	d302      	bcc.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800779a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800779c:	2b00      	cmp	r3, #0
 800779e:	d13f      	bne.n	8007820 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077b4:	667b      	str	r3, [r7, #100]	; 0x64
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	663b      	str	r3, [r7, #96]	; 0x60
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80077f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e068      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d050      	beq.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783c:	d148      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007846:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800785c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
 8007868:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800786c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e6      	bne.n	8007848 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3308      	adds	r3, #8
 8007880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	613b      	str	r3, [r7, #16]
   return(result);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	66bb      	str	r3, [r7, #104]	; 0x68
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800789a:	623a      	str	r2, [r7, #32]
 800789c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	69f9      	ldr	r1, [r7, #28]
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e5      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e010      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4013      	ands	r3, r2
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	f43f af48 	beq.w	8007780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3770      	adds	r7, #112	; 0x70
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078fc:	b084      	sub	sp, #16
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	f107 001c 	add.w	r0, r7, #28
 800790a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2b01      	cmp	r3, #1
 8007912:	d120      	bne.n	8007956 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <USB_CoreInit+0xac>)
 8007926:	4013      	ands	r3, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793a:	2b01      	cmp	r3, #1
 800793c:	d105      	bne.n	800794a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fbee 	bl	800912c <USB_CoreReset>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	e010      	b.n	8007978 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 fbe2 	bl	800912c <USB_CoreReset>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	2b01      	cmp	r3, #1
 800797c:	d10b      	bne.n	8007996 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f043 0206 	orr.w	r2, r3, #6
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f043 0220 	orr.w	r2, r3, #32
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079a2:	b004      	add	sp, #16
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	ffbdffbf 	.word	0xffbdffbf

080079ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d165      	bne.n	8007a8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4a41      	ldr	r2, [pc, #260]	; (8007ac8 <USB_SetTurnaroundTime+0x11c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d906      	bls.n	80079d6 <USB_SetTurnaroundTime+0x2a>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4a40      	ldr	r2, [pc, #256]	; (8007acc <USB_SetTurnaroundTime+0x120>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d202      	bcs.n	80079d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079d0:	230f      	movs	r3, #15
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	e062      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4a3c      	ldr	r2, [pc, #240]	; (8007acc <USB_SetTurnaroundTime+0x120>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d306      	bcc.n	80079ec <USB_SetTurnaroundTime+0x40>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4a3b      	ldr	r2, [pc, #236]	; (8007ad0 <USB_SetTurnaroundTime+0x124>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d202      	bcs.n	80079ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079e6:	230e      	movs	r3, #14
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e057      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4a38      	ldr	r2, [pc, #224]	; (8007ad0 <USB_SetTurnaroundTime+0x124>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d306      	bcc.n	8007a02 <USB_SetTurnaroundTime+0x56>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <USB_SetTurnaroundTime+0x128>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d202      	bcs.n	8007a02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079fc:	230d      	movs	r3, #13
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e04c      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <USB_SetTurnaroundTime+0x128>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d306      	bcc.n	8007a18 <USB_SetTurnaroundTime+0x6c>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4a32      	ldr	r2, [pc, #200]	; (8007ad8 <USB_SetTurnaroundTime+0x12c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d802      	bhi.n	8007a18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a12:	230c      	movs	r3, #12
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	e041      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4a2f      	ldr	r2, [pc, #188]	; (8007ad8 <USB_SetTurnaroundTime+0x12c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d906      	bls.n	8007a2e <USB_SetTurnaroundTime+0x82>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4a2e      	ldr	r2, [pc, #184]	; (8007adc <USB_SetTurnaroundTime+0x130>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d802      	bhi.n	8007a2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a28:	230b      	movs	r3, #11
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e036      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	4a2a      	ldr	r2, [pc, #168]	; (8007adc <USB_SetTurnaroundTime+0x130>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d906      	bls.n	8007a44 <USB_SetTurnaroundTime+0x98>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4a29      	ldr	r2, [pc, #164]	; (8007ae0 <USB_SetTurnaroundTime+0x134>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d802      	bhi.n	8007a44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a3e:	230a      	movs	r3, #10
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e02b      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4a26      	ldr	r2, [pc, #152]	; (8007ae0 <USB_SetTurnaroundTime+0x134>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d906      	bls.n	8007a5a <USB_SetTurnaroundTime+0xae>
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4a25      	ldr	r2, [pc, #148]	; (8007ae4 <USB_SetTurnaroundTime+0x138>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d202      	bcs.n	8007a5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a54:	2309      	movs	r3, #9
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	e020      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	4a21      	ldr	r2, [pc, #132]	; (8007ae4 <USB_SetTurnaroundTime+0x138>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d306      	bcc.n	8007a70 <USB_SetTurnaroundTime+0xc4>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	4a20      	ldr	r2, [pc, #128]	; (8007ae8 <USB_SetTurnaroundTime+0x13c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d802      	bhi.n	8007a70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a6a:	2308      	movs	r3, #8
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e015      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <USB_SetTurnaroundTime+0x13c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d906      	bls.n	8007a86 <USB_SetTurnaroundTime+0xda>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <USB_SetTurnaroundTime+0x140>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d202      	bcs.n	8007a86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a80:	2307      	movs	r3, #7
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e00a      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a86:	2306      	movs	r3, #6
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	e007      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a92:	2309      	movs	r3, #9
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e001      	b.n	8007a9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a98:	2309      	movs	r3, #9
 8007a9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	029b      	lsls	r3, r3, #10
 8007ab0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	00d8acbf 	.word	0x00d8acbf
 8007acc:	00e4e1c0 	.word	0x00e4e1c0
 8007ad0:	00f42400 	.word	0x00f42400
 8007ad4:	01067380 	.word	0x01067380
 8007ad8:	011a499f 	.word	0x011a499f
 8007adc:	01312cff 	.word	0x01312cff
 8007ae0:	014ca43f 	.word	0x014ca43f
 8007ae4:	016e3600 	.word	0x016e3600
 8007ae8:	01a6ab1f 	.word	0x01a6ab1f
 8007aec:	01e84800 	.word	0x01e84800

08007af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f043 0201 	orr.w	r2, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f023 0201 	bic.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d115      	bne.n	8007b82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b62:	2001      	movs	r0, #1
 8007b64:	f7fa fe6e 	bl	8002844 <HAL_Delay>
      ms++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fa4b 	bl	800900a <USB_GetMode>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d01e      	beq.n	8007bb8 <USB_SetCurrentMode+0x84>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b31      	cmp	r3, #49	; 0x31
 8007b7e:	d9f0      	bls.n	8007b62 <USB_SetCurrentMode+0x2e>
 8007b80:	e01a      	b.n	8007bb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d115      	bne.n	8007bb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b94:	2001      	movs	r0, #1
 8007b96:	f7fa fe55 	bl	8002844 <HAL_Delay>
      ms++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fa32 	bl	800900a <USB_GetMode>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <USB_SetCurrentMode+0x84>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b31      	cmp	r3, #49	; 0x31
 8007bb0:	d9f0      	bls.n	8007b94 <USB_SetCurrentMode+0x60>
 8007bb2:	e001      	b.n	8007bb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e005      	b.n	8007bc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b32      	cmp	r3, #50	; 0x32
 8007bbc:	d101      	bne.n	8007bc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bcc:	b084      	sub	sp, #16
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	e009      	b.n	8007c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	3340      	adds	r3, #64	; 0x40
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b0e      	cmp	r3, #14
 8007c04:	d9f2      	bls.n	8007bec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11c      	bne.n	8007c46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e005      	b.n	8007c52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c58:	461a      	mov	r2, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c64:	4619      	mov	r1, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	680b      	ldr	r3, [r1, #0]
 8007c70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10c      	bne.n	8007c92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f965 	bl	8007f50 <USB_SetDevSpeed>
 8007c86:	e008      	b.n	8007c9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c88:	2101      	movs	r1, #1
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f960 	bl	8007f50 <USB_SetDevSpeed>
 8007c90:	e003      	b.n	8007c9a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c92:	2103      	movs	r1, #3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f95b 	bl	8007f50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c9a:	2110      	movs	r1, #16
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8f3 	bl	8007e88 <USB_FlushTxFifo>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f91f 	bl	8007ef0 <USB_FlushRxFifo>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cda:	461a      	mov	r2, r3
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	e043      	b.n	8007d6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cfc:	d118      	bne.n	8007d30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	461a      	mov	r2, r3
 8007d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e013      	b.n	8007d42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	461a      	mov	r2, r3
 8007d28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	e008      	b.n	8007d42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	461a      	mov	r2, r3
 8007d62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d3b7      	bcc.n	8007ce6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	e043      	b.n	8007e04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d92:	d118      	bne.n	8007dc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	461a      	mov	r2, r3
 8007da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	e013      	b.n	8007dd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	e008      	b.n	8007dd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df6:	461a      	mov	r2, r3
 8007df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3301      	adds	r3, #1
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d3b7      	bcc.n	8007d7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <USB_DevInit+0x2b4>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f043 0208 	orr.w	r2, r3, #8
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d105      	bne.n	8007e70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <USB_DevInit+0x2b8>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e7c:	b004      	add	sp, #16
 8007e7e:	4770      	bx	lr
 8007e80:	803c3800 	.word	0x803c3800
 8007e84:	40000004 	.word	0x40000004

08007e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a13      	ldr	r2, [pc, #76]	; (8007eec <USB_FlushTxFifo+0x64>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d901      	bls.n	8007ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e01b      	b.n	8007ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	daf2      	bge.n	8007e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	019b      	lsls	r3, r3, #6
 8007eb8:	f043 0220 	orr.w	r2, r3, #32
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4a08      	ldr	r2, [pc, #32]	; (8007eec <USB_FlushTxFifo+0x64>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d901      	bls.n	8007ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e006      	b.n	8007ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d0f0      	beq.n	8007ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	00030d40 	.word	0x00030d40

08007ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4a11      	ldr	r2, [pc, #68]	; (8007f4c <USB_FlushRxFifo+0x5c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d901      	bls.n	8007f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e018      	b.n	8007f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	daf2      	bge.n	8007efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <USB_FlushRxFifo+0x5c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e006      	b.n	8007f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d0f0      	beq.n	8007f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	00030d40 	.word	0x00030d40

08007f50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f70:	4313      	orrs	r3, r2
 8007f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 0306 	and.w	r3, r3, #6
 8007f9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
 8007fa6:	e00a      	b.n	8007fbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d002      	beq.n	8007fb4 <USB_GetDevSpeed+0x32>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b06      	cmp	r3, #6
 8007fb2:	d102      	bne.n	8007fba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	75fb      	strb	r3, [r7, #23]
 8007fb8:	e001      	b.n	8007fbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007fba:	230f      	movs	r3, #15
 8007fbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d139      	bne.n	800805c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	68f9      	ldr	r1, [r7, #12]
 8008002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008006:	4313      	orrs	r3, r2
 8008008:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d153      	bne.n	80080c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	791b      	ldrb	r3, [r3, #4]
 800803a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800803c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	059b      	lsls	r3, r3, #22
 8008042:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008044:	431a      	orrs	r2, r3
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	0159      	lsls	r1, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	440b      	add	r3, r1
 800804e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008052:	4619      	mov	r1, r3
 8008054:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <USB_ActivateEndpoint+0x10c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	600b      	str	r3, [r1, #0]
 800805a:	e035      	b.n	80080c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800807a:	4313      	orrs	r3, r2
 800807c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d119      	bne.n	80080c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	791b      	ldrb	r3, [r3, #4]
 80080ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080b0:	430b      	orrs	r3, r1
 80080b2:	431a      	orrs	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	0159      	lsls	r1, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	440b      	add	r3, r1
 80080bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c0:	4619      	mov	r1, r3
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <USB_ActivateEndpoint+0x10c>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	10008000 	.word	0x10008000

080080dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d161      	bne.n	80081bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800810a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800810e:	d11f      	bne.n	8008150 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800812e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	0151      	lsls	r1, r2, #5
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	440a      	add	r2, r1
 8008146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800814a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800814e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	2101      	movs	r1, #1
 8008162:	fa01 f303 	lsl.w	r3, r1, r3
 8008166:	b29b      	uxth	r3, r3
 8008168:	43db      	mvns	r3, r3
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008170:	4013      	ands	r3, r2
 8008172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	69da      	ldr	r2, [r3, #28]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	2101      	movs	r1, #1
 8008186:	fa01 f303 	lsl.w	r3, r1, r3
 800818a:	b29b      	uxth	r3, r3
 800818c:	43db      	mvns	r3, r3
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008194:	4013      	ands	r3, r2
 8008196:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	0159      	lsls	r1, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	440b      	add	r3, r1
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	4619      	mov	r1, r3
 80081b4:	4b35      	ldr	r3, [pc, #212]	; (800828c <USB_DeactivateEndpoint+0x1b0>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	600b      	str	r3, [r1, #0]
 80081ba:	e060      	b.n	800827e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d2:	d11f      	bne.n	8008214 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	440a      	add	r2, r1
 800820a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800820e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 030f 	and.w	r3, r3, #15
 8008224:	2101      	movs	r1, #1
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
 800822a:	041b      	lsls	r3, r3, #16
 800822c:	43db      	mvns	r3, r3
 800822e:	68f9      	ldr	r1, [r7, #12]
 8008230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008234:	4013      	ands	r3, r2
 8008236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823e:	69da      	ldr	r2, [r3, #28]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	f003 030f 	and.w	r3, r3, #15
 8008248:	2101      	movs	r1, #1
 800824a:	fa01 f303 	lsl.w	r3, r1, r3
 800824e:	041b      	lsls	r3, r3, #16
 8008250:	43db      	mvns	r3, r3
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008258:	4013      	ands	r3, r2
 800825a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	0159      	lsls	r1, r3, #5
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	440b      	add	r3, r1
 8008272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008276:	4619      	mov	r1, r3
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <USB_DeactivateEndpoint+0x1b4>)
 800827a:	4013      	ands	r3, r2
 800827c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	ec337800 	.word	0xec337800
 8008290:	eff37800 	.word	0xeff37800

08008294 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08a      	sub	sp, #40	; 0x28
 8008298:	af02      	add	r7, sp, #8
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	f040 8163 	bne.w	800857c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d132      	bne.n	8008324 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	0159      	lsls	r1, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	440b      	add	r3, r1
 80082d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d8:	4619      	mov	r1, r3
 80082da:	4ba5      	ldr	r3, [pc, #660]	; (8008570 <USB_EPStartXfer+0x2dc>)
 80082dc:	4013      	ands	r3, r2
 80082de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	0159      	lsls	r1, r3, #5
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	440b      	add	r3, r1
 8008316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831a:	4619      	mov	r1, r3
 800831c:	4b95      	ldr	r3, [pc, #596]	; (8008574 <USB_EPStartXfer+0x2e0>)
 800831e:	4013      	ands	r3, r2
 8008320:	610b      	str	r3, [r1, #16]
 8008322:	e074      	b.n	800840e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	0159      	lsls	r1, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	440b      	add	r3, r1
 800833a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833e:	4619      	mov	r1, r3
 8008340:	4b8c      	ldr	r3, [pc, #560]	; (8008574 <USB_EPStartXfer+0x2e0>)
 8008342:	4013      	ands	r3, r2
 8008344:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	0159      	lsls	r1, r3, #5
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	440b      	add	r3, r1
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	4619      	mov	r1, r3
 8008362:	4b83      	ldr	r3, [pc, #524]	; (8008570 <USB_EPStartXfer+0x2dc>)
 8008364:	4013      	ands	r3, r2
 8008366:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6999      	ldr	r1, [r3, #24]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	440b      	add	r3, r1
 8008380:	1e59      	subs	r1, r3, #1
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	fbb1 f3f3 	udiv	r3, r1, r3
 800838a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800838c:	4b7a      	ldr	r3, [pc, #488]	; (8008578 <USB_EPStartXfer+0x2e4>)
 800838e:	400b      	ands	r3, r1
 8008390:	69b9      	ldr	r1, [r7, #24]
 8008392:	0148      	lsls	r0, r1, #5
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	4401      	add	r1, r0
 8008398:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800839c:	4313      	orrs	r3, r2
 800839e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083b6:	69b9      	ldr	r1, [r7, #24]
 80083b8:	0148      	lsls	r0, r1, #5
 80083ba:	69f9      	ldr	r1, [r7, #28]
 80083bc:	4401      	add	r1, r0
 80083be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083c2:	4313      	orrs	r3, r2
 80083c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	791b      	ldrb	r3, [r3, #4]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d11f      	bne.n	800840e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	440a      	add	r2, r1
 8008404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800840c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d14b      	bne.n	80084ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008428:	461a      	mov	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d128      	bne.n	800848a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d110      	bne.n	800846a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	e00f      	b.n	800848a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008488:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e137      	b.n	800871c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	791b      	ldrb	r3, [r3, #4]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d015      	beq.n	8008500 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 811f 	beq.w	800871c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	2101      	movs	r1, #1
 80084f0:	fa01 f303 	lsl.w	r3, r1, r3
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084fa:	4313      	orrs	r3, r2
 80084fc:	634b      	str	r3, [r1, #52]	; 0x34
 80084fe:	e10d      	b.n	800871c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850c:	2b00      	cmp	r3, #0
 800850e:	d110      	bne.n	8008532 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e00f      	b.n	8008552 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	440a      	add	r2, r1
 8008548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800854c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008550:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6919      	ldr	r1, [r3, #16]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	b298      	uxth	r0, r3
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4603      	mov	r3, r0
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 faea 	bl	8008b40 <USB_WritePacket>
 800856c:	e0d6      	b.n	800871c <USB_EPStartXfer+0x488>
 800856e:	bf00      	nop
 8008570:	e007ffff 	.word	0xe007ffff
 8008574:	fff80000 	.word	0xfff80000
 8008578:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	0159      	lsls	r1, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	440b      	add	r3, r1
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	4619      	mov	r1, r3
 8008598:	4b63      	ldr	r3, [pc, #396]	; (8008728 <USB_EPStartXfer+0x494>)
 800859a:	4013      	ands	r3, r2
 800859c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	0159      	lsls	r1, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	440b      	add	r3, r1
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	4619      	mov	r1, r3
 80085ba:	4b5c      	ldr	r3, [pc, #368]	; (800872c <USB_EPStartXfer+0x498>)
 80085bc:	4013      	ands	r3, r2
 80085be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d123      	bne.n	8008610 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d4:	691a      	ldr	r2, [r3, #16]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085de:	69b9      	ldr	r1, [r7, #24]
 80085e0:	0148      	lsls	r0, r1, #5
 80085e2:	69f9      	ldr	r1, [r7, #28]
 80085e4:	4401      	add	r1, r0
 80085e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085ea:	4313      	orrs	r3, r2
 80085ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	440a      	add	r2, r1
 8008604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800860c:	6113      	str	r3, [r2, #16]
 800860e:	e037      	b.n	8008680 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	699a      	ldr	r2, [r3, #24]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	4413      	add	r3, r2
 800861a:	1e5a      	subs	r2, r3, #1
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	fbb2 f3f3 	udiv	r3, r2, r3
 8008624:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	8afa      	ldrh	r2, [r7, #22]
 800862c:	fb03 f202 	mul.w	r2, r3, r2
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	691a      	ldr	r2, [r3, #16]
 8008642:	8afb      	ldrh	r3, [r7, #22]
 8008644:	04d9      	lsls	r1, r3, #19
 8008646:	4b3a      	ldr	r3, [pc, #232]	; (8008730 <USB_EPStartXfer+0x49c>)
 8008648:	400b      	ands	r3, r1
 800864a:	69b9      	ldr	r1, [r7, #24]
 800864c:	0148      	lsls	r0, r1, #5
 800864e:	69f9      	ldr	r1, [r7, #28]
 8008650:	4401      	add	r1, r0
 8008652:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008656:	4313      	orrs	r3, r2
 8008658:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008670:	69b9      	ldr	r1, [r7, #24]
 8008672:	0148      	lsls	r0, r1, #5
 8008674:	69f9      	ldr	r1, [r7, #28]
 8008676:	4401      	add	r1, r0
 8008678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800867c:	4313      	orrs	r3, r2
 800867e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d10d      	bne.n	80086a2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6919      	ldr	r1, [r3, #16]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869e:	460a      	mov	r2, r1
 80086a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	791b      	ldrb	r3, [r3, #4]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d128      	bne.n	80086fc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d110      	bne.n	80086dc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	e00f      	b.n	80086fc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800871a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	fff80000 	.word	0xfff80000
 800872c:	e007ffff 	.word	0xe007ffff
 8008730:	1ff80000 	.word	0x1ff80000

08008734 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b01      	cmp	r3, #1
 8008752:	f040 80ce 	bne.w	80088f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d132      	bne.n	80087c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	0159      	lsls	r1, r3, #5
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	440b      	add	r3, r1
 8008774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008778:	4619      	mov	r1, r3
 800877a:	4b9a      	ldr	r3, [pc, #616]	; (80089e4 <USB_EP0StartXfer+0x2b0>)
 800877c:	4013      	ands	r3, r2
 800877e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	440a      	add	r2, r1
 8008796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800879e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	0159      	lsls	r1, r3, #5
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	440b      	add	r3, r1
 80087b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ba:	4619      	mov	r1, r3
 80087bc:	4b8a      	ldr	r3, [pc, #552]	; (80089e8 <USB_EP0StartXfer+0x2b4>)
 80087be:	4013      	ands	r3, r2
 80087c0:	610b      	str	r3, [r1, #16]
 80087c2:	e04e      	b.n	8008862 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	0159      	lsls	r1, r3, #5
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	440b      	add	r3, r1
 80087da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087de:	4619      	mov	r1, r3
 80087e0:	4b81      	ldr	r3, [pc, #516]	; (80089e8 <USB_EP0StartXfer+0x2b4>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	0159      	lsls	r1, r3, #5
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	440b      	add	r3, r1
 80087fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008800:	4619      	mov	r1, r3
 8008802:	4b78      	ldr	r3, [pc, #480]	; (80089e4 <USB_EP0StartXfer+0x2b0>)
 8008804:	4013      	ands	r3, r2
 8008806:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	429a      	cmp	r2, r3
 8008812:	d903      	bls.n	800881c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	440a      	add	r2, r1
 8008832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800883a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008852:	6939      	ldr	r1, [r7, #16]
 8008854:	0148      	lsls	r0, r1, #5
 8008856:	6979      	ldr	r1, [r7, #20]
 8008858:	4401      	add	r1, r0
 800885a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800885e:	4313      	orrs	r3, r2
 8008860:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d11e      	bne.n	80088a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d009      	beq.n	8008884 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887c:	461a      	mov	r2, r3
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	e097      	b.n	80089d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 8083 	beq.w	80089d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	6979      	ldr	r1, [r7, #20]
 80088e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088ec:	4313      	orrs	r3, r2
 80088ee:	634b      	str	r3, [r1, #52]	; 0x34
 80088f0:	e071      	b.n	80089d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	0159      	lsls	r1, r3, #5
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	440b      	add	r3, r1
 8008908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890c:	4619      	mov	r1, r3
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <USB_EP0StartXfer+0x2b4>)
 8008910:	4013      	ands	r3, r2
 8008912:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	0159      	lsls	r1, r3, #5
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	440b      	add	r3, r1
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	4619      	mov	r1, r3
 8008930:	4b2c      	ldr	r3, [pc, #176]	; (80089e4 <USB_EP0StartXfer+0x2b0>)
 8008932:	4013      	ands	r3, r2
 8008934:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800896c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008984:	6939      	ldr	r1, [r7, #16]
 8008986:	0148      	lsls	r0, r1, #5
 8008988:	6979      	ldr	r1, [r7, #20]
 800898a:	4401      	add	r1, r0
 800898c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008990:	4313      	orrs	r3, r2
 8008992:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d10d      	bne.n	80089b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d009      	beq.n	80089b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6919      	ldr	r1, [r3, #16]
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	460a      	mov	r2, r1
 80089b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	0151      	lsls	r1, r2, #5
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	440a      	add	r2, r1
 80089cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	e007ffff 	.word	0xe007ffff
 80089e8:	fff80000 	.word	0xfff80000

080089ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d14a      	bne.n	8008aa0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a22:	f040 8086 	bne.w	8008b32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	7812      	ldrb	r2, [r2, #0]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d902      	bls.n	8008a84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	75fb      	strb	r3, [r7, #23]
          break;
 8008a82:	e056      	b.n	8008b32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a9c:	d0e7      	beq.n	8008a6e <USB_EPStopXfer+0x82>
 8008a9e:	e048      	b.n	8008b32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ab8:	d13b      	bne.n	8008b32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ad8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008adc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	7812      	ldrb	r2, [r2, #0]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3301      	adds	r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d902      	bls.n	8008b18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	75fb      	strb	r3, [r7, #23]
          break;
 8008b16:	e00c      	b.n	8008b32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b30:	d0e7      	beq.n	8008b02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	460b      	mov	r3, r1
 8008b50:	71fb      	strb	r3, [r7, #7]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d123      	bne.n	8008bae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b66:	88bb      	ldrh	r3, [r7, #4]
 8008b68:	3303      	adds	r3, #3
 8008b6a:	089b      	lsrs	r3, r3, #2
 8008b6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	e018      	b.n	8008ba6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	031a      	lsls	r2, r3, #12
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b80:	461a      	mov	r2, r3
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	3301      	adds	r3, #1
 8008b92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	3301      	adds	r3, #1
 8008b98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d3e2      	bcc.n	8008b74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3724      	adds	r7, #36	; 0x24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b08b      	sub	sp, #44	; 0x2c
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	089b      	lsrs	r3, r3, #2
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	e014      	b.n	8008c12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	3301      	adds	r3, #1
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	3301      	adds	r3, #1
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	623b      	str	r3, [r7, #32]
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d3e6      	bcc.n	8008be8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c1a:	8bfb      	ldrh	r3, [r7, #30]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01e      	beq.n	8008c5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f107 0310 	add.w	r3, r7, #16
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	701a      	strb	r2, [r3, #0]
      i++;
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	3301      	adds	r3, #1
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c52:	8bfb      	ldrh	r3, [r7, #30]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c58:	8bfb      	ldrh	r3, [r7, #30]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1ea      	bne.n	8008c34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	372c      	adds	r7, #44	; 0x2c
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d12c      	bne.n	8008ce2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db12      	blt.n	8008cc0 <USB_EPSetStall+0x54>
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00f      	beq.n	8008cc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	e02b      	b.n	8008d3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	db12      	blt.n	8008d1a <USB_EPSetStall+0xae>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00f      	beq.n	8008d1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d128      	bne.n	8008db6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	791b      	ldrb	r3, [r3, #4]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d003      	beq.n	8008d94 <USB_EPClearStall+0x4c>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d138      	bne.n	8008e06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	e027      	b.n	8008e06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	791b      	ldrb	r3, [r3, #4]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d003      	beq.n	8008de6 <USB_EPClearStall+0x9e>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	791b      	ldrb	r3, [r3, #4]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d10f      	bne.n	8008e06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e48:	68f9      	ldr	r1, [r7, #12]
 8008e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8e:	f023 0302 	bic.w	r3, r3, #2
 8008e92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed0:	f043 0302 	orr.w	r3, r3, #2
 8008ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b085      	sub	sp, #20
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	0c1b      	lsrs	r3, r3, #16
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	b29b      	uxth	r3, r3
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b087      	sub	sp, #28
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	fa22 f303 	lsr.w	r3, r2, r3
 8008fde:	01db      	lsls	r3, r3, #7
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	f003 0301 	and.w	r3, r3, #1
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009042:	4619      	mov	r1, r3
 8009044:	4b09      	ldr	r3, [pc, #36]	; (800906c <USB_ActivateSetup+0x44>)
 8009046:	4013      	ands	r3, r2
 8009048:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800905c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	fffff800 	.word	0xfffff800

08009070 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	460b      	mov	r3, r1
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	333c      	adds	r3, #60	; 0x3c
 8009086:	3304      	adds	r3, #4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	4a26      	ldr	r2, [pc, #152]	; (8009128 <USB_EP0_OutStart+0xb8>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d90a      	bls.n	80090aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a4:	d101      	bne.n	80090aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	e037      	b.n	800911a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	461a      	mov	r2, r3
 80090b2:	2300      	movs	r3, #0
 80090b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d8:	f043 0318 	orr.w	r3, r3, #24
 80090dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80090f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d10f      	bne.n	8009118 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009112:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	4f54300a 	.word	0x4f54300a

0800912c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4a13      	ldr	r2, [pc, #76]	; (8009190 <USB_CoreReset+0x64>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d901      	bls.n	800914a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e01b      	b.n	8009182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	daf2      	bge.n	8009138 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f043 0201 	orr.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <USB_CoreReset+0x64>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d901      	bls.n	8009174 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e006      	b.n	8009182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b01      	cmp	r3, #1
 800917e:	d0f0      	beq.n	8009162 <USB_CoreReset+0x36>

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	00030d40 	.word	0x00030d40

08009194 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091a4:	f005 fd8a 	bl	800ecbc <malloc>
 80091a8:	4603      	mov	r3, r0
 80091aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d109      	bne.n	80091c6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32b0      	adds	r2, #176	; 0xb0
 80091bc:	2100      	movs	r1, #0
 80091be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80091c2:	2302      	movs	r3, #2
 80091c4:	e0d4      	b.n	8009370 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80091c6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80091ca:	2100      	movs	r1, #0
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f005 fecd 	bl	800ef6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	32b0      	adds	r2, #176	; 0xb0
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	32b0      	adds	r2, #176	; 0xb0
 80091ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7c1b      	ldrb	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d138      	bne.n	8009270 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091fe:	4b5e      	ldr	r3, [pc, #376]	; (8009378 <USBD_CDC_Init+0x1e4>)
 8009200:	7819      	ldrb	r1, [r3, #0]
 8009202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009206:	2202      	movs	r2, #2
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f005 fbb4 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800920e:	4b5a      	ldr	r3, [pc, #360]	; (8009378 <USBD_CDC_Init+0x1e4>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 020f 	and.w	r2, r3, #15
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4613      	mov	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	3324      	adds	r3, #36	; 0x24
 8009224:	2201      	movs	r2, #1
 8009226:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009228:	4b54      	ldr	r3, [pc, #336]	; (800937c <USBD_CDC_Init+0x1e8>)
 800922a:	7819      	ldrb	r1, [r3, #0]
 800922c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009230:	2202      	movs	r2, #2
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f005 fb9f 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009238:	4b50      	ldr	r3, [pc, #320]	; (800937c <USBD_CDC_Init+0x1e8>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	f003 020f 	and.w	r2, r3, #15
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009250:	2201      	movs	r2, #1
 8009252:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009254:	4b4a      	ldr	r3, [pc, #296]	; (8009380 <USBD_CDC_Init+0x1ec>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	f003 020f 	and.w	r2, r3, #15
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	3326      	adds	r3, #38	; 0x26
 800926a:	2210      	movs	r2, #16
 800926c:	801a      	strh	r2, [r3, #0]
 800926e:	e035      	b.n	80092dc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009270:	4b41      	ldr	r3, [pc, #260]	; (8009378 <USBD_CDC_Init+0x1e4>)
 8009272:	7819      	ldrb	r1, [r3, #0]
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	2202      	movs	r2, #2
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f005 fb7c 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800927e:	4b3e      	ldr	r3, [pc, #248]	; (8009378 <USBD_CDC_Init+0x1e4>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 020f 	and.w	r2, r3, #15
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	3324      	adds	r3, #36	; 0x24
 8009294:	2201      	movs	r2, #1
 8009296:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009298:	4b38      	ldr	r3, [pc, #224]	; (800937c <USBD_CDC_Init+0x1e8>)
 800929a:	7819      	ldrb	r1, [r3, #0]
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	2202      	movs	r2, #2
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f005 fb68 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092a6:	4b35      	ldr	r3, [pc, #212]	; (800937c <USBD_CDC_Init+0x1e8>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092be:	2201      	movs	r2, #1
 80092c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092c2:	4b2f      	ldr	r3, [pc, #188]	; (8009380 <USBD_CDC_Init+0x1ec>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 020f 	and.w	r2, r3, #15
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	3326      	adds	r3, #38	; 0x26
 80092d8:	2210      	movs	r2, #16
 80092da:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092dc:	4b28      	ldr	r3, [pc, #160]	; (8009380 <USBD_CDC_Init+0x1ec>)
 80092de:	7819      	ldrb	r1, [r3, #0]
 80092e0:	2308      	movs	r3, #8
 80092e2:	2203      	movs	r2, #3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f005 fb46 	bl	800e976 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092ea:	4b25      	ldr	r3, [pc, #148]	; (8009380 <USBD_CDC_Init+0x1ec>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	f003 020f 	and.w	r2, r3, #15
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	2201      	movs	r2, #1
 8009302:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	33b0      	adds	r3, #176	; 0xb0
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800933a:	2302      	movs	r3, #2
 800933c:	e018      	b.n	8009370 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7c1b      	ldrb	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009346:	4b0d      	ldr	r3, [pc, #52]	; (800937c <USBD_CDC_Init+0x1e8>)
 8009348:	7819      	ldrb	r1, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f005 fbfd 	bl	800eb54 <USBD_LL_PrepareReceive>
 800935a:	e008      	b.n	800936e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800935c:	4b07      	ldr	r3, [pc, #28]	; (800937c <USBD_CDC_Init+0x1e8>)
 800935e:	7819      	ldrb	r1, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009366:	2340      	movs	r3, #64	; 0x40
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f005 fbf3 	bl	800eb54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000093 	.word	0x20000093
 800937c:	20000094 	.word	0x20000094
 8009380:	20000095 	.word	0x20000095

08009384 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009390:	4b3a      	ldr	r3, [pc, #232]	; (800947c <USBD_CDC_DeInit+0xf8>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f005 fb13 	bl	800e9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800939c:	4b37      	ldr	r3, [pc, #220]	; (800947c <USBD_CDC_DeInit+0xf8>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	f003 020f 	and.w	r2, r3, #15
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	3324      	adds	r3, #36	; 0x24
 80093b2:	2200      	movs	r2, #0
 80093b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80093b6:	4b32      	ldr	r3, [pc, #200]	; (8009480 <USBD_CDC_DeInit+0xfc>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f005 fb00 	bl	800e9c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80093c2:	4b2f      	ldr	r3, [pc, #188]	; (8009480 <USBD_CDC_DeInit+0xfc>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 020f 	and.w	r2, r3, #15
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093da:	2200      	movs	r2, #0
 80093dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80093de:	4b29      	ldr	r3, [pc, #164]	; (8009484 <USBD_CDC_DeInit+0x100>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f005 faec 	bl	800e9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093ea:	4b26      	ldr	r3, [pc, #152]	; (8009484 <USBD_CDC_DeInit+0x100>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	f003 020f 	and.w	r2, r3, #15
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	3324      	adds	r3, #36	; 0x24
 8009400:	2200      	movs	r2, #0
 8009402:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009404:	4b1f      	ldr	r3, [pc, #124]	; (8009484 <USBD_CDC_DeInit+0x100>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 020f 	and.w	r2, r3, #15
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	3326      	adds	r3, #38	; 0x26
 800941a:	2200      	movs	r2, #0
 800941c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	32b0      	adds	r2, #176	; 0xb0
 8009428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01f      	beq.n	8009470 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	33b0      	adds	r3, #176	; 0xb0
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	32b0      	adds	r2, #176	; 0xb0
 800944e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009452:	4618      	mov	r0, r3
 8009454:	f005 fc3a 	bl	800eccc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	32b0      	adds	r2, #176	; 0xb0
 8009462:	2100      	movs	r1, #0
 8009464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000093 	.word	0x20000093
 8009480:	20000094 	.word	0x20000094
 8009484:	20000095 	.word	0x20000095

08009488 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	32b0      	adds	r2, #176	; 0xb0
 800949c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e0bf      	b.n	8009638 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d050      	beq.n	8009566 <USBD_CDC_Setup+0xde>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	f040 80af 	bne.w	8009628 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	88db      	ldrh	r3, [r3, #6]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d03a      	beq.n	8009548 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da1b      	bge.n	8009514 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	33b0      	adds	r3, #176	; 0xb0
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	88d2      	ldrh	r2, [r2, #6]
 80094f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	2b07      	cmp	r3, #7
 8009500:	bf28      	it	cs
 8009502:	2307      	movcs	r3, #7
 8009504:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	89fa      	ldrh	r2, [r7, #14]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fd6d 	bl	800afec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009512:	e090      	b.n	8009636 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	785a      	ldrb	r2, [r3, #1]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	88db      	ldrh	r3, [r3, #6]
 8009522:	2b3f      	cmp	r3, #63	; 0x3f
 8009524:	d803      	bhi.n	800952e <USBD_CDC_Setup+0xa6>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	88db      	ldrh	r3, [r3, #6]
 800952a:	b2da      	uxtb	r2, r3
 800952c:	e000      	b.n	8009530 <USBD_CDC_Setup+0xa8>
 800952e:	2240      	movs	r2, #64	; 0x40
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009536:	6939      	ldr	r1, [r7, #16]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800953e:	461a      	mov	r2, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 fd7f 	bl	800b044 <USBD_CtlPrepareRx>
      break;
 8009546:	e076      	b.n	8009636 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	33b0      	adds	r3, #176	; 0xb0
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	7850      	ldrb	r0, [r2, #1]
 800955e:	2200      	movs	r2, #0
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	4798      	blx	r3
      break;
 8009564:	e067      	b.n	8009636 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	785b      	ldrb	r3, [r3, #1]
 800956a:	2b0b      	cmp	r3, #11
 800956c:	d851      	bhi.n	8009612 <USBD_CDC_Setup+0x18a>
 800956e:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <USBD_CDC_Setup+0xec>)
 8009570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009574:	080095a5 	.word	0x080095a5
 8009578:	08009621 	.word	0x08009621
 800957c:	08009613 	.word	0x08009613
 8009580:	08009613 	.word	0x08009613
 8009584:	08009613 	.word	0x08009613
 8009588:	08009613 	.word	0x08009613
 800958c:	08009613 	.word	0x08009613
 8009590:	08009613 	.word	0x08009613
 8009594:	08009613 	.word	0x08009613
 8009598:	08009613 	.word	0x08009613
 800959c:	080095cf 	.word	0x080095cf
 80095a0:	080095f9 	.word	0x080095f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d107      	bne.n	80095c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095b0:	f107 030a 	add.w	r3, r7, #10
 80095b4:	2202      	movs	r2, #2
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fd17 	bl	800afec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095be:	e032      	b.n	8009626 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fca1 	bl	800af0a <USBD_CtlError>
            ret = USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	75fb      	strb	r3, [r7, #23]
          break;
 80095cc:	e02b      	b.n	8009626 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d107      	bne.n	80095ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095da:	f107 030d 	add.w	r3, r7, #13
 80095de:	2201      	movs	r2, #1
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fd02 	bl	800afec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095e8:	e01d      	b.n	8009626 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 fc8c 	bl	800af0a <USBD_CtlError>
            ret = USBD_FAIL;
 80095f2:	2303      	movs	r3, #3
 80095f4:	75fb      	strb	r3, [r7, #23]
          break;
 80095f6:	e016      	b.n	8009626 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b03      	cmp	r3, #3
 8009602:	d00f      	beq.n	8009624 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fc7f 	bl	800af0a <USBD_CtlError>
            ret = USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009610:	e008      	b.n	8009624 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 fc78 	bl	800af0a <USBD_CtlError>
          ret = USBD_FAIL;
 800961a:	2303      	movs	r3, #3
 800961c:	75fb      	strb	r3, [r7, #23]
          break;
 800961e:	e002      	b.n	8009626 <USBD_CDC_Setup+0x19e>
          break;
 8009620:	bf00      	nop
 8009622:	e008      	b.n	8009636 <USBD_CDC_Setup+0x1ae>
          break;
 8009624:	bf00      	nop
      }
      break;
 8009626:	e006      	b.n	8009636 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f001 fc6d 	bl	800af0a <USBD_CtlError>
      ret = USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	75fb      	strb	r3, [r7, #23]
      break;
 8009634:	bf00      	nop
  }

  return (uint8_t)ret;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009652:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	32b0      	adds	r2, #176	; 0xb0
 800965e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009666:	2303      	movs	r3, #3
 8009668:	e065      	b.n	8009736 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32b0      	adds	r2, #176	; 0xb0
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	3318      	adds	r3, #24
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d02f      	beq.n	80096f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	f003 020f 	and.w	r2, r3, #15
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	440b      	add	r3, r1
 80096a6:	3318      	adds	r3, #24
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	f003 010f 	and.w	r1, r3, #15
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	460b      	mov	r3, r1
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	440b      	add	r3, r1
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4403      	add	r3, r0
 80096bc:	3348      	adds	r3, #72	; 0x48
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80096c4:	fb01 f303 	mul.w	r3, r1, r3
 80096c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d112      	bne.n	80096f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	3318      	adds	r3, #24
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096e6:	78f9      	ldrb	r1, [r7, #3]
 80096e8:	2300      	movs	r3, #0
 80096ea:	2200      	movs	r2, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f005 fa10 	bl	800eb12 <USBD_LL_Transmit>
 80096f2:	e01f      	b.n	8009734 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	33b0      	adds	r3, #176	; 0xb0
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d010      	beq.n	8009734 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	33b0      	adds	r3, #176	; 0xb0
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	460b      	mov	r3, r1
 8009748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	32b0      	adds	r2, #176	; 0xb0
 8009754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009758:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	32b0      	adds	r2, #176	; 0xb0
 8009764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800976c:	2303      	movs	r3, #3
 800976e:	e01a      	b.n	80097a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f005 fa0e 	bl	800eb96 <USBD_LL_GetRxDataSize>
 800977a:	4602      	mov	r2, r0
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	33b0      	adds	r3, #176	; 0xb0
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80097a0:	4611      	mov	r1, r2
 80097a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	32b0      	adds	r2, #176	; 0xb0
 80097c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e025      	b.n	800981c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	33b0      	adds	r3, #176	; 0xb0
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01a      	beq.n	800981a <USBD_CDC_EP0_RxReady+0x6c>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097ea:	2bff      	cmp	r3, #255	; 0xff
 80097ec:	d015      	beq.n	800981a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	33b0      	adds	r3, #176	; 0xb0
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009806:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800980e:	b292      	uxth	r2, r2
 8009810:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	22ff      	movs	r2, #255	; 0xff
 8009816:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800982c:	2182      	movs	r1, #130	; 0x82
 800982e:	4818      	ldr	r0, [pc, #96]	; (8009890 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009830:	f000 fd09 	bl	800a246 <USBD_GetEpDesc>
 8009834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009836:	2101      	movs	r1, #1
 8009838:	4815      	ldr	r0, [pc, #84]	; (8009890 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800983a:	f000 fd04 	bl	800a246 <USBD_GetEpDesc>
 800983e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009840:	2181      	movs	r1, #129	; 0x81
 8009842:	4813      	ldr	r0, [pc, #76]	; (8009890 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009844:	f000 fcff 	bl	800a246 <USBD_GetEpDesc>
 8009848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2210      	movs	r2, #16
 8009854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d006      	beq.n	800986a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	2200      	movs	r2, #0
 8009860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009864:	711a      	strb	r2, [r3, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d006      	beq.n	800987e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009878:	711a      	strb	r2, [r3, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2243      	movs	r2, #67	; 0x43
 8009882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009884:	4b02      	ldr	r3, [pc, #8]	; (8009890 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000050 	.word	0x20000050

08009894 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800989c:	2182      	movs	r1, #130	; 0x82
 800989e:	4818      	ldr	r0, [pc, #96]	; (8009900 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098a0:	f000 fcd1 	bl	800a246 <USBD_GetEpDesc>
 80098a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098a6:	2101      	movs	r1, #1
 80098a8:	4815      	ldr	r0, [pc, #84]	; (8009900 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098aa:	f000 fccc 	bl	800a246 <USBD_GetEpDesc>
 80098ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098b0:	2181      	movs	r1, #129	; 0x81
 80098b2:	4813      	ldr	r0, [pc, #76]	; (8009900 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098b4:	f000 fcc7 	bl	800a246 <USBD_GetEpDesc>
 80098b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2210      	movs	r2, #16
 80098c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d006      	beq.n	80098da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	2200      	movs	r2, #0
 80098d0:	711a      	strb	r2, [r3, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f042 0202 	orr.w	r2, r2, #2
 80098d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d006      	beq.n	80098ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	711a      	strb	r2, [r3, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f042 0202 	orr.w	r2, r2, #2
 80098ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2243      	movs	r2, #67	; 0x43
 80098f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000050 	.word	0x20000050

08009904 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800990c:	2182      	movs	r1, #130	; 0x82
 800990e:	4818      	ldr	r0, [pc, #96]	; (8009970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009910:	f000 fc99 	bl	800a246 <USBD_GetEpDesc>
 8009914:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009916:	2101      	movs	r1, #1
 8009918:	4815      	ldr	r0, [pc, #84]	; (8009970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800991a:	f000 fc94 	bl	800a246 <USBD_GetEpDesc>
 800991e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009920:	2181      	movs	r1, #129	; 0x81
 8009922:	4813      	ldr	r0, [pc, #76]	; (8009970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009924:	f000 fc8f 	bl	800a246 <USBD_GetEpDesc>
 8009928:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2210      	movs	r2, #16
 8009934:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d006      	beq.n	800994a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2200      	movs	r2, #0
 8009940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009944:	711a      	strb	r2, [r3, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009958:	711a      	strb	r2, [r3, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2243      	movs	r2, #67	; 0x43
 8009962:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000050 	.word	0x20000050

08009974 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	220a      	movs	r2, #10
 8009980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009982:	4b03      	ldr	r3, [pc, #12]	; (8009990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	2000000c 	.word	0x2000000c

08009994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e009      	b.n	80099bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	33b0      	adds	r3, #176	; 0xb0
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	32b0      	adds	r2, #176	; 0xb0
 80099de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e008      	b.n	8009a00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	32b0      	adds	r2, #176	; 0xb0
 8009a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e004      	b.n	8009a3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
	...

08009a48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	32b0      	adds	r2, #176	; 0xb0
 8009a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32b0      	adds	r2, #176	; 0xb0
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e018      	b.n	8009aa8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7c1b      	ldrb	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <USBD_CDC_ReceivePacket+0x68>)
 8009a80:	7819      	ldrb	r1, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f005 f861 	bl	800eb54 <USBD_LL_PrepareReceive>
 8009a92:	e008      	b.n	8009aa6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a94:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <USBD_CDC_ReceivePacket+0x68>)
 8009a96:	7819      	ldrb	r1, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a9e:	2340      	movs	r3, #64	; 0x40
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f005 f857 	bl	800eb54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	20000094 	.word	0x20000094

08009ab4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e01f      	b.n	8009b0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f004 fed1 	bl	800e8a8 <USBD_LL_Init>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e025      	b.n	8009b78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32ae      	adds	r2, #174	; 0xae
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00f      	beq.n	8009b68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	32ae      	adds	r2, #174	; 0xae
 8009b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	f107 020e 	add.w	r2, r7, #14
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4798      	blx	r3
 8009b60:	4602      	mov	r2, r0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f004 fed9 	bl	800e940 <USBD_LL_Start>
 8009b8e:	4603      	mov	r3, r0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	78fa      	ldrb	r2, [r7, #3]
 8009c00:	4611      	mov	r1, r2
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	4798      	blx	r3
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 f932 	bl	800ae96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c40:	461a      	mov	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d01a      	beq.n	8009c8c <USBD_LL_SetupStage+0x72>
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d822      	bhi.n	8009ca0 <USBD_LL_SetupStage+0x86>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <USBD_LL_SetupStage+0x4a>
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d00a      	beq.n	8009c78 <USBD_LL_SetupStage+0x5e>
 8009c62:	e01d      	b.n	8009ca0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fb5f 	bl	800a330 <USBD_StdDevReq>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]
      break;
 8009c76:	e020      	b.n	8009cba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fbc7 	bl	800a414 <USBD_StdItfReq>
 8009c86:	4603      	mov	r3, r0
 8009c88:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8a:	e016      	b.n	8009cba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fc29 	bl	800a4ec <USBD_StdEPReq>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c9e:	e00c      	b.n	8009cba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f004 fea6 	bl	800ea00 <USBD_LL_StallEP>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb8:	bf00      	nop
  }

  return ret;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009cd6:	7afb      	ldrb	r3, [r7, #11]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d16e      	bne.n	8009dba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ce2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	f040 8098 	bne.w	8009e20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d913      	bls.n	8009d24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	689a      	ldr	r2, [r3, #8]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	1ad2      	subs	r2, r2, r3
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	4293      	cmp	r3, r2
 8009d14:	bf28      	it	cs
 8009d16:	4613      	movcs	r3, r2
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f001 f9ae 	bl	800b07e <USBD_CtlContinueRx>
 8009d22:	e07d      	b.n	8009e20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d2a:	f003 031f 	and.w	r3, r3, #31
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d014      	beq.n	8009d5c <USBD_LL_DataOutStage+0x98>
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d81d      	bhi.n	8009d72 <USBD_LL_DataOutStage+0xae>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <USBD_LL_DataOutStage+0x7c>
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d003      	beq.n	8009d46 <USBD_LL_DataOutStage+0x82>
 8009d3e:	e018      	b.n	8009d72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75bb      	strb	r3, [r7, #22]
            break;
 8009d44:	e018      	b.n	8009d78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	4619      	mov	r1, r3
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 fa5e 	bl	800a212 <USBD_CoreFindIF>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75bb      	strb	r3, [r7, #22]
            break;
 8009d5a:	e00d      	b.n	8009d78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	4619      	mov	r1, r3
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f000 fa60 	bl	800a22c <USBD_CoreFindEP>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8009d70:	e002      	b.n	8009d78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75bb      	strb	r3, [r7, #22]
            break;
 8009d76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d78:	7dbb      	ldrb	r3, [r7, #22]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d119      	bne.n	8009db2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d113      	bne.n	8009db2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d8a:	7dba      	ldrb	r2, [r7, #22]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	32ae      	adds	r2, #174	; 0xae
 8009d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00b      	beq.n	8009db2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d9a:	7dba      	ldrb	r2, [r7, #22]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009da2:	7dba      	ldrb	r2, [r7, #22]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	32ae      	adds	r2, #174	; 0xae
 8009da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f001 f974 	bl	800b0a0 <USBD_CtlSendStatus>
 8009db8:	e032      	b.n	8009e20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 fa31 	bl	800a22c <USBD_CoreFindEP>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dce:	7dbb      	ldrb	r3, [r7, #22]
 8009dd0:	2bff      	cmp	r3, #255	; 0xff
 8009dd2:	d025      	beq.n	8009e20 <USBD_LL_DataOutStage+0x15c>
 8009dd4:	7dbb      	ldrb	r3, [r7, #22]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d122      	bne.n	8009e20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d117      	bne.n	8009e16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009de6:	7dba      	ldrb	r2, [r7, #22]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	32ae      	adds	r2, #174	; 0xae
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00f      	beq.n	8009e16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009df6:	7dba      	ldrb	r2, [r7, #22]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009dfe:	7dba      	ldrb	r2, [r7, #22]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	32ae      	adds	r2, #174	; 0xae
 8009e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	7afa      	ldrb	r2, [r7, #11]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	e000      	b.n	8009e22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	460b      	mov	r3, r1
 8009e34:	607a      	str	r2, [r7, #4]
 8009e36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d16f      	bne.n	8009f1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3314      	adds	r3, #20
 8009e42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d15a      	bne.n	8009f04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d914      	bls.n	8009e84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f001 f8d6 	bl	800b022 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e76:	2300      	movs	r3, #0
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f004 fe69 	bl	800eb54 <USBD_LL_PrepareReceive>
 8009e82:	e03f      	b.n	8009f04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d11c      	bne.n	8009eca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d316      	bcc.n	8009eca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d20f      	bcs.n	8009eca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2100      	movs	r1, #0
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f001 f8b7 	bl	800b022 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f004 fe46 	bl	800eb54 <USBD_LL_PrepareReceive>
 8009ec8:	e01c      	b.n	8009f04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d10f      	bne.n	8009ef6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ef6:	2180      	movs	r1, #128	; 0x80
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f004 fd81 	bl	800ea00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f001 f8e1 	bl	800b0c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d03a      	beq.n	8009f84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7ff fe42 	bl	8009b98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f1c:	e032      	b.n	8009f84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	4619      	mov	r1, r3
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 f97f 	bl	800a22c <USBD_CoreFindEP>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2bff      	cmp	r3, #255	; 0xff
 8009f36:	d025      	beq.n	8009f84 <USBD_LL_DataInStage+0x15a>
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d122      	bne.n	8009f84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d11c      	bne.n	8009f84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f4a:	7dfa      	ldrb	r2, [r7, #23]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	32ae      	adds	r2, #174	; 0xae
 8009f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d014      	beq.n	8009f84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009f5a:	7dfa      	ldrb	r2, [r7, #23]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f62:	7dfa      	ldrb	r2, [r7, #23]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	32ae      	adds	r2, #174	; 0xae
 8009f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	7afa      	ldrb	r2, [r7, #11]
 8009f70:	4611      	mov	r1, r2
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	4798      	blx	r3
 8009f76:	4603      	mov	r3, r0
 8009f78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f7a:	7dbb      	ldrb	r3, [r7, #22]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f80:	7dbb      	ldrb	r3, [r7, #22]
 8009f82:	e000      	b.n	8009f86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d014      	beq.n	8009ff4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00e      	beq.n	8009ff4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6852      	ldr	r2, [r2, #4]
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ff4:	2340      	movs	r3, #64	; 0x40
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f004 fcbb 	bl	800e976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2240      	movs	r2, #64	; 0x40
 800a00c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a010:	2340      	movs	r3, #64	; 0x40
 800a012:	2200      	movs	r2, #0
 800a014:	2180      	movs	r1, #128	; 0x80
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f004 fcad 	bl	800e976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2240      	movs	r2, #64	; 0x40
 800a026:	621a      	str	r2, [r3, #32]

  return ret;
 800a028:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a032:	b480      	push	{r7}
 800a034:	b083      	sub	sp, #12
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a060:	b2da      	uxtb	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2204      	movs	r2, #4
 800a06c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d106      	bne.n	800a0a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d110      	bne.n	800a0e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d005      	beq.n	800a0e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32ae      	adds	r2, #174	; 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e01c      	b.n	800a14a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d115      	bne.n	800a148 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	; 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32ae      	adds	r2, #174	; 0xae
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	78fa      	ldrb	r2, [r7, #3]
 800a142:	4611      	mov	r1, r2
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	32ae      	adds	r2, #174	; 0xae
 800a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a170:	2303      	movs	r3, #3
 800a172:	e01c      	b.n	800a1ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d115      	bne.n	800a1ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	32ae      	adds	r2, #174	; 0xae
 800a18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	32ae      	adds	r2, #174	; 0xae
 800a19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	6852      	ldr	r2, [r2, #4]
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	4798      	blx	r3
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a204:	2303      	movs	r3, #3
 800a206:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a21e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a238:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b086      	sub	sp, #24
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	460b      	mov	r3, r1
 800a250:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	b29a      	uxth	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d920      	bls.n	800a2b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	b29b      	uxth	r3, r3
 800a274:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a276:	e013      	b.n	800a2a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a278:	f107 030a 	add.w	r3, r7, #10
 800a27c:	4619      	mov	r1, r3
 800a27e:	6978      	ldr	r0, [r7, #20]
 800a280:	f000 f81b 	bl	800a2ba <USBD_GetNextDesc>
 800a284:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	d108      	bne.n	800a2a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	789b      	ldrb	r3, [r3, #2]
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d008      	beq.n	800a2ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	885b      	ldrh	r3, [r3, #2]
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	897b      	ldrh	r3, [r7, #10]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d8e5      	bhi.n	800a278 <USBD_GetEpDesc+0x32>
 800a2ac:	e000      	b.n	800a2b0 <USBD_GetEpDesc+0x6a>
          break;
 800a2ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a2b0:	693b      	ldr	r3, [r7, #16]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	881a      	ldrh	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	3301      	adds	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a312:	8a3b      	ldrh	r3, [r7, #16]
 800a314:	021b      	lsls	r3, r3, #8
 800a316:	b21a      	sxth	r2, r3
 800a318:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	b21b      	sxth	r3, r3
 800a320:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a322:	89fb      	ldrh	r3, [r7, #14]
}
 800a324:	4618      	mov	r0, r3
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a346:	2b40      	cmp	r3, #64	; 0x40
 800a348:	d005      	beq.n	800a356 <USBD_StdDevReq+0x26>
 800a34a:	2b40      	cmp	r3, #64	; 0x40
 800a34c:	d857      	bhi.n	800a3fe <USBD_StdDevReq+0xce>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00f      	beq.n	800a372 <USBD_StdDevReq+0x42>
 800a352:	2b20      	cmp	r3, #32
 800a354:	d153      	bne.n	800a3fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	32ae      	adds	r2, #174	; 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]
      break;
 800a370:	e04a      	b.n	800a408 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	2b09      	cmp	r3, #9
 800a378:	d83b      	bhi.n	800a3f2 <USBD_StdDevReq+0xc2>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <USBD_StdDevReq+0x50>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a3d5 	.word	0x0800a3d5
 800a384:	0800a3e9 	.word	0x0800a3e9
 800a388:	0800a3f3 	.word	0x0800a3f3
 800a38c:	0800a3df 	.word	0x0800a3df
 800a390:	0800a3f3 	.word	0x0800a3f3
 800a394:	0800a3b3 	.word	0x0800a3b3
 800a398:	0800a3a9 	.word	0x0800a3a9
 800a39c:	0800a3f3 	.word	0x0800a3f3
 800a3a0:	0800a3cb 	.word	0x0800a3cb
 800a3a4:	0800a3bd 	.word	0x0800a3bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fa3c 	bl	800a828 <USBD_GetDescriptor>
          break;
 800a3b0:	e024      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fbcb 	bl	800ab50 <USBD_SetAddress>
          break;
 800a3ba:	e01f      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fc0a 	bl	800abd8 <USBD_SetConfig>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]
          break;
 800a3c8:	e018      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fcad 	bl	800ad2c <USBD_GetConfig>
          break;
 800a3d2:	e013      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fcde 	bl	800ad98 <USBD_GetStatus>
          break;
 800a3dc:	e00e      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fd0d 	bl	800ae00 <USBD_SetFeature>
          break;
 800a3e6:	e009      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fd31 	bl	800ae52 <USBD_ClrFeature>
          break;
 800a3f0:	e004      	b.n	800a3fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fd88 	bl	800af0a <USBD_CtlError>
          break;
 800a3fa:	bf00      	nop
      }
      break;
 800a3fc:	e004      	b.n	800a408 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fd82 	bl	800af0a <USBD_CtlError>
      break;
 800a406:	bf00      	nop
  }

  return ret;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop

0800a414 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d005      	beq.n	800a43a <USBD_StdItfReq+0x26>
 800a42e:	2b40      	cmp	r3, #64	; 0x40
 800a430:	d852      	bhi.n	800a4d8 <USBD_StdItfReq+0xc4>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <USBD_StdItfReq+0x26>
 800a436:	2b20      	cmp	r3, #32
 800a438:	d14e      	bne.n	800a4d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a440:	b2db      	uxtb	r3, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	2b02      	cmp	r3, #2
 800a446:	d840      	bhi.n	800a4ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	889b      	ldrh	r3, [r3, #4]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d836      	bhi.n	800a4c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	889b      	ldrh	r3, [r3, #4]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7ff fed9 	bl	800a212 <USBD_CoreFindIF>
 800a460:	4603      	mov	r3, r0
 800a462:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a464:	7bbb      	ldrb	r3, [r7, #14]
 800a466:	2bff      	cmp	r3, #255	; 0xff
 800a468:	d01d      	beq.n	800a4a6 <USBD_StdItfReq+0x92>
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d11a      	bne.n	800a4a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a470:	7bba      	ldrb	r2, [r7, #14]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32ae      	adds	r2, #174	; 0xae
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00f      	beq.n	800a4a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a480:	7bba      	ldrb	r2, [r7, #14]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a488:	7bba      	ldrb	r2, [r7, #14]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	32ae      	adds	r2, #174	; 0xae
 800a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	4798      	blx	r3
 800a49a:	4603      	mov	r3, r0
 800a49c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a49e:	e004      	b.n	800a4aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4a4:	e001      	b.n	800a4aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	88db      	ldrh	r3, [r3, #6]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d110      	bne.n	800a4d4 <USBD_StdItfReq+0xc0>
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10d      	bne.n	800a4d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fdf1 	bl	800b0a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4be:	e009      	b.n	800a4d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fd21 	bl	800af0a <USBD_CtlError>
          break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fd1c 	bl	800af0a <USBD_CtlError>
          break;
 800a4d2:	e000      	b.n	800a4d6 <USBD_StdItfReq+0xc2>
          break;
 800a4d4:	bf00      	nop
      }
      break;
 800a4d6:	e004      	b.n	800a4e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fd15 	bl	800af0a <USBD_CtlError>
      break;
 800a4e0:	bf00      	nop
  }

  return ret;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	889b      	ldrh	r3, [r3, #4]
 800a4fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a508:	2b40      	cmp	r3, #64	; 0x40
 800a50a:	d007      	beq.n	800a51c <USBD_StdEPReq+0x30>
 800a50c:	2b40      	cmp	r3, #64	; 0x40
 800a50e:	f200 817f 	bhi.w	800a810 <USBD_StdEPReq+0x324>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d02a      	beq.n	800a56c <USBD_StdEPReq+0x80>
 800a516:	2b20      	cmp	r3, #32
 800a518:	f040 817a 	bne.w	800a810 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff fe83 	bl	800a22c <USBD_CoreFindEP>
 800a526:	4603      	mov	r3, r0
 800a528:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a52a:	7b7b      	ldrb	r3, [r7, #13]
 800a52c:	2bff      	cmp	r3, #255	; 0xff
 800a52e:	f000 8174 	beq.w	800a81a <USBD_StdEPReq+0x32e>
 800a532:	7b7b      	ldrb	r3, [r7, #13]
 800a534:	2b00      	cmp	r3, #0
 800a536:	f040 8170 	bne.w	800a81a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a53a:	7b7a      	ldrb	r2, [r7, #13]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a542:	7b7a      	ldrb	r2, [r7, #13]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	32ae      	adds	r2, #174	; 0xae
 800a548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 8163 	beq.w	800a81a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a554:	7b7a      	ldrb	r2, [r7, #13]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	32ae      	adds	r2, #174	; 0xae
 800a55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
 800a566:	4603      	mov	r3, r0
 800a568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a56a:	e156      	b.n	800a81a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	2b03      	cmp	r3, #3
 800a572:	d008      	beq.n	800a586 <USBD_StdEPReq+0x9a>
 800a574:	2b03      	cmp	r3, #3
 800a576:	f300 8145 	bgt.w	800a804 <USBD_StdEPReq+0x318>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 809b 	beq.w	800a6b6 <USBD_StdEPReq+0x1ca>
 800a580:	2b01      	cmp	r3, #1
 800a582:	d03c      	beq.n	800a5fe <USBD_StdEPReq+0x112>
 800a584:	e13e      	b.n	800a804 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d002      	beq.n	800a598 <USBD_StdEPReq+0xac>
 800a592:	2b03      	cmp	r3, #3
 800a594:	d016      	beq.n	800a5c4 <USBD_StdEPReq+0xd8>
 800a596:	e02c      	b.n	800a5f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00d      	beq.n	800a5ba <USBD_StdEPReq+0xce>
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	2b80      	cmp	r3, #128	; 0x80
 800a5a2:	d00a      	beq.n	800a5ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f004 fa29 	bl	800ea00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5ae:	2180      	movs	r1, #128	; 0x80
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f004 fa25 	bl	800ea00 <USBD_LL_StallEP>
 800a5b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5b8:	e020      	b.n	800a5fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fca4 	bl	800af0a <USBD_CtlError>
              break;
 800a5c2:	e01b      	b.n	800a5fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10e      	bne.n	800a5ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00b      	beq.n	800a5ea <USBD_StdEPReq+0xfe>
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d008      	beq.n	800a5ea <USBD_StdEPReq+0xfe>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	88db      	ldrh	r3, [r3, #6]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d104      	bne.n	800a5ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f004 fa0b 	bl	800ea00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fd58 	bl	800b0a0 <USBD_CtlSendStatus>

              break;
 800a5f0:	e004      	b.n	800a5fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fc88 	bl	800af0a <USBD_CtlError>
              break;
 800a5fa:	bf00      	nop
          }
          break;
 800a5fc:	e107      	b.n	800a80e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b02      	cmp	r3, #2
 800a608:	d002      	beq.n	800a610 <USBD_StdEPReq+0x124>
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d016      	beq.n	800a63c <USBD_StdEPReq+0x150>
 800a60e:	e04b      	b.n	800a6a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00d      	beq.n	800a632 <USBD_StdEPReq+0x146>
 800a616:	7bbb      	ldrb	r3, [r7, #14]
 800a618:	2b80      	cmp	r3, #128	; 0x80
 800a61a:	d00a      	beq.n	800a632 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f004 f9ed 	bl	800ea00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a626:	2180      	movs	r1, #128	; 0x80
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f004 f9e9 	bl	800ea00 <USBD_LL_StallEP>
 800a62e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a630:	e040      	b.n	800a6b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc68 	bl	800af0a <USBD_CtlError>
              break;
 800a63a:	e03b      	b.n	800a6b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	885b      	ldrh	r3, [r3, #2]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d136      	bne.n	800a6b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d004      	beq.n	800a658 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f004 f9f3 	bl	800ea3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fd21 	bl	800b0a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff fde2 	bl	800a22c <USBD_CoreFindEP>
 800a668:	4603      	mov	r3, r0
 800a66a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a66c:	7b7b      	ldrb	r3, [r7, #13]
 800a66e:	2bff      	cmp	r3, #255	; 0xff
 800a670:	d01f      	beq.n	800a6b2 <USBD_StdEPReq+0x1c6>
 800a672:	7b7b      	ldrb	r3, [r7, #13]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d11c      	bne.n	800a6b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a678:	7b7a      	ldrb	r2, [r7, #13]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a680:	7b7a      	ldrb	r2, [r7, #13]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	32ae      	adds	r2, #174	; 0xae
 800a686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d010      	beq.n	800a6b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a690:	7b7a      	ldrb	r2, [r7, #13]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	32ae      	adds	r2, #174	; 0xae
 800a696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a6a6:	e004      	b.n	800a6b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fc2d 	bl	800af0a <USBD_CtlError>
              break;
 800a6b0:	e000      	b.n	800a6b4 <USBD_StdEPReq+0x1c8>
              break;
 800a6b2:	bf00      	nop
          }
          break;
 800a6b4:	e0ab      	b.n	800a80e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d002      	beq.n	800a6c8 <USBD_StdEPReq+0x1dc>
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d032      	beq.n	800a72c <USBD_StdEPReq+0x240>
 800a6c6:	e097      	b.n	800a7f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <USBD_StdEPReq+0x1f2>
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b80      	cmp	r3, #128	; 0x80
 800a6d2:	d004      	beq.n	800a6de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fc17 	bl	800af0a <USBD_CtlError>
                break;
 800a6dc:	e091      	b.n	800a802 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	da0b      	bge.n	800a6fe <USBD_StdEPReq+0x212>
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	e00b      	b.n	800a716 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	4413      	add	r3, r2
 800a714:	3304      	adds	r3, #4
 800a716:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2202      	movs	r2, #2
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fc61 	bl	800afec <USBD_CtlSendData>
              break;
 800a72a:	e06a      	b.n	800a802 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a72c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a730:	2b00      	cmp	r3, #0
 800a732:	da11      	bge.n	800a758 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	f003 020f 	and.w	r2, r3, #15
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	3324      	adds	r3, #36	; 0x24
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d117      	bne.n	800a77e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fbda 	bl	800af0a <USBD_CtlError>
                  break;
 800a756:	e054      	b.n	800a802 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	f003 020f 	and.w	r2, r3, #15
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d104      	bne.n	800a77e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fbc7 	bl	800af0a <USBD_CtlError>
                  break;
 800a77c:	e041      	b.n	800a802 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a77e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a782:	2b00      	cmp	r3, #0
 800a784:	da0b      	bge.n	800a79e <USBD_StdEPReq+0x2b2>
 800a786:	7bbb      	ldrb	r3, [r7, #14]
 800a788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	3310      	adds	r3, #16
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	4413      	add	r3, r2
 800a79a:	3304      	adds	r3, #4
 800a79c:	e00b      	b.n	800a7b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <USBD_StdEPReq+0x2d8>
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b80      	cmp	r3, #128	; 0x80
 800a7c2:	d103      	bne.n	800a7cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e00e      	b.n	800a7ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f004 f953 	bl	800ea7c <USBD_LL_IsStallEP>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e002      	b.n	800a7ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fbfb 	bl	800afec <USBD_CtlSendData>
              break;
 800a7f6:	e004      	b.n	800a802 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fb85 	bl	800af0a <USBD_CtlError>
              break;
 800a800:	bf00      	nop
          }
          break;
 800a802:	e004      	b.n	800a80e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fb7f 	bl	800af0a <USBD_CtlError>
          break;
 800a80c:	bf00      	nop
      }
      break;
 800a80e:	e005      	b.n	800a81c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fb79 	bl	800af0a <USBD_CtlError>
      break;
 800a818:	e000      	b.n	800a81c <USBD_StdEPReq+0x330>
      break;
 800a81a:	bf00      	nop
  }

  return ret;
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	885b      	ldrh	r3, [r3, #2]
 800a842:	0a1b      	lsrs	r3, r3, #8
 800a844:	b29b      	uxth	r3, r3
 800a846:	3b01      	subs	r3, #1
 800a848:	2b0e      	cmp	r3, #14
 800a84a:	f200 8152 	bhi.w	800aaf2 <USBD_GetDescriptor+0x2ca>
 800a84e:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <USBD_GetDescriptor+0x2c>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a8c5 	.word	0x0800a8c5
 800a858:	0800a8dd 	.word	0x0800a8dd
 800a85c:	0800a91d 	.word	0x0800a91d
 800a860:	0800aaf3 	.word	0x0800aaf3
 800a864:	0800aaf3 	.word	0x0800aaf3
 800a868:	0800aa93 	.word	0x0800aa93
 800a86c:	0800aabf 	.word	0x0800aabf
 800a870:	0800aaf3 	.word	0x0800aaf3
 800a874:	0800aaf3 	.word	0x0800aaf3
 800a878:	0800aaf3 	.word	0x0800aaf3
 800a87c:	0800aaf3 	.word	0x0800aaf3
 800a880:	0800aaf3 	.word	0x0800aaf3
 800a884:	0800aaf3 	.word	0x0800aaf3
 800a888:	0800aaf3 	.word	0x0800aaf3
 800a88c:	0800a891 	.word	0x0800a891
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7c12      	ldrb	r2, [r2, #16]
 800a8a8:	f107 0108 	add.w	r1, r7, #8
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8b2:	e126      	b.n	800ab02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fb27 	bl	800af0a <USBD_CtlError>
        err++;
 800a8bc:	7afb      	ldrb	r3, [r7, #11]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	72fb      	strb	r3, [r7, #11]
      break;
 800a8c2:	e11e      	b.n	800ab02 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	7c12      	ldrb	r2, [r2, #16]
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	60f8      	str	r0, [r7, #12]
      break;
 800a8da:	e112      	b.n	800ab02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	7c1b      	ldrb	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10d      	bne.n	800a900 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ec:	f107 0208 	add.w	r2, r7, #8
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8fe:	e100      	b.n	800ab02 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	f107 0208 	add.w	r2, r7, #8
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3301      	adds	r3, #1
 800a916:	2202      	movs	r2, #2
 800a918:	701a      	strb	r2, [r3, #0]
      break;
 800a91a:	e0f2      	b.n	800ab02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	885b      	ldrh	r3, [r3, #2]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b05      	cmp	r3, #5
 800a924:	f200 80ac 	bhi.w	800aa80 <USBD_GetDescriptor+0x258>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <USBD_GetDescriptor+0x108>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a97d 	.word	0x0800a97d
 800a938:	0800a9b1 	.word	0x0800a9b1
 800a93c:	0800a9e5 	.word	0x0800a9e5
 800a940:	0800aa19 	.word	0x0800aa19
 800a944:	0800aa4d 	.word	0x0800aa4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7c12      	ldrb	r2, [r2, #16]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a96a:	e091      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 facb 	bl	800af0a <USBD_CtlError>
            err++;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	3301      	adds	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
          break;
 800a97a:	e089      	b.n	800aa90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7c12      	ldrb	r2, [r2, #16]
 800a994:	f107 0108 	add.w	r1, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99e:	e077      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fab1 	bl	800af0a <USBD_CtlError>
            err++;
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ae:	e06f      	b.n	800aa90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e05d      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa97 	bl	800af0a <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e055      	b.n	800aa90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa06:	e043      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa7d 	bl	800af0a <USBD_CtlError>
            err++;
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	3301      	adds	r3, #1
 800aa14:	72fb      	strb	r3, [r7, #11]
          break;
 800aa16:	e03b      	b.n	800aa90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3a:	e029      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa63 	bl	800af0a <USBD_CtlError>
            err++;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	3301      	adds	r3, #1
 800aa48:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4a:	e021      	b.n	800aa90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6e:	e00f      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa49 	bl	800af0a <USBD_CtlError>
            err++;
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7e:	e007      	b.n	800aa90 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa41 	bl	800af0a <USBD_CtlError>
          err++;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aa8e:	bf00      	nop
      }
      break;
 800aa90:	e037      	b.n	800ab02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7c1b      	ldrb	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d109      	bne.n	800aaae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	f107 0208 	add.w	r2, r7, #8
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	4798      	blx	r3
 800aaaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaac:	e029      	b.n	800ab02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fa2a 	bl	800af0a <USBD_CtlError>
        err++;
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	3301      	adds	r3, #1
 800aaba:	72fb      	strb	r3, [r7, #11]
      break;
 800aabc:	e021      	b.n	800ab02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7c1b      	ldrb	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10d      	bne.n	800aae2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	f107 0208 	add.w	r2, r7, #8
 800aad2:	4610      	mov	r0, r2
 800aad4:	4798      	blx	r3
 800aad6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3301      	adds	r3, #1
 800aadc:	2207      	movs	r2, #7
 800aade:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aae0:	e00f      	b.n	800ab02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fa10 	bl	800af0a <USBD_CtlError>
        err++;
 800aaea:	7afb      	ldrb	r3, [r7, #11]
 800aaec:	3301      	adds	r3, #1
 800aaee:	72fb      	strb	r3, [r7, #11]
      break;
 800aaf0:	e007      	b.n	800ab02 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa08 	bl	800af0a <USBD_CtlError>
      err++;
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	3301      	adds	r3, #1
 800aafe:	72fb      	strb	r3, [r7, #11]
      break;
 800ab00:	bf00      	nop
  }

  if (err != 0U)
 800ab02:	7afb      	ldrb	r3, [r7, #11]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11e      	bne.n	800ab46 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	88db      	ldrh	r3, [r3, #6]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d016      	beq.n	800ab3e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab10:	893b      	ldrh	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00e      	beq.n	800ab34 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	88da      	ldrh	r2, [r3, #6]
 800ab1a:	893b      	ldrh	r3, [r7, #8]
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bf28      	it	cs
 800ab20:	4613      	movcs	r3, r2
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab26:	893b      	ldrh	r3, [r7, #8]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	68f9      	ldr	r1, [r7, #12]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa5d 	bl	800afec <USBD_CtlSendData>
 800ab32:	e009      	b.n	800ab48 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9e7 	bl	800af0a <USBD_CtlError>
 800ab3c:	e004      	b.n	800ab48 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 faae 	bl	800b0a0 <USBD_CtlSendStatus>
 800ab44:	e000      	b.n	800ab48 <USBD_GetDescriptor+0x320>
    return;
 800ab46:	bf00      	nop
  }
}
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop

0800ab50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	889b      	ldrh	r3, [r3, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d131      	bne.n	800abc6 <USBD_SetAddress+0x76>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	88db      	ldrh	r3, [r3, #6]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d12d      	bne.n	800abc6 <USBD_SetAddress+0x76>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	885b      	ldrh	r3, [r3, #2]
 800ab6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab70:	d829      	bhi.n	800abc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	885b      	ldrh	r3, [r3, #2]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d104      	bne.n	800ab94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f9bc 	bl	800af0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab92:	e01d      	b.n	800abd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7bfa      	ldrb	r2, [r7, #15]
 800ab98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f003 ff97 	bl	800ead4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fa7a 	bl	800b0a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2202      	movs	r2, #2
 800abb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abba:	e009      	b.n	800abd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc4:	e004      	b.n	800abd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f99e 	bl	800af0a <USBD_CtlError>
  }
}
 800abce:	bf00      	nop
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	885b      	ldrh	r3, [r3, #2]
 800abea:	b2da      	uxtb	r2, r3
 800abec:	4b4e      	ldr	r3, [pc, #312]	; (800ad28 <USBD_SetConfig+0x150>)
 800abee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abf0:	4b4d      	ldr	r3, [pc, #308]	; (800ad28 <USBD_SetConfig+0x150>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d905      	bls.n	800ac04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f985 	bl	800af0a <USBD_CtlError>
    return USBD_FAIL;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e08c      	b.n	800ad1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d002      	beq.n	800ac16 <USBD_SetConfig+0x3e>
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d029      	beq.n	800ac68 <USBD_SetConfig+0x90>
 800ac14:	e075      	b.n	800ad02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac16:	4b44      	ldr	r3, [pc, #272]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d020      	beq.n	800ac60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac1e:	4b42      	ldr	r3, [pc, #264]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac28:	4b3f      	ldr	r3, [pc, #252]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fe ffbd 	bl	8009bae <USBD_SetClassConfig>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d008      	beq.n	800ac50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f962 	bl	800af0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac4e:	e065      	b.n	800ad1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa25 	bl	800b0a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2203      	movs	r2, #3
 800ac5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac5e:	e05d      	b.n	800ad1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa1d 	bl	800b0a0 <USBD_CtlSendStatus>
      break;
 800ac66:	e059      	b.n	800ad1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac68:	4b2f      	ldr	r3, [pc, #188]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d112      	bne.n	800ac96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac78:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac82:	4b29      	ldr	r3, [pc, #164]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7fe ffac 	bl	8009be6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa06 	bl	800b0a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac94:	e042      	b.n	800ad1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <USBD_SetConfig+0x150>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d02a      	beq.n	800acfa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7fe ff9a 	bl	8009be6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acb2:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <USBD_SetConfig+0x150>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <USBD_SetConfig+0x150>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7fe ff73 	bl	8009bae <USBD_SetClassConfig>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00f      	beq.n	800acf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f918 	bl	800af0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7fe ff7f 	bl	8009be6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acf0:	e014      	b.n	800ad1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9d4 	bl	800b0a0 <USBD_CtlSendStatus>
      break;
 800acf8:	e010      	b.n	800ad1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9d0 	bl	800b0a0 <USBD_CtlSendStatus>
      break;
 800ad00:	e00c      	b.n	800ad1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f900 	bl	800af0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <USBD_SetConfig+0x150>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7fe ff68 	bl	8009be6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad16:	2303      	movs	r3, #3
 800ad18:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1a:	bf00      	nop
  }

  return ret;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000f5c 	.word	0x20000f5c

0800ad2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	88db      	ldrh	r3, [r3, #6]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d004      	beq.n	800ad48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f8e2 	bl	800af0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad46:	e023      	b.n	800ad90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	dc02      	bgt.n	800ad5a <USBD_GetConfig+0x2e>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dc03      	bgt.n	800ad60 <USBD_GetConfig+0x34>
 800ad58:	e015      	b.n	800ad86 <USBD_GetConfig+0x5a>
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d00b      	beq.n	800ad76 <USBD_GetConfig+0x4a>
 800ad5e:	e012      	b.n	800ad86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f93c 	bl	800afec <USBD_CtlSendData>
        break;
 800ad74:	e00c      	b.n	800ad90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f934 	bl	800afec <USBD_CtlSendData>
        break;
 800ad84:	e004      	b.n	800ad90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f8be 	bl	800af0a <USBD_CtlError>
        break;
 800ad8e:	bf00      	nop
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	2b02      	cmp	r3, #2
 800adae:	d81e      	bhi.n	800adee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	88db      	ldrh	r3, [r3, #6]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d004      	beq.n	800adc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f8a5 	bl	800af0a <USBD_CtlError>
        break;
 800adc0:	e01a      	b.n	800adf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800adce:	2b00      	cmp	r3, #0
 800add0:	d005      	beq.n	800adde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f043 0202 	orr.w	r2, r3, #2
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	330c      	adds	r3, #12
 800ade2:	2202      	movs	r2, #2
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f900 	bl	800afec <USBD_CtlSendData>
      break;
 800adec:	e004      	b.n	800adf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f88a 	bl	800af0a <USBD_CtlError>
      break;
 800adf6:	bf00      	nop
  }
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	885b      	ldrh	r3, [r3, #2]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d107      	bne.n	800ae22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f940 	bl	800b0a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae20:	e013      	b.n	800ae4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d10b      	bne.n	800ae42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	889b      	ldrh	r3, [r3, #4]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f930 	bl	800b0a0 <USBD_CtlSendStatus>
}
 800ae40:	e003      	b.n	800ae4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f860 	bl	800af0a <USBD_CtlError>
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	3b01      	subs	r3, #1
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d80b      	bhi.n	800ae82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	885b      	ldrh	r3, [r3, #2]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d10c      	bne.n	800ae8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f910 	bl	800b0a0 <USBD_CtlSendStatus>
      }
      break;
 800ae80:	e004      	b.n	800ae8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f840 	bl	800af0a <USBD_CtlError>
      break;
 800ae8a:	e000      	b.n	800ae8e <USBD_ClrFeature+0x3c>
      break;
 800ae8c:	bf00      	nop
  }
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3301      	adds	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7ff fa17 	bl	800a2f4 <SWAPBYTE>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3301      	adds	r3, #1
 800aed2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3301      	adds	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7ff fa0a 	bl	800a2f4 <SWAPBYTE>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3301      	adds	r3, #1
 800aeec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7ff f9fd 	bl	800a2f4 <SWAPBYTE>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	80da      	strh	r2, [r3, #6]
}
 800af02:	bf00      	nop
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af14:	2180      	movs	r1, #128	; 0x80
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f003 fd72 	bl	800ea00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af1c:	2100      	movs	r1, #0
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f003 fd6e 	bl	800ea00 <USBD_LL_StallEP>
}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d036      	beq.n	800afb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f000 f836 	bl	800afb8 <USBD_GetLen>
 800af4c:	4603      	mov	r3, r0
 800af4e:	3301      	adds	r3, #1
 800af50:	b29b      	uxth	r3, r3
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	b29a      	uxth	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	4413      	add	r3, r2
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	701a      	strb	r2, [r3, #0]
  idx++;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	3301      	adds	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	4413      	add	r3, r2
 800af72:	2203      	movs	r2, #3
 800af74:	701a      	strb	r2, [r3, #0]
  idx++;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	3301      	adds	r3, #1
 800af7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af7c:	e013      	b.n	800afa6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	4413      	add	r3, r2
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	3301      	adds	r3, #1
 800af8e:	613b      	str	r3, [r7, #16]
    idx++;
 800af90:	7dfb      	ldrb	r3, [r7, #23]
 800af92:	3301      	adds	r3, #1
 800af94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	4413      	add	r3, r2
 800af9c:	2200      	movs	r2, #0
 800af9e:	701a      	strb	r2, [r3, #0]
    idx++;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	3301      	adds	r3, #1
 800afa4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e7      	bne.n	800af7e <USBD_GetString+0x52>
 800afae:	e000      	b.n	800afb2 <USBD_GetString+0x86>
    return;
 800afb0:	bf00      	nop
  }
}
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800afc8:	e005      	b.n	800afd6 <USBD_GetLen+0x1e>
  {
    len++;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	3301      	adds	r3, #1
 800afce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3301      	adds	r3, #1
 800afd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1f5      	bne.n	800afca <USBD_GetLen+0x12>
  }

  return len;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2202      	movs	r2, #2
 800affc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	2100      	movs	r1, #0
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f003 fd7d 	bl	800eb12 <USBD_LL_Transmit>

  return USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	2100      	movs	r1, #0
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f003 fd6c 	bl	800eb12 <USBD_LL_Transmit>

  return USBD_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2203      	movs	r2, #3
 800b054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	2100      	movs	r1, #0
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f003 fd70 	bl	800eb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	2100      	movs	r1, #0
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f003 fd5f 	bl	800eb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f003 fd2b 	bl	800eb12 <USBD_LL_Transmit>

  return USBD_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2205      	movs	r2, #5
 800b0d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2100      	movs	r1, #0
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f003 fd39 	bl	800eb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b0f0:	bf00      	nop
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
	...

0800b0fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b102:	f3ef 8305 	mrs	r3, IPSR
 800b106:	60bb      	str	r3, [r7, #8]
  return(result);
 800b108:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10f      	bne.n	800b12e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b10e:	f3ef 8310 	mrs	r3, PRIMASK
 800b112:	607b      	str	r3, [r7, #4]
  return(result);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d105      	bne.n	800b126 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b11a:	f3ef 8311 	mrs	r3, BASEPRI
 800b11e:	603b      	str	r3, [r7, #0]
  return(result);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d007      	beq.n	800b136 <osKernelInitialize+0x3a>
 800b126:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <osKernelInitialize+0x64>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d103      	bne.n	800b136 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b12e:	f06f 0305 	mvn.w	r3, #5
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e00c      	b.n	800b150 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b136:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <osKernelInitialize+0x64>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d105      	bne.n	800b14a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b13e:	4b08      	ldr	r3, [pc, #32]	; (800b160 <osKernelInitialize+0x64>)
 800b140:	2201      	movs	r2, #1
 800b142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e002      	b.n	800b150 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295
 800b14e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b150:	68fb      	ldr	r3, [r7, #12]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	20000f60 	.word	0x20000f60

0800b164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b16a:	f3ef 8305 	mrs	r3, IPSR
 800b16e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10f      	bne.n	800b196 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b176:	f3ef 8310 	mrs	r3, PRIMASK
 800b17a:	607b      	str	r3, [r7, #4]
  return(result);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d105      	bne.n	800b18e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b182:	f3ef 8311 	mrs	r3, BASEPRI
 800b186:	603b      	str	r3, [r7, #0]
  return(result);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d007      	beq.n	800b19e <osKernelStart+0x3a>
 800b18e:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <osKernelStart+0x68>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b02      	cmp	r3, #2
 800b194:	d103      	bne.n	800b19e <osKernelStart+0x3a>
    stat = osErrorISR;
 800b196:	f06f 0305 	mvn.w	r3, #5
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	e010      	b.n	800b1c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b19e:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <osKernelStart+0x68>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d109      	bne.n	800b1ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b1a6:	f7ff ffa1 	bl	800b0ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b1aa:	4b08      	ldr	r3, [pc, #32]	; (800b1cc <osKernelStart+0x68>)
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b1b0:	f001 fa2c 	bl	800c60c <vTaskStartScheduler>
      stat = osOK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e002      	b.n	800b1c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b1be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20000f60 	.word	0x20000f60

0800b1d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b090      	sub	sp, #64	; 0x40
 800b1d4:	af04      	add	r7, sp, #16
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1e0:	f3ef 8305 	mrs	r3, IPSR
 800b1e4:	61fb      	str	r3, [r7, #28]
  return(result);
 800b1e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f040 808f 	bne.w	800b30c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f2:	61bb      	str	r3, [r7, #24]
  return(result);
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b1fa:	f3ef 8311 	mrs	r3, BASEPRI
 800b1fe:	617b      	str	r3, [r7, #20]
  return(result);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <osThreadNew+0x3e>
 800b206:	4b44      	ldr	r3, [pc, #272]	; (800b318 <osThreadNew+0x148>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d07e      	beq.n	800b30c <osThreadNew+0x13c>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d07b      	beq.n	800b30c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b214:	2380      	movs	r3, #128	; 0x80
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b218:	2318      	movs	r3, #24
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d045      	beq.n	800b2b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <osThreadNew+0x6a>
        name = attr->name;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d008      	beq.n	800b260 <osThreadNew+0x90>
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	2b38      	cmp	r3, #56	; 0x38
 800b252:	d805      	bhi.n	800b260 <osThreadNew+0x90>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <osThreadNew+0x94>
        return (NULL);
 800b260:	2300      	movs	r3, #0
 800b262:	e054      	b.n	800b30e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	695b      	ldr	r3, [r3, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	089b      	lsrs	r3, r3, #2
 800b272:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <osThreadNew+0xca>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	2ba7      	cmp	r3, #167	; 0xa7
 800b282:	d90a      	bls.n	800b29a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <osThreadNew+0xca>
        mem = 1;
 800b294:	2301      	movs	r3, #1
 800b296:	623b      	str	r3, [r7, #32]
 800b298:	e010      	b.n	800b2bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10c      	bne.n	800b2bc <osThreadNew+0xec>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d108      	bne.n	800b2bc <osThreadNew+0xec>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <osThreadNew+0xec>
          mem = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	623b      	str	r3, [r7, #32]
 800b2b6:	e001      	b.n	800b2bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d110      	bne.n	800b2e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2ca:	9202      	str	r2, [sp, #8]
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 ffa1 	bl	800c220 <xTaskCreateStatic>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	e013      	b.n	800b30c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d110      	bne.n	800b30c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	f107 0310 	add.w	r3, r7, #16
 800b2f2:	9301      	str	r3, [sp, #4]
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 fff2 	bl	800c2e6 <xTaskCreate>
 800b302:	4603      	mov	r3, r0
 800b304:	2b01      	cmp	r3, #1
 800b306:	d001      	beq.n	800b30c <osThreadNew+0x13c>
          hTask = NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b30c:	693b      	ldr	r3, [r7, #16]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3730      	adds	r7, #48	; 0x30
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20000f60 	.word	0x20000f60

0800b31c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b324:	f3ef 8305 	mrs	r3, IPSR
 800b328:	613b      	str	r3, [r7, #16]
  return(result);
 800b32a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10f      	bne.n	800b350 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b330:	f3ef 8310 	mrs	r3, PRIMASK
 800b334:	60fb      	str	r3, [r7, #12]
  return(result);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d105      	bne.n	800b348 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b33c:	f3ef 8311 	mrs	r3, BASEPRI
 800b340:	60bb      	str	r3, [r7, #8]
  return(result);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <osDelay+0x3c>
 800b348:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <osDelay+0x58>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d103      	bne.n	800b358 <osDelay+0x3c>
    stat = osErrorISR;
 800b350:	f06f 0305 	mvn.w	r3, #5
 800b354:	617b      	str	r3, [r7, #20]
 800b356:	e007      	b.n	800b368 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 f91c 	bl	800c5a0 <vTaskDelay>
    }
  }

  return (stat);
 800b368:	697b      	ldr	r3, [r7, #20]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20000f60 	.word	0x20000f60

0800b378 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f002 fadf 	bl	800d944 <pvTimerGetTimerID>
 800b386:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d005      	beq.n	800b39a <TimerCallback+0x22>
    callb->func (callb->arg);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	6852      	ldr	r2, [r2, #4]
 800b396:	4610      	mov	r0, r2
 800b398:	4798      	blx	r3
  }
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08e      	sub	sp, #56	; 0x38
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	607a      	str	r2, [r7, #4]
 800b3ae:	603b      	str	r3, [r7, #0]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b8:	f3ef 8305 	mrs	r3, IPSR
 800b3bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d16a      	bne.n	800b49a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c8:	617b      	str	r3, [r7, #20]
  return(result);
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d105      	bne.n	800b3dc <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b3d4:	613b      	str	r3, [r7, #16]
  return(result);
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <osTimerNew+0x40>
 800b3dc:	4b31      	ldr	r3, [pc, #196]	; (800b4a4 <osTimerNew+0x100>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d05a      	beq.n	800b49a <osTimerNew+0xf6>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d057      	beq.n	800b49a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b3ea:	2008      	movs	r0, #8
 800b3ec:	f002 fd02 	bl	800ddf4 <pvPortMalloc>
 800b3f0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d050      	beq.n	800b49a <osTimerNew+0xf6>
      callb->func = func;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <osTimerNew+0x6c>
        reload = pdFALSE;
 800b40a:	2300      	movs	r3, #0
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
 800b40e:	e001      	b.n	800b414 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800b410:	2301      	movs	r3, #1
 800b412:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800b414:	f04f 33ff 	mov.w	r3, #4294967295
 800b418:	623b      	str	r3, [r7, #32]
      name = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01c      	beq.n	800b45e <osTimerNew+0xba>
        if (attr->name != NULL) {
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <osTimerNew+0x8e>
          name = attr->name;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d006      	beq.n	800b448 <osTimerNew+0xa4>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	2b2b      	cmp	r3, #43	; 0x2b
 800b440:	d902      	bls.n	800b448 <osTimerNew+0xa4>
          mem = 1;
 800b442:	2301      	movs	r3, #1
 800b444:	623b      	str	r3, [r7, #32]
 800b446:	e00c      	b.n	800b462 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d108      	bne.n	800b462 <osTimerNew+0xbe>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d104      	bne.n	800b462 <osTimerNew+0xbe>
            mem = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	623b      	str	r3, [r7, #32]
 800b45c:	e001      	b.n	800b462 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d10c      	bne.n	800b482 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	4b0e      	ldr	r3, [pc, #56]	; (800b4a8 <osTimerNew+0x104>)
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b476:	2101      	movs	r1, #1
 800b478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b47a:	f001 fed2 	bl	800d222 <xTimerCreateStatic>
 800b47e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b480:	e00b      	b.n	800b49a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d108      	bne.n	800b49a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b488:	4b07      	ldr	r3, [pc, #28]	; (800b4a8 <osTimerNew+0x104>)
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b490:	2101      	movs	r1, #1
 800b492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b494:	f001 fea4 	bl	800d1e0 <xTimerCreate>
 800b498:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3730      	adds	r7, #48	; 0x30
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000f60 	.word	0x20000f60
 800b4a8:	0800b379 	.word	0x0800b379

0800b4ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b08c      	sub	sp, #48	; 0x30
 800b4b0:	af02      	add	r7, sp, #8
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4bc:	f3ef 8305 	mrs	r3, IPSR
 800b4c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d16f      	bne.n	800b5a8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4cc:	617b      	str	r3, [r7, #20]
  return(result);
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d105      	bne.n	800b4e0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4d4:	f3ef 8311 	mrs	r3, BASEPRI
 800b4d8:	613b      	str	r3, [r7, #16]
  return(result);
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <osMessageQueueNew+0x3c>
 800b4e0:	4b34      	ldr	r3, [pc, #208]	; (800b5b4 <osMessageQueueNew+0x108>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d05f      	beq.n	800b5a8 <osMessageQueueNew+0xfc>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d05c      	beq.n	800b5a8 <osMessageQueueNew+0xfc>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d059      	beq.n	800b5a8 <osMessageQueueNew+0xfc>
    mem = -1;
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d029      	beq.n	800b554 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d012      	beq.n	800b52e <osMessageQueueNew+0x82>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	2b4f      	cmp	r3, #79	; 0x4f
 800b50e:	d90e      	bls.n	800b52e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00a      	beq.n	800b52e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	695a      	ldr	r2, [r3, #20]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	fb01 f303 	mul.w	r3, r1, r3
 800b524:	429a      	cmp	r2, r3
 800b526:	d302      	bcc.n	800b52e <osMessageQueueNew+0x82>
        mem = 1;
 800b528:	2301      	movs	r3, #1
 800b52a:	623b      	str	r3, [r7, #32]
 800b52c:	e014      	b.n	800b558 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d110      	bne.n	800b558 <osMessageQueueNew+0xac>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10c      	bne.n	800b558 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b542:	2b00      	cmp	r3, #0
 800b544:	d108      	bne.n	800b558 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d104      	bne.n	800b558 <osMessageQueueNew+0xac>
          mem = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	623b      	str	r3, [r7, #32]
 800b552:	e001      	b.n	800b558 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d10b      	bne.n	800b576 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691a      	ldr	r2, [r3, #16]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	2100      	movs	r1, #0
 800b568:	9100      	str	r1, [sp, #0]
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 f975 	bl	800b85c <xQueueGenericCreateStatic>
 800b572:	6278      	str	r0, [r7, #36]	; 0x24
 800b574:	e008      	b.n	800b588 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d105      	bne.n	800b588 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b57c:	2200      	movs	r2, #0
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f9ed 	bl	800b960 <xQueueGenericCreate>
 800b586:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00c      	beq.n	800b5a8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <osMessageQueueNew+0xf0>
        name = attr->name;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	61fb      	str	r3, [r7, #28]
 800b59a:	e001      	b.n	800b5a0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b5a0:	69f9      	ldr	r1, [r7, #28]
 800b5a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5a4:	f000 fdde 	bl	800c164 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3728      	adds	r7, #40	; 0x28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20000f60 	.word	0x20000f60

0800b5b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4a07      	ldr	r2, [pc, #28]	; (800b5e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b5c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a06      	ldr	r2, [pc, #24]	; (800b5e8 <vApplicationGetIdleTaskMemory+0x30>)
 800b5ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2280      	movs	r2, #128	; 0x80
 800b5d4:	601a      	str	r2, [r3, #0]
}
 800b5d6:	bf00      	nop
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000f64 	.word	0x20000f64
 800b5e8:	2000100c 	.word	0x2000100c

0800b5ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4a07      	ldr	r2, [pc, #28]	; (800b618 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	4a06      	ldr	r2, [pc, #24]	; (800b61c <vApplicationGetTimerTaskMemory+0x30>)
 800b602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b60a:	601a      	str	r2, [r3, #0]
}
 800b60c:	bf00      	nop
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	2000120c 	.word	0x2000120c
 800b61c:	200012b4 	.word	0x200012b4

0800b620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f103 0208 	add.w	r2, r3, #8
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f04f 32ff 	mov.w	r2, #4294967295
 800b638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f103 0208 	add.w	r2, r3, #8
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f103 0208 	add.w	r2, r3, #8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b66e:	bf00      	nop
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b67a:	b480      	push	{r7}
 800b67c:	b085      	sub	sp, #20
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	689a      	ldr	r2, [r3, #8]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	601a      	str	r2, [r3, #0]
}
 800b6b6:	bf00      	nop
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d8:	d103      	bne.n	800b6e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e00c      	b.n	800b6fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	60fb      	str	r3, [r7, #12]
 800b6e8:	e002      	b.n	800b6f0 <vListInsert+0x2e>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d2f6      	bcs.n	800b6ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	683a      	ldr	r2, [r7, #0]
 800b70a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]
}
 800b728:	bf00      	nop
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	6892      	ldr	r2, [r2, #8]
 800b74a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	6852      	ldr	r2, [r2, #4]
 800b754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d103      	bne.n	800b768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689a      	ldr	r2, [r3, #8]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	1e5a      	subs	r2, r3, #1
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10c      	bne.n	800b7b6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	b672      	cpsid	i
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	b662      	cpsie	i
 800b7b0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b7b6:	f002 f9f1 	bl	800db9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c2:	68f9      	ldr	r1, [r7, #12]
 800b7c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7c6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ca:	441a      	add	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7ec:	fb01 f303 	mul.w	r3, r1, r3
 800b7f0:	441a      	add	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	22ff      	movs	r2, #255	; 0xff
 800b7fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	22ff      	movs	r2, #255	; 0xff
 800b802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d114      	bne.n	800b836 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01a      	beq.n	800b84a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3310      	adds	r3, #16
 800b818:	4618      	mov	r0, r3
 800b81a:	f001 f9b1 	bl	800cb80 <xTaskRemoveFromEventList>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d012      	beq.n	800b84a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b824:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <xQueueGenericReset+0xd0>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	e009      	b.n	800b84a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3310      	adds	r3, #16
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff fef0 	bl	800b620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	3324      	adds	r3, #36	; 0x24
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff feeb 	bl	800b620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b84a:	f002 f9db 	bl	800dc04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b84e:	2301      	movs	r3, #1
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08e      	sub	sp, #56	; 0x38
 800b860:	af02      	add	r7, sp, #8
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10c      	bne.n	800b88a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	b672      	cpsid	i
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	b662      	cpsie	i
 800b884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10c      	bne.n	800b8aa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	b672      	cpsid	i
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	b662      	cpsie	i
 800b8a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d002      	beq.n	800b8b6 <xQueueGenericCreateStatic+0x5a>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <xQueueGenericCreateStatic+0x5e>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e000      	b.n	800b8bc <xQueueGenericCreateStatic+0x60>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10c      	bne.n	800b8da <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	b672      	cpsid	i
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	b662      	cpsie	i
 800b8d4:	623b      	str	r3, [r7, #32]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <xQueueGenericCreateStatic+0x8a>
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <xQueueGenericCreateStatic+0x8e>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <xQueueGenericCreateStatic+0x90>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10c      	bne.n	800b90a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	b672      	cpsid	i
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	b662      	cpsie	i
 800b904:	61fb      	str	r3, [r7, #28]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b90a:	2350      	movs	r3, #80	; 0x50
 800b90c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b50      	cmp	r3, #80	; 0x50
 800b912:	d00c      	beq.n	800b92e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	61bb      	str	r3, [r7, #24]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b92e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00d      	beq.n	800b956 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b942:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	4613      	mov	r3, r2
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 f847 	bl	800b9e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b958:	4618      	mov	r0, r3
 800b95a:	3730      	adds	r7, #48	; 0x30
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af02      	add	r7, sp, #8
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10c      	bne.n	800b98e <xQueueGenericCreate+0x2e>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	b672      	cpsid	i
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	b662      	cpsie	i
 800b988:	613b      	str	r3, [r7, #16]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b994:	2300      	movs	r3, #0
 800b996:	61fb      	str	r3, [r7, #28]
 800b998:	e004      	b.n	800b9a4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	fb02 f303 	mul.w	r3, r2, r3
 800b9a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	3350      	adds	r3, #80	; 0x50
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f002 fa23 	bl	800ddf4 <pvPortMalloc>
 800b9ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d011      	beq.n	800b9da <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	3350      	adds	r3, #80	; 0x50
 800b9be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9c8:	79fa      	ldrb	r2, [r7, #7]
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	68b9      	ldr	r1, [r7, #8]
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 f805 	bl	800b9e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9da:	69bb      	ldr	r3, [r7, #24]
	}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d103      	bne.n	800ba00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	69ba      	ldr	r2, [r7, #24]
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	e002      	b.n	800ba06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba12:	2101      	movs	r1, #1
 800ba14:	69b8      	ldr	r0, [r7, #24]
 800ba16:	f7ff feb7 	bl	800b788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	78fa      	ldrb	r2, [r7, #3]
 800ba1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08e      	sub	sp, #56	; 0x38
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10c      	bne.n	800ba62 <xQueueGenericSend+0x36>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	b672      	cpsid	i
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	b662      	cpsie	i
 800ba5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d103      	bne.n	800ba70 <xQueueGenericSend+0x44>
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <xQueueGenericSend+0x48>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e000      	b.n	800ba76 <xQueueGenericSend+0x4a>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10c      	bne.n	800ba94 <xQueueGenericSend+0x68>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	b672      	cpsid	i
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	b662      	cpsie	i
 800ba8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d103      	bne.n	800baa2 <xQueueGenericSend+0x76>
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <xQueueGenericSend+0x7a>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <xQueueGenericSend+0x7c>
 800baa6:	2300      	movs	r3, #0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10c      	bne.n	800bac6 <xQueueGenericSend+0x9a>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	b672      	cpsid	i
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	b662      	cpsie	i
 800bac0:	623b      	str	r3, [r7, #32]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bac6:	f001 fa5d 	bl	800cf84 <xTaskGetSchedulerState>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <xQueueGenericSend+0xaa>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <xQueueGenericSend+0xae>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e000      	b.n	800badc <xQueueGenericSend+0xb0>
 800bada:	2300      	movs	r3, #0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10c      	bne.n	800bafa <xQueueGenericSend+0xce>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	b672      	cpsid	i
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	b662      	cpsie	i
 800baf4:	61fb      	str	r3, [r7, #28]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bafa:	f002 f84f 	bl	800db9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d302      	bcc.n	800bb10 <xQueueGenericSend+0xe4>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d129      	bne.n	800bb64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	68b9      	ldr	r1, [r7, #8]
 800bb14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb16:	f000 fa15 	bl	800bf44 <prvCopyDataToQueue>
 800bb1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d010      	beq.n	800bb46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	3324      	adds	r3, #36	; 0x24
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 f829 	bl	800cb80 <xTaskRemoveFromEventList>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d013      	beq.n	800bb5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb34:	4b3f      	ldr	r3, [pc, #252]	; (800bc34 <xQueueGenericSend+0x208>)
 800bb36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	e00a      	b.n	800bb5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d007      	beq.n	800bb5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb4c:	4b39      	ldr	r3, [pc, #228]	; (800bc34 <xQueueGenericSend+0x208>)
 800bb4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb5c:	f002 f852 	bl	800dc04 <vPortExitCritical>
				return pdPASS;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e063      	b.n	800bc2c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d103      	bne.n	800bb72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb6a:	f002 f84b 	bl	800dc04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e05c      	b.n	800bc2c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d106      	bne.n	800bb86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb78:	f107 0314 	add.w	r3, r7, #20
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 f865 	bl	800cc4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb82:	2301      	movs	r3, #1
 800bb84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb86:	f002 f83d 	bl	800dc04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb8a:	f000 fdb3 	bl	800c6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb8e:	f002 f805 	bl	800db9c <vPortEnterCritical>
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9e:	d103      	bne.n	800bba8 <xQueueGenericSend+0x17c>
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbae:	b25b      	sxtb	r3, r3
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb4:	d103      	bne.n	800bbbe <xQueueGenericSend+0x192>
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbbe:	f002 f821 	bl	800dc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbc2:	1d3a      	adds	r2, r7, #4
 800bbc4:	f107 0314 	add.w	r3, r7, #20
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 f854 	bl	800cc78 <xTaskCheckForTimeOut>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d124      	bne.n	800bc20 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd8:	f000 faac 	bl	800c134 <prvIsQueueFull>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d018      	beq.n	800bc14 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	3310      	adds	r3, #16
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4611      	mov	r1, r2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 ff74 	bl	800cad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbf2:	f000 fa37 	bl	800c064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbf6:	f000 fd8b 	bl	800c710 <xTaskResumeAll>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f47f af7c 	bne.w	800bafa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bc02:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <xQueueGenericSend+0x208>)
 800bc04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	e772      	b.n	800bafa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc16:	f000 fa25 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc1a:	f000 fd79 	bl	800c710 <xTaskResumeAll>
 800bc1e:	e76c      	b.n	800bafa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc22:	f000 fa1f 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc26:	f000 fd73 	bl	800c710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3738      	adds	r7, #56	; 0x38
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	e000ed04 	.word	0xe000ed04

0800bc38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08e      	sub	sp, #56	; 0x38
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10c      	bne.n	800bc6a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	b672      	cpsid	i
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	b662      	cpsie	i
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d103      	bne.n	800bc78 <xQueueGenericSendFromISR+0x40>
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <xQueueGenericSendFromISR+0x44>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e000      	b.n	800bc7e <xQueueGenericSendFromISR+0x46>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10c      	bne.n	800bc9c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	b672      	cpsid	i
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	b662      	cpsie	i
 800bc96:	623b      	str	r3, [r7, #32]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d103      	bne.n	800bcaa <xQueueGenericSendFromISR+0x72>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d101      	bne.n	800bcae <xQueueGenericSendFromISR+0x76>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <xQueueGenericSendFromISR+0x78>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10c      	bne.n	800bcce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	b672      	cpsid	i
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	b662      	cpsie	i
 800bcc8:	61fb      	str	r3, [r7, #28]
}
 800bcca:	bf00      	nop
 800bccc:	e7fe      	b.n	800bccc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcce:	f002 f84d 	bl	800dd6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcd2:	f3ef 8211 	mrs	r2, BASEPRI
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	b672      	cpsid	i
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	b662      	cpsie	i
 800bcea:	61ba      	str	r2, [r7, #24]
 800bcec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d302      	bcc.n	800bd04 <xQueueGenericSendFromISR+0xcc>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d12c      	bne.n	800bd5e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	68b9      	ldr	r1, [r7, #8]
 800bd12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd14:	f000 f916 	bl	800bf44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd20:	d112      	bne.n	800bd48 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d016      	beq.n	800bd58 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	3324      	adds	r3, #36	; 0x24
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 ff26 	bl	800cb80 <xTaskRemoveFromEventList>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00b      	beq.n	800bd58 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e007      	b.n	800bd58 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	b25a      	sxtb	r2, r3
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bd5c:	e001      	b.n	800bd62 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	637b      	str	r3, [r7, #52]	; 0x34
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3738      	adds	r7, #56	; 0x38
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08c      	sub	sp, #48	; 0x30
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10c      	bne.n	800bdac <xQueueReceive+0x34>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	b672      	cpsid	i
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	b662      	cpsie	i
 800bda6:	623b      	str	r3, [r7, #32]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <xQueueReceive+0x42>
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <xQueueReceive+0x46>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <xQueueReceive+0x48>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10c      	bne.n	800bdde <xQueueReceive+0x66>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	b672      	cpsid	i
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	b662      	cpsie	i
 800bdd8:	61fb      	str	r3, [r7, #28]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdde:	f001 f8d1 	bl	800cf84 <xTaskGetSchedulerState>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <xQueueReceive+0x76>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <xQueueReceive+0x7a>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e000      	b.n	800bdf4 <xQueueReceive+0x7c>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10c      	bne.n	800be12 <xQueueReceive+0x9a>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	b672      	cpsid	i
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	b662      	cpsie	i
 800be0c:	61bb      	str	r3, [r7, #24]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be12:	f001 fec3 	bl	800db9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d01f      	beq.n	800be62 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be22:	68b9      	ldr	r1, [r7, #8]
 800be24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be26:	f000 f8f7 	bl	800c018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00f      	beq.n	800be5a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	3310      	adds	r3, #16
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fe9e 	bl	800cb80 <xTaskRemoveFromEventList>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d007      	beq.n	800be5a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be4a:	4b3d      	ldr	r3, [pc, #244]	; (800bf40 <xQueueReceive+0x1c8>)
 800be4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be5a:	f001 fed3 	bl	800dc04 <vPortExitCritical>
				return pdPASS;
 800be5e:	2301      	movs	r3, #1
 800be60:	e069      	b.n	800bf36 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d103      	bne.n	800be70 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be68:	f001 fecc 	bl	800dc04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be6c:	2300      	movs	r3, #0
 800be6e:	e062      	b.n	800bf36 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be76:	f107 0310 	add.w	r3, r7, #16
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 fee6 	bl	800cc4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be80:	2301      	movs	r3, #1
 800be82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be84:	f001 febe 	bl	800dc04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be88:	f000 fc34 	bl	800c6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be8c:	f001 fe86 	bl	800db9c <vPortEnterCritical>
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be96:	b25b      	sxtb	r3, r3
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d103      	bne.n	800bea6 <xQueueReceive+0x12e>
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beac:	b25b      	sxtb	r3, r3
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d103      	bne.n	800bebc <xQueueReceive+0x144>
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bebc:	f001 fea2 	bl	800dc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bec0:	1d3a      	adds	r2, r7, #4
 800bec2:	f107 0310 	add.w	r3, r7, #16
 800bec6:	4611      	mov	r1, r2
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 fed5 	bl	800cc78 <xTaskCheckForTimeOut>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d123      	bne.n	800bf1c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed6:	f000 f917 	bl	800c108 <prvIsQueueEmpty>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d017      	beq.n	800bf10 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	3324      	adds	r3, #36	; 0x24
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 fdf5 	bl	800cad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef0:	f000 f8b8 	bl	800c064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bef4:	f000 fc0c 	bl	800c710 <xTaskResumeAll>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d189      	bne.n	800be12 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800befe:	4b10      	ldr	r3, [pc, #64]	; (800bf40 <xQueueReceive+0x1c8>)
 800bf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	e780      	b.n	800be12 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf12:	f000 f8a7 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf16:	f000 fbfb 	bl	800c710 <xTaskResumeAll>
 800bf1a:	e77a      	b.n	800be12 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf1e:	f000 f8a1 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf22:	f000 fbf5 	bl	800c710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf28:	f000 f8ee 	bl	800c108 <prvIsQueueEmpty>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f43f af6f 	beq.w	800be12 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3730      	adds	r7, #48	; 0x30
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	e000ed04 	.word	0xe000ed04

0800bf44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d14d      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f001 f826 	bl	800cfc0 <xTaskPriorityDisinherit>
 800bf74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	e043      	b.n	800c006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d119      	bne.n	800bfb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6858      	ldr	r0, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	f003 f886 	bl	800f0a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	441a      	add	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d32b      	bcc.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
 800bfb6:	e026      	b.n	800c006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68d8      	ldr	r0, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	f003 f86c 	bl	800f0a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68da      	ldr	r2, [r3, #12]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	441a      	add	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d207      	bcs.n	800bff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	425b      	negs	r3, r3
 800bfee:	441a      	add	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d105      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	3b01      	subs	r3, #1
 800c004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c00e:	697b      	ldr	r3, [r7, #20]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d018      	beq.n	800c05c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	441a      	add	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	429a      	cmp	r2, r3
 800c042:	d303      	bcc.n	800c04c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68d9      	ldr	r1, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c054:	461a      	mov	r2, r3
 800c056:	6838      	ldr	r0, [r7, #0]
 800c058:	f003 f822 	bl	800f0a0 <memcpy>
	}
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c06c:	f001 fd96 	bl	800db9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c078:	e011      	b.n	800c09e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d012      	beq.n	800c0a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3324      	adds	r3, #36	; 0x24
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fd7a 	bl	800cb80 <xTaskRemoveFromEventList>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c092:	f000 fe57 	bl	800cd44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	3b01      	subs	r3, #1
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dce9      	bgt.n	800c07a <prvUnlockQueue+0x16>
 800c0a6:	e000      	b.n	800c0aa <prvUnlockQueue+0x46>
					break;
 800c0a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	22ff      	movs	r2, #255	; 0xff
 800c0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c0b2:	f001 fda7 	bl	800dc04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0b6:	f001 fd71 	bl	800db9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c2:	e011      	b.n	800c0e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d012      	beq.n	800c0f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3310      	adds	r3, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fd55 	bl	800cb80 <xTaskRemoveFromEventList>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0dc:	f000 fe32 	bl	800cd44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dce9      	bgt.n	800c0c4 <prvUnlockQueue+0x60>
 800c0f0:	e000      	b.n	800c0f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	22ff      	movs	r2, #255	; 0xff
 800c0f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0fc:	f001 fd82 	bl	800dc04 <vPortExitCritical>
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c110:	f001 fd44 	bl	800db9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c11c:	2301      	movs	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e001      	b.n	800c126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c122:	2300      	movs	r3, #0
 800c124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c126:	f001 fd6d 	bl	800dc04 <vPortExitCritical>

	return xReturn;
 800c12a:	68fb      	ldr	r3, [r7, #12]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c13c:	f001 fd2e 	bl	800db9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c148:	429a      	cmp	r2, r3
 800c14a:	d102      	bne.n	800c152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c14c:	2301      	movs	r3, #1
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e001      	b.n	800c156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c156:	f001 fd55 	bl	800dc04 <vPortExitCritical>

	return xReturn;
 800c15a:	68fb      	ldr	r3, [r7, #12]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e014      	b.n	800c19e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c174:	4a0f      	ldr	r2, [pc, #60]	; (800c1b4 <vQueueAddToRegistry+0x50>)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c180:	490c      	ldr	r1, [pc, #48]	; (800c1b4 <vQueueAddToRegistry+0x50>)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c18a:	4a0a      	ldr	r2, [pc, #40]	; (800c1b4 <vQueueAddToRegistry+0x50>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c196:	e006      	b.n	800c1a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	3301      	adds	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b07      	cmp	r3, #7
 800c1a2:	d9e7      	bls.n	800c174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	200016b4 	.word	0x200016b4

0800c1b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1c8:	f001 fce8 	bl	800db9c <vPortEnterCritical>
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1d2:	b25b      	sxtb	r3, r3
 800c1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d8:	d103      	bne.n	800c1e2 <vQueueWaitForMessageRestricted+0x2a>
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e8:	b25b      	sxtb	r3, r3
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d103      	bne.n	800c1f8 <vQueueWaitForMessageRestricted+0x40>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f8:	f001 fd04 	bl	800dc04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	3324      	adds	r3, #36	; 0x24
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	68b9      	ldr	r1, [r7, #8]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fc89 	bl	800cb24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c212:	6978      	ldr	r0, [r7, #20]
 800c214:	f7ff ff26 	bl	800c064 <prvUnlockQueue>
	}
 800c218:	bf00      	nop
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08e      	sub	sp, #56	; 0x38
 800c224:	af04      	add	r7, sp, #16
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10c      	bne.n	800c24e <xTaskCreateStatic+0x2e>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	b672      	cpsid	i
 800c23a:	f383 8811 	msr	BASEPRI, r3
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	b662      	cpsie	i
 800c248:	623b      	str	r3, [r7, #32]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10c      	bne.n	800c26e <xTaskCreateStatic+0x4e>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	b672      	cpsid	i
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	b662      	cpsie	i
 800c268:	61fb      	str	r3, [r7, #28]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c26e:	23a8      	movs	r3, #168	; 0xa8
 800c270:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2ba8      	cmp	r3, #168	; 0xa8
 800c276:	d00c      	beq.n	800c292 <xTaskCreateStatic+0x72>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	b672      	cpsid	i
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	b662      	cpsie	i
 800c28c:	61bb      	str	r3, [r7, #24]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01e      	beq.n	800c2d8 <xTaskCreateStatic+0xb8>
 800c29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d01b      	beq.n	800c2d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	9303      	str	r3, [sp, #12]
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	9302      	str	r3, [sp, #8]
 800c2ba:	f107 0314 	add.w	r3, r7, #20
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	68b9      	ldr	r1, [r7, #8]
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 f850 	bl	800c370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2d2:	f000 f8f5 	bl	800c4c0 <prvAddNewTaskToReadyList>
 800c2d6:	e001      	b.n	800c2dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2dc:	697b      	ldr	r3, [r7, #20]
	}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3728      	adds	r7, #40	; 0x28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b08c      	sub	sp, #48	; 0x30
 800c2ea:	af04      	add	r7, sp, #16
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	603b      	str	r3, [r7, #0]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2f6:	88fb      	ldrh	r3, [r7, #6]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f001 fd7a 	bl	800ddf4 <pvPortMalloc>
 800c300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00e      	beq.n	800c326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c308:	20a8      	movs	r0, #168	; 0xa8
 800c30a:	f001 fd73 	bl	800ddf4 <pvPortMalloc>
 800c30e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	697a      	ldr	r2, [r7, #20]
 800c31a:	631a      	str	r2, [r3, #48]	; 0x30
 800c31c:	e005      	b.n	800c32a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c31e:	6978      	ldr	r0, [r7, #20]
 800c320:	f001 fe32 	bl	800df88 <vPortFree>
 800c324:	e001      	b.n	800c32a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c326:	2300      	movs	r3, #0
 800c328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d017      	beq.n	800c360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c338:	88fa      	ldrh	r2, [r7, #6]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9303      	str	r3, [sp, #12]
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	9302      	str	r3, [sp, #8]
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	68b9      	ldr	r1, [r7, #8]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 f80e 	bl	800c370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c354:	69f8      	ldr	r0, [r7, #28]
 800c356:	f000 f8b3 	bl	800c4c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c35a:	2301      	movs	r3, #1
 800c35c:	61bb      	str	r3, [r7, #24]
 800c35e:	e002      	b.n	800c366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c360:	f04f 33ff 	mov.w	r3, #4294967295
 800c364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c366:	69bb      	ldr	r3, [r7, #24]
	}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	461a      	mov	r2, r3
 800c388:	21a5      	movs	r1, #165	; 0xa5
 800c38a:	f002 fdef 	bl	800ef6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c398:	440b      	add	r3, r1
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	f023 0307 	bic.w	r3, r3, #7
 800c3a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	f003 0307 	and.w	r3, r3, #7
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00c      	beq.n	800c3cc <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b6:	b672      	cpsid	i
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	b662      	cpsie	i
 800c3c6:	617b      	str	r3, [r7, #20]
}
 800c3c8:	bf00      	nop
 800c3ca:	e7fe      	b.n	800c3ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01f      	beq.n	800c412 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	61fb      	str	r3, [r7, #28]
 800c3d6:	e012      	b.n	800c3fe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	7819      	ldrb	r1, [r3, #0]
 800c3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3334      	adds	r3, #52	; 0x34
 800c3e8:	460a      	mov	r2, r1
 800c3ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	2b0f      	cmp	r3, #15
 800c402:	d9e9      	bls.n	800c3d8 <prvInitialiseNewTask+0x68>
 800c404:	e000      	b.n	800c408 <prvInitialiseNewTask+0x98>
			{
				break;
 800c406:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c410:	e003      	b.n	800c41a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	2b37      	cmp	r3, #55	; 0x37
 800c41e:	d901      	bls.n	800c424 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c420:	2337      	movs	r3, #55	; 0x37
 800c422:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	2200      	movs	r2, #0
 800c434:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	3304      	adds	r3, #4
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff f910 	bl	800b660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	3318      	adds	r3, #24
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff f90b 	bl	800b660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c45e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	2200      	movs	r2, #0
 800c464:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	3354      	adds	r3, #84	; 0x54
 800c474:	224c      	movs	r2, #76	; 0x4c
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f002 fd77 	bl	800ef6c <memset>
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	4a0c      	ldr	r2, [pc, #48]	; (800c4b4 <prvInitialiseNewTask+0x144>)
 800c482:	659a      	str	r2, [r3, #88]	; 0x58
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <prvInitialiseNewTask+0x148>)
 800c488:	65da      	str	r2, [r3, #92]	; 0x5c
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	4a0b      	ldr	r2, [pc, #44]	; (800c4bc <prvInitialiseNewTask+0x14c>)
 800c48e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	68f9      	ldr	r1, [r7, #12]
 800c494:	69b8      	ldr	r0, [r7, #24]
 800c496:	f001 fa77 	bl	800d988 <pxPortInitialiseStack>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ac:	bf00      	nop
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	2000732c 	.word	0x2000732c
 800c4b8:	20007394 	.word	0x20007394
 800c4bc:	200073fc 	.word	0x200073fc

0800c4c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4c8:	f001 fb68 	bl	800db9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4cc:	4b2d      	ldr	r3, [pc, #180]	; (800c584 <prvAddNewTaskToReadyList+0xc4>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	4a2c      	ldr	r2, [pc, #176]	; (800c584 <prvAddNewTaskToReadyList+0xc4>)
 800c4d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4d6:	4b2c      	ldr	r3, [pc, #176]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d109      	bne.n	800c4f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4de:	4a2a      	ldr	r2, [pc, #168]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4e4:	4b27      	ldr	r3, [pc, #156]	; (800c584 <prvAddNewTaskToReadyList+0xc4>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d110      	bne.n	800c50e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4ec:	f000 fc4e 	bl	800cd8c <prvInitialiseTaskLists>
 800c4f0:	e00d      	b.n	800c50e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4f2:	4b26      	ldr	r3, [pc, #152]	; (800c58c <prvAddNewTaskToReadyList+0xcc>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d109      	bne.n	800c50e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4fa:	4b23      	ldr	r3, [pc, #140]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	429a      	cmp	r2, r3
 800c506:	d802      	bhi.n	800c50e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c508:	4a1f      	ldr	r2, [pc, #124]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c50e:	4b20      	ldr	r3, [pc, #128]	; (800c590 <prvAddNewTaskToReadyList+0xd0>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	4a1e      	ldr	r2, [pc, #120]	; (800c590 <prvAddNewTaskToReadyList+0xd0>)
 800c516:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c518:	4b1d      	ldr	r3, [pc, #116]	; (800c590 <prvAddNewTaskToReadyList+0xd0>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c524:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <prvAddNewTaskToReadyList+0xd4>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d903      	bls.n	800c534 <prvAddNewTaskToReadyList+0x74>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	4a18      	ldr	r2, [pc, #96]	; (800c594 <prvAddNewTaskToReadyList+0xd4>)
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c538:	4613      	mov	r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4a15      	ldr	r2, [pc, #84]	; (800c598 <prvAddNewTaskToReadyList+0xd8>)
 800c542:	441a      	add	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	3304      	adds	r3, #4
 800c548:	4619      	mov	r1, r3
 800c54a:	4610      	mov	r0, r2
 800c54c:	f7ff f895 	bl	800b67a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c550:	f001 fb58 	bl	800dc04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c554:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <prvAddNewTaskToReadyList+0xcc>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00e      	beq.n	800c57a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c55c:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c566:	429a      	cmp	r2, r3
 800c568:	d207      	bcs.n	800c57a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c56a:	4b0c      	ldr	r3, [pc, #48]	; (800c59c <prvAddNewTaskToReadyList+0xdc>)
 800c56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	20001bc8 	.word	0x20001bc8
 800c588:	200016f4 	.word	0x200016f4
 800c58c:	20001bd4 	.word	0x20001bd4
 800c590:	20001be4 	.word	0x20001be4
 800c594:	20001bd0 	.word	0x20001bd0
 800c598:	200016f8 	.word	0x200016f8
 800c59c:	e000ed04 	.word	0xe000ed04

0800c5a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d019      	beq.n	800c5e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5b2:	4b14      	ldr	r3, [pc, #80]	; (800c604 <vTaskDelay+0x64>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00c      	beq.n	800c5d4 <vTaskDelay+0x34>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	b672      	cpsid	i
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	b662      	cpsie	i
 800c5ce:	60bb      	str	r3, [r7, #8]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c5d4:	f000 f88e 	bl	800c6f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5d8:	2100      	movs	r1, #0
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fd62 	bl	800d0a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5e0:	f000 f896 	bl	800c710 <xTaskResumeAll>
 800c5e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d107      	bne.n	800c5fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c5ec:	4b06      	ldr	r3, [pc, #24]	; (800c608 <vTaskDelay+0x68>)
 800c5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f2:	601a      	str	r2, [r3, #0]
 800c5f4:	f3bf 8f4f 	dsb	sy
 800c5f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5fc:	bf00      	nop
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20001bf0 	.word	0x20001bf0
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08a      	sub	sp, #40	; 0x28
 800c610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c616:	2300      	movs	r3, #0
 800c618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c61a:	463a      	mov	r2, r7
 800c61c:	1d39      	adds	r1, r7, #4
 800c61e:	f107 0308 	add.w	r3, r7, #8
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe ffc8 	bl	800b5b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	9202      	str	r2, [sp, #8]
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	2300      	movs	r3, #0
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	2300      	movs	r3, #0
 800c638:	460a      	mov	r2, r1
 800c63a:	4926      	ldr	r1, [pc, #152]	; (800c6d4 <vTaskStartScheduler+0xc8>)
 800c63c:	4826      	ldr	r0, [pc, #152]	; (800c6d8 <vTaskStartScheduler+0xcc>)
 800c63e:	f7ff fdef 	bl	800c220 <xTaskCreateStatic>
 800c642:	4603      	mov	r3, r0
 800c644:	4a25      	ldr	r2, [pc, #148]	; (800c6dc <vTaskStartScheduler+0xd0>)
 800c646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c648:	4b24      	ldr	r3, [pc, #144]	; (800c6dc <vTaskStartScheduler+0xd0>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c650:	2301      	movs	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	e001      	b.n	800c65a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c656:	2300      	movs	r3, #0
 800c658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d102      	bne.n	800c666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c660:	f000 fd74 	bl	800d14c <xTimerCreateTimerTask>
 800c664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d11d      	bne.n	800c6a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	b672      	cpsid	i
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	b662      	cpsie	i
 800c680:	613b      	str	r3, [r7, #16]
}
 800c682:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c684:	4b16      	ldr	r3, [pc, #88]	; (800c6e0 <vTaskStartScheduler+0xd4>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3354      	adds	r3, #84	; 0x54
 800c68a:	4a16      	ldr	r2, [pc, #88]	; (800c6e4 <vTaskStartScheduler+0xd8>)
 800c68c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c68e:	4b16      	ldr	r3, [pc, #88]	; (800c6e8 <vTaskStartScheduler+0xdc>)
 800c690:	f04f 32ff 	mov.w	r2, #4294967295
 800c694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c696:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <vTaskStartScheduler+0xe0>)
 800c698:	2201      	movs	r2, #1
 800c69a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c69c:	4b14      	ldr	r3, [pc, #80]	; (800c6f0 <vTaskStartScheduler+0xe4>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6a2:	f001 f9fd 	bl	800daa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6a6:	e010      	b.n	800c6ca <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ae:	d10c      	bne.n	800c6ca <vTaskStartScheduler+0xbe>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	b672      	cpsid	i
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	b662      	cpsie	i
 800c6c4:	60fb      	str	r3, [r7, #12]
}
 800c6c6:	bf00      	nop
 800c6c8:	e7fe      	b.n	800c6c8 <vTaskStartScheduler+0xbc>
}
 800c6ca:	bf00      	nop
 800c6cc:	3718      	adds	r7, #24
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800f8a4 	.word	0x0800f8a4
 800c6d8:	0800cd5d 	.word	0x0800cd5d
 800c6dc:	20001bec 	.word	0x20001bec
 800c6e0:	200016f4 	.word	0x200016f4
 800c6e4:	2000015c 	.word	0x2000015c
 800c6e8:	20001be8 	.word	0x20001be8
 800c6ec:	20001bd4 	.word	0x20001bd4
 800c6f0:	20001bcc 	.word	0x20001bcc

0800c6f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c6f8:	4b04      	ldr	r3, [pc, #16]	; (800c70c <vTaskSuspendAll+0x18>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	4a03      	ldr	r2, [pc, #12]	; (800c70c <vTaskSuspendAll+0x18>)
 800c700:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c702:	bf00      	nop
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	20001bf0 	.word	0x20001bf0

0800c710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c71a:	2300      	movs	r3, #0
 800c71c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c71e:	4b43      	ldr	r3, [pc, #268]	; (800c82c <xTaskResumeAll+0x11c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10c      	bne.n	800c740 <xTaskResumeAll+0x30>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	b672      	cpsid	i
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	b662      	cpsie	i
 800c73a:	603b      	str	r3, [r7, #0]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c740:	f001 fa2c 	bl	800db9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c744:	4b39      	ldr	r3, [pc, #228]	; (800c82c <xTaskResumeAll+0x11c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3b01      	subs	r3, #1
 800c74a:	4a38      	ldr	r2, [pc, #224]	; (800c82c <xTaskResumeAll+0x11c>)
 800c74c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c74e:	4b37      	ldr	r3, [pc, #220]	; (800c82c <xTaskResumeAll+0x11c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d162      	bne.n	800c81c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c756:	4b36      	ldr	r3, [pc, #216]	; (800c830 <xTaskResumeAll+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d05e      	beq.n	800c81c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c75e:	e02f      	b.n	800c7c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c760:	4b34      	ldr	r3, [pc, #208]	; (800c834 <xTaskResumeAll+0x124>)
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3318      	adds	r3, #24
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe ffe1 	bl	800b734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3304      	adds	r3, #4
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe ffdc 	bl	800b734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c780:	4b2d      	ldr	r3, [pc, #180]	; (800c838 <xTaskResumeAll+0x128>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d903      	bls.n	800c790 <xTaskResumeAll+0x80>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	4a2a      	ldr	r2, [pc, #168]	; (800c838 <xTaskResumeAll+0x128>)
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4a27      	ldr	r2, [pc, #156]	; (800c83c <xTaskResumeAll+0x12c>)
 800c79e:	441a      	add	r2, r3
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	f7fe ff67 	bl	800b67a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b0:	4b23      	ldr	r3, [pc, #140]	; (800c840 <xTaskResumeAll+0x130>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d302      	bcc.n	800c7c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c7ba:	4b22      	ldr	r3, [pc, #136]	; (800c844 <xTaskResumeAll+0x134>)
 800c7bc:	2201      	movs	r2, #1
 800c7be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7c0:	4b1c      	ldr	r3, [pc, #112]	; (800c834 <xTaskResumeAll+0x124>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1cb      	bne.n	800c760 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7ce:	f000 fbb9 	bl	800cf44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <xTaskResumeAll+0x138>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d010      	beq.n	800c800 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7de:	f000 f859 	bl	800c894 <xTaskIncrementTick>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c7e8:	4b16      	ldr	r3, [pc, #88]	; (800c844 <xTaskResumeAll+0x134>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1f1      	bne.n	800c7de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c7fa:	4b13      	ldr	r3, [pc, #76]	; (800c848 <xTaskResumeAll+0x138>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c800:	4b10      	ldr	r3, [pc, #64]	; (800c844 <xTaskResumeAll+0x134>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d009      	beq.n	800c81c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c808:	2301      	movs	r3, #1
 800c80a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c80c:	4b0f      	ldr	r3, [pc, #60]	; (800c84c <xTaskResumeAll+0x13c>)
 800c80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c81c:	f001 f9f2 	bl	800dc04 <vPortExitCritical>

	return xAlreadyYielded;
 800c820:	68bb      	ldr	r3, [r7, #8]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	20001bf0 	.word	0x20001bf0
 800c830:	20001bc8 	.word	0x20001bc8
 800c834:	20001b88 	.word	0x20001b88
 800c838:	20001bd0 	.word	0x20001bd0
 800c83c:	200016f8 	.word	0x200016f8
 800c840:	200016f4 	.word	0x200016f4
 800c844:	20001bdc 	.word	0x20001bdc
 800c848:	20001bd8 	.word	0x20001bd8
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c856:	4b05      	ldr	r3, [pc, #20]	; (800c86c <xTaskGetTickCount+0x1c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c85c:	687b      	ldr	r3, [r7, #4]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	20001bcc 	.word	0x20001bcc

0800c870 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c876:	f001 fa79 	bl	800dd6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c87a:	2300      	movs	r3, #0
 800c87c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c87e:	4b04      	ldr	r3, [pc, #16]	; (800c890 <xTaskGetTickCountFromISR+0x20>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c884:	683b      	ldr	r3, [r7, #0]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20001bcc 	.word	0x20001bcc

0800c894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c89e:	4b50      	ldr	r3, [pc, #320]	; (800c9e0 <xTaskIncrementTick+0x14c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f040 808b 	bne.w	800c9be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8a8:	4b4e      	ldr	r3, [pc, #312]	; (800c9e4 <xTaskIncrementTick+0x150>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8b0:	4a4c      	ldr	r2, [pc, #304]	; (800c9e4 <xTaskIncrementTick+0x150>)
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d122      	bne.n	800c902 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8bc:	4b4a      	ldr	r3, [pc, #296]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00c      	beq.n	800c8e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	b672      	cpsid	i
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	b662      	cpsie	i
 800c8da:	603b      	str	r3, [r7, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xTaskIncrementTick+0x4a>
 800c8e0:	4b41      	ldr	r3, [pc, #260]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	4b41      	ldr	r3, [pc, #260]	; (800c9ec <xTaskIncrementTick+0x158>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a3f      	ldr	r2, [pc, #252]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c8ec:	6013      	str	r3, [r2, #0]
 800c8ee:	4a3f      	ldr	r2, [pc, #252]	; (800c9ec <xTaskIncrementTick+0x158>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	4b3e      	ldr	r3, [pc, #248]	; (800c9f0 <xTaskIncrementTick+0x15c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	4a3d      	ldr	r2, [pc, #244]	; (800c9f0 <xTaskIncrementTick+0x15c>)
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	f000 fb21 	bl	800cf44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c902:	4b3c      	ldr	r3, [pc, #240]	; (800c9f4 <xTaskIncrementTick+0x160>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d349      	bcc.n	800c9a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c90c:	4b36      	ldr	r3, [pc, #216]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d104      	bne.n	800c920 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c916:	4b37      	ldr	r3, [pc, #220]	; (800c9f4 <xTaskIncrementTick+0x160>)
 800c918:	f04f 32ff 	mov.w	r2, #4294967295
 800c91c:	601a      	str	r2, [r3, #0]
					break;
 800c91e:	e03f      	b.n	800c9a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c920:	4b31      	ldr	r3, [pc, #196]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d203      	bcs.n	800c940 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c938:	4a2e      	ldr	r2, [pc, #184]	; (800c9f4 <xTaskIncrementTick+0x160>)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c93e:	e02f      	b.n	800c9a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3304      	adds	r3, #4
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe fef5 	bl	800b734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3318      	adds	r3, #24
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe feec 	bl	800b734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c960:	4b25      	ldr	r3, [pc, #148]	; (800c9f8 <xTaskIncrementTick+0x164>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	429a      	cmp	r2, r3
 800c966:	d903      	bls.n	800c970 <xTaskIncrementTick+0xdc>
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	4a22      	ldr	r2, [pc, #136]	; (800c9f8 <xTaskIncrementTick+0x164>)
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c974:	4613      	mov	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4a1f      	ldr	r2, [pc, #124]	; (800c9fc <xTaskIncrementTick+0x168>)
 800c97e:	441a      	add	r2, r3
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	3304      	adds	r3, #4
 800c984:	4619      	mov	r1, r3
 800c986:	4610      	mov	r0, r2
 800c988:	f7fe fe77 	bl	800b67a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c990:	4b1b      	ldr	r3, [pc, #108]	; (800ca00 <xTaskIncrementTick+0x16c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	429a      	cmp	r2, r3
 800c998:	d3b8      	bcc.n	800c90c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c99a:	2301      	movs	r3, #1
 800c99c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c99e:	e7b5      	b.n	800c90c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9a0:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <xTaskIncrementTick+0x16c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a6:	4915      	ldr	r1, [pc, #84]	; (800c9fc <xTaskIncrementTick+0x168>)
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4413      	add	r3, r2
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	440b      	add	r3, r1
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d907      	bls.n	800c9c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	e004      	b.n	800c9c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c9be:	4b11      	ldr	r3, [pc, #68]	; (800ca04 <xTaskIncrementTick+0x170>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	4a0f      	ldr	r2, [pc, #60]	; (800ca04 <xTaskIncrementTick+0x170>)
 800c9c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <xTaskIncrementTick+0x174>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c9d4:	697b      	ldr	r3, [r7, #20]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20001bf0 	.word	0x20001bf0
 800c9e4:	20001bcc 	.word	0x20001bcc
 800c9e8:	20001b80 	.word	0x20001b80
 800c9ec:	20001b84 	.word	0x20001b84
 800c9f0:	20001be0 	.word	0x20001be0
 800c9f4:	20001be8 	.word	0x20001be8
 800c9f8:	20001bd0 	.word	0x20001bd0
 800c9fc:	200016f8 	.word	0x200016f8
 800ca00:	200016f4 	.word	0x200016f4
 800ca04:	20001bd8 	.word	0x20001bd8
 800ca08:	20001bdc 	.word	0x20001bdc

0800ca0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca12:	4b2b      	ldr	r3, [pc, #172]	; (800cac0 <vTaskSwitchContext+0xb4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca1a:	4b2a      	ldr	r3, [pc, #168]	; (800cac4 <vTaskSwitchContext+0xb8>)
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca20:	e048      	b.n	800cab4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ca22:	4b28      	ldr	r3, [pc, #160]	; (800cac4 <vTaskSwitchContext+0xb8>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca28:	4b27      	ldr	r3, [pc, #156]	; (800cac8 <vTaskSwitchContext+0xbc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e012      	b.n	800ca56 <vTaskSwitchContext+0x4a>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10c      	bne.n	800ca50 <vTaskSwitchContext+0x44>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	b672      	cpsid	i
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	b662      	cpsie	i
 800ca4a:	607b      	str	r3, [r7, #4]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <vTaskSwitchContext+0x42>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	491d      	ldr	r1, [pc, #116]	; (800cacc <vTaskSwitchContext+0xc0>)
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	440b      	add	r3, r1
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0e2      	beq.n	800ca30 <vTaskSwitchContext+0x24>
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a15      	ldr	r2, [pc, #84]	; (800cacc <vTaskSwitchContext+0xc0>)
 800ca76:	4413      	add	r3, r2
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	605a      	str	r2, [r3, #4]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d104      	bne.n	800ca9a <vTaskSwitchContext+0x8e>
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	605a      	str	r2, [r3, #4]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4a0b      	ldr	r2, [pc, #44]	; (800cad0 <vTaskSwitchContext+0xc4>)
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	4a08      	ldr	r2, [pc, #32]	; (800cac8 <vTaskSwitchContext+0xbc>)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <vTaskSwitchContext+0xc4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3354      	adds	r3, #84	; 0x54
 800cab0:	4a08      	ldr	r2, [pc, #32]	; (800cad4 <vTaskSwitchContext+0xc8>)
 800cab2:	6013      	str	r3, [r2, #0]
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	20001bf0 	.word	0x20001bf0
 800cac4:	20001bdc 	.word	0x20001bdc
 800cac8:	20001bd0 	.word	0x20001bd0
 800cacc:	200016f8 	.word	0x200016f8
 800cad0:	200016f4 	.word	0x200016f4
 800cad4:	2000015c 	.word	0x2000015c

0800cad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10c      	bne.n	800cb02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	b672      	cpsid	i
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	b662      	cpsie	i
 800cafc:	60fb      	str	r3, [r7, #12]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb02:	4b07      	ldr	r3, [pc, #28]	; (800cb20 <vTaskPlaceOnEventList+0x48>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3318      	adds	r3, #24
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7fe fdd9 	bl	800b6c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb10:	2101      	movs	r1, #1
 800cb12:	6838      	ldr	r0, [r7, #0]
 800cb14:	f000 fac6 	bl	800d0a4 <prvAddCurrentTaskToDelayedList>
}
 800cb18:	bf00      	nop
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	200016f4 	.word	0x200016f4

0800cb24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10c      	bne.n	800cb50 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	b672      	cpsid	i
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	b662      	cpsie	i
 800cb4a:	617b      	str	r3, [r7, #20]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <vTaskPlaceOnEventListRestricted+0x58>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3318      	adds	r3, #24
 800cb56:	4619      	mov	r1, r3
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f7fe fd8e 	bl	800b67a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800cb64:	f04f 33ff 	mov.w	r3, #4294967295
 800cb68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	68b8      	ldr	r0, [r7, #8]
 800cb6e:	f000 fa99 	bl	800d0a4 <prvAddCurrentTaskToDelayedList>
	}
 800cb72:	bf00      	nop
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	200016f4 	.word	0x200016f4

0800cb80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10c      	bne.n	800cbb0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	b672      	cpsid	i
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	b662      	cpsie	i
 800cbaa:	60fb      	str	r3, [r7, #12]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	3318      	adds	r3, #24
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fdbd 	bl	800b734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbba:	4b1e      	ldr	r3, [pc, #120]	; (800cc34 <xTaskRemoveFromEventList+0xb4>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d11d      	bne.n	800cbfe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fdb4 	bl	800b734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	4b19      	ldr	r3, [pc, #100]	; (800cc38 <xTaskRemoveFromEventList+0xb8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d903      	bls.n	800cbe0 <xTaskRemoveFromEventList+0x60>
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	4a16      	ldr	r2, [pc, #88]	; (800cc38 <xTaskRemoveFromEventList+0xb8>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4a13      	ldr	r2, [pc, #76]	; (800cc3c <xTaskRemoveFromEventList+0xbc>)
 800cbee:	441a      	add	r2, r3
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	f7fe fd3f 	bl	800b67a <vListInsertEnd>
 800cbfc:	e005      	b.n	800cc0a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3318      	adds	r3, #24
 800cc02:	4619      	mov	r1, r3
 800cc04:	480e      	ldr	r0, [pc, #56]	; (800cc40 <xTaskRemoveFromEventList+0xc0>)
 800cc06:	f7fe fd38 	bl	800b67a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <xTaskRemoveFromEventList+0xc4>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d905      	bls.n	800cc24 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc1c:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <xTaskRemoveFromEventList+0xc8>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	e001      	b.n	800cc28 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc28:	697b      	ldr	r3, [r7, #20]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001bf0 	.word	0x20001bf0
 800cc38:	20001bd0 	.word	0x20001bd0
 800cc3c:	200016f8 	.word	0x200016f8
 800cc40:	20001b88 	.word	0x20001b88
 800cc44:	200016f4 	.word	0x200016f4
 800cc48:	20001bdc 	.word	0x20001bdc

0800cc4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc54:	4b06      	ldr	r3, [pc, #24]	; (800cc70 <vTaskInternalSetTimeOutState+0x24>)
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <vTaskInternalSetTimeOutState+0x28>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	605a      	str	r2, [r3, #4]
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20001be0 	.word	0x20001be0
 800cc74:	20001bcc 	.word	0x20001bcc

0800cc78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10c      	bne.n	800cca2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	b672      	cpsid	i
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	b662      	cpsie	i
 800cc9c:	613b      	str	r3, [r7, #16]
}
 800cc9e:	bf00      	nop
 800cca0:	e7fe      	b.n	800cca0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10c      	bne.n	800ccc2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	b672      	cpsid	i
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	b662      	cpsie	i
 800ccbc:	60fb      	str	r3, [r7, #12]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ccc2:	f000 ff6b 	bl	800db9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccc6:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <xTaskCheckForTimeOut+0xc4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	69ba      	ldr	r2, [r7, #24]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d102      	bne.n	800cce6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cce0:	2300      	movs	r3, #0
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	e023      	b.n	800cd2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <xTaskCheckForTimeOut+0xc8>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d007      	beq.n	800cd02 <xTaskCheckForTimeOut+0x8a>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	69ba      	ldr	r2, [r7, #24]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d302      	bcc.n	800cd02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	61fb      	str	r3, [r7, #28]
 800cd00:	e015      	b.n	800cd2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d20b      	bcs.n	800cd24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	1ad2      	subs	r2, r2, r3
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff ff97 	bl	800cc4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61fb      	str	r3, [r7, #28]
 800cd22:	e004      	b.n	800cd2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd2e:	f000 ff69 	bl	800dc04 <vPortExitCritical>

	return xReturn;
 800cd32:	69fb      	ldr	r3, [r7, #28]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	20001bcc 	.word	0x20001bcc
 800cd40:	20001be0 	.word	0x20001be0

0800cd44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd48:	4b03      	ldr	r3, [pc, #12]	; (800cd58 <vTaskMissedYield+0x14>)
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	601a      	str	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	20001bdc 	.word	0x20001bdc

0800cd5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd64:	f000 f852 	bl	800ce0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd68:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <prvIdleTask+0x28>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d9f9      	bls.n	800cd64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <prvIdleTask+0x2c>)
 800cd72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd80:	e7f0      	b.n	800cd64 <prvIdleTask+0x8>
 800cd82:	bf00      	nop
 800cd84:	200016f8 	.word	0x200016f8
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e00c      	b.n	800cdb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4a12      	ldr	r2, [pc, #72]	; (800cdec <prvInitialiseTaskLists+0x60>)
 800cda4:	4413      	add	r3, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fc3a 	bl	800b620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b37      	cmp	r3, #55	; 0x37
 800cdb6:	d9ef      	bls.n	800cd98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdb8:	480d      	ldr	r0, [pc, #52]	; (800cdf0 <prvInitialiseTaskLists+0x64>)
 800cdba:	f7fe fc31 	bl	800b620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdbe:	480d      	ldr	r0, [pc, #52]	; (800cdf4 <prvInitialiseTaskLists+0x68>)
 800cdc0:	f7fe fc2e 	bl	800b620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdc4:	480c      	ldr	r0, [pc, #48]	; (800cdf8 <prvInitialiseTaskLists+0x6c>)
 800cdc6:	f7fe fc2b 	bl	800b620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdca:	480c      	ldr	r0, [pc, #48]	; (800cdfc <prvInitialiseTaskLists+0x70>)
 800cdcc:	f7fe fc28 	bl	800b620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdd0:	480b      	ldr	r0, [pc, #44]	; (800ce00 <prvInitialiseTaskLists+0x74>)
 800cdd2:	f7fe fc25 	bl	800b620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdd6:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <prvInitialiseTaskLists+0x78>)
 800cdd8:	4a05      	ldr	r2, [pc, #20]	; (800cdf0 <prvInitialiseTaskLists+0x64>)
 800cdda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <prvInitialiseTaskLists+0x7c>)
 800cdde:	4a05      	ldr	r2, [pc, #20]	; (800cdf4 <prvInitialiseTaskLists+0x68>)
 800cde0:	601a      	str	r2, [r3, #0]
}
 800cde2:	bf00      	nop
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	200016f8 	.word	0x200016f8
 800cdf0:	20001b58 	.word	0x20001b58
 800cdf4:	20001b6c 	.word	0x20001b6c
 800cdf8:	20001b88 	.word	0x20001b88
 800cdfc:	20001b9c 	.word	0x20001b9c
 800ce00:	20001bb4 	.word	0x20001bb4
 800ce04:	20001b80 	.word	0x20001b80
 800ce08:	20001b84 	.word	0x20001b84

0800ce0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce12:	e019      	b.n	800ce48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce14:	f000 fec2 	bl	800db9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce18:	4b10      	ldr	r3, [pc, #64]	; (800ce5c <prvCheckTasksWaitingTermination+0x50>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe fc85 	bl	800b734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <prvCheckTasksWaitingTermination+0x54>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	4a0b      	ldr	r2, [pc, #44]	; (800ce60 <prvCheckTasksWaitingTermination+0x54>)
 800ce32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce34:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	4a0a      	ldr	r2, [pc, #40]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce3e:	f000 fee1 	bl	800dc04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f848 	bl	800ced8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce48:	4b06      	ldr	r3, [pc, #24]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e1      	bne.n	800ce14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20001b9c 	.word	0x20001b9c
 800ce60:	20001bc8 	.word	0x20001bc8
 800ce64:	20001bb0 	.word	0x20001bb0

0800ce68 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ce74:	e005      	b.n	800ce82 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2ba5      	cmp	r3, #165	; 0xa5
 800ce88:	d0f5      	beq.n	800ce76 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	089b      	lsrs	r3, r3, #2
 800ce8e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	b29b      	uxth	r3, r3
	}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <uxTaskGetStackHighWaterMark+0x14>
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <uxTaskGetStackHighWaterMark+0x34>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	e000      	b.n	800ceb6 <uxTaskGetStackHighWaterMark+0x16>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800cebe:	6938      	ldr	r0, [r7, #16]
 800cec0:	f7ff ffd2 	bl	800ce68 <prvTaskCheckFreeStackSpace>
 800cec4:	4603      	mov	r3, r0
 800cec6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800cec8:	68fb      	ldr	r3, [r7, #12]
	}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3718      	adds	r7, #24
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	200016f4 	.word	0x200016f4

0800ced8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	3354      	adds	r3, #84	; 0x54
 800cee4:	4618      	mov	r0, r3
 800cee6:	f002 f849 	bl	800ef7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d108      	bne.n	800cf06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef8:	4618      	mov	r0, r3
 800cefa:	f001 f845 	bl	800df88 <vPortFree>
				vPortFree( pxTCB );
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f001 f842 	bl	800df88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf04:	e01a      	b.n	800cf3c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d103      	bne.n	800cf18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f001 f839 	bl	800df88 <vPortFree>
	}
 800cf16:	e011      	b.n	800cf3c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d00c      	beq.n	800cf3c <prvDeleteTCB+0x64>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	b672      	cpsid	i
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	b662      	cpsie	i
 800cf36:	60fb      	str	r3, [r7, #12]
}
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <prvDeleteTCB+0x62>
	}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <prvResetNextTaskUnblockTime+0x38>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf54:	4b0a      	ldr	r3, [pc, #40]	; (800cf80 <prvResetNextTaskUnblockTime+0x3c>)
 800cf56:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf5c:	e008      	b.n	800cf70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf5e:	4b07      	ldr	r3, [pc, #28]	; (800cf7c <prvResetNextTaskUnblockTime+0x38>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	4a04      	ldr	r2, [pc, #16]	; (800cf80 <prvResetNextTaskUnblockTime+0x3c>)
 800cf6e:	6013      	str	r3, [r2, #0]
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	20001b80 	.word	0x20001b80
 800cf80:	20001be8 	.word	0x20001be8

0800cf84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <xTaskGetSchedulerState+0x34>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d102      	bne.n	800cf98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf92:	2301      	movs	r3, #1
 800cf94:	607b      	str	r3, [r7, #4]
 800cf96:	e008      	b.n	800cfaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf98:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <xTaskGetSchedulerState+0x38>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	607b      	str	r3, [r7, #4]
 800cfa4:	e001      	b.n	800cfaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfaa:	687b      	ldr	r3, [r7, #4]
	}
 800cfac:	4618      	mov	r0, r3
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	20001bd4 	.word	0x20001bd4
 800cfbc:	20001bf0 	.word	0x20001bf0

0800cfc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d05a      	beq.n	800d08c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cfd6:	4b30      	ldr	r3, [pc, #192]	; (800d098 <xTaskPriorityDisinherit+0xd8>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d00c      	beq.n	800cffa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	b672      	cpsid	i
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	b662      	cpsie	i
 800cff4:	60fb      	str	r3, [r7, #12]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10c      	bne.n	800d01c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	b672      	cpsid	i
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	b662      	cpsie	i
 800d016:	60bb      	str	r3, [r7, #8]
}
 800d018:	bf00      	nop
 800d01a:	e7fe      	b.n	800d01a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d020:	1e5a      	subs	r2, r3, #1
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d02e:	429a      	cmp	r2, r3
 800d030:	d02c      	beq.n	800d08c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d036:	2b00      	cmp	r3, #0
 800d038:	d128      	bne.n	800d08c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	3304      	adds	r3, #4
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fb78 	bl	800b734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <xTaskPriorityDisinherit+0xdc>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <xTaskPriorityDisinherit+0xac>
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d068:	4a0c      	ldr	r2, [pc, #48]	; (800d09c <xTaskPriorityDisinherit+0xdc>)
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4a09      	ldr	r2, [pc, #36]	; (800d0a0 <xTaskPriorityDisinherit+0xe0>)
 800d07a:	441a      	add	r2, r3
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fe faf9 	bl	800b67a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d088:	2301      	movs	r3, #1
 800d08a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d08c:	697b      	ldr	r3, [r7, #20]
	}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	200016f4 	.word	0x200016f4
 800d09c:	20001bd0 	.word	0x20001bd0
 800d0a0:	200016f8 	.word	0x200016f8

0800d0a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ae:	4b21      	ldr	r3, [pc, #132]	; (800d134 <prvAddCurrentTaskToDelayedList+0x90>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0b4:	4b20      	ldr	r3, [pc, #128]	; (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fb3a 	bl	800b734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c6:	d10a      	bne.n	800d0de <prvAddCurrentTaskToDelayedList+0x3a>
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0ce:	4b1a      	ldr	r3, [pc, #104]	; (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4819      	ldr	r0, [pc, #100]	; (800d13c <prvAddCurrentTaskToDelayedList+0x98>)
 800d0d8:	f7fe facf 	bl	800b67a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d0dc:	e026      	b.n	800d12c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0e6:	4b14      	ldr	r3, [pc, #80]	; (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d209      	bcs.n	800d10a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0f6:	4b12      	ldr	r3, [pc, #72]	; (800d140 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4b0f      	ldr	r3, [pc, #60]	; (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4619      	mov	r1, r3
 800d102:	4610      	mov	r0, r2
 800d104:	f7fe fadd 	bl	800b6c2 <vListInsert>
}
 800d108:	e010      	b.n	800d12c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d10a:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3304      	adds	r3, #4
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f7fe fad3 	bl	800b6c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	429a      	cmp	r2, r3
 800d124:	d202      	bcs.n	800d12c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d126:	4a08      	ldr	r2, [pc, #32]	; (800d148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	6013      	str	r3, [r2, #0]
}
 800d12c:	bf00      	nop
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20001bcc 	.word	0x20001bcc
 800d138:	200016f4 	.word	0x200016f4
 800d13c:	20001bb4 	.word	0x20001bb4
 800d140:	20001b84 	.word	0x20001b84
 800d144:	20001b80 	.word	0x20001b80
 800d148:	20001be8 	.word	0x20001be8

0800d14c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08a      	sub	sp, #40	; 0x28
 800d150:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d156:	f000 fbb5 	bl	800d8c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d15a:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <xTimerCreateTimerTask+0x84>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d021      	beq.n	800d1a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d16a:	1d3a      	adds	r2, r7, #4
 800d16c:	f107 0108 	add.w	r1, r7, #8
 800d170:	f107 030c 	add.w	r3, r7, #12
 800d174:	4618      	mov	r0, r3
 800d176:	f7fe fa39 	bl	800b5ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	9202      	str	r2, [sp, #8]
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	2302      	movs	r3, #2
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	460a      	mov	r2, r1
 800d18c:	4911      	ldr	r1, [pc, #68]	; (800d1d4 <xTimerCreateTimerTask+0x88>)
 800d18e:	4812      	ldr	r0, [pc, #72]	; (800d1d8 <xTimerCreateTimerTask+0x8c>)
 800d190:	f7ff f846 	bl	800c220 <xTaskCreateStatic>
 800d194:	4603      	mov	r3, r0
 800d196:	4a11      	ldr	r2, [pc, #68]	; (800d1dc <xTimerCreateTimerTask+0x90>)
 800d198:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <xTimerCreateTimerTask+0x90>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10c      	bne.n	800d1c6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	b672      	cpsid	i
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	b662      	cpsie	i
 800d1c0:	613b      	str	r3, [r7, #16]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d1c6:	697b      	ldr	r3, [r7, #20]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3718      	adds	r7, #24
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20001c24 	.word	0x20001c24
 800d1d4:	0800f8ac 	.word	0x0800f8ac
 800d1d8:	0800d45d 	.word	0x0800d45d
 800d1dc:	20001c28 	.word	0x20001c28

0800d1e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af02      	add	r7, sp, #8
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
 800d1ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d1ee:	202c      	movs	r0, #44	; 0x2c
 800d1f0:	f000 fe00 	bl	800ddf4 <pvPortMalloc>
 800d1f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00d      	beq.n	800d218 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	9301      	str	r3, [sp, #4]
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f000 f847 	bl	800d2a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d218:	697b      	ldr	r3, [r7, #20]
	}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d222:	b580      	push	{r7, lr}
 800d224:	b08a      	sub	sp, #40	; 0x28
 800d226:	af02      	add	r7, sp, #8
 800d228:	60f8      	str	r0, [r7, #12]
 800d22a:	60b9      	str	r1, [r7, #8]
 800d22c:	607a      	str	r2, [r7, #4]
 800d22e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d230:	232c      	movs	r3, #44	; 0x2c
 800d232:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	2b2c      	cmp	r3, #44	; 0x2c
 800d238:	d00c      	beq.n	800d254 <xTimerCreateStatic+0x32>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	b672      	cpsid	i
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	b662      	cpsie	i
 800d24e:	61bb      	str	r3, [r7, #24]
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d254:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10c      	bne.n	800d276 <xTimerCreateStatic+0x54>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	b672      	cpsid	i
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	b662      	cpsie	i
 800d270:	617b      	str	r3, [r7, #20]
}
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00d      	beq.n	800d29c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f000 f805 	bl	800d2a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d29c:	69fb      	ldr	r3, [r7, #28]
	}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b086      	sub	sp, #24
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
 800d2b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10c      	bne.n	800d2d4 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	b672      	cpsid	i
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	b662      	cpsie	i
 800d2ce:	617b      	str	r3, [r7, #20]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d01e      	beq.n	800d318 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d2da:	f000 faf3 	bl	800d8c4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	683a      	ldr	r2, [r7, #0]
 800d2ee:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	6a3a      	ldr	r2, [r7, #32]
 800d2f4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fe f9b0 	bl	800b660 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d008      	beq.n	800d318 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d30c:	f043 0304 	orr.w	r3, r3, #4
 800d310:	b2da      	uxtb	r2, r3
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d318:	bf00      	nop
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08a      	sub	sp, #40	; 0x28
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d32e:	2300      	movs	r3, #0
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10c      	bne.n	800d352 <xTimerGenericCommand+0x32>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	b672      	cpsid	i
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	b662      	cpsie	i
 800d34c:	623b      	str	r3, [r7, #32]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d352:	4b1a      	ldr	r3, [pc, #104]	; (800d3bc <xTimerGenericCommand+0x9c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d02a      	beq.n	800d3b0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b05      	cmp	r3, #5
 800d36a:	dc18      	bgt.n	800d39e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d36c:	f7ff fe0a 	bl	800cf84 <xTaskGetSchedulerState>
 800d370:	4603      	mov	r3, r0
 800d372:	2b02      	cmp	r3, #2
 800d374:	d109      	bne.n	800d38a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d376:	4b11      	ldr	r3, [pc, #68]	; (800d3bc <xTimerGenericCommand+0x9c>)
 800d378:	6818      	ldr	r0, [r3, #0]
 800d37a:	f107 0110 	add.w	r1, r7, #16
 800d37e:	2300      	movs	r3, #0
 800d380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d382:	f7fe fb53 	bl	800ba2c <xQueueGenericSend>
 800d386:	6278      	str	r0, [r7, #36]	; 0x24
 800d388:	e012      	b.n	800d3b0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d38a:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <xTimerGenericCommand+0x9c>)
 800d38c:	6818      	ldr	r0, [r3, #0]
 800d38e:	f107 0110 	add.w	r1, r7, #16
 800d392:	2300      	movs	r3, #0
 800d394:	2200      	movs	r2, #0
 800d396:	f7fe fb49 	bl	800ba2c <xQueueGenericSend>
 800d39a:	6278      	str	r0, [r7, #36]	; 0x24
 800d39c:	e008      	b.n	800d3b0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d39e:	4b07      	ldr	r3, [pc, #28]	; (800d3bc <xTimerGenericCommand+0x9c>)
 800d3a0:	6818      	ldr	r0, [r3, #0]
 800d3a2:	f107 0110 	add.w	r1, r7, #16
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	683a      	ldr	r2, [r7, #0]
 800d3aa:	f7fe fc45 	bl	800bc38 <xQueueGenericSendFromISR>
 800d3ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3728      	adds	r7, #40	; 0x28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20001c24 	.word	0x20001c24

0800d3c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af02      	add	r7, sp, #8
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ca:	4b23      	ldr	r3, [pc, #140]	; (800d458 <prvProcessExpiredTimer+0x98>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe f9ab 	bl	800b734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3e4:	f003 0304 	and.w	r3, r3, #4
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d024      	beq.n	800d436 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	699a      	ldr	r2, [r3, #24]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	18d1      	adds	r1, r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	6978      	ldr	r0, [r7, #20]
 800d3fa:	f000 f8d3 	bl	800d5a4 <prvInsertTimerInActiveList>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d021      	beq.n	800d448 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d404:	2300      	movs	r3, #0
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	2300      	movs	r3, #0
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	2100      	movs	r1, #0
 800d40e:	6978      	ldr	r0, [r7, #20]
 800d410:	f7ff ff86 	bl	800d320 <xTimerGenericCommand>
 800d414:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d115      	bne.n	800d448 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	b672      	cpsid	i
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	b662      	cpsie	i
 800d430:	60fb      	str	r3, [r7, #12]
}
 800d432:	bf00      	nop
 800d434:	e7fe      	b.n	800d434 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	b2da      	uxtb	r2, r3
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
 800d44c:	6978      	ldr	r0, [r7, #20]
 800d44e:	4798      	blx	r3
}
 800d450:	bf00      	nop
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20001c1c 	.word	0x20001c1c

0800d45c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d464:	f107 0308 	add.w	r3, r7, #8
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 f857 	bl	800d51c <prvGetNextExpireTime>
 800d46e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	4619      	mov	r1, r3
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f000 f803 	bl	800d480 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d47a:	f000 f8d5 	bl	800d628 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d47e:	e7f1      	b.n	800d464 <prvTimerTask+0x8>

0800d480 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d48a:	f7ff f933 	bl	800c6f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d48e:	f107 0308 	add.w	r3, r7, #8
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f866 	bl	800d564 <prvSampleTimeNow>
 800d498:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d130      	bne.n	800d502 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <prvProcessTimerOrBlockTask+0x3c>
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d806      	bhi.n	800d4bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d4ae:	f7ff f92f 	bl	800c710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d4b2:	68f9      	ldr	r1, [r7, #12]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff ff83 	bl	800d3c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d4ba:	e024      	b.n	800d506 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d008      	beq.n	800d4d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4c2:	4b13      	ldr	r3, [pc, #76]	; (800d510 <prvProcessTimerOrBlockTask+0x90>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <prvProcessTimerOrBlockTask+0x50>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e000      	b.n	800d4d2 <prvProcessTimerOrBlockTask+0x52>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4d4:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <prvProcessTimerOrBlockTask+0x94>)
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f7fe fe69 	bl	800c1b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4e6:	f7ff f913 	bl	800c710 <xTaskResumeAll>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <prvProcessTimerOrBlockTask+0x98>)
 800d4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f6:	601a      	str	r2, [r3, #0]
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	f3bf 8f6f 	isb	sy
}
 800d500:	e001      	b.n	800d506 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d502:	f7ff f905 	bl	800c710 <xTaskResumeAll>
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20001c20 	.word	0x20001c20
 800d514:	20001c24 	.word	0x20001c24
 800d518:	e000ed04 	.word	0xe000ed04

0800d51c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d524:	4b0e      	ldr	r3, [pc, #56]	; (800d560 <prvGetNextExpireTime+0x44>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <prvGetNextExpireTime+0x16>
 800d52e:	2201      	movs	r2, #1
 800d530:	e000      	b.n	800d534 <prvGetNextExpireTime+0x18>
 800d532:	2200      	movs	r2, #0
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d105      	bne.n	800d54c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <prvGetNextExpireTime+0x44>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	e001      	b.n	800d550 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d550:	68fb      	ldr	r3, [r7, #12]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	20001c1c 	.word	0x20001c1c

0800d564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d56c:	f7ff f970 	bl	800c850 <xTaskGetTickCount>
 800d570:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d572:	4b0b      	ldr	r3, [pc, #44]	; (800d5a0 <prvSampleTimeNow+0x3c>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d205      	bcs.n	800d588 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d57c:	f000 f93c 	bl	800d7f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	e002      	b.n	800d58e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d58e:	4a04      	ldr	r2, [pc, #16]	; (800d5a0 <prvSampleTimeNow+0x3c>)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d594:	68fb      	ldr	r3, [r7, #12]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20001c2c 	.word	0x20001c2c

0800d5a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d812      	bhi.n	800d5f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	1ad2      	subs	r2, r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d302      	bcc.n	800d5de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	e01b      	b.n	800d616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5de:	4b10      	ldr	r3, [pc, #64]	; (800d620 <prvInsertTimerInActiveList+0x7c>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	f7fe f86a 	bl	800b6c2 <vListInsert>
 800d5ee:	e012      	b.n	800d616 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d206      	bcs.n	800d606 <prvInsertTimerInActiveList+0x62>
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d302      	bcc.n	800d606 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d600:	2301      	movs	r3, #1
 800d602:	617b      	str	r3, [r7, #20]
 800d604:	e007      	b.n	800d616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <prvInsertTimerInActiveList+0x80>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3304      	adds	r3, #4
 800d60e:	4619      	mov	r1, r3
 800d610:	4610      	mov	r0, r2
 800d612:	f7fe f856 	bl	800b6c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d616:	697b      	ldr	r3, [r7, #20]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	20001c20 	.word	0x20001c20
 800d624:	20001c1c 	.word	0x20001c1c

0800d628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08e      	sub	sp, #56	; 0x38
 800d62c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d62e:	e0d0      	b.n	800d7d2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	da1a      	bge.n	800d66c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d636:	1d3b      	adds	r3, r7, #4
 800d638:	3304      	adds	r3, #4
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10c      	bne.n	800d65c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	b672      	cpsid	i
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	b662      	cpsie	i
 800d656:	61fb      	str	r3, [r7, #28]
}
 800d658:	bf00      	nop
 800d65a:	e7fe      	b.n	800d65a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d662:	6850      	ldr	r0, [r2, #4]
 800d664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d666:	6892      	ldr	r2, [r2, #8]
 800d668:	4611      	mov	r1, r2
 800d66a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f2c0 80af 	blt.w	800d7d2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d004      	beq.n	800d68a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	3304      	adds	r3, #4
 800d684:	4618      	mov	r0, r3
 800d686:	f7fe f855 	bl	800b734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d68a:	463b      	mov	r3, r7
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7ff ff69 	bl	800d564 <prvSampleTimeNow>
 800d692:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b09      	cmp	r3, #9
 800d698:	f200 809a 	bhi.w	800d7d0 <prvProcessReceivedCommands+0x1a8>
 800d69c:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <prvProcessReceivedCommands+0x7c>)
 800d69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a2:	bf00      	nop
 800d6a4:	0800d6cd 	.word	0x0800d6cd
 800d6a8:	0800d6cd 	.word	0x0800d6cd
 800d6ac:	0800d6cd 	.word	0x0800d6cd
 800d6b0:	0800d745 	.word	0x0800d745
 800d6b4:	0800d759 	.word	0x0800d759
 800d6b8:	0800d7a7 	.word	0x0800d7a7
 800d6bc:	0800d6cd 	.word	0x0800d6cd
 800d6c0:	0800d6cd 	.word	0x0800d6cd
 800d6c4:	0800d745 	.word	0x0800d745
 800d6c8:	0800d759 	.word	0x0800d759
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6d2:	f043 0301 	orr.w	r3, r3, #1
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	18d1      	adds	r1, r2, r3
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6ec:	f7ff ff5a 	bl	800d5a4 <prvInsertTimerInActiveList>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d06d      	beq.n	800d7d2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d062      	beq.n	800d7d2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	441a      	add	r2, r3
 800d714:	2300      	movs	r3, #0
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	2300      	movs	r3, #0
 800d71a:	2100      	movs	r1, #0
 800d71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71e:	f7ff fdff 	bl	800d320 <xTimerGenericCommand>
 800d722:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d153      	bne.n	800d7d2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	b672      	cpsid	i
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	b662      	cpsie	i
 800d73e:	61bb      	str	r3, [r7, #24]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d74a:	f023 0301 	bic.w	r3, r3, #1
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d756:	e03c      	b.n	800d7d2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d75e:	f043 0301 	orr.w	r3, r3, #1
 800d762:	b2da      	uxtb	r2, r3
 800d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10c      	bne.n	800d792 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	b672      	cpsid	i
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	b662      	cpsie	i
 800d78c:	617b      	str	r3, [r7, #20]
}
 800d78e:	bf00      	nop
 800d790:	e7fe      	b.n	800d790 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	699a      	ldr	r2, [r3, #24]
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	18d1      	adds	r1, r2, r3
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d79e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7a0:	f7ff ff00 	bl	800d5a4 <prvInsertTimerInActiveList>
					break;
 800d7a4:	e015      	b.n	800d7d2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7ac:	f003 0302 	and.w	r3, r3, #2
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d103      	bne.n	800d7bc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7b6:	f000 fbe7 	bl	800df88 <vPortFree>
 800d7ba:	e00a      	b.n	800d7d2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7c2:	f023 0301 	bic.w	r3, r3, #1
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7ce:	e000      	b.n	800d7d2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800d7d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7d2:	4b08      	ldr	r3, [pc, #32]	; (800d7f4 <prvProcessReceivedCommands+0x1cc>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	1d39      	adds	r1, r7, #4
 800d7d8:	2200      	movs	r2, #0
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe facc 	bl	800bd78 <xQueueReceive>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f47f af24 	bne.w	800d630 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d7e8:	bf00      	nop
 800d7ea:	bf00      	nop
 800d7ec:	3730      	adds	r7, #48	; 0x30
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20001c24 	.word	0x20001c24

0800d7f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b088      	sub	sp, #32
 800d7fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7fe:	e04a      	b.n	800d896 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d800:	4b2e      	ldr	r3, [pc, #184]	; (800d8bc <prvSwitchTimerLists+0xc4>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d80a:	4b2c      	ldr	r3, [pc, #176]	; (800d8bc <prvSwitchTimerLists+0xc4>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	3304      	adds	r3, #4
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fd ff8b 	bl	800b734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d030      	beq.n	800d896 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	4413      	add	r3, r2
 800d83c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	429a      	cmp	r2, r3
 800d844:	d90e      	bls.n	800d864 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d852:	4b1a      	ldr	r3, [pc, #104]	; (800d8bc <prvSwitchTimerLists+0xc4>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7fd ff30 	bl	800b6c2 <vListInsert>
 800d862:	e018      	b.n	800d896 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d864:	2300      	movs	r3, #0
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	2300      	movs	r3, #0
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	2100      	movs	r1, #0
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7ff fd56 	bl	800d320 <xTimerGenericCommand>
 800d874:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10c      	bne.n	800d896 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	b672      	cpsid	i
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	b662      	cpsie	i
 800d890:	603b      	str	r3, [r7, #0]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d896:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <prvSwitchTimerLists+0xc4>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1af      	bne.n	800d800 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d8a0:	4b06      	ldr	r3, [pc, #24]	; (800d8bc <prvSwitchTimerLists+0xc4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d8a6:	4b06      	ldr	r3, [pc, #24]	; (800d8c0 <prvSwitchTimerLists+0xc8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a04      	ldr	r2, [pc, #16]	; (800d8bc <prvSwitchTimerLists+0xc4>)
 800d8ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d8ae:	4a04      	ldr	r2, [pc, #16]	; (800d8c0 <prvSwitchTimerLists+0xc8>)
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	6013      	str	r3, [r2, #0]
}
 800d8b4:	bf00      	nop
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20001c1c 	.word	0x20001c1c
 800d8c0:	20001c20 	.word	0x20001c20

0800d8c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8ca:	f000 f967 	bl	800db9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8ce:	4b15      	ldr	r3, [pc, #84]	; (800d924 <prvCheckForValidListAndQueue+0x60>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d120      	bne.n	800d918 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8d6:	4814      	ldr	r0, [pc, #80]	; (800d928 <prvCheckForValidListAndQueue+0x64>)
 800d8d8:	f7fd fea2 	bl	800b620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8dc:	4813      	ldr	r0, [pc, #76]	; (800d92c <prvCheckForValidListAndQueue+0x68>)
 800d8de:	f7fd fe9f 	bl	800b620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8e2:	4b13      	ldr	r3, [pc, #76]	; (800d930 <prvCheckForValidListAndQueue+0x6c>)
 800d8e4:	4a10      	ldr	r2, [pc, #64]	; (800d928 <prvCheckForValidListAndQueue+0x64>)
 800d8e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8e8:	4b12      	ldr	r3, [pc, #72]	; (800d934 <prvCheckForValidListAndQueue+0x70>)
 800d8ea:	4a10      	ldr	r2, [pc, #64]	; (800d92c <prvCheckForValidListAndQueue+0x68>)
 800d8ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	4b11      	ldr	r3, [pc, #68]	; (800d938 <prvCheckForValidListAndQueue+0x74>)
 800d8f4:	4a11      	ldr	r2, [pc, #68]	; (800d93c <prvCheckForValidListAndQueue+0x78>)
 800d8f6:	2110      	movs	r1, #16
 800d8f8:	200a      	movs	r0, #10
 800d8fa:	f7fd ffaf 	bl	800b85c <xQueueGenericCreateStatic>
 800d8fe:	4603      	mov	r3, r0
 800d900:	4a08      	ldr	r2, [pc, #32]	; (800d924 <prvCheckForValidListAndQueue+0x60>)
 800d902:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d904:	4b07      	ldr	r3, [pc, #28]	; (800d924 <prvCheckForValidListAndQueue+0x60>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d005      	beq.n	800d918 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d90c:	4b05      	ldr	r3, [pc, #20]	; (800d924 <prvCheckForValidListAndQueue+0x60>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	490b      	ldr	r1, [pc, #44]	; (800d940 <prvCheckForValidListAndQueue+0x7c>)
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fc26 	bl	800c164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d918:	f000 f974 	bl	800dc04 <vPortExitCritical>
}
 800d91c:	bf00      	nop
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	20001c24 	.word	0x20001c24
 800d928:	20001bf4 	.word	0x20001bf4
 800d92c:	20001c08 	.word	0x20001c08
 800d930:	20001c1c 	.word	0x20001c1c
 800d934:	20001c20 	.word	0x20001c20
 800d938:	20001cd0 	.word	0x20001cd0
 800d93c:	20001c30 	.word	0x20001c30
 800d940:	0800f8b4 	.word	0x0800f8b4

0800d944 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10c      	bne.n	800d970 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95a:	b672      	cpsid	i
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	b662      	cpsie	i
 800d96a:	60fb      	str	r3, [r7, #12]
}
 800d96c:	bf00      	nop
 800d96e:	e7fe      	b.n	800d96e <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800d970:	f000 f914 	bl	800db9c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d97a:	f000 f943 	bl	800dc04 <vPortExitCritical>

	return pvReturn;
 800d97e:	693b      	ldr	r3, [r7, #16]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	3b04      	subs	r3, #4
 800d998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d9a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3b04      	subs	r3, #4
 800d9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	f023 0201 	bic.w	r2, r3, #1
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	3b04      	subs	r3, #4
 800d9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d9b8:	4a0c      	ldr	r2, [pc, #48]	; (800d9ec <pxPortInitialiseStack+0x64>)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3b14      	subs	r3, #20
 800d9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3b04      	subs	r3, #4
 800d9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f06f 0202 	mvn.w	r2, #2
 800d9d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3b20      	subs	r3, #32
 800d9dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9de:	68fb      	ldr	r3, [r7, #12]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	0800d9f1 	.word	0x0800d9f1

0800d9f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9fa:	4b14      	ldr	r3, [pc, #80]	; (800da4c <prvTaskExitError+0x5c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da02:	d00c      	beq.n	800da1e <prvTaskExitError+0x2e>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	b672      	cpsid	i
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	b662      	cpsie	i
 800da18:	60fb      	str	r3, [r7, #12]
}
 800da1a:	bf00      	nop
 800da1c:	e7fe      	b.n	800da1c <prvTaskExitError+0x2c>
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	b672      	cpsid	i
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	b662      	cpsie	i
 800da32:	60bb      	str	r3, [r7, #8]
}
 800da34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da36:	bf00      	nop
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0fc      	beq.n	800da38 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da3e:	bf00      	nop
 800da40:	bf00      	nop
 800da42:	3714      	adds	r7, #20
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	20000098 	.word	0x20000098

0800da50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <pxCurrentTCBConst2>)
 800da52:	6819      	ldr	r1, [r3, #0]
 800da54:	6808      	ldr	r0, [r1, #0]
 800da56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	f380 8809 	msr	PSP, r0
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8811 	msr	BASEPRI, r0
 800da6a:	4770      	bx	lr
 800da6c:	f3af 8000 	nop.w

0800da70 <pxCurrentTCBConst2>:
 800da70:	200016f4 	.word	0x200016f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop

0800da78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da78:	4808      	ldr	r0, [pc, #32]	; (800da9c <prvPortStartFirstTask+0x24>)
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	6800      	ldr	r0, [r0, #0]
 800da7e:	f380 8808 	msr	MSP, r0
 800da82:	f04f 0000 	mov.w	r0, #0
 800da86:	f380 8814 	msr	CONTROL, r0
 800da8a:	b662      	cpsie	i
 800da8c:	b661      	cpsie	f
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	df00      	svc	0
 800da98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da9a:	bf00      	nop
 800da9c:	e000ed08 	.word	0xe000ed08

0800daa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800daa6:	4b37      	ldr	r3, [pc, #220]	; (800db84 <xPortStartScheduler+0xe4>)
 800daa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	22ff      	movs	r2, #255	; 0xff
 800dab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dac0:	78fb      	ldrb	r3, [r7, #3]
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	4b2f      	ldr	r3, [pc, #188]	; (800db88 <xPortStartScheduler+0xe8>)
 800dacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dace:	4b2f      	ldr	r3, [pc, #188]	; (800db8c <xPortStartScheduler+0xec>)
 800dad0:	2207      	movs	r2, #7
 800dad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dad4:	e009      	b.n	800daea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dad6:	4b2d      	ldr	r3, [pc, #180]	; (800db8c <xPortStartScheduler+0xec>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3b01      	subs	r3, #1
 800dadc:	4a2b      	ldr	r2, [pc, #172]	; (800db8c <xPortStartScheduler+0xec>)
 800dade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dae0:	78fb      	ldrb	r3, [r7, #3]
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daea:	78fb      	ldrb	r3, [r7, #3]
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf2:	2b80      	cmp	r3, #128	; 0x80
 800daf4:	d0ef      	beq.n	800dad6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800daf6:	4b25      	ldr	r3, [pc, #148]	; (800db8c <xPortStartScheduler+0xec>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f1c3 0307 	rsb	r3, r3, #7
 800dafe:	2b04      	cmp	r3, #4
 800db00:	d00c      	beq.n	800db1c <xPortStartScheduler+0x7c>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	b672      	cpsid	i
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	b662      	cpsie	i
 800db16:	60bb      	str	r3, [r7, #8]
}
 800db18:	bf00      	nop
 800db1a:	e7fe      	b.n	800db1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db1c:	4b1b      	ldr	r3, [pc, #108]	; (800db8c <xPortStartScheduler+0xec>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	021b      	lsls	r3, r3, #8
 800db22:	4a1a      	ldr	r2, [pc, #104]	; (800db8c <xPortStartScheduler+0xec>)
 800db24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db26:	4b19      	ldr	r3, [pc, #100]	; (800db8c <xPortStartScheduler+0xec>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db2e:	4a17      	ldr	r2, [pc, #92]	; (800db8c <xPortStartScheduler+0xec>)
 800db30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	b2da      	uxtb	r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db3a:	4b15      	ldr	r3, [pc, #84]	; (800db90 <xPortStartScheduler+0xf0>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a14      	ldr	r2, [pc, #80]	; (800db90 <xPortStartScheduler+0xf0>)
 800db40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db46:	4b12      	ldr	r3, [pc, #72]	; (800db90 <xPortStartScheduler+0xf0>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a11      	ldr	r2, [pc, #68]	; (800db90 <xPortStartScheduler+0xf0>)
 800db4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db52:	f000 f8dd 	bl	800dd10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db56:	4b0f      	ldr	r3, [pc, #60]	; (800db94 <xPortStartScheduler+0xf4>)
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db5c:	f000 f8fc 	bl	800dd58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db60:	4b0d      	ldr	r3, [pc, #52]	; (800db98 <xPortStartScheduler+0xf8>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a0c      	ldr	r2, [pc, #48]	; (800db98 <xPortStartScheduler+0xf8>)
 800db66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db6c:	f7ff ff84 	bl	800da78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db70:	f7fe ff4c 	bl	800ca0c <vTaskSwitchContext>
	prvTaskExitError();
 800db74:	f7ff ff3c 	bl	800d9f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	e000e400 	.word	0xe000e400
 800db88:	20001d20 	.word	0x20001d20
 800db8c:	20001d24 	.word	0x20001d24
 800db90:	e000ed20 	.word	0xe000ed20
 800db94:	20000098 	.word	0x20000098
 800db98:	e000ef34 	.word	0xe000ef34

0800db9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
	__asm volatile
 800dba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba6:	b672      	cpsid	i
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	b662      	cpsie	i
 800dbb6:	607b      	str	r3, [r7, #4]
}
 800dbb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbba:	4b10      	ldr	r3, [pc, #64]	; (800dbfc <vPortEnterCritical+0x60>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	4a0e      	ldr	r2, [pc, #56]	; (800dbfc <vPortEnterCritical+0x60>)
 800dbc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbc4:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <vPortEnterCritical+0x60>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d111      	bne.n	800dbf0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbcc:	4b0c      	ldr	r3, [pc, #48]	; (800dc00 <vPortEnterCritical+0x64>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00c      	beq.n	800dbf0 <vPortEnterCritical+0x54>
	__asm volatile
 800dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbda:	b672      	cpsid	i
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	b662      	cpsie	i
 800dbea:	603b      	str	r3, [r7, #0]
}
 800dbec:	bf00      	nop
 800dbee:	e7fe      	b.n	800dbee <vPortEnterCritical+0x52>
	}
}
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	20000098 	.word	0x20000098
 800dc00:	e000ed04 	.word	0xe000ed04

0800dc04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc0a:	4b13      	ldr	r3, [pc, #76]	; (800dc58 <vPortExitCritical+0x54>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10c      	bne.n	800dc2c <vPortExitCritical+0x28>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	b672      	cpsid	i
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	b662      	cpsie	i
 800dc26:	607b      	str	r3, [r7, #4]
}
 800dc28:	bf00      	nop
 800dc2a:	e7fe      	b.n	800dc2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800dc2c:	4b0a      	ldr	r3, [pc, #40]	; (800dc58 <vPortExitCritical+0x54>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	4a09      	ldr	r2, [pc, #36]	; (800dc58 <vPortExitCritical+0x54>)
 800dc34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc36:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <vPortExitCritical+0x54>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d105      	bne.n	800dc4a <vPortExitCritical+0x46>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	f383 8811 	msr	BASEPRI, r3
}
 800dc48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	20000098 	.word	0x20000098
 800dc5c:	00000000 	.word	0x00000000

0800dc60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc60:	f3ef 8009 	mrs	r0, PSP
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	4b15      	ldr	r3, [pc, #84]	; (800dcc0 <pxCurrentTCBConst>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	f01e 0f10 	tst.w	lr, #16
 800dc70:	bf08      	it	eq
 800dc72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7a:	6010      	str	r0, [r2, #0]
 800dc7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc84:	b672      	cpsid	i
 800dc86:	f380 8811 	msr	BASEPRI, r0
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	b662      	cpsie	i
 800dc94:	f7fe feba 	bl	800ca0c <vTaskSwitchContext>
 800dc98:	f04f 0000 	mov.w	r0, #0
 800dc9c:	f380 8811 	msr	BASEPRI, r0
 800dca0:	bc09      	pop	{r0, r3}
 800dca2:	6819      	ldr	r1, [r3, #0]
 800dca4:	6808      	ldr	r0, [r1, #0]
 800dca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcaa:	f01e 0f10 	tst.w	lr, #16
 800dcae:	bf08      	it	eq
 800dcb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dcb4:	f380 8809 	msr	PSP, r0
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop

0800dcc0 <pxCurrentTCBConst>:
 800dcc0:	200016f4 	.word	0x200016f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop

0800dcc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	b672      	cpsid	i
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	b662      	cpsie	i
 800dce2:	607b      	str	r3, [r7, #4]
}
 800dce4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dce6:	f7fe fdd5 	bl	800c894 <xTaskIncrementTick>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d003      	beq.n	800dcf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcf0:	4b06      	ldr	r3, [pc, #24]	; (800dd0c <SysTick_Handler+0x44>)
 800dcf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	f383 8811 	msr	BASEPRI, r3
}
 800dd02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	e000ed04 	.word	0xe000ed04

0800dd10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd10:	b480      	push	{r7}
 800dd12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd14:	4b0b      	ldr	r3, [pc, #44]	; (800dd44 <vPortSetupTimerInterrupt+0x34>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <vPortSetupTimerInterrupt+0x38>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd20:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <vPortSetupTimerInterrupt+0x3c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a0a      	ldr	r2, [pc, #40]	; (800dd50 <vPortSetupTimerInterrupt+0x40>)
 800dd26:	fba2 2303 	umull	r2, r3, r2, r3
 800dd2a:	099b      	lsrs	r3, r3, #6
 800dd2c:	4a09      	ldr	r2, [pc, #36]	; (800dd54 <vPortSetupTimerInterrupt+0x44>)
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd32:	4b04      	ldr	r3, [pc, #16]	; (800dd44 <vPortSetupTimerInterrupt+0x34>)
 800dd34:	2207      	movs	r2, #7
 800dd36:	601a      	str	r2, [r3, #0]
}
 800dd38:	bf00      	nop
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	e000e010 	.word	0xe000e010
 800dd48:	e000e018 	.word	0xe000e018
 800dd4c:	20000000 	.word	0x20000000
 800dd50:	10624dd3 	.word	0x10624dd3
 800dd54:	e000e014 	.word	0xe000e014

0800dd58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd68 <vPortEnableVFP+0x10>
 800dd5c:	6801      	ldr	r1, [r0, #0]
 800dd5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd62:	6001      	str	r1, [r0, #0]
 800dd64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd66:	bf00      	nop
 800dd68:	e000ed88 	.word	0xe000ed88

0800dd6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd72:	f3ef 8305 	mrs	r3, IPSR
 800dd76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b0f      	cmp	r3, #15
 800dd7c:	d916      	bls.n	800ddac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd7e:	4a19      	ldr	r2, [pc, #100]	; (800dde4 <vPortValidateInterruptPriority+0x78>)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd88:	4b17      	ldr	r3, [pc, #92]	; (800dde8 <vPortValidateInterruptPriority+0x7c>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	7afa      	ldrb	r2, [r7, #11]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d20c      	bcs.n	800ddac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	b672      	cpsid	i
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	b662      	cpsie	i
 800dda6:	607b      	str	r3, [r7, #4]
}
 800dda8:	bf00      	nop
 800ddaa:	e7fe      	b.n	800ddaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ddac:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <vPortValidateInterruptPriority+0x80>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ddb4:	4b0e      	ldr	r3, [pc, #56]	; (800ddf0 <vPortValidateInterruptPriority+0x84>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d90c      	bls.n	800ddd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	b672      	cpsid	i
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	b662      	cpsie	i
 800ddd0:	603b      	str	r3, [r7, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <vPortValidateInterruptPriority+0x68>
	}
 800ddd6:	bf00      	nop
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	e000e3f0 	.word	0xe000e3f0
 800dde8:	20001d20 	.word	0x20001d20
 800ddec:	e000ed0c 	.word	0xe000ed0c
 800ddf0:	20001d24 	.word	0x20001d24

0800ddf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08a      	sub	sp, #40	; 0x28
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de00:	f7fe fc78 	bl	800c6f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de04:	4b5b      	ldr	r3, [pc, #364]	; (800df74 <pvPortMalloc+0x180>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de0c:	f000 f91a 	bl	800e044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de10:	4b59      	ldr	r3, [pc, #356]	; (800df78 <pvPortMalloc+0x184>)
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4013      	ands	r3, r2
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f040 8092 	bne.w	800df42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d01f      	beq.n	800de64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800de24:	2208      	movs	r2, #8
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4413      	add	r3, r2
 800de2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f003 0307 	and.w	r3, r3, #7
 800de32:	2b00      	cmp	r3, #0
 800de34:	d016      	beq.n	800de64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f023 0307 	bic.w	r3, r3, #7
 800de3c:	3308      	adds	r3, #8
 800de3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00c      	beq.n	800de64 <pvPortMalloc+0x70>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4e:	b672      	cpsid	i
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	b662      	cpsie	i
 800de5e:	617b      	str	r3, [r7, #20]
}
 800de60:	bf00      	nop
 800de62:	e7fe      	b.n	800de62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d06b      	beq.n	800df42 <pvPortMalloc+0x14e>
 800de6a:	4b44      	ldr	r3, [pc, #272]	; (800df7c <pvPortMalloc+0x188>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	429a      	cmp	r2, r3
 800de72:	d866      	bhi.n	800df42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de74:	4b42      	ldr	r3, [pc, #264]	; (800df80 <pvPortMalloc+0x18c>)
 800de76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de78:	4b41      	ldr	r3, [pc, #260]	; (800df80 <pvPortMalloc+0x18c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de7e:	e004      	b.n	800de8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	429a      	cmp	r2, r3
 800de92:	d903      	bls.n	800de9c <pvPortMalloc+0xa8>
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1f1      	bne.n	800de80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de9c:	4b35      	ldr	r3, [pc, #212]	; (800df74 <pvPortMalloc+0x180>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d04d      	beq.n	800df42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2208      	movs	r2, #8
 800deac:	4413      	add	r3, r2
 800deae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	685a      	ldr	r2, [r3, #4]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	1ad2      	subs	r2, r2, r3
 800dec0:	2308      	movs	r3, #8
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d921      	bls.n	800df0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4413      	add	r3, r2
 800dece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	f003 0307 	and.w	r3, r3, #7
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00c      	beq.n	800def4 <pvPortMalloc+0x100>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	b672      	cpsid	i
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	b662      	cpsie	i
 800deee:	613b      	str	r3, [r7, #16]
}
 800def0:	bf00      	nop
 800def2:	e7fe      	b.n	800def2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	685a      	ldr	r2, [r3, #4]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	1ad2      	subs	r2, r2, r3
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df06:	69b8      	ldr	r0, [r7, #24]
 800df08:	f000 f8fe 	bl	800e108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df0c:	4b1b      	ldr	r3, [pc, #108]	; (800df7c <pvPortMalloc+0x188>)
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	4a19      	ldr	r2, [pc, #100]	; (800df7c <pvPortMalloc+0x188>)
 800df18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df1a:	4b18      	ldr	r3, [pc, #96]	; (800df7c <pvPortMalloc+0x188>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	4b19      	ldr	r3, [pc, #100]	; (800df84 <pvPortMalloc+0x190>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	429a      	cmp	r2, r3
 800df24:	d203      	bcs.n	800df2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df26:	4b15      	ldr	r3, [pc, #84]	; (800df7c <pvPortMalloc+0x188>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a16      	ldr	r2, [pc, #88]	; (800df84 <pvPortMalloc+0x190>)
 800df2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	4b11      	ldr	r3, [pc, #68]	; (800df78 <pvPortMalloc+0x184>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	431a      	orrs	r2, r3
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3e:	2200      	movs	r2, #0
 800df40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df42:	f7fe fbe5 	bl	800c710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	f003 0307 	and.w	r3, r3, #7
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00c      	beq.n	800df6a <pvPortMalloc+0x176>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df54:	b672      	cpsid	i
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	b662      	cpsie	i
 800df64:	60fb      	str	r3, [r7, #12]
}
 800df66:	bf00      	nop
 800df68:	e7fe      	b.n	800df68 <pvPortMalloc+0x174>
	return pvReturn;
 800df6a:	69fb      	ldr	r3, [r7, #28]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3728      	adds	r7, #40	; 0x28
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	20005930 	.word	0x20005930
 800df78:	2000593c 	.word	0x2000593c
 800df7c:	20005934 	.word	0x20005934
 800df80:	20005928 	.word	0x20005928
 800df84:	20005938 	.word	0x20005938

0800df88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d04c      	beq.n	800e034 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df9a:	2308      	movs	r3, #8
 800df9c:	425b      	negs	r3, r3
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	4b23      	ldr	r3, [pc, #140]	; (800e03c <vPortFree+0xb4>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d10c      	bne.n	800dfd0 <vPortFree+0x48>
	__asm volatile
 800dfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfba:	b672      	cpsid	i
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	b662      	cpsie	i
 800dfca:	60fb      	str	r3, [r7, #12]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00c      	beq.n	800dff2 <vPortFree+0x6a>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	b672      	cpsid	i
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	b662      	cpsie	i
 800dfec:	60bb      	str	r3, [r7, #8]
}
 800dfee:	bf00      	nop
 800dff0:	e7fe      	b.n	800dff0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	685a      	ldr	r2, [r3, #4]
 800dff6:	4b11      	ldr	r3, [pc, #68]	; (800e03c <vPortFree+0xb4>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4013      	ands	r3, r2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d019      	beq.n	800e034 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d115      	bne.n	800e034 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	4b0b      	ldr	r3, [pc, #44]	; (800e03c <vPortFree+0xb4>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	43db      	mvns	r3, r3
 800e012:	401a      	ands	r2, r3
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e018:	f7fe fb6c 	bl	800c6f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	4b07      	ldr	r3, [pc, #28]	; (800e040 <vPortFree+0xb8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4413      	add	r3, r2
 800e026:	4a06      	ldr	r2, [pc, #24]	; (800e040 <vPortFree+0xb8>)
 800e028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e02a:	6938      	ldr	r0, [r7, #16]
 800e02c:	f000 f86c 	bl	800e108 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e030:	f7fe fb6e 	bl	800c710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e034:	bf00      	nop
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	2000593c 	.word	0x2000593c
 800e040:	20005934 	.word	0x20005934

0800e044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e050:	4b27      	ldr	r3, [pc, #156]	; (800e0f0 <prvHeapInit+0xac>)
 800e052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f003 0307 	and.w	r3, r3, #7
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00c      	beq.n	800e078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	3307      	adds	r3, #7
 800e062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f023 0307 	bic.w	r3, r3, #7
 800e06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	4a1f      	ldr	r2, [pc, #124]	; (800e0f0 <prvHeapInit+0xac>)
 800e074:	4413      	add	r3, r2
 800e076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e07c:	4a1d      	ldr	r2, [pc, #116]	; (800e0f4 <prvHeapInit+0xb0>)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e082:	4b1c      	ldr	r3, [pc, #112]	; (800e0f4 <prvHeapInit+0xb0>)
 800e084:	2200      	movs	r2, #0
 800e086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	4413      	add	r3, r2
 800e08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e090:	2208      	movs	r2, #8
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	1a9b      	subs	r3, r3, r2
 800e096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f023 0307 	bic.w	r3, r3, #7
 800e09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	4a15      	ldr	r2, [pc, #84]	; (800e0f8 <prvHeapInit+0xb4>)
 800e0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0a6:	4b14      	ldr	r3, [pc, #80]	; (800e0f8 <prvHeapInit+0xb4>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0ae:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <prvHeapInit+0xb4>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	1ad2      	subs	r2, r2, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0c4:	4b0c      	ldr	r3, [pc, #48]	; (800e0f8 <prvHeapInit+0xb4>)
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	4a0a      	ldr	r2, [pc, #40]	; (800e0fc <prvHeapInit+0xb8>)
 800e0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	4a09      	ldr	r2, [pc, #36]	; (800e100 <prvHeapInit+0xbc>)
 800e0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0dc:	4b09      	ldr	r3, [pc, #36]	; (800e104 <prvHeapInit+0xc0>)
 800e0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0e2:	601a      	str	r2, [r3, #0]
}
 800e0e4:	bf00      	nop
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	20001d28 	.word	0x20001d28
 800e0f4:	20005928 	.word	0x20005928
 800e0f8:	20005930 	.word	0x20005930
 800e0fc:	20005938 	.word	0x20005938
 800e100:	20005934 	.word	0x20005934
 800e104:	2000593c 	.word	0x2000593c

0800e108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e110:	4b28      	ldr	r3, [pc, #160]	; (800e1b4 <prvInsertBlockIntoFreeList+0xac>)
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	e002      	b.n	800e11c <prvInsertBlockIntoFreeList+0x14>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	429a      	cmp	r2, r3
 800e124:	d8f7      	bhi.n	800e116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	4413      	add	r3, r2
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	429a      	cmp	r2, r3
 800e136:	d108      	bne.n	800e14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	441a      	add	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	441a      	add	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d118      	bne.n	800e190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	429a      	cmp	r2, r3
 800e168:	d00d      	beq.n	800e186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685a      	ldr	r2, [r3, #4]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	441a      	add	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	601a      	str	r2, [r3, #0]
 800e184:	e008      	b.n	800e198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e186:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	e003      	b.n	800e198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d002      	beq.n	800e1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1a6:	bf00      	nop
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	20005928 	.word	0x20005928
 800e1b8:	20005930 	.word	0x20005930

0800e1bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4912      	ldr	r1, [pc, #72]	; (800e20c <MX_USB_DEVICE_Init+0x50>)
 800e1c4:	4812      	ldr	r0, [pc, #72]	; (800e210 <MX_USB_DEVICE_Init+0x54>)
 800e1c6:	f7fb fc75 	bl	8009ab4 <USBD_Init>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e1d0:	f7f4 f858 	bl	8002284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e1d4:	490f      	ldr	r1, [pc, #60]	; (800e214 <MX_USB_DEVICE_Init+0x58>)
 800e1d6:	480e      	ldr	r0, [pc, #56]	; (800e210 <MX_USB_DEVICE_Init+0x54>)
 800e1d8:	f7fb fc9c 	bl	8009b14 <USBD_RegisterClass>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e1e2:	f7f4 f84f 	bl	8002284 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e1e6:	490c      	ldr	r1, [pc, #48]	; (800e218 <MX_USB_DEVICE_Init+0x5c>)
 800e1e8:	4809      	ldr	r0, [pc, #36]	; (800e210 <MX_USB_DEVICE_Init+0x54>)
 800e1ea:	f7fb fbd3 	bl	8009994 <USBD_CDC_RegisterInterface>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d001      	beq.n	800e1f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e1f4:	f7f4 f846 	bl	8002284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e1f8:	4805      	ldr	r0, [pc, #20]	; (800e210 <MX_USB_DEVICE_Init+0x54>)
 800e1fa:	f7fb fcc1 	bl	8009b80 <USBD_Start>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e204:	f7f4 f83e 	bl	8002284 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e208:	bf00      	nop
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	200000b0 	.word	0x200000b0
 800e210:	20005940 	.word	0x20005940
 800e214:	20000018 	.word	0x20000018
 800e218:	2000009c 	.word	0x2000009c

0800e21c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e220:	2200      	movs	r2, #0
 800e222:	4905      	ldr	r1, [pc, #20]	; (800e238 <CDC_Init_FS+0x1c>)
 800e224:	4805      	ldr	r0, [pc, #20]	; (800e23c <CDC_Init_FS+0x20>)
 800e226:	f7fb fbcf 	bl	80099c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e22a:	4905      	ldr	r1, [pc, #20]	; (800e240 <CDC_Init_FS+0x24>)
 800e22c:	4803      	ldr	r0, [pc, #12]	; (800e23c <CDC_Init_FS+0x20>)
 800e22e:	f7fb fbed 	bl	8009a0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e234:	4618      	mov	r0, r3
 800e236:	bd80      	pop	{r7, pc}
 800e238:	2000641c 	.word	0x2000641c
 800e23c:	20005940 	.word	0x20005940
 800e240:	20005c1c 	.word	0x20005c1c

0800e244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e244:	b480      	push	{r7}
 800e246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	6039      	str	r1, [r7, #0]
 800e25e:	71fb      	strb	r3, [r7, #7]
 800e260:	4613      	mov	r3, r2
 800e262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	2b23      	cmp	r3, #35	; 0x23
 800e268:	d84a      	bhi.n	800e300 <CDC_Control_FS+0xac>
 800e26a:	a201      	add	r2, pc, #4	; (adr r2, 800e270 <CDC_Control_FS+0x1c>)
 800e26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e270:	0800e301 	.word	0x0800e301
 800e274:	0800e301 	.word	0x0800e301
 800e278:	0800e301 	.word	0x0800e301
 800e27c:	0800e301 	.word	0x0800e301
 800e280:	0800e301 	.word	0x0800e301
 800e284:	0800e301 	.word	0x0800e301
 800e288:	0800e301 	.word	0x0800e301
 800e28c:	0800e301 	.word	0x0800e301
 800e290:	0800e301 	.word	0x0800e301
 800e294:	0800e301 	.word	0x0800e301
 800e298:	0800e301 	.word	0x0800e301
 800e29c:	0800e301 	.word	0x0800e301
 800e2a0:	0800e301 	.word	0x0800e301
 800e2a4:	0800e301 	.word	0x0800e301
 800e2a8:	0800e301 	.word	0x0800e301
 800e2ac:	0800e301 	.word	0x0800e301
 800e2b0:	0800e301 	.word	0x0800e301
 800e2b4:	0800e301 	.word	0x0800e301
 800e2b8:	0800e301 	.word	0x0800e301
 800e2bc:	0800e301 	.word	0x0800e301
 800e2c0:	0800e301 	.word	0x0800e301
 800e2c4:	0800e301 	.word	0x0800e301
 800e2c8:	0800e301 	.word	0x0800e301
 800e2cc:	0800e301 	.word	0x0800e301
 800e2d0:	0800e301 	.word	0x0800e301
 800e2d4:	0800e301 	.word	0x0800e301
 800e2d8:	0800e301 	.word	0x0800e301
 800e2dc:	0800e301 	.word	0x0800e301
 800e2e0:	0800e301 	.word	0x0800e301
 800e2e4:	0800e301 	.word	0x0800e301
 800e2e8:	0800e301 	.word	0x0800e301
 800e2ec:	0800e301 	.word	0x0800e301
 800e2f0:	0800e301 	.word	0x0800e301
 800e2f4:	0800e301 	.word	0x0800e301
 800e2f8:	0800e301 	.word	0x0800e301
 800e2fc:	0800e301 	.word	0x0800e301
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e300:	bf00      	nop
  }

  return (USBD_OK);
 800e302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08a      	sub	sp, #40	; 0x28
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e31a:	6879      	ldr	r1, [r7, #4]
 800e31c:	480b      	ldr	r0, [pc, #44]	; (800e34c <CDC_Receive_FS+0x3c>)
 800e31e:	f7fb fb75 	bl	8009a0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e322:	480a      	ldr	r0, [pc, #40]	; (800e34c <CDC_Receive_FS+0x3c>)
 800e324:	f7fb fb90 	bl	8009a48 <USBD_CDC_ReceivePacket>
  //uint8_t *data = "Hello World from USB CDC\n";
  uint8_t * command[8];
  //strcpy(command, Buf);
  //command[*Len] = "\0";
  SEGGER_SYSVIEW_PrintfHost("%d\n", *Len );
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4619      	mov	r1, r3
 800e32e:	4808      	ldr	r0, [pc, #32]	; (800e350 <CDC_Receive_FS+0x40>)
 800e330:	f7f3 fb52 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>

  //SEGGER_SYSVIEW_PrintfHost(command);

  xQueueSendFromISR(commandQueueHandle, Buf, 100);
 800e334:	4b07      	ldr	r3, [pc, #28]	; (800e354 <CDC_Receive_FS+0x44>)
 800e336:	6818      	ldr	r0, [r3, #0]
 800e338:	2300      	movs	r3, #0
 800e33a:	2264      	movs	r2, #100	; 0x64
 800e33c:	6879      	ldr	r1, [r7, #4]
 800e33e:	f7fd fc7b 	bl	800bc38 <xQueueGenericSendFromISR>



  return (USBD_OK);
 800e342:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e344:	4618      	mov	r0, r3
 800e346:	3728      	adds	r7, #40	; 0x28
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20005940 	.word	0x20005940
 800e350:	0800f8bc 	.word	0x0800f8bc
 800e354:	20000ef8 	.word	0x20000ef8

0800e358 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e358:	b480      	push	{r7}
 800e35a:	b087      	sub	sp, #28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	4613      	mov	r3, r2
 800e364:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	371c      	adds	r7, #28
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
	...

0800e37c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	4603      	mov	r3, r0
 800e384:	6039      	str	r1, [r7, #0]
 800e386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2212      	movs	r2, #18
 800e38c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e38e:	4b03      	ldr	r3, [pc, #12]	; (800e39c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e390:	4618      	mov	r0, r3
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	200000d0 	.word	0x200000d0

0800e3a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	6039      	str	r1, [r7, #0]
 800e3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2204      	movs	r2, #4
 800e3b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e3b2:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	200000f0 	.word	0x200000f0

0800e3c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	6039      	str	r1, [r7, #0]
 800e3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d105      	bne.n	800e3e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3d6:	683a      	ldr	r2, [r7, #0]
 800e3d8:	4907      	ldr	r1, [pc, #28]	; (800e3f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3da:	4808      	ldr	r0, [pc, #32]	; (800e3fc <USBD_FS_ProductStrDescriptor+0x38>)
 800e3dc:	f7fc fda6 	bl	800af2c <USBD_GetString>
 800e3e0:	e004      	b.n	800e3ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3e2:	683a      	ldr	r2, [r7, #0]
 800e3e4:	4904      	ldr	r1, [pc, #16]	; (800e3f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3e6:	4805      	ldr	r0, [pc, #20]	; (800e3fc <USBD_FS_ProductStrDescriptor+0x38>)
 800e3e8:	f7fc fda0 	bl	800af2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3ec:	4b02      	ldr	r3, [pc, #8]	; (800e3f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20006c1c 	.word	0x20006c1c
 800e3fc:	0800f8c0 	.word	0x0800f8c0

0800e400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	6039      	str	r1, [r7, #0]
 800e40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	4904      	ldr	r1, [pc, #16]	; (800e420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e410:	4804      	ldr	r0, [pc, #16]	; (800e424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e412:	f7fc fd8b 	bl	800af2c <USBD_GetString>
  return USBD_StrDesc;
 800e416:	4b02      	ldr	r3, [pc, #8]	; (800e420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	20006c1c 	.word	0x20006c1c
 800e424:	0800f8d8 	.word	0x0800f8d8

0800e428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	6039      	str	r1, [r7, #0]
 800e432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	221a      	movs	r2, #26
 800e438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e43a:	f000 f855 	bl	800e4e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e43e:	4b02      	ldr	r3, [pc, #8]	; (800e448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	200000f4 	.word	0x200000f4

0800e44c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	6039      	str	r1, [r7, #0]
 800e456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e458:	79fb      	ldrb	r3, [r7, #7]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d105      	bne.n	800e46a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e45e:	683a      	ldr	r2, [r7, #0]
 800e460:	4907      	ldr	r1, [pc, #28]	; (800e480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e462:	4808      	ldr	r0, [pc, #32]	; (800e484 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e464:	f7fc fd62 	bl	800af2c <USBD_GetString>
 800e468:	e004      	b.n	800e474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	4904      	ldr	r1, [pc, #16]	; (800e480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e46e:	4805      	ldr	r0, [pc, #20]	; (800e484 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e470:	f7fc fd5c 	bl	800af2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e474:	4b02      	ldr	r3, [pc, #8]	; (800e480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e476:	4618      	mov	r0, r3
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	20006c1c 	.word	0x20006c1c
 800e484:	0800f8ec 	.word	0x0800f8ec

0800e488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	6039      	str	r1, [r7, #0]
 800e492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d105      	bne.n	800e4a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	4907      	ldr	r1, [pc, #28]	; (800e4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e49e:	4808      	ldr	r0, [pc, #32]	; (800e4c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4a0:	f7fc fd44 	bl	800af2c <USBD_GetString>
 800e4a4:	e004      	b.n	800e4b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	4904      	ldr	r1, [pc, #16]	; (800e4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4aa:	4805      	ldr	r0, [pc, #20]	; (800e4c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4ac:	f7fc fd3e 	bl	800af2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4b0:	4b02      	ldr	r3, [pc, #8]	; (800e4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20006c1c 	.word	0x20006c1c
 800e4c0:	0800f8f8 	.word	0x0800f8f8

0800e4c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	6039      	str	r1, [r7, #0]
 800e4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	220c      	movs	r2, #12
 800e4d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e4d6:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr
 800e4e4:	200000e4 	.word	0x200000e4

0800e4e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <Get_SerialNum+0x44>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4f4:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <Get_SerialNum+0x48>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e4fa:	4b0e      	ldr	r3, [pc, #56]	; (800e534 <Get_SerialNum+0x4c>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4413      	add	r3, r2
 800e506:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e50e:	2208      	movs	r2, #8
 800e510:	4909      	ldr	r1, [pc, #36]	; (800e538 <Get_SerialNum+0x50>)
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f000 f814 	bl	800e540 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e518:	2204      	movs	r2, #4
 800e51a:	4908      	ldr	r1, [pc, #32]	; (800e53c <Get_SerialNum+0x54>)
 800e51c:	68b8      	ldr	r0, [r7, #8]
 800e51e:	f000 f80f 	bl	800e540 <IntToUnicode>
  }
}
 800e522:	bf00      	nop
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	1ff0f420 	.word	0x1ff0f420
 800e530:	1ff0f424 	.word	0x1ff0f424
 800e534:	1ff0f428 	.word	0x1ff0f428
 800e538:	200000f6 	.word	0x200000f6
 800e53c:	20000106 	.word	0x20000106

0800e540 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e540:	b480      	push	{r7}
 800e542:	b087      	sub	sp, #28
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	4613      	mov	r3, r2
 800e54c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e552:	2300      	movs	r3, #0
 800e554:	75fb      	strb	r3, [r7, #23]
 800e556:	e027      	b.n	800e5a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	0f1b      	lsrs	r3, r3, #28
 800e55c:	2b09      	cmp	r3, #9
 800e55e:	d80b      	bhi.n	800e578 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	0f1b      	lsrs	r3, r3, #28
 800e564:	b2da      	uxtb	r2, r3
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	4619      	mov	r1, r3
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	440b      	add	r3, r1
 800e570:	3230      	adds	r2, #48	; 0x30
 800e572:	b2d2      	uxtb	r2, r2
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	e00a      	b.n	800e58e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	0f1b      	lsrs	r3, r3, #28
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	005b      	lsls	r3, r3, #1
 800e582:	4619      	mov	r1, r3
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	440b      	add	r3, r1
 800e588:	3237      	adds	r2, #55	; 0x37
 800e58a:	b2d2      	uxtb	r2, r2
 800e58c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	011b      	lsls	r3, r3, #4
 800e592:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e594:	7dfb      	ldrb	r3, [r7, #23]
 800e596:	005b      	lsls	r3, r3, #1
 800e598:	3301      	adds	r3, #1
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	4413      	add	r3, r2
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e5a2:	7dfb      	ldrb	r3, [r7, #23]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	75fb      	strb	r3, [r7, #23]
 800e5a8:	7dfa      	ldrb	r2, [r7, #23]
 800e5aa:	79fb      	ldrb	r3, [r7, #7]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d3d3      	bcc.n	800e558 <IntToUnicode+0x18>
  }
}
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	371c      	adds	r7, #28
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
	...

0800e5c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b0ae      	sub	sp, #184	; 0xb8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	605a      	str	r2, [r3, #4]
 800e5d2:	609a      	str	r2, [r3, #8]
 800e5d4:	60da      	str	r2, [r3, #12]
 800e5d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e5d8:	f107 0314 	add.w	r3, r7, #20
 800e5dc:	2290      	movs	r2, #144	; 0x90
 800e5de:	2100      	movs	r1, #0
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 fcc3 	bl	800ef6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e5ee:	d161      	bne.n	800e6b4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e5f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e5f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e5fc:	f107 0314 	add.w	r3, r7, #20
 800e600:	4618      	mov	r0, r3
 800e602:	f7f6 ff2f 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e60c:	f7f3 fe3a 	bl	8002284 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e610:	4b2a      	ldr	r3, [pc, #168]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e614:	4a29      	ldr	r2, [pc, #164]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e616:	f043 0301 	orr.w	r3, r3, #1
 800e61a:	6313      	str	r3, [r2, #48]	; 0x30
 800e61c:	4b27      	ldr	r3, [pc, #156]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	613b      	str	r3, [r7, #16]
 800e626:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e628:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800e62c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e630:	2302      	movs	r3, #2
 800e632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e636:	2300      	movs	r3, #0
 800e638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e63c:	2303      	movs	r3, #3
 800e63e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e642:	230a      	movs	r3, #10
 800e644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e648:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e64c:	4619      	mov	r1, r3
 800e64e:	481c      	ldr	r0, [pc, #112]	; (800e6c0 <HAL_PCD_MspInit+0x100>)
 800e650:	f7f4 fd24 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e654:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e65c:	2300      	movs	r3, #0
 800e65e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e662:	2300      	movs	r3, #0
 800e664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e668:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e66c:	4619      	mov	r1, r3
 800e66e:	4814      	ldr	r0, [pc, #80]	; (800e6c0 <HAL_PCD_MspInit+0x100>)
 800e670:	f7f4 fd14 	bl	800309c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e674:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e678:	4a10      	ldr	r2, [pc, #64]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e67e:	6353      	str	r3, [r2, #52]	; 0x34
 800e680:	4b0e      	ldr	r3, [pc, #56]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e688:	60fb      	str	r3, [r7, #12]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	4b0b      	ldr	r3, [pc, #44]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e690:	4a0a      	ldr	r2, [pc, #40]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e696:	6453      	str	r3, [r2, #68]	; 0x44
 800e698:	4b08      	ldr	r3, [pc, #32]	; (800e6bc <HAL_PCD_MspInit+0xfc>)
 800e69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6a0:	60bb      	str	r3, [r7, #8]
 800e6a2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	2105      	movs	r1, #5
 800e6a8:	2043      	movs	r0, #67	; 0x43
 800e6aa:	f7f4 f9a7 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e6ae:	2043      	movs	r0, #67	; 0x43
 800e6b0:	f7f4 f9c0 	bl	8002a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e6b4:	bf00      	nop
 800e6b6:	37b8      	adds	r7, #184	; 0xb8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	40023800 	.word	0x40023800
 800e6c0:	40020000 	.word	0x40020000

0800e6c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f7fb fa9d 	bl	8009c1a <USBD_LL_SetupStage>
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e6fa:	78fa      	ldrb	r2, [r7, #3]
 800e6fc:	6879      	ldr	r1, [r7, #4]
 800e6fe:	4613      	mov	r3, r2
 800e700:	00db      	lsls	r3, r3, #3
 800e702:	4413      	add	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	440b      	add	r3, r1
 800e708:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	78fb      	ldrb	r3, [r7, #3]
 800e710:	4619      	mov	r1, r3
 800e712:	f7fb fad7 	bl	8009cc4 <USBD_LL_DataOutStage>
}
 800e716:	bf00      	nop
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b082      	sub	sp, #8
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	460b      	mov	r3, r1
 800e728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e730:	78fa      	ldrb	r2, [r7, #3]
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	4613      	mov	r3, r2
 800e736:	00db      	lsls	r3, r3, #3
 800e738:	4413      	add	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	440b      	add	r3, r1
 800e73e:	334c      	adds	r3, #76	; 0x4c
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	78fb      	ldrb	r3, [r7, #3]
 800e744:	4619      	mov	r1, r3
 800e746:	f7fb fb70 	bl	8009e2a <USBD_LL_DataInStage>
}
 800e74a:	bf00      	nop
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b082      	sub	sp, #8
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e760:	4618      	mov	r0, r3
 800e762:	f7fb fca4 	bl	800a0ae <USBD_LL_SOF>
}
 800e766:	bf00      	nop
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e776:	2301      	movs	r3, #1
 800e778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e782:	2300      	movs	r3, #0
 800e784:	73fb      	strb	r3, [r7, #15]
 800e786:	e008      	b.n	800e79a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d102      	bne.n	800e796 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e790:	2301      	movs	r3, #1
 800e792:	73fb      	strb	r3, [r7, #15]
 800e794:	e001      	b.n	800e79a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e796:	f7f3 fd75 	bl	8002284 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e7a0:	7bfa      	ldrb	r2, [r7, #15]
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fb fc44 	bl	800a032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fb fbec 	bl	8009f8e <USBD_LL_Reset>
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fb fc3f 	bl	800a052 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	6812      	ldr	r2, [r2, #0]
 800e7e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e7e6:	f043 0301 	orr.w	r3, r3, #1
 800e7ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a1b      	ldr	r3, [r3, #32]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7f4:	4b04      	ldr	r3, [pc, #16]	; (800e808 <HAL_PCD_SuspendCallback+0x48>)
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	4a03      	ldr	r2, [pc, #12]	; (800e808 <HAL_PCD_SuspendCallback+0x48>)
 800e7fa:	f043 0306 	orr.w	r3, r3, #6
 800e7fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	e000ed00 	.word	0xe000ed00

0800e80c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fb fc2f 	bl	800a07e <USBD_LL_Resume>
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	460b      	mov	r3, r1
 800e832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e83a:	78fa      	ldrb	r2, [r7, #3]
 800e83c:	4611      	mov	r1, r2
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fb fc87 	bl	800a152 <USBD_LL_IsoOUTIncomplete>
}
 800e844:	bf00      	nop
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e85e:	78fa      	ldrb	r2, [r7, #3]
 800e860:	4611      	mov	r1, r2
 800e862:	4618      	mov	r0, r3
 800e864:	f7fb fc43 	bl	800a0ee <USBD_LL_IsoINIncomplete>
}
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fb fc99 	bl	800a1b6 <USBD_LL_DevConnected>
}
 800e884:	bf00      	nop
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fb fc96 	bl	800a1cc <USBD_LL_DevDisconnected>
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d13c      	bne.n	800e932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e8b8:	4a20      	ldr	r2, [pc, #128]	; (800e93c <USBD_LL_Init+0x94>)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a1e      	ldr	r2, [pc, #120]	; (800e93c <USBD_LL_Init+0x94>)
 800e8c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e8c8:	4b1c      	ldr	r3, [pc, #112]	; (800e93c <USBD_LL_Init+0x94>)
 800e8ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e8ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e8d0:	4b1a      	ldr	r3, [pc, #104]	; (800e93c <USBD_LL_Init+0x94>)
 800e8d2:	2206      	movs	r2, #6
 800e8d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e8d6:	4b19      	ldr	r3, [pc, #100]	; (800e93c <USBD_LL_Init+0x94>)
 800e8d8:	2202      	movs	r2, #2
 800e8da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e8dc:	4b17      	ldr	r3, [pc, #92]	; (800e93c <USBD_LL_Init+0x94>)
 800e8de:	2200      	movs	r2, #0
 800e8e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e8e2:	4b16      	ldr	r3, [pc, #88]	; (800e93c <USBD_LL_Init+0x94>)
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e8e8:	4b14      	ldr	r3, [pc, #80]	; (800e93c <USBD_LL_Init+0x94>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e8ee:	4b13      	ldr	r3, [pc, #76]	; (800e93c <USBD_LL_Init+0x94>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e8f4:	4b11      	ldr	r3, [pc, #68]	; (800e93c <USBD_LL_Init+0x94>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e8fa:	4b10      	ldr	r3, [pc, #64]	; (800e93c <USBD_LL_Init+0x94>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e900:	4b0e      	ldr	r3, [pc, #56]	; (800e93c <USBD_LL_Init+0x94>)
 800e902:	2200      	movs	r2, #0
 800e904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e906:	480d      	ldr	r0, [pc, #52]	; (800e93c <USBD_LL_Init+0x94>)
 800e908:	f7f4 fd8d 	bl	8003426 <HAL_PCD_Init>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e912:	f7f3 fcb7 	bl	8002284 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e916:	2180      	movs	r1, #128	; 0x80
 800e918:	4808      	ldr	r0, [pc, #32]	; (800e93c <USBD_LL_Init+0x94>)
 800e91a:	f7f6 f808 	bl	800492e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e91e:	2240      	movs	r2, #64	; 0x40
 800e920:	2100      	movs	r1, #0
 800e922:	4806      	ldr	r0, [pc, #24]	; (800e93c <USBD_LL_Init+0x94>)
 800e924:	f7f5 ffbc 	bl	80048a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e928:	2280      	movs	r2, #128	; 0x80
 800e92a:	2101      	movs	r1, #1
 800e92c:	4803      	ldr	r0, [pc, #12]	; (800e93c <USBD_LL_Init+0x94>)
 800e92e:	f7f5 ffb7 	bl	80048a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20006e1c 	.word	0x20006e1c

0800e940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e94c:	2300      	movs	r3, #0
 800e94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e956:	4618      	mov	r0, r3
 800e958:	f7f4 fe89 	bl	800366e <HAL_PCD_Start>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 f97e 	bl	800ec64 <USBD_Get_USB_Status>
 800e968:	4603      	mov	r3, r0
 800e96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b084      	sub	sp, #16
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	4608      	mov	r0, r1
 800e980:	4611      	mov	r1, r2
 800e982:	461a      	mov	r2, r3
 800e984:	4603      	mov	r3, r0
 800e986:	70fb      	strb	r3, [r7, #3]
 800e988:	460b      	mov	r3, r1
 800e98a:	70bb      	strb	r3, [r7, #2]
 800e98c:	4613      	mov	r3, r2
 800e98e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e99e:	78bb      	ldrb	r3, [r7, #2]
 800e9a0:	883a      	ldrh	r2, [r7, #0]
 800e9a2:	78f9      	ldrb	r1, [r7, #3]
 800e9a4:	f7f5 fb76 	bl	8004094 <HAL_PCD_EP_Open>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ac:	7bfb      	ldrb	r3, [r7, #15]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 f958 	bl	800ec64 <USBD_Get_USB_Status>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b084      	sub	sp, #16
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9dc:	78fa      	ldrb	r2, [r7, #3]
 800e9de:	4611      	mov	r1, r2
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7f5 fbbf 	bl	8004164 <HAL_PCD_EP_Close>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 f939 	bl	800ec64 <USBD_Get_USB_Status>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea1a:	78fa      	ldrb	r2, [r7, #3]
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7f5 fc97 	bl	8004352 <HAL_PCD_EP_SetStall>
 800ea24:	4603      	mov	r3, r0
 800ea26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f000 f91a 	bl	800ec64 <USBD_Get_USB_Status>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b084      	sub	sp, #16
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea58:	78fa      	ldrb	r2, [r7, #3]
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7f5 fcdc 	bl	800441a <HAL_PCD_EP_ClrStall>
 800ea62:	4603      	mov	r3, r0
 800ea64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 f8fb 	bl	800ec64 <USBD_Get_USB_Status>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	da0b      	bge.n	800eab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea9e:	68f9      	ldr	r1, [r7, #12]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	00db      	lsls	r3, r3, #3
 800eaa4:	4413      	add	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	440b      	add	r3, r1
 800eaaa:	333e      	adds	r3, #62	; 0x3e
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	e00b      	b.n	800eac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eab6:	68f9      	ldr	r1, [r7, #12]
 800eab8:	4613      	mov	r3, r2
 800eaba:	00db      	lsls	r3, r3, #3
 800eabc:	4413      	add	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	440b      	add	r3, r1
 800eac2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	460b      	mov	r3, r1
 800eade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f5 faa9 	bl	800404a <HAL_PCD_SetAddress>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 f8b0 	bl	800ec64 <USBD_Get_USB_Status>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b086      	sub	sp, #24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb30:	7af9      	ldrb	r1, [r7, #11]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	f7f5 fbc2 	bl	80042be <HAL_PCD_EP_Transmit>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 f88f 	bl	800ec64 <USBD_Get_USB_Status>
 800eb46:	4603      	mov	r3, r0
 800eb48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	607a      	str	r2, [r7, #4]
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	460b      	mov	r3, r1
 800eb62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb72:	7af9      	ldrb	r1, [r7, #11]
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	f7f5 fb3e 	bl	80041f8 <HAL_PCD_EP_Receive>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f000 f86e 	bl	800ec64 <USBD_Get_USB_Status>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b082      	sub	sp, #8
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eba8:	78fa      	ldrb	r2, [r7, #3]
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f5 fb6e 	bl	800428e <HAL_PCD_EP_GetRxCount>
 800ebb2:	4603      	mov	r3, r0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ebc8:	78fb      	ldrb	r3, [r7, #3]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d002      	beq.n	800ebd4 <HAL_PCDEx_LPM_Callback+0x18>
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d01f      	beq.n	800ec12 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ebd2:	e03b      	b.n	800ec4c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a1b      	ldr	r3, [r3, #32]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d007      	beq.n	800ebec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ebdc:	f000 f83c 	bl	800ec58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebe0:	4b1c      	ldr	r3, [pc, #112]	; (800ec54 <HAL_PCDEx_LPM_Callback+0x98>)
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	4a1b      	ldr	r2, [pc, #108]	; (800ec54 <HAL_PCDEx_LPM_Callback+0x98>)
 800ebe6:	f023 0306 	bic.w	r3, r3, #6
 800ebea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	6812      	ldr	r2, [r2, #0]
 800ebfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ebfe:	f023 0301 	bic.w	r3, r3, #1
 800ec02:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fb fa37 	bl	800a07e <USBD_LL_Resume>
    break;
 800ec10:	e01c      	b.n	800ec4c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	6812      	ldr	r2, [r2, #0]
 800ec20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec24:	f043 0301 	orr.w	r3, r3, #1
 800ec28:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fb fa0e 	bl	800a052 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d005      	beq.n	800ec4a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec3e:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <HAL_PCDEx_LPM_Callback+0x98>)
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	4a04      	ldr	r2, [pc, #16]	; (800ec54 <HAL_PCDEx_LPM_Callback+0x98>)
 800ec44:	f043 0306 	orr.w	r3, r3, #6
 800ec48:	6113      	str	r3, [r2, #16]
    break;
 800ec4a:	bf00      	nop
}
 800ec4c:	bf00      	nop
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	e000ed00 	.word	0xe000ed00

0800ec58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ec5c:	f7f3 f88e 	bl	8001d7c <SystemClock_Config>
}
 800ec60:	bf00      	nop
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	2b03      	cmp	r3, #3
 800ec76:	d817      	bhi.n	800eca8 <USBD_Get_USB_Status+0x44>
 800ec78:	a201      	add	r2, pc, #4	; (adr r2, 800ec80 <USBD_Get_USB_Status+0x1c>)
 800ec7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec7e:	bf00      	nop
 800ec80:	0800ec91 	.word	0x0800ec91
 800ec84:	0800ec97 	.word	0x0800ec97
 800ec88:	0800ec9d 	.word	0x0800ec9d
 800ec8c:	0800eca3 	.word	0x0800eca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec90:	2300      	movs	r3, #0
 800ec92:	73fb      	strb	r3, [r7, #15]
    break;
 800ec94:	e00b      	b.n	800ecae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec96:	2303      	movs	r3, #3
 800ec98:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9a:	e008      	b.n	800ecae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eca0:	e005      	b.n	800ecae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eca2:	2303      	movs	r3, #3
 800eca4:	73fb      	strb	r3, [r7, #15]
    break;
 800eca6:	e002      	b.n	800ecae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecac:	bf00      	nop
  }
  return usb_status;
 800ecae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <malloc>:
 800ecbc:	4b02      	ldr	r3, [pc, #8]	; (800ecc8 <malloc+0xc>)
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	6818      	ldr	r0, [r3, #0]
 800ecc2:	f000 b82b 	b.w	800ed1c <_malloc_r>
 800ecc6:	bf00      	nop
 800ecc8:	2000015c 	.word	0x2000015c

0800eccc <free>:
 800eccc:	4b02      	ldr	r3, [pc, #8]	; (800ecd8 <free+0xc>)
 800ecce:	4601      	mov	r1, r0
 800ecd0:	6818      	ldr	r0, [r3, #0]
 800ecd2:	f000 b9f3 	b.w	800f0bc <_free_r>
 800ecd6:	bf00      	nop
 800ecd8:	2000015c 	.word	0x2000015c

0800ecdc <sbrk_aligned>:
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	4e0e      	ldr	r6, [pc, #56]	; (800ed18 <sbrk_aligned+0x3c>)
 800ece0:	460c      	mov	r4, r1
 800ece2:	6831      	ldr	r1, [r6, #0]
 800ece4:	4605      	mov	r5, r0
 800ece6:	b911      	cbnz	r1, 800ecee <sbrk_aligned+0x12>
 800ece8:	f000 f99e 	bl	800f028 <_sbrk_r>
 800ecec:	6030      	str	r0, [r6, #0]
 800ecee:	4621      	mov	r1, r4
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f000 f999 	bl	800f028 <_sbrk_r>
 800ecf6:	1c43      	adds	r3, r0, #1
 800ecf8:	d00a      	beq.n	800ed10 <sbrk_aligned+0x34>
 800ecfa:	1cc4      	adds	r4, r0, #3
 800ecfc:	f024 0403 	bic.w	r4, r4, #3
 800ed00:	42a0      	cmp	r0, r4
 800ed02:	d007      	beq.n	800ed14 <sbrk_aligned+0x38>
 800ed04:	1a21      	subs	r1, r4, r0
 800ed06:	4628      	mov	r0, r5
 800ed08:	f000 f98e 	bl	800f028 <_sbrk_r>
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	d101      	bne.n	800ed14 <sbrk_aligned+0x38>
 800ed10:	f04f 34ff 	mov.w	r4, #4294967295
 800ed14:	4620      	mov	r0, r4
 800ed16:	bd70      	pop	{r4, r5, r6, pc}
 800ed18:	20007328 	.word	0x20007328

0800ed1c <_malloc_r>:
 800ed1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed20:	1ccd      	adds	r5, r1, #3
 800ed22:	f025 0503 	bic.w	r5, r5, #3
 800ed26:	3508      	adds	r5, #8
 800ed28:	2d0c      	cmp	r5, #12
 800ed2a:	bf38      	it	cc
 800ed2c:	250c      	movcc	r5, #12
 800ed2e:	2d00      	cmp	r5, #0
 800ed30:	4607      	mov	r7, r0
 800ed32:	db01      	blt.n	800ed38 <_malloc_r+0x1c>
 800ed34:	42a9      	cmp	r1, r5
 800ed36:	d905      	bls.n	800ed44 <_malloc_r+0x28>
 800ed38:	230c      	movs	r3, #12
 800ed3a:	603b      	str	r3, [r7, #0]
 800ed3c:	2600      	movs	r6, #0
 800ed3e:	4630      	mov	r0, r6
 800ed40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee18 <_malloc_r+0xfc>
 800ed48:	f000 f868 	bl	800ee1c <__malloc_lock>
 800ed4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ed50:	461c      	mov	r4, r3
 800ed52:	bb5c      	cbnz	r4, 800edac <_malloc_r+0x90>
 800ed54:	4629      	mov	r1, r5
 800ed56:	4638      	mov	r0, r7
 800ed58:	f7ff ffc0 	bl	800ecdc <sbrk_aligned>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	4604      	mov	r4, r0
 800ed60:	d155      	bne.n	800ee0e <_malloc_r+0xf2>
 800ed62:	f8d8 4000 	ldr.w	r4, [r8]
 800ed66:	4626      	mov	r6, r4
 800ed68:	2e00      	cmp	r6, #0
 800ed6a:	d145      	bne.n	800edf8 <_malloc_r+0xdc>
 800ed6c:	2c00      	cmp	r4, #0
 800ed6e:	d048      	beq.n	800ee02 <_malloc_r+0xe6>
 800ed70:	6823      	ldr	r3, [r4, #0]
 800ed72:	4631      	mov	r1, r6
 800ed74:	4638      	mov	r0, r7
 800ed76:	eb04 0903 	add.w	r9, r4, r3
 800ed7a:	f000 f955 	bl	800f028 <_sbrk_r>
 800ed7e:	4581      	cmp	r9, r0
 800ed80:	d13f      	bne.n	800ee02 <_malloc_r+0xe6>
 800ed82:	6821      	ldr	r1, [r4, #0]
 800ed84:	1a6d      	subs	r5, r5, r1
 800ed86:	4629      	mov	r1, r5
 800ed88:	4638      	mov	r0, r7
 800ed8a:	f7ff ffa7 	bl	800ecdc <sbrk_aligned>
 800ed8e:	3001      	adds	r0, #1
 800ed90:	d037      	beq.n	800ee02 <_malloc_r+0xe6>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	442b      	add	r3, r5
 800ed96:	6023      	str	r3, [r4, #0]
 800ed98:	f8d8 3000 	ldr.w	r3, [r8]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d038      	beq.n	800ee12 <_malloc_r+0xf6>
 800eda0:	685a      	ldr	r2, [r3, #4]
 800eda2:	42a2      	cmp	r2, r4
 800eda4:	d12b      	bne.n	800edfe <_malloc_r+0xe2>
 800eda6:	2200      	movs	r2, #0
 800eda8:	605a      	str	r2, [r3, #4]
 800edaa:	e00f      	b.n	800edcc <_malloc_r+0xb0>
 800edac:	6822      	ldr	r2, [r4, #0]
 800edae:	1b52      	subs	r2, r2, r5
 800edb0:	d41f      	bmi.n	800edf2 <_malloc_r+0xd6>
 800edb2:	2a0b      	cmp	r2, #11
 800edb4:	d917      	bls.n	800ede6 <_malloc_r+0xca>
 800edb6:	1961      	adds	r1, r4, r5
 800edb8:	42a3      	cmp	r3, r4
 800edba:	6025      	str	r5, [r4, #0]
 800edbc:	bf18      	it	ne
 800edbe:	6059      	strne	r1, [r3, #4]
 800edc0:	6863      	ldr	r3, [r4, #4]
 800edc2:	bf08      	it	eq
 800edc4:	f8c8 1000 	streq.w	r1, [r8]
 800edc8:	5162      	str	r2, [r4, r5]
 800edca:	604b      	str	r3, [r1, #4]
 800edcc:	4638      	mov	r0, r7
 800edce:	f104 060b 	add.w	r6, r4, #11
 800edd2:	f000 f829 	bl	800ee28 <__malloc_unlock>
 800edd6:	f026 0607 	bic.w	r6, r6, #7
 800edda:	1d23      	adds	r3, r4, #4
 800eddc:	1af2      	subs	r2, r6, r3
 800edde:	d0ae      	beq.n	800ed3e <_malloc_r+0x22>
 800ede0:	1b9b      	subs	r3, r3, r6
 800ede2:	50a3      	str	r3, [r4, r2]
 800ede4:	e7ab      	b.n	800ed3e <_malloc_r+0x22>
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	6862      	ldr	r2, [r4, #4]
 800edea:	d1dd      	bne.n	800eda8 <_malloc_r+0x8c>
 800edec:	f8c8 2000 	str.w	r2, [r8]
 800edf0:	e7ec      	b.n	800edcc <_malloc_r+0xb0>
 800edf2:	4623      	mov	r3, r4
 800edf4:	6864      	ldr	r4, [r4, #4]
 800edf6:	e7ac      	b.n	800ed52 <_malloc_r+0x36>
 800edf8:	4634      	mov	r4, r6
 800edfa:	6876      	ldr	r6, [r6, #4]
 800edfc:	e7b4      	b.n	800ed68 <_malloc_r+0x4c>
 800edfe:	4613      	mov	r3, r2
 800ee00:	e7cc      	b.n	800ed9c <_malloc_r+0x80>
 800ee02:	230c      	movs	r3, #12
 800ee04:	603b      	str	r3, [r7, #0]
 800ee06:	4638      	mov	r0, r7
 800ee08:	f000 f80e 	bl	800ee28 <__malloc_unlock>
 800ee0c:	e797      	b.n	800ed3e <_malloc_r+0x22>
 800ee0e:	6025      	str	r5, [r4, #0]
 800ee10:	e7dc      	b.n	800edcc <_malloc_r+0xb0>
 800ee12:	605b      	str	r3, [r3, #4]
 800ee14:	deff      	udf	#255	; 0xff
 800ee16:	bf00      	nop
 800ee18:	20007324 	.word	0x20007324

0800ee1c <__malloc_lock>:
 800ee1c:	4801      	ldr	r0, [pc, #4]	; (800ee24 <__malloc_lock+0x8>)
 800ee1e:	f000 b93d 	b.w	800f09c <__retarget_lock_acquire_recursive>
 800ee22:	bf00      	nop
 800ee24:	20007468 	.word	0x20007468

0800ee28 <__malloc_unlock>:
 800ee28:	4801      	ldr	r0, [pc, #4]	; (800ee30 <__malloc_unlock+0x8>)
 800ee2a:	f000 b938 	b.w	800f09e <__retarget_lock_release_recursive>
 800ee2e:	bf00      	nop
 800ee30:	20007468 	.word	0x20007468

0800ee34 <_strtoul_l.constprop.0>:
 800ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee38:	4f36      	ldr	r7, [pc, #216]	; (800ef14 <_strtoul_l.constprop.0+0xe0>)
 800ee3a:	4686      	mov	lr, r0
 800ee3c:	460d      	mov	r5, r1
 800ee3e:	4628      	mov	r0, r5
 800ee40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee44:	5d3e      	ldrb	r6, [r7, r4]
 800ee46:	f016 0608 	ands.w	r6, r6, #8
 800ee4a:	d1f8      	bne.n	800ee3e <_strtoul_l.constprop.0+0xa>
 800ee4c:	2c2d      	cmp	r4, #45	; 0x2d
 800ee4e:	d130      	bne.n	800eeb2 <_strtoul_l.constprop.0+0x7e>
 800ee50:	782c      	ldrb	r4, [r5, #0]
 800ee52:	2601      	movs	r6, #1
 800ee54:	1c85      	adds	r5, r0, #2
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d057      	beq.n	800ef0a <_strtoul_l.constprop.0+0xd6>
 800ee5a:	2b10      	cmp	r3, #16
 800ee5c:	d109      	bne.n	800ee72 <_strtoul_l.constprop.0+0x3e>
 800ee5e:	2c30      	cmp	r4, #48	; 0x30
 800ee60:	d107      	bne.n	800ee72 <_strtoul_l.constprop.0+0x3e>
 800ee62:	7828      	ldrb	r0, [r5, #0]
 800ee64:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ee68:	2858      	cmp	r0, #88	; 0x58
 800ee6a:	d149      	bne.n	800ef00 <_strtoul_l.constprop.0+0xcc>
 800ee6c:	786c      	ldrb	r4, [r5, #1]
 800ee6e:	2310      	movs	r3, #16
 800ee70:	3502      	adds	r5, #2
 800ee72:	f04f 38ff 	mov.w	r8, #4294967295
 800ee76:	2700      	movs	r7, #0
 800ee78:	fbb8 f8f3 	udiv	r8, r8, r3
 800ee7c:	fb03 f908 	mul.w	r9, r3, r8
 800ee80:	ea6f 0909 	mvn.w	r9, r9
 800ee84:	4638      	mov	r0, r7
 800ee86:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ee8a:	f1bc 0f09 	cmp.w	ip, #9
 800ee8e:	d815      	bhi.n	800eebc <_strtoul_l.constprop.0+0x88>
 800ee90:	4664      	mov	r4, ip
 800ee92:	42a3      	cmp	r3, r4
 800ee94:	dd23      	ble.n	800eede <_strtoul_l.constprop.0+0xaa>
 800ee96:	f1b7 3fff 	cmp.w	r7, #4294967295
 800ee9a:	d007      	beq.n	800eeac <_strtoul_l.constprop.0+0x78>
 800ee9c:	4580      	cmp	r8, r0
 800ee9e:	d31b      	bcc.n	800eed8 <_strtoul_l.constprop.0+0xa4>
 800eea0:	d101      	bne.n	800eea6 <_strtoul_l.constprop.0+0x72>
 800eea2:	45a1      	cmp	r9, r4
 800eea4:	db18      	blt.n	800eed8 <_strtoul_l.constprop.0+0xa4>
 800eea6:	fb00 4003 	mla	r0, r0, r3, r4
 800eeaa:	2701      	movs	r7, #1
 800eeac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eeb0:	e7e9      	b.n	800ee86 <_strtoul_l.constprop.0+0x52>
 800eeb2:	2c2b      	cmp	r4, #43	; 0x2b
 800eeb4:	bf04      	itt	eq
 800eeb6:	782c      	ldrbeq	r4, [r5, #0]
 800eeb8:	1c85      	addeq	r5, r0, #2
 800eeba:	e7cc      	b.n	800ee56 <_strtoul_l.constprop.0+0x22>
 800eebc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eec0:	f1bc 0f19 	cmp.w	ip, #25
 800eec4:	d801      	bhi.n	800eeca <_strtoul_l.constprop.0+0x96>
 800eec6:	3c37      	subs	r4, #55	; 0x37
 800eec8:	e7e3      	b.n	800ee92 <_strtoul_l.constprop.0+0x5e>
 800eeca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eece:	f1bc 0f19 	cmp.w	ip, #25
 800eed2:	d804      	bhi.n	800eede <_strtoul_l.constprop.0+0xaa>
 800eed4:	3c57      	subs	r4, #87	; 0x57
 800eed6:	e7dc      	b.n	800ee92 <_strtoul_l.constprop.0+0x5e>
 800eed8:	f04f 37ff 	mov.w	r7, #4294967295
 800eedc:	e7e6      	b.n	800eeac <_strtoul_l.constprop.0+0x78>
 800eede:	1c7b      	adds	r3, r7, #1
 800eee0:	d106      	bne.n	800eef0 <_strtoul_l.constprop.0+0xbc>
 800eee2:	2322      	movs	r3, #34	; 0x22
 800eee4:	f8ce 3000 	str.w	r3, [lr]
 800eee8:	4638      	mov	r0, r7
 800eeea:	b932      	cbnz	r2, 800eefa <_strtoul_l.constprop.0+0xc6>
 800eeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eef0:	b106      	cbz	r6, 800eef4 <_strtoul_l.constprop.0+0xc0>
 800eef2:	4240      	negs	r0, r0
 800eef4:	2a00      	cmp	r2, #0
 800eef6:	d0f9      	beq.n	800eeec <_strtoul_l.constprop.0+0xb8>
 800eef8:	b107      	cbz	r7, 800eefc <_strtoul_l.constprop.0+0xc8>
 800eefa:	1e69      	subs	r1, r5, #1
 800eefc:	6011      	str	r1, [r2, #0]
 800eefe:	e7f5      	b.n	800eeec <_strtoul_l.constprop.0+0xb8>
 800ef00:	2430      	movs	r4, #48	; 0x30
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1b5      	bne.n	800ee72 <_strtoul_l.constprop.0+0x3e>
 800ef06:	2308      	movs	r3, #8
 800ef08:	e7b3      	b.n	800ee72 <_strtoul_l.constprop.0+0x3e>
 800ef0a:	2c30      	cmp	r4, #48	; 0x30
 800ef0c:	d0a9      	beq.n	800ee62 <_strtoul_l.constprop.0+0x2e>
 800ef0e:	230a      	movs	r3, #10
 800ef10:	e7af      	b.n	800ee72 <_strtoul_l.constprop.0+0x3e>
 800ef12:	bf00      	nop
 800ef14:	0800fdb9 	.word	0x0800fdb9

0800ef18 <strtoul>:
 800ef18:	4613      	mov	r3, r2
 800ef1a:	460a      	mov	r2, r1
 800ef1c:	4601      	mov	r1, r0
 800ef1e:	4802      	ldr	r0, [pc, #8]	; (800ef28 <strtoul+0x10>)
 800ef20:	6800      	ldr	r0, [r0, #0]
 800ef22:	f7ff bf87 	b.w	800ee34 <_strtoul_l.constprop.0>
 800ef26:	bf00      	nop
 800ef28:	2000015c 	.word	0x2000015c

0800ef2c <siprintf>:
 800ef2c:	b40e      	push	{r1, r2, r3}
 800ef2e:	b500      	push	{lr}
 800ef30:	b09c      	sub	sp, #112	; 0x70
 800ef32:	ab1d      	add	r3, sp, #116	; 0x74
 800ef34:	9002      	str	r0, [sp, #8]
 800ef36:	9006      	str	r0, [sp, #24]
 800ef38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef3c:	4809      	ldr	r0, [pc, #36]	; (800ef64 <siprintf+0x38>)
 800ef3e:	9107      	str	r1, [sp, #28]
 800ef40:	9104      	str	r1, [sp, #16]
 800ef42:	4909      	ldr	r1, [pc, #36]	; (800ef68 <siprintf+0x3c>)
 800ef44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef48:	9105      	str	r1, [sp, #20]
 800ef4a:	6800      	ldr	r0, [r0, #0]
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	a902      	add	r1, sp, #8
 800ef50:	f000 f95a 	bl	800f208 <_svfiprintf_r>
 800ef54:	9b02      	ldr	r3, [sp, #8]
 800ef56:	2200      	movs	r2, #0
 800ef58:	701a      	strb	r2, [r3, #0]
 800ef5a:	b01c      	add	sp, #112	; 0x70
 800ef5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef60:	b003      	add	sp, #12
 800ef62:	4770      	bx	lr
 800ef64:	2000015c 	.word	0x2000015c
 800ef68:	ffff0208 	.word	0xffff0208

0800ef6c <memset>:
 800ef6c:	4402      	add	r2, r0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d100      	bne.n	800ef76 <memset+0xa>
 800ef74:	4770      	bx	lr
 800ef76:	f803 1b01 	strb.w	r1, [r3], #1
 800ef7a:	e7f9      	b.n	800ef70 <memset+0x4>

0800ef7c <_reclaim_reent>:
 800ef7c:	4b29      	ldr	r3, [pc, #164]	; (800f024 <_reclaim_reent+0xa8>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4283      	cmp	r3, r0
 800ef82:	b570      	push	{r4, r5, r6, lr}
 800ef84:	4604      	mov	r4, r0
 800ef86:	d04b      	beq.n	800f020 <_reclaim_reent+0xa4>
 800ef88:	69c3      	ldr	r3, [r0, #28]
 800ef8a:	b143      	cbz	r3, 800ef9e <_reclaim_reent+0x22>
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d144      	bne.n	800f01c <_reclaim_reent+0xa0>
 800ef92:	69e3      	ldr	r3, [r4, #28]
 800ef94:	6819      	ldr	r1, [r3, #0]
 800ef96:	b111      	cbz	r1, 800ef9e <_reclaim_reent+0x22>
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f000 f88f 	bl	800f0bc <_free_r>
 800ef9e:	6961      	ldr	r1, [r4, #20]
 800efa0:	b111      	cbz	r1, 800efa8 <_reclaim_reent+0x2c>
 800efa2:	4620      	mov	r0, r4
 800efa4:	f000 f88a 	bl	800f0bc <_free_r>
 800efa8:	69e1      	ldr	r1, [r4, #28]
 800efaa:	b111      	cbz	r1, 800efb2 <_reclaim_reent+0x36>
 800efac:	4620      	mov	r0, r4
 800efae:	f000 f885 	bl	800f0bc <_free_r>
 800efb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800efb4:	b111      	cbz	r1, 800efbc <_reclaim_reent+0x40>
 800efb6:	4620      	mov	r0, r4
 800efb8:	f000 f880 	bl	800f0bc <_free_r>
 800efbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efbe:	b111      	cbz	r1, 800efc6 <_reclaim_reent+0x4a>
 800efc0:	4620      	mov	r0, r4
 800efc2:	f000 f87b 	bl	800f0bc <_free_r>
 800efc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800efc8:	b111      	cbz	r1, 800efd0 <_reclaim_reent+0x54>
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 f876 	bl	800f0bc <_free_r>
 800efd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800efd2:	b111      	cbz	r1, 800efda <_reclaim_reent+0x5e>
 800efd4:	4620      	mov	r0, r4
 800efd6:	f000 f871 	bl	800f0bc <_free_r>
 800efda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800efdc:	b111      	cbz	r1, 800efe4 <_reclaim_reent+0x68>
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 f86c 	bl	800f0bc <_free_r>
 800efe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800efe6:	b111      	cbz	r1, 800efee <_reclaim_reent+0x72>
 800efe8:	4620      	mov	r0, r4
 800efea:	f000 f867 	bl	800f0bc <_free_r>
 800efee:	6a23      	ldr	r3, [r4, #32]
 800eff0:	b1b3      	cbz	r3, 800f020 <_reclaim_reent+0xa4>
 800eff2:	4620      	mov	r0, r4
 800eff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eff8:	4718      	bx	r3
 800effa:	5949      	ldr	r1, [r1, r5]
 800effc:	b941      	cbnz	r1, 800f010 <_reclaim_reent+0x94>
 800effe:	3504      	adds	r5, #4
 800f000:	69e3      	ldr	r3, [r4, #28]
 800f002:	2d80      	cmp	r5, #128	; 0x80
 800f004:	68d9      	ldr	r1, [r3, #12]
 800f006:	d1f8      	bne.n	800effa <_reclaim_reent+0x7e>
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f857 	bl	800f0bc <_free_r>
 800f00e:	e7c0      	b.n	800ef92 <_reclaim_reent+0x16>
 800f010:	680e      	ldr	r6, [r1, #0]
 800f012:	4620      	mov	r0, r4
 800f014:	f000 f852 	bl	800f0bc <_free_r>
 800f018:	4631      	mov	r1, r6
 800f01a:	e7ef      	b.n	800effc <_reclaim_reent+0x80>
 800f01c:	2500      	movs	r5, #0
 800f01e:	e7ef      	b.n	800f000 <_reclaim_reent+0x84>
 800f020:	bd70      	pop	{r4, r5, r6, pc}
 800f022:	bf00      	nop
 800f024:	2000015c 	.word	0x2000015c

0800f028 <_sbrk_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	4d06      	ldr	r5, [pc, #24]	; (800f044 <_sbrk_r+0x1c>)
 800f02c:	2300      	movs	r3, #0
 800f02e:	4604      	mov	r4, r0
 800f030:	4608      	mov	r0, r1
 800f032:	602b      	str	r3, [r5, #0]
 800f034:	f7f3 fb68 	bl	8002708 <_sbrk>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	d102      	bne.n	800f042 <_sbrk_r+0x1a>
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	b103      	cbz	r3, 800f042 <_sbrk_r+0x1a>
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	bd38      	pop	{r3, r4, r5, pc}
 800f044:	20007464 	.word	0x20007464

0800f048 <__errno>:
 800f048:	4b01      	ldr	r3, [pc, #4]	; (800f050 <__errno+0x8>)
 800f04a:	6818      	ldr	r0, [r3, #0]
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	2000015c 	.word	0x2000015c

0800f054 <__libc_init_array>:
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	4d0d      	ldr	r5, [pc, #52]	; (800f08c <__libc_init_array+0x38>)
 800f058:	4c0d      	ldr	r4, [pc, #52]	; (800f090 <__libc_init_array+0x3c>)
 800f05a:	1b64      	subs	r4, r4, r5
 800f05c:	10a4      	asrs	r4, r4, #2
 800f05e:	2600      	movs	r6, #0
 800f060:	42a6      	cmp	r6, r4
 800f062:	d109      	bne.n	800f078 <__libc_init_array+0x24>
 800f064:	4d0b      	ldr	r5, [pc, #44]	; (800f094 <__libc_init_array+0x40>)
 800f066:	4c0c      	ldr	r4, [pc, #48]	; (800f098 <__libc_init_array+0x44>)
 800f068:	f000 fbae 	bl	800f7c8 <_init>
 800f06c:	1b64      	subs	r4, r4, r5
 800f06e:	10a4      	asrs	r4, r4, #2
 800f070:	2600      	movs	r6, #0
 800f072:	42a6      	cmp	r6, r4
 800f074:	d105      	bne.n	800f082 <__libc_init_array+0x2e>
 800f076:	bd70      	pop	{r4, r5, r6, pc}
 800f078:	f855 3b04 	ldr.w	r3, [r5], #4
 800f07c:	4798      	blx	r3
 800f07e:	3601      	adds	r6, #1
 800f080:	e7ee      	b.n	800f060 <__libc_init_array+0xc>
 800f082:	f855 3b04 	ldr.w	r3, [r5], #4
 800f086:	4798      	blx	r3
 800f088:	3601      	adds	r6, #1
 800f08a:	e7f2      	b.n	800f072 <__libc_init_array+0x1e>
 800f08c:	0800fef4 	.word	0x0800fef4
 800f090:	0800fef4 	.word	0x0800fef4
 800f094:	0800fef4 	.word	0x0800fef4
 800f098:	0800fef8 	.word	0x0800fef8

0800f09c <__retarget_lock_acquire_recursive>:
 800f09c:	4770      	bx	lr

0800f09e <__retarget_lock_release_recursive>:
 800f09e:	4770      	bx	lr

0800f0a0 <memcpy>:
 800f0a0:	440a      	add	r2, r1
 800f0a2:	4291      	cmp	r1, r2
 800f0a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0a8:	d100      	bne.n	800f0ac <memcpy+0xc>
 800f0aa:	4770      	bx	lr
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0b6:	4291      	cmp	r1, r2
 800f0b8:	d1f9      	bne.n	800f0ae <memcpy+0xe>
 800f0ba:	bd10      	pop	{r4, pc}

0800f0bc <_free_r>:
 800f0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	d044      	beq.n	800f14c <_free_r+0x90>
 800f0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0c6:	9001      	str	r0, [sp, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f0ce:	bfb8      	it	lt
 800f0d0:	18e4      	addlt	r4, r4, r3
 800f0d2:	f7ff fea3 	bl	800ee1c <__malloc_lock>
 800f0d6:	4a1e      	ldr	r2, [pc, #120]	; (800f150 <_free_r+0x94>)
 800f0d8:	9801      	ldr	r0, [sp, #4]
 800f0da:	6813      	ldr	r3, [r2, #0]
 800f0dc:	b933      	cbnz	r3, 800f0ec <_free_r+0x30>
 800f0de:	6063      	str	r3, [r4, #4]
 800f0e0:	6014      	str	r4, [r2, #0]
 800f0e2:	b003      	add	sp, #12
 800f0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0e8:	f7ff be9e 	b.w	800ee28 <__malloc_unlock>
 800f0ec:	42a3      	cmp	r3, r4
 800f0ee:	d908      	bls.n	800f102 <_free_r+0x46>
 800f0f0:	6825      	ldr	r5, [r4, #0]
 800f0f2:	1961      	adds	r1, r4, r5
 800f0f4:	428b      	cmp	r3, r1
 800f0f6:	bf01      	itttt	eq
 800f0f8:	6819      	ldreq	r1, [r3, #0]
 800f0fa:	685b      	ldreq	r3, [r3, #4]
 800f0fc:	1949      	addeq	r1, r1, r5
 800f0fe:	6021      	streq	r1, [r4, #0]
 800f100:	e7ed      	b.n	800f0de <_free_r+0x22>
 800f102:	461a      	mov	r2, r3
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	b10b      	cbz	r3, 800f10c <_free_r+0x50>
 800f108:	42a3      	cmp	r3, r4
 800f10a:	d9fa      	bls.n	800f102 <_free_r+0x46>
 800f10c:	6811      	ldr	r1, [r2, #0]
 800f10e:	1855      	adds	r5, r2, r1
 800f110:	42a5      	cmp	r5, r4
 800f112:	d10b      	bne.n	800f12c <_free_r+0x70>
 800f114:	6824      	ldr	r4, [r4, #0]
 800f116:	4421      	add	r1, r4
 800f118:	1854      	adds	r4, r2, r1
 800f11a:	42a3      	cmp	r3, r4
 800f11c:	6011      	str	r1, [r2, #0]
 800f11e:	d1e0      	bne.n	800f0e2 <_free_r+0x26>
 800f120:	681c      	ldr	r4, [r3, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	6053      	str	r3, [r2, #4]
 800f126:	440c      	add	r4, r1
 800f128:	6014      	str	r4, [r2, #0]
 800f12a:	e7da      	b.n	800f0e2 <_free_r+0x26>
 800f12c:	d902      	bls.n	800f134 <_free_r+0x78>
 800f12e:	230c      	movs	r3, #12
 800f130:	6003      	str	r3, [r0, #0]
 800f132:	e7d6      	b.n	800f0e2 <_free_r+0x26>
 800f134:	6825      	ldr	r5, [r4, #0]
 800f136:	1961      	adds	r1, r4, r5
 800f138:	428b      	cmp	r3, r1
 800f13a:	bf04      	itt	eq
 800f13c:	6819      	ldreq	r1, [r3, #0]
 800f13e:	685b      	ldreq	r3, [r3, #4]
 800f140:	6063      	str	r3, [r4, #4]
 800f142:	bf04      	itt	eq
 800f144:	1949      	addeq	r1, r1, r5
 800f146:	6021      	streq	r1, [r4, #0]
 800f148:	6054      	str	r4, [r2, #4]
 800f14a:	e7ca      	b.n	800f0e2 <_free_r+0x26>
 800f14c:	b003      	add	sp, #12
 800f14e:	bd30      	pop	{r4, r5, pc}
 800f150:	20007324 	.word	0x20007324

0800f154 <__ssputs_r>:
 800f154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f158:	688e      	ldr	r6, [r1, #8]
 800f15a:	461f      	mov	r7, r3
 800f15c:	42be      	cmp	r6, r7
 800f15e:	680b      	ldr	r3, [r1, #0]
 800f160:	4682      	mov	sl, r0
 800f162:	460c      	mov	r4, r1
 800f164:	4690      	mov	r8, r2
 800f166:	d82c      	bhi.n	800f1c2 <__ssputs_r+0x6e>
 800f168:	898a      	ldrh	r2, [r1, #12]
 800f16a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f16e:	d026      	beq.n	800f1be <__ssputs_r+0x6a>
 800f170:	6965      	ldr	r5, [r4, #20]
 800f172:	6909      	ldr	r1, [r1, #16]
 800f174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f178:	eba3 0901 	sub.w	r9, r3, r1
 800f17c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f180:	1c7b      	adds	r3, r7, #1
 800f182:	444b      	add	r3, r9
 800f184:	106d      	asrs	r5, r5, #1
 800f186:	429d      	cmp	r5, r3
 800f188:	bf38      	it	cc
 800f18a:	461d      	movcc	r5, r3
 800f18c:	0553      	lsls	r3, r2, #21
 800f18e:	d527      	bpl.n	800f1e0 <__ssputs_r+0x8c>
 800f190:	4629      	mov	r1, r5
 800f192:	f7ff fdc3 	bl	800ed1c <_malloc_r>
 800f196:	4606      	mov	r6, r0
 800f198:	b360      	cbz	r0, 800f1f4 <__ssputs_r+0xa0>
 800f19a:	6921      	ldr	r1, [r4, #16]
 800f19c:	464a      	mov	r2, r9
 800f19e:	f7ff ff7f 	bl	800f0a0 <memcpy>
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ac:	81a3      	strh	r3, [r4, #12]
 800f1ae:	6126      	str	r6, [r4, #16]
 800f1b0:	6165      	str	r5, [r4, #20]
 800f1b2:	444e      	add	r6, r9
 800f1b4:	eba5 0509 	sub.w	r5, r5, r9
 800f1b8:	6026      	str	r6, [r4, #0]
 800f1ba:	60a5      	str	r5, [r4, #8]
 800f1bc:	463e      	mov	r6, r7
 800f1be:	42be      	cmp	r6, r7
 800f1c0:	d900      	bls.n	800f1c4 <__ssputs_r+0x70>
 800f1c2:	463e      	mov	r6, r7
 800f1c4:	6820      	ldr	r0, [r4, #0]
 800f1c6:	4632      	mov	r2, r6
 800f1c8:	4641      	mov	r1, r8
 800f1ca:	f000 faab 	bl	800f724 <memmove>
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	1b9b      	subs	r3, r3, r6
 800f1d2:	60a3      	str	r3, [r4, #8]
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	4433      	add	r3, r6
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	2000      	movs	r0, #0
 800f1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e0:	462a      	mov	r2, r5
 800f1e2:	f000 fab9 	bl	800f758 <_realloc_r>
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d1e0      	bne.n	800f1ae <__ssputs_r+0x5a>
 800f1ec:	6921      	ldr	r1, [r4, #16]
 800f1ee:	4650      	mov	r0, sl
 800f1f0:	f7ff ff64 	bl	800f0bc <_free_r>
 800f1f4:	230c      	movs	r3, #12
 800f1f6:	f8ca 3000 	str.w	r3, [sl]
 800f1fa:	89a3      	ldrh	r3, [r4, #12]
 800f1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f200:	81a3      	strh	r3, [r4, #12]
 800f202:	f04f 30ff 	mov.w	r0, #4294967295
 800f206:	e7e9      	b.n	800f1dc <__ssputs_r+0x88>

0800f208 <_svfiprintf_r>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	4698      	mov	r8, r3
 800f20e:	898b      	ldrh	r3, [r1, #12]
 800f210:	061b      	lsls	r3, r3, #24
 800f212:	b09d      	sub	sp, #116	; 0x74
 800f214:	4607      	mov	r7, r0
 800f216:	460d      	mov	r5, r1
 800f218:	4614      	mov	r4, r2
 800f21a:	d50e      	bpl.n	800f23a <_svfiprintf_r+0x32>
 800f21c:	690b      	ldr	r3, [r1, #16]
 800f21e:	b963      	cbnz	r3, 800f23a <_svfiprintf_r+0x32>
 800f220:	2140      	movs	r1, #64	; 0x40
 800f222:	f7ff fd7b 	bl	800ed1c <_malloc_r>
 800f226:	6028      	str	r0, [r5, #0]
 800f228:	6128      	str	r0, [r5, #16]
 800f22a:	b920      	cbnz	r0, 800f236 <_svfiprintf_r+0x2e>
 800f22c:	230c      	movs	r3, #12
 800f22e:	603b      	str	r3, [r7, #0]
 800f230:	f04f 30ff 	mov.w	r0, #4294967295
 800f234:	e0d0      	b.n	800f3d8 <_svfiprintf_r+0x1d0>
 800f236:	2340      	movs	r3, #64	; 0x40
 800f238:	616b      	str	r3, [r5, #20]
 800f23a:	2300      	movs	r3, #0
 800f23c:	9309      	str	r3, [sp, #36]	; 0x24
 800f23e:	2320      	movs	r3, #32
 800f240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f244:	f8cd 800c 	str.w	r8, [sp, #12]
 800f248:	2330      	movs	r3, #48	; 0x30
 800f24a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f3f0 <_svfiprintf_r+0x1e8>
 800f24e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f252:	f04f 0901 	mov.w	r9, #1
 800f256:	4623      	mov	r3, r4
 800f258:	469a      	mov	sl, r3
 800f25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f25e:	b10a      	cbz	r2, 800f264 <_svfiprintf_r+0x5c>
 800f260:	2a25      	cmp	r2, #37	; 0x25
 800f262:	d1f9      	bne.n	800f258 <_svfiprintf_r+0x50>
 800f264:	ebba 0b04 	subs.w	fp, sl, r4
 800f268:	d00b      	beq.n	800f282 <_svfiprintf_r+0x7a>
 800f26a:	465b      	mov	r3, fp
 800f26c:	4622      	mov	r2, r4
 800f26e:	4629      	mov	r1, r5
 800f270:	4638      	mov	r0, r7
 800f272:	f7ff ff6f 	bl	800f154 <__ssputs_r>
 800f276:	3001      	adds	r0, #1
 800f278:	f000 80a9 	beq.w	800f3ce <_svfiprintf_r+0x1c6>
 800f27c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f27e:	445a      	add	r2, fp
 800f280:	9209      	str	r2, [sp, #36]	; 0x24
 800f282:	f89a 3000 	ldrb.w	r3, [sl]
 800f286:	2b00      	cmp	r3, #0
 800f288:	f000 80a1 	beq.w	800f3ce <_svfiprintf_r+0x1c6>
 800f28c:	2300      	movs	r3, #0
 800f28e:	f04f 32ff 	mov.w	r2, #4294967295
 800f292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f296:	f10a 0a01 	add.w	sl, sl, #1
 800f29a:	9304      	str	r3, [sp, #16]
 800f29c:	9307      	str	r3, [sp, #28]
 800f29e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2a2:	931a      	str	r3, [sp, #104]	; 0x68
 800f2a4:	4654      	mov	r4, sl
 800f2a6:	2205      	movs	r2, #5
 800f2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ac:	4850      	ldr	r0, [pc, #320]	; (800f3f0 <_svfiprintf_r+0x1e8>)
 800f2ae:	f7f1 f817 	bl	80002e0 <memchr>
 800f2b2:	9a04      	ldr	r2, [sp, #16]
 800f2b4:	b9d8      	cbnz	r0, 800f2ee <_svfiprintf_r+0xe6>
 800f2b6:	06d0      	lsls	r0, r2, #27
 800f2b8:	bf44      	itt	mi
 800f2ba:	2320      	movmi	r3, #32
 800f2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2c0:	0711      	lsls	r1, r2, #28
 800f2c2:	bf44      	itt	mi
 800f2c4:	232b      	movmi	r3, #43	; 0x2b
 800f2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f2d0:	d015      	beq.n	800f2fe <_svfiprintf_r+0xf6>
 800f2d2:	9a07      	ldr	r2, [sp, #28]
 800f2d4:	4654      	mov	r4, sl
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	f04f 0c0a 	mov.w	ip, #10
 800f2dc:	4621      	mov	r1, r4
 800f2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2e2:	3b30      	subs	r3, #48	; 0x30
 800f2e4:	2b09      	cmp	r3, #9
 800f2e6:	d94d      	bls.n	800f384 <_svfiprintf_r+0x17c>
 800f2e8:	b1b0      	cbz	r0, 800f318 <_svfiprintf_r+0x110>
 800f2ea:	9207      	str	r2, [sp, #28]
 800f2ec:	e014      	b.n	800f318 <_svfiprintf_r+0x110>
 800f2ee:	eba0 0308 	sub.w	r3, r0, r8
 800f2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	46a2      	mov	sl, r4
 800f2fc:	e7d2      	b.n	800f2a4 <_svfiprintf_r+0x9c>
 800f2fe:	9b03      	ldr	r3, [sp, #12]
 800f300:	1d19      	adds	r1, r3, #4
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	9103      	str	r1, [sp, #12]
 800f306:	2b00      	cmp	r3, #0
 800f308:	bfbb      	ittet	lt
 800f30a:	425b      	neglt	r3, r3
 800f30c:	f042 0202 	orrlt.w	r2, r2, #2
 800f310:	9307      	strge	r3, [sp, #28]
 800f312:	9307      	strlt	r3, [sp, #28]
 800f314:	bfb8      	it	lt
 800f316:	9204      	strlt	r2, [sp, #16]
 800f318:	7823      	ldrb	r3, [r4, #0]
 800f31a:	2b2e      	cmp	r3, #46	; 0x2e
 800f31c:	d10c      	bne.n	800f338 <_svfiprintf_r+0x130>
 800f31e:	7863      	ldrb	r3, [r4, #1]
 800f320:	2b2a      	cmp	r3, #42	; 0x2a
 800f322:	d134      	bne.n	800f38e <_svfiprintf_r+0x186>
 800f324:	9b03      	ldr	r3, [sp, #12]
 800f326:	1d1a      	adds	r2, r3, #4
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	9203      	str	r2, [sp, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bfb8      	it	lt
 800f330:	f04f 33ff 	movlt.w	r3, #4294967295
 800f334:	3402      	adds	r4, #2
 800f336:	9305      	str	r3, [sp, #20]
 800f338:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f400 <_svfiprintf_r+0x1f8>
 800f33c:	7821      	ldrb	r1, [r4, #0]
 800f33e:	2203      	movs	r2, #3
 800f340:	4650      	mov	r0, sl
 800f342:	f7f0 ffcd 	bl	80002e0 <memchr>
 800f346:	b138      	cbz	r0, 800f358 <_svfiprintf_r+0x150>
 800f348:	9b04      	ldr	r3, [sp, #16]
 800f34a:	eba0 000a 	sub.w	r0, r0, sl
 800f34e:	2240      	movs	r2, #64	; 0x40
 800f350:	4082      	lsls	r2, r0
 800f352:	4313      	orrs	r3, r2
 800f354:	3401      	adds	r4, #1
 800f356:	9304      	str	r3, [sp, #16]
 800f358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35c:	4825      	ldr	r0, [pc, #148]	; (800f3f4 <_svfiprintf_r+0x1ec>)
 800f35e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f362:	2206      	movs	r2, #6
 800f364:	f7f0 ffbc 	bl	80002e0 <memchr>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d038      	beq.n	800f3de <_svfiprintf_r+0x1d6>
 800f36c:	4b22      	ldr	r3, [pc, #136]	; (800f3f8 <_svfiprintf_r+0x1f0>)
 800f36e:	bb1b      	cbnz	r3, 800f3b8 <_svfiprintf_r+0x1b0>
 800f370:	9b03      	ldr	r3, [sp, #12]
 800f372:	3307      	adds	r3, #7
 800f374:	f023 0307 	bic.w	r3, r3, #7
 800f378:	3308      	adds	r3, #8
 800f37a:	9303      	str	r3, [sp, #12]
 800f37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f37e:	4433      	add	r3, r6
 800f380:	9309      	str	r3, [sp, #36]	; 0x24
 800f382:	e768      	b.n	800f256 <_svfiprintf_r+0x4e>
 800f384:	fb0c 3202 	mla	r2, ip, r2, r3
 800f388:	460c      	mov	r4, r1
 800f38a:	2001      	movs	r0, #1
 800f38c:	e7a6      	b.n	800f2dc <_svfiprintf_r+0xd4>
 800f38e:	2300      	movs	r3, #0
 800f390:	3401      	adds	r4, #1
 800f392:	9305      	str	r3, [sp, #20]
 800f394:	4619      	mov	r1, r3
 800f396:	f04f 0c0a 	mov.w	ip, #10
 800f39a:	4620      	mov	r0, r4
 800f39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3a0:	3a30      	subs	r2, #48	; 0x30
 800f3a2:	2a09      	cmp	r2, #9
 800f3a4:	d903      	bls.n	800f3ae <_svfiprintf_r+0x1a6>
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0c6      	beq.n	800f338 <_svfiprintf_r+0x130>
 800f3aa:	9105      	str	r1, [sp, #20]
 800f3ac:	e7c4      	b.n	800f338 <_svfiprintf_r+0x130>
 800f3ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e7f0      	b.n	800f39a <_svfiprintf_r+0x192>
 800f3b8:	ab03      	add	r3, sp, #12
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	462a      	mov	r2, r5
 800f3be:	4b0f      	ldr	r3, [pc, #60]	; (800f3fc <_svfiprintf_r+0x1f4>)
 800f3c0:	a904      	add	r1, sp, #16
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	f3af 8000 	nop.w
 800f3c8:	1c42      	adds	r2, r0, #1
 800f3ca:	4606      	mov	r6, r0
 800f3cc:	d1d6      	bne.n	800f37c <_svfiprintf_r+0x174>
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	065b      	lsls	r3, r3, #25
 800f3d2:	f53f af2d 	bmi.w	800f230 <_svfiprintf_r+0x28>
 800f3d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3d8:	b01d      	add	sp, #116	; 0x74
 800f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3de:	ab03      	add	r3, sp, #12
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	462a      	mov	r2, r5
 800f3e4:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <_svfiprintf_r+0x1f4>)
 800f3e6:	a904      	add	r1, sp, #16
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f000 f879 	bl	800f4e0 <_printf_i>
 800f3ee:	e7eb      	b.n	800f3c8 <_svfiprintf_r+0x1c0>
 800f3f0:	0800feb9 	.word	0x0800feb9
 800f3f4:	0800fec3 	.word	0x0800fec3
 800f3f8:	00000000 	.word	0x00000000
 800f3fc:	0800f155 	.word	0x0800f155
 800f400:	0800febf 	.word	0x0800febf

0800f404 <_printf_common>:
 800f404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f408:	4616      	mov	r6, r2
 800f40a:	4699      	mov	r9, r3
 800f40c:	688a      	ldr	r2, [r1, #8]
 800f40e:	690b      	ldr	r3, [r1, #16]
 800f410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f414:	4293      	cmp	r3, r2
 800f416:	bfb8      	it	lt
 800f418:	4613      	movlt	r3, r2
 800f41a:	6033      	str	r3, [r6, #0]
 800f41c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f420:	4607      	mov	r7, r0
 800f422:	460c      	mov	r4, r1
 800f424:	b10a      	cbz	r2, 800f42a <_printf_common+0x26>
 800f426:	3301      	adds	r3, #1
 800f428:	6033      	str	r3, [r6, #0]
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	0699      	lsls	r1, r3, #26
 800f42e:	bf42      	ittt	mi
 800f430:	6833      	ldrmi	r3, [r6, #0]
 800f432:	3302      	addmi	r3, #2
 800f434:	6033      	strmi	r3, [r6, #0]
 800f436:	6825      	ldr	r5, [r4, #0]
 800f438:	f015 0506 	ands.w	r5, r5, #6
 800f43c:	d106      	bne.n	800f44c <_printf_common+0x48>
 800f43e:	f104 0a19 	add.w	sl, r4, #25
 800f442:	68e3      	ldr	r3, [r4, #12]
 800f444:	6832      	ldr	r2, [r6, #0]
 800f446:	1a9b      	subs	r3, r3, r2
 800f448:	42ab      	cmp	r3, r5
 800f44a:	dc26      	bgt.n	800f49a <_printf_common+0x96>
 800f44c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f450:	1e13      	subs	r3, r2, #0
 800f452:	6822      	ldr	r2, [r4, #0]
 800f454:	bf18      	it	ne
 800f456:	2301      	movne	r3, #1
 800f458:	0692      	lsls	r2, r2, #26
 800f45a:	d42b      	bmi.n	800f4b4 <_printf_common+0xb0>
 800f45c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f460:	4649      	mov	r1, r9
 800f462:	4638      	mov	r0, r7
 800f464:	47c0      	blx	r8
 800f466:	3001      	adds	r0, #1
 800f468:	d01e      	beq.n	800f4a8 <_printf_common+0xa4>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	6922      	ldr	r2, [r4, #16]
 800f46e:	f003 0306 	and.w	r3, r3, #6
 800f472:	2b04      	cmp	r3, #4
 800f474:	bf02      	ittt	eq
 800f476:	68e5      	ldreq	r5, [r4, #12]
 800f478:	6833      	ldreq	r3, [r6, #0]
 800f47a:	1aed      	subeq	r5, r5, r3
 800f47c:	68a3      	ldr	r3, [r4, #8]
 800f47e:	bf0c      	ite	eq
 800f480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f484:	2500      	movne	r5, #0
 800f486:	4293      	cmp	r3, r2
 800f488:	bfc4      	itt	gt
 800f48a:	1a9b      	subgt	r3, r3, r2
 800f48c:	18ed      	addgt	r5, r5, r3
 800f48e:	2600      	movs	r6, #0
 800f490:	341a      	adds	r4, #26
 800f492:	42b5      	cmp	r5, r6
 800f494:	d11a      	bne.n	800f4cc <_printf_common+0xc8>
 800f496:	2000      	movs	r0, #0
 800f498:	e008      	b.n	800f4ac <_printf_common+0xa8>
 800f49a:	2301      	movs	r3, #1
 800f49c:	4652      	mov	r2, sl
 800f49e:	4649      	mov	r1, r9
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	47c0      	blx	r8
 800f4a4:	3001      	adds	r0, #1
 800f4a6:	d103      	bne.n	800f4b0 <_printf_common+0xac>
 800f4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b0:	3501      	adds	r5, #1
 800f4b2:	e7c6      	b.n	800f442 <_printf_common+0x3e>
 800f4b4:	18e1      	adds	r1, r4, r3
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	2030      	movs	r0, #48	; 0x30
 800f4ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4be:	4422      	add	r2, r4
 800f4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4c8:	3302      	adds	r3, #2
 800f4ca:	e7c7      	b.n	800f45c <_printf_common+0x58>
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	4649      	mov	r1, r9
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	47c0      	blx	r8
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d0e6      	beq.n	800f4a8 <_printf_common+0xa4>
 800f4da:	3601      	adds	r6, #1
 800f4dc:	e7d9      	b.n	800f492 <_printf_common+0x8e>
	...

0800f4e0 <_printf_i>:
 800f4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e4:	7e0f      	ldrb	r7, [r1, #24]
 800f4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4e8:	2f78      	cmp	r7, #120	; 0x78
 800f4ea:	4691      	mov	r9, r2
 800f4ec:	4680      	mov	r8, r0
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	469a      	mov	sl, r3
 800f4f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4f6:	d807      	bhi.n	800f508 <_printf_i+0x28>
 800f4f8:	2f62      	cmp	r7, #98	; 0x62
 800f4fa:	d80a      	bhi.n	800f512 <_printf_i+0x32>
 800f4fc:	2f00      	cmp	r7, #0
 800f4fe:	f000 80d4 	beq.w	800f6aa <_printf_i+0x1ca>
 800f502:	2f58      	cmp	r7, #88	; 0x58
 800f504:	f000 80c0 	beq.w	800f688 <_printf_i+0x1a8>
 800f508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f50c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f510:	e03a      	b.n	800f588 <_printf_i+0xa8>
 800f512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f516:	2b15      	cmp	r3, #21
 800f518:	d8f6      	bhi.n	800f508 <_printf_i+0x28>
 800f51a:	a101      	add	r1, pc, #4	; (adr r1, 800f520 <_printf_i+0x40>)
 800f51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f520:	0800f579 	.word	0x0800f579
 800f524:	0800f58d 	.word	0x0800f58d
 800f528:	0800f509 	.word	0x0800f509
 800f52c:	0800f509 	.word	0x0800f509
 800f530:	0800f509 	.word	0x0800f509
 800f534:	0800f509 	.word	0x0800f509
 800f538:	0800f58d 	.word	0x0800f58d
 800f53c:	0800f509 	.word	0x0800f509
 800f540:	0800f509 	.word	0x0800f509
 800f544:	0800f509 	.word	0x0800f509
 800f548:	0800f509 	.word	0x0800f509
 800f54c:	0800f691 	.word	0x0800f691
 800f550:	0800f5b9 	.word	0x0800f5b9
 800f554:	0800f64b 	.word	0x0800f64b
 800f558:	0800f509 	.word	0x0800f509
 800f55c:	0800f509 	.word	0x0800f509
 800f560:	0800f6b3 	.word	0x0800f6b3
 800f564:	0800f509 	.word	0x0800f509
 800f568:	0800f5b9 	.word	0x0800f5b9
 800f56c:	0800f509 	.word	0x0800f509
 800f570:	0800f509 	.word	0x0800f509
 800f574:	0800f653 	.word	0x0800f653
 800f578:	682b      	ldr	r3, [r5, #0]
 800f57a:	1d1a      	adds	r2, r3, #4
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	602a      	str	r2, [r5, #0]
 800f580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f588:	2301      	movs	r3, #1
 800f58a:	e09f      	b.n	800f6cc <_printf_i+0x1ec>
 800f58c:	6820      	ldr	r0, [r4, #0]
 800f58e:	682b      	ldr	r3, [r5, #0]
 800f590:	0607      	lsls	r7, r0, #24
 800f592:	f103 0104 	add.w	r1, r3, #4
 800f596:	6029      	str	r1, [r5, #0]
 800f598:	d501      	bpl.n	800f59e <_printf_i+0xbe>
 800f59a:	681e      	ldr	r6, [r3, #0]
 800f59c:	e003      	b.n	800f5a6 <_printf_i+0xc6>
 800f59e:	0646      	lsls	r6, r0, #25
 800f5a0:	d5fb      	bpl.n	800f59a <_printf_i+0xba>
 800f5a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f5a6:	2e00      	cmp	r6, #0
 800f5a8:	da03      	bge.n	800f5b2 <_printf_i+0xd2>
 800f5aa:	232d      	movs	r3, #45	; 0x2d
 800f5ac:	4276      	negs	r6, r6
 800f5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b2:	485a      	ldr	r0, [pc, #360]	; (800f71c <_printf_i+0x23c>)
 800f5b4:	230a      	movs	r3, #10
 800f5b6:	e012      	b.n	800f5de <_printf_i+0xfe>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	6820      	ldr	r0, [r4, #0]
 800f5bc:	1d19      	adds	r1, r3, #4
 800f5be:	6029      	str	r1, [r5, #0]
 800f5c0:	0605      	lsls	r5, r0, #24
 800f5c2:	d501      	bpl.n	800f5c8 <_printf_i+0xe8>
 800f5c4:	681e      	ldr	r6, [r3, #0]
 800f5c6:	e002      	b.n	800f5ce <_printf_i+0xee>
 800f5c8:	0641      	lsls	r1, r0, #25
 800f5ca:	d5fb      	bpl.n	800f5c4 <_printf_i+0xe4>
 800f5cc:	881e      	ldrh	r6, [r3, #0]
 800f5ce:	4853      	ldr	r0, [pc, #332]	; (800f71c <_printf_i+0x23c>)
 800f5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800f5d2:	bf0c      	ite	eq
 800f5d4:	2308      	moveq	r3, #8
 800f5d6:	230a      	movne	r3, #10
 800f5d8:	2100      	movs	r1, #0
 800f5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5de:	6865      	ldr	r5, [r4, #4]
 800f5e0:	60a5      	str	r5, [r4, #8]
 800f5e2:	2d00      	cmp	r5, #0
 800f5e4:	bfa2      	ittt	ge
 800f5e6:	6821      	ldrge	r1, [r4, #0]
 800f5e8:	f021 0104 	bicge.w	r1, r1, #4
 800f5ec:	6021      	strge	r1, [r4, #0]
 800f5ee:	b90e      	cbnz	r6, 800f5f4 <_printf_i+0x114>
 800f5f0:	2d00      	cmp	r5, #0
 800f5f2:	d04b      	beq.n	800f68c <_printf_i+0x1ac>
 800f5f4:	4615      	mov	r5, r2
 800f5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800f5fe:	5dc7      	ldrb	r7, [r0, r7]
 800f600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f604:	4637      	mov	r7, r6
 800f606:	42bb      	cmp	r3, r7
 800f608:	460e      	mov	r6, r1
 800f60a:	d9f4      	bls.n	800f5f6 <_printf_i+0x116>
 800f60c:	2b08      	cmp	r3, #8
 800f60e:	d10b      	bne.n	800f628 <_printf_i+0x148>
 800f610:	6823      	ldr	r3, [r4, #0]
 800f612:	07de      	lsls	r6, r3, #31
 800f614:	d508      	bpl.n	800f628 <_printf_i+0x148>
 800f616:	6923      	ldr	r3, [r4, #16]
 800f618:	6861      	ldr	r1, [r4, #4]
 800f61a:	4299      	cmp	r1, r3
 800f61c:	bfde      	ittt	le
 800f61e:	2330      	movle	r3, #48	; 0x30
 800f620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f624:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f628:	1b52      	subs	r2, r2, r5
 800f62a:	6122      	str	r2, [r4, #16]
 800f62c:	f8cd a000 	str.w	sl, [sp]
 800f630:	464b      	mov	r3, r9
 800f632:	aa03      	add	r2, sp, #12
 800f634:	4621      	mov	r1, r4
 800f636:	4640      	mov	r0, r8
 800f638:	f7ff fee4 	bl	800f404 <_printf_common>
 800f63c:	3001      	adds	r0, #1
 800f63e:	d14a      	bne.n	800f6d6 <_printf_i+0x1f6>
 800f640:	f04f 30ff 	mov.w	r0, #4294967295
 800f644:	b004      	add	sp, #16
 800f646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	f043 0320 	orr.w	r3, r3, #32
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	4833      	ldr	r0, [pc, #204]	; (800f720 <_printf_i+0x240>)
 800f654:	2778      	movs	r7, #120	; 0x78
 800f656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f65a:	6823      	ldr	r3, [r4, #0]
 800f65c:	6829      	ldr	r1, [r5, #0]
 800f65e:	061f      	lsls	r7, r3, #24
 800f660:	f851 6b04 	ldr.w	r6, [r1], #4
 800f664:	d402      	bmi.n	800f66c <_printf_i+0x18c>
 800f666:	065f      	lsls	r7, r3, #25
 800f668:	bf48      	it	mi
 800f66a:	b2b6      	uxthmi	r6, r6
 800f66c:	07df      	lsls	r7, r3, #31
 800f66e:	bf48      	it	mi
 800f670:	f043 0320 	orrmi.w	r3, r3, #32
 800f674:	6029      	str	r1, [r5, #0]
 800f676:	bf48      	it	mi
 800f678:	6023      	strmi	r3, [r4, #0]
 800f67a:	b91e      	cbnz	r6, 800f684 <_printf_i+0x1a4>
 800f67c:	6823      	ldr	r3, [r4, #0]
 800f67e:	f023 0320 	bic.w	r3, r3, #32
 800f682:	6023      	str	r3, [r4, #0]
 800f684:	2310      	movs	r3, #16
 800f686:	e7a7      	b.n	800f5d8 <_printf_i+0xf8>
 800f688:	4824      	ldr	r0, [pc, #144]	; (800f71c <_printf_i+0x23c>)
 800f68a:	e7e4      	b.n	800f656 <_printf_i+0x176>
 800f68c:	4615      	mov	r5, r2
 800f68e:	e7bd      	b.n	800f60c <_printf_i+0x12c>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	6826      	ldr	r6, [r4, #0]
 800f694:	6961      	ldr	r1, [r4, #20]
 800f696:	1d18      	adds	r0, r3, #4
 800f698:	6028      	str	r0, [r5, #0]
 800f69a:	0635      	lsls	r5, r6, #24
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	d501      	bpl.n	800f6a4 <_printf_i+0x1c4>
 800f6a0:	6019      	str	r1, [r3, #0]
 800f6a2:	e002      	b.n	800f6aa <_printf_i+0x1ca>
 800f6a4:	0670      	lsls	r0, r6, #25
 800f6a6:	d5fb      	bpl.n	800f6a0 <_printf_i+0x1c0>
 800f6a8:	8019      	strh	r1, [r3, #0]
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	6123      	str	r3, [r4, #16]
 800f6ae:	4615      	mov	r5, r2
 800f6b0:	e7bc      	b.n	800f62c <_printf_i+0x14c>
 800f6b2:	682b      	ldr	r3, [r5, #0]
 800f6b4:	1d1a      	adds	r2, r3, #4
 800f6b6:	602a      	str	r2, [r5, #0]
 800f6b8:	681d      	ldr	r5, [r3, #0]
 800f6ba:	6862      	ldr	r2, [r4, #4]
 800f6bc:	2100      	movs	r1, #0
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7f0 fe0e 	bl	80002e0 <memchr>
 800f6c4:	b108      	cbz	r0, 800f6ca <_printf_i+0x1ea>
 800f6c6:	1b40      	subs	r0, r0, r5
 800f6c8:	6060      	str	r0, [r4, #4]
 800f6ca:	6863      	ldr	r3, [r4, #4]
 800f6cc:	6123      	str	r3, [r4, #16]
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6d4:	e7aa      	b.n	800f62c <_printf_i+0x14c>
 800f6d6:	6923      	ldr	r3, [r4, #16]
 800f6d8:	462a      	mov	r2, r5
 800f6da:	4649      	mov	r1, r9
 800f6dc:	4640      	mov	r0, r8
 800f6de:	47d0      	blx	sl
 800f6e0:	3001      	adds	r0, #1
 800f6e2:	d0ad      	beq.n	800f640 <_printf_i+0x160>
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	079b      	lsls	r3, r3, #30
 800f6e8:	d413      	bmi.n	800f712 <_printf_i+0x232>
 800f6ea:	68e0      	ldr	r0, [r4, #12]
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	4298      	cmp	r0, r3
 800f6f0:	bfb8      	it	lt
 800f6f2:	4618      	movlt	r0, r3
 800f6f4:	e7a6      	b.n	800f644 <_printf_i+0x164>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	4632      	mov	r2, r6
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	4640      	mov	r0, r8
 800f6fe:	47d0      	blx	sl
 800f700:	3001      	adds	r0, #1
 800f702:	d09d      	beq.n	800f640 <_printf_i+0x160>
 800f704:	3501      	adds	r5, #1
 800f706:	68e3      	ldr	r3, [r4, #12]
 800f708:	9903      	ldr	r1, [sp, #12]
 800f70a:	1a5b      	subs	r3, r3, r1
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dcf2      	bgt.n	800f6f6 <_printf_i+0x216>
 800f710:	e7eb      	b.n	800f6ea <_printf_i+0x20a>
 800f712:	2500      	movs	r5, #0
 800f714:	f104 0619 	add.w	r6, r4, #25
 800f718:	e7f5      	b.n	800f706 <_printf_i+0x226>
 800f71a:	bf00      	nop
 800f71c:	0800feca 	.word	0x0800feca
 800f720:	0800fedb 	.word	0x0800fedb

0800f724 <memmove>:
 800f724:	4288      	cmp	r0, r1
 800f726:	b510      	push	{r4, lr}
 800f728:	eb01 0402 	add.w	r4, r1, r2
 800f72c:	d902      	bls.n	800f734 <memmove+0x10>
 800f72e:	4284      	cmp	r4, r0
 800f730:	4623      	mov	r3, r4
 800f732:	d807      	bhi.n	800f744 <memmove+0x20>
 800f734:	1e43      	subs	r3, r0, #1
 800f736:	42a1      	cmp	r1, r4
 800f738:	d008      	beq.n	800f74c <memmove+0x28>
 800f73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f73e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f742:	e7f8      	b.n	800f736 <memmove+0x12>
 800f744:	4402      	add	r2, r0
 800f746:	4601      	mov	r1, r0
 800f748:	428a      	cmp	r2, r1
 800f74a:	d100      	bne.n	800f74e <memmove+0x2a>
 800f74c:	bd10      	pop	{r4, pc}
 800f74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f756:	e7f7      	b.n	800f748 <memmove+0x24>

0800f758 <_realloc_r>:
 800f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75c:	4680      	mov	r8, r0
 800f75e:	4614      	mov	r4, r2
 800f760:	460e      	mov	r6, r1
 800f762:	b921      	cbnz	r1, 800f76e <_realloc_r+0x16>
 800f764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f768:	4611      	mov	r1, r2
 800f76a:	f7ff bad7 	b.w	800ed1c <_malloc_r>
 800f76e:	b92a      	cbnz	r2, 800f77c <_realloc_r+0x24>
 800f770:	f7ff fca4 	bl	800f0bc <_free_r>
 800f774:	4625      	mov	r5, r4
 800f776:	4628      	mov	r0, r5
 800f778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f77c:	f000 f81b 	bl	800f7b6 <_malloc_usable_size_r>
 800f780:	4284      	cmp	r4, r0
 800f782:	4607      	mov	r7, r0
 800f784:	d802      	bhi.n	800f78c <_realloc_r+0x34>
 800f786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f78a:	d812      	bhi.n	800f7b2 <_realloc_r+0x5a>
 800f78c:	4621      	mov	r1, r4
 800f78e:	4640      	mov	r0, r8
 800f790:	f7ff fac4 	bl	800ed1c <_malloc_r>
 800f794:	4605      	mov	r5, r0
 800f796:	2800      	cmp	r0, #0
 800f798:	d0ed      	beq.n	800f776 <_realloc_r+0x1e>
 800f79a:	42bc      	cmp	r4, r7
 800f79c:	4622      	mov	r2, r4
 800f79e:	4631      	mov	r1, r6
 800f7a0:	bf28      	it	cs
 800f7a2:	463a      	movcs	r2, r7
 800f7a4:	f7ff fc7c 	bl	800f0a0 <memcpy>
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	f7ff fc86 	bl	800f0bc <_free_r>
 800f7b0:	e7e1      	b.n	800f776 <_realloc_r+0x1e>
 800f7b2:	4635      	mov	r5, r6
 800f7b4:	e7df      	b.n	800f776 <_realloc_r+0x1e>

0800f7b6 <_malloc_usable_size_r>:
 800f7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7ba:	1f18      	subs	r0, r3, #4
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	bfbc      	itt	lt
 800f7c0:	580b      	ldrlt	r3, [r1, r0]
 800f7c2:	18c0      	addlt	r0, r0, r3
 800f7c4:	4770      	bx	lr
	...

0800f7c8 <_init>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	bf00      	nop
 800f7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ce:	bc08      	pop	{r3}
 800f7d0:	469e      	mov	lr, r3
 800f7d2:	4770      	bx	lr

0800f7d4 <_fini>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	bf00      	nop
 800f7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7da:	bc08      	pop	{r3}
 800f7dc:	469e      	mov	lr, r3
 800f7de:	4770      	bx	lr
